[REPLACE]^private LabelNode dflt;^51^^^^^^^[REPLACE] public LabelNode dflt;^ [CLASS] LookupSwitchInsnNode  
[REPLACE]^this.labels.addAll ( Arrays.asList ( labels )  ) ;^77^^^^^72^89^[REPLACE] super ( Opcodes.LOOKUPSWITCH ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[ADD]^^77^^^^^72^89^[ADD] super ( Opcodes.LOOKUPSWITCH ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.dflt =  null;^78^^^^^72^89^[REPLACE] this.dflt = dflt;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[ADD]^^78^^^^^72^89^[ADD] this.dflt = dflt;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.labels = new ArrayList ( labels == null ? 0 : labels.length ) ; ;^79^^^^^72^89^[REPLACE] this.keys = new ArrayList ( keys == null ? 0 : keys.length ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.keys = new ArrayList ( keys == null ? 0 : keys.length ) ; ;^80^^^^^72^89^[REPLACE] this.labels = new ArrayList ( labels == null ? 0 : labels.length ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^if  ( keys == false )  {^81^^^^^72^89^[REPLACE] if  ( keys != null )  {^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[ADD]^^81^82^83^84^^72^89^[ADD] if  ( keys != null )  { for  ( int i = 0; i < keys.length; ++i )  { this.keys.add ( new Integer ( keys[i] )  ) ; }^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < keys.length /  0.5 ; ++i )  {^82^^^^^72^89^[REPLACE] for  ( int i = 0; i < keys.length; ++i )  {^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[ADD]^^82^83^84^^^72^89^[ADD] for  ( int i = 0; i < keys.length; ++i )  { this.keys.add ( new Integer ( keys[i] )  ) ; }^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.keys.get ( new Integer ( keys[i] )  ) ;^83^^^^^72^89^[REPLACE] this.keys.add ( new Integer ( keys[i] )  ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < keys.length; ++i )  {^82^^^^^72^89^[REPLACE] for  ( int i = 0; i < keys.length; ++i )  {^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < keys.length *  0 .5 ; ++i )  {^82^^^^^72^89^[REPLACE] for  ( int i = 0; i < keys.length; ++i )  {^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.keys .addAll ( 0 )  ;^83^^^^^72^89^[REPLACE] this.keys.add ( new Integer ( keys[i] )  ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[ADD]^^83^^^^^72^89^[ADD] this.keys.add ( new Integer ( keys[i] )  ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^if  ( labels == null )  {^86^^^^^72^89^[REPLACE] if  ( labels != null )  {^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.labels .add ( this )  ;^87^^^^^72^89^[REPLACE] this.labels.addAll ( Arrays.asList ( labels )  ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^this.labels.addAll (   labels    ) ;^87^^^^^72^89^[REPLACE] this.labels.addAll ( Arrays.asList ( labels )  ) ;^[METHOD] <init> [TYPE] LabelNode[]) [PARAMETER] LabelNode dflt final int[] keys LabelNode[] labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  LabelNode[] labels  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  boolean false  true  [TYPE]  int i 
[REPLACE]^return clone;^92^^^^^91^93^[REPLACE] return LOOKUPSWITCH_INSN;^[METHOD] getType [TYPE] int [PARAMETER] [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  List keys  labels  [TYPE]  boolean false  true 
[REPLACE]^Label[] labels = new Label[this.labels.size (  ) ];^96^^^^^95^105^[REPLACE] int[] keys = new int[this.keys.size (  ) ];^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^for  ( int i = 0; i < keys.length *  2; ++i )  {^97^^^^^95^105^[REPLACE] for  ( int i = 0; i < keys.length; ++i )  {^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^keys[i]  =  keys[i] ;^98^^^^^95^105^[REPLACE] keys[i] =  (  ( Integer )  this.keys.get ( i )  ) .intValue (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^for  ( int i = 0 ; i < keys.length; ++i )  {^97^^^^^95^105^[REPLACE] for  ( int i = 0; i < keys.length; ++i )  {^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[ADD]^^97^98^99^^^95^105^[ADD] for  ( int i = 0; i < keys.length; ++i )  { keys[i] =  (  ( Integer )  this.keys.get ( i )  ) .intValue (  ) ; }^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^int[] keys = new int[this.keys.size (  ) ];^100^^^^^95^105^[REPLACE] Label[] labels = new Label[this.labels.size (  ) ];^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^for  ( int i = 0; i < labels.length + 3; ++i )  {^101^^^^^95^105^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^labels[i]  = null ;^102^^^^^95^105^[REPLACE] labels[i] =  (  ( LabelNode )  this.labels.get ( i )  ) .getLabel (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^labels[i]  =  labels[i] ;^102^^^^^95^105^[REPLACE] labels[i] =  (  ( LabelNode )  this.labels.get ( i )  ) .getLabel (  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^for  ( int i = 0 ; i < labels.length; ++i )  {^101^^^^^95^105^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[ADD]^^101^102^103^^^95^105^[ADD] for  ( int i = 0; i < labels.length; ++i )  { labels[i] =  (  ( LabelNode )  this.labels.get ( i )  ) .getLabel (  ) ; }^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^104^^^^^95^105^[REPLACE] mv.visitLookupSwitchInsn ( dflt.getLabel (  ) , keys, labels ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  Label[] labels  [TYPE]  boolean false  true  [TYPE]  List keys  labels  [TYPE]  int[] keys  [TYPE]  int i  [TYPE]  MethodVisitor mv 
[REPLACE]^LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , false, clone ( this.labels, labels )  ) ;^108^109^^^^107^112^[REPLACE] LookupSwitchInsnNode clone = new LookupSwitchInsnNode ( clone ( dflt, labels ) , null, clone ( this.labels, labels )  ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  List keys  labels  [TYPE]  LookupSwitchInsnNode clone  [TYPE]  boolean false  true  [TYPE]  Map labels 
[REPLACE]^clone.keys.add ( keys ) ;^110^^^^^107^112^[REPLACE] clone.keys.addAll ( keys ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  List keys  labels  [TYPE]  LookupSwitchInsnNode clone  [TYPE]  boolean false  true  [TYPE]  Map labels 
[REPLACE]^return LOOKUPSWITCH_INSN;^111^^^^^107^112^[REPLACE] return clone;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] LookupSwitchInsnNode   [TYPE]  LabelNode dflt  [TYPE]  List keys  labels  [TYPE]  LookupSwitchInsnNode clone  [TYPE]  boolean false  true  [TYPE]  Map labels 
