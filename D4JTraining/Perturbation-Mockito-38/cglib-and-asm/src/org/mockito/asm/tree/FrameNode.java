[REPLACE]^private List local;^69^^^^^^^[REPLACE] public List local;^ [CLASS] FrameNode  
[REPLACE]^super ( -3 ) ;^80^^^^^79^81^[REPLACE] super ( -1 ) ;^[METHOD] <init> [TYPE] FrameNode() [PARAMETER] [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  int type  [TYPE]  boolean false  true 
[REPLACE]^super ( -3 ) ;^109^^^^^108^129^[REPLACE] super ( -1 ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^clone.type = type; ;^110^^^^^108^129^[REPLACE] this.type = type;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^this.local =  asList ( nStack, local ) ;^114^^^^^108^129^[REPLACE] this.local = asList ( nLocal, local ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^this.stack = asList ( 1, stack ) ; ;^115^^^^^108^129^[REPLACE] this.stack = asList ( nStack, stack ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^115^116^^^^108^129^[ADD] this.stack = asList ( nStack, stack ) ; break;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^this.local =  asList ( nStack, local ) ;^118^^^^^108^129^[REPLACE] this.local = asList ( nLocal, local ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^118^^^^^108^129^[ADD] this.local = asList ( nLocal, local ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^this.local =  asList ( nStack, local ) ;^121^^^^^108^129^[REPLACE] this.local = asList ( nLocal, local ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^this.stack = asList ( 3, stack ) ;^126^^^^^108^129^[REPLACE] this.stack = asList ( 1, stack ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return objs;^132^^^^^131^133^[REPLACE] return FRAME;^[METHOD] getType [TYPE] int [PARAMETER] [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  int nLocal  nStack  type  [TYPE]  boolean false  true 
[REPLACE]^local .subList ( nStack , nLocal )  , asArray ( local ) , stack^145^146^147^148^^140^163^[REPLACE] local.size (  ) , asArray ( local ) , stack.size (  ) , asArray ( stack )  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^stack .subList ( type , type )  , asArray ( stack )  ) ;^147^148^^^^140^163^[REPLACE] stack.size (  ) , asArray ( stack )  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^Object s = stack.get ( i ) ;^148^^^^^140^163^[REPLACE] asArray ( stack )  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0 , null ) ;^151^^^^^140^163^[REPLACE] mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^local.size (  ) , asArray ( local ) ,^151^^^^^140^163^[REPLACE] mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[ADD]^break;^151^152^^^^140^163^[ADD] mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ; break;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0 , null ) ;^154^^^^^140^163^[REPLACE] mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^local.size (  ) , asArray ( local ) ,^154^^^^^140^163^[REPLACE] mv.visitFrame ( type, local.size (  ) , asArray ( local ) , 0, null ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^mv.visitFrame ( type, 1, null, 1, null ) ;^157^^^^^140^163^[REPLACE] mv.visitFrame ( type, 0, null, 0, null ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^mv.visitFrame ( type, 3, null, 1, asArray ( stack )  ) ;^160^^^^^140^163^[REPLACE] mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^local.size (  ) , asArray ( local ) ,^160^^^^^140^163^[REPLACE] mv.visitFrame ( type, 0, null, 1, asArray ( stack )  ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int nLocal  nStack  type  [TYPE]  MethodVisitor mv 
[REPLACE]^Object[] objs = new Object[l.size (  ) ];^166^^^^^165^189^[REPLACE] FrameNode clone = new FrameNode (  ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^this.type = type; ;^167^^^^^165^189^[REPLACE] clone.type = type;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^if  ( local == null )  {^168^^^^^165^189^[REPLACE] if  ( local != null )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^if  ( ! l instanceof LabelNode )  {^172^^^^^165^189^[REPLACE] if  ( l instanceof LabelNode )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^s = labels.get ( s ) ; ;^173^^^^^165^189^[REPLACE] l = labels.get ( l ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^for  ( int i = 0; i < local.size (  )  *  2; ++i )  {^170^^^^^165^189^[REPLACE] for  ( int i = 0; i < local.size (  ) ; ++i )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^172^173^174^^^165^189^[ADD] if  ( l instanceof LabelNode )  { l = labels.get ( l ) ; }^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^Object l = local.add ( i ) ;^171^^^^^165^189^[REPLACE] Object l = local.get ( i ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^clone.stack = new ArrayList (  ) ; ;^169^^^^^165^189^[REPLACE] clone.local = new ArrayList (  ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^for  ( int i = 0 ; i < local.size (  ) ; ++i )  {^170^^^^^165^189^[REPLACE] for  ( int i = 0; i < local.size (  ) ; ++i )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^170^171^172^173^174^165^189^[ADD] for  ( int i = 0; i < local.size (  ) ; ++i )  { Object l = local.get ( i ) ; if  ( l instanceof LabelNode )  { l = labels.get ( l ) ; }^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^Object l = local .subList ( type , nStack )  ;^171^^^^^165^189^[REPLACE] Object l = local.get ( i ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^171^^^^^165^189^[ADD] Object l = local.get ( i ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^for  ( int i = 0; i < local.size (  )  /  2; ++i )  {^170^^^^^165^189^[REPLACE] for  ( int i = 0; i < local.size (  ) ; ++i )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^173^^^^^165^189^[ADD] l = labels.get ( l ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^169^^^^^165^189^[ADD] clone.local = new ArrayList (  ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^if  ( stack == null )  {^178^^^^^165^189^[REPLACE] if  ( stack != null )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^if  ( ! s instanceof LabelNode )  {^182^^^^^165^189^[REPLACE] if  ( s instanceof LabelNode )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^l = labels.get ( l ) ; ;^183^^^^^165^189^[REPLACE] s = labels.get ( s ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^for  ( int i = 0; i < stack.size (  )  + 1; ++i )  {^180^^^^^165^189^[REPLACE] for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^s = labels.get ( s ) ;^182^183^184^^^165^189^[ADD] if  ( s instanceof LabelNode )  { s = labels.get ( s ) ; }^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^Object s = stack.add ( i ) ;^181^^^^^165^189^[REPLACE] Object s = stack.get ( i ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^clone.local = new ArrayList (  ) ; ;^179^^^^^165^189^[REPLACE] clone.stack = new ArrayList (  ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^for  ( int i = 0 ; i < stack.size (  ) ; ++i )  {^180^^^^^165^189^[REPLACE] for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^180^181^182^183^184^165^189^[ADD] for  ( int i = 0; i < stack.size (  ) ; ++i )  { Object s = stack.get ( i ) ; if  ( s instanceof LabelNode )  { s = labels.get ( s ) ; }^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^181^^^^^165^189^[ADD] Object s = stack.get ( i ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^for  ( int i = 0; i < stack.size (  )  *  2; ++i )  {^180^^^^^165^189^[REPLACE] for  ( int i = 0; i < stack.size (  ) ; ++i )  {^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REMOVE]^if  ( l instanceof LabelNode )  {     l = labels.get ( l ) ; }^182^^^^^165^189^[REMOVE] ^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[ADD]^^183^^^^^165^189^[ADD] s = labels.get ( s ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^Object s = stack .subList ( type , nStack )  ;^181^^^^^165^189^[REPLACE] Object s = stack.get ( i ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^return objs;^188^^^^^165^189^[REPLACE] return clone;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  FrameNode clone  [TYPE]  Object l  s  [TYPE]  boolean false  true  [TYPE]  Map labels  [TYPE]  int i  nLocal  nStack  type 
[REPLACE]^return Arrays.asList ( o ) .get ( 0 << 1, n ) ;^194^^^^^193^195^[REPLACE] return Arrays.asList ( o ) .subList ( 0, n ) ;^[METHOD] asList [TYPE] List [PARAMETER] final int n Object[] o [CLASS] FrameNode   [TYPE]  List local  stack  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] o 
[REPLACE]^Object[] objs = new Object[l .subList ( i , nStack )  ];^198^^^^^197^207^[REPLACE] Object[] objs = new Object[l.size (  ) ];^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^if  ( ! o instanceof LabelNode )  {^201^^^^^197^207^[REPLACE] if  ( o instanceof LabelNode )  {^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^o =   (  ( LabelNode )  o ) .getLabel (  ) ;^202^^^^^197^207^[REPLACE] o =  (  ( LabelNode )  o ) .getLabel (  ) ;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^for  ( int i = 0 ; i < objs.length %  0 .5 ; ++i )  {^199^^^^^197^207^[REPLACE] for  ( int i = 0; i < objs.length; ++i )  {^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REMOVE]^if  ( l instanceof LabelNode )  {     l = labels.get ( l ) ; }^201^^^^^197^207^[REMOVE] ^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[ADD]^^202^^^^^197^207^[ADD] o =  (  ( LabelNode )  o ) .getLabel (  ) ;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^objs[i]  =  objs[i] ;^204^^^^^197^207^[REPLACE] objs[i] = o;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[ADD]^^204^^^^^197^207^[ADD] objs[i] = o;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^Object o = local.get ( i ) ;^200^^^^^197^207^[REPLACE] Object o = l.get ( i ) ;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^objs[i] ;^204^^^^^197^207^[REPLACE] objs[i] = o;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^for  ( int i = 0 ; i < objs.length; ++i )  {^199^^^^^197^207^[REPLACE] for  ( int i = 0; i < objs.length; ++i )  {^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[ADD]^^199^200^201^202^203^197^207^[ADD] for  ( int i = 0; i < objs.length; ++i )  { Object o = l.get ( i ) ; if  ( o instanceof LabelNode )  { o =  (  ( LabelNode )  o ) .getLabel (  ) ; }^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^Object o = l.add ( i ) ;^200^^^^^197^207^[REPLACE] Object o = l.get ( i ) ;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
[REPLACE]^return FRAME;^206^^^^^197^207^[REPLACE] return objs;^[METHOD] asArray [TYPE] Object[] [PARAMETER] List l [CLASS] FrameNode   [TYPE]  List l  local  stack  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  int i  n  nLocal  nStack  type  [TYPE]  Object[] objs 
