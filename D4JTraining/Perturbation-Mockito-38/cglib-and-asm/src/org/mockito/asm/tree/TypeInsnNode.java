[REPLACE]^mv.visitTypeInsn ( opcode, desc ) ;^59^^^^^58^61^[REPLACE] super ( opcode ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] final int opcode String desc [CLASS] TypeInsnNode   [TYPE]  int opcode  [TYPE]  String desc  [TYPE]  boolean false  true 
[REPLACE]^this.desc =  null;^60^^^^^58^61^[REPLACE] this.desc = desc;^[METHOD] <init> [TYPE] String) [PARAMETER] final int opcode String desc [CLASS] TypeInsnNode   [TYPE]  int opcode  [TYPE]  String desc  [TYPE]  boolean false  true 
[REPLACE]^this.opcode =  null;^70^^^^^69^71^[REPLACE] this.opcode = opcode;^[METHOD] setOpcode [TYPE] void [PARAMETER] final int opcode [CLASS] TypeInsnNode   [TYPE]  int opcode  [TYPE]  String desc  [TYPE]  boolean false  true 
[REPLACE]^return new TypeInsnNode ( opcode, desc ) ;^74^^^^^73^75^[REPLACE] return TYPE_INSN;^[METHOD] getType [TYPE] int [PARAMETER] [CLASS] TypeInsnNode   [TYPE]  String desc  [TYPE]  boolean false  true 
[REPLACE]^super ( opcode ) ;^78^^^^^77^79^[REPLACE] mv.visitTypeInsn ( opcode, desc ) ;^[METHOD] accept [TYPE] void [PARAMETER] MethodVisitor mv [CLASS] TypeInsnNode   [TYPE]  String desc  [TYPE]  MethodVisitor mv  [TYPE]  boolean false  true 
[REPLACE]^return TYPE_INSN;^82^^^^^81^83^[REPLACE] return new TypeInsnNode ( opcode, desc ) ;^[METHOD] clone [TYPE] AbstractInsnNode [PARAMETER] Map labels [CLASS] TypeInsnNode   [TYPE]  Map labels  [TYPE]  String desc  [TYPE]  boolean false  true 
