[ADD]^^75^^^^^74^92^[ADD] boolean changes = false;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( subroutine.access[i] && access[i] )  {^77^^^^^74^92^[REPLACE] if  ( subroutine.access[i] && !access[i] )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^access[i] = false;^78^^^^^74^92^[REPLACE] access[i] = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^changes = false;^79^^^^^74^92^[REPLACE] changes = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < access.length; ++i )  {^76^^^^^74^92^[REPLACE] for  ( int i = 0; i < access.length; ++i )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( subroutine.start  &&  start )  {^82^^^^^74^92^[REPLACE] if  ( subroutine.start == start )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( callers.contains ( caller )  )  {^85^^^^^74^92^[REPLACE] if  ( !callers.contains ( caller )  )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REMOVE]^if  (  ( subroutine.access[i] )  &&  ( ! ( access[i] )  )  )  {     access[i] = true;     changes = true; }^85^^^^^74^92^[REMOVE] ^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^changes = false;^87^^^^^74^92^[REPLACE] changes = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[ADD]^^83^84^85^86^87^74^92^[ADD] for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  { Object caller = subroutine.callers.get ( i ) ; if  ( !callers.contains ( caller )  )  { callers.add ( caller ) ; changes = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^Object caller = subroutine.callers .contains ( caller )  ;^84^^^^^74^92^[REPLACE] Object caller = subroutine.callers.get ( i ) ;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( !callers.get ( caller )  )  {^85^^^^^74^92^[REPLACE] if  ( !callers.contains ( caller )  )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[ADD]^^85^86^87^88^^74^92^[ADD] if  ( !callers.contains ( caller )  )  { callers.add ( caller ) ; changes = true; }^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^Object caller = subroutine.callers.add ( i ) ;^84^^^^^74^92^[REPLACE] Object caller = subroutine.callers.get ( i ) ;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^return changes;  ;^91^^^^^74^92^[REPLACE] return changes;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
