[REPLACE]^result.start = start; ;^59^^^^^54^63^[REPLACE] this.start = start;^[METHOD] <init> [TYPE] JumpInsnNode) [PARAMETER] LabelNode start final int maxLocals JumpInsnNode caller [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  JumpInsnNode caller  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  int maxLocals 
[ADD]^^59^^^^^54^63^[ADD] this.start = start;^[METHOD] <init> [TYPE] JumpInsnNode) [PARAMETER] LabelNode start final int maxLocals JumpInsnNode caller [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  JumpInsnNode caller  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  int maxLocals 
[REPLACE]^this.access =  new boolean[null];^60^^^^^54^63^[REPLACE] this.access = new boolean[maxLocals];^[METHOD] <init> [TYPE] JumpInsnNode) [PARAMETER] LabelNode start final int maxLocals JumpInsnNode caller [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  JumpInsnNode caller  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  int maxLocals 
[REPLACE]^result.callers = new ArrayList ( callers ) ; ;^61^^^^^54^63^[REPLACE] this.callers = new ArrayList (  ) ;^[METHOD] <init> [TYPE] JumpInsnNode) [PARAMETER] LabelNode start final int maxLocals JumpInsnNode caller [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  JumpInsnNode caller  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  int maxLocals 
[REPLACE]^callers .contains ( this )  ;^62^^^^^54^63^[REPLACE] callers.add ( caller ) ;^[METHOD] <init> [TYPE] JumpInsnNode) [PARAMETER] LabelNode start final int maxLocals JumpInsnNode caller [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  JumpInsnNode caller  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  int maxLocals 
[REMOVE]^Object caller = subroutine.callers.get ( i ) ;^62^^^^^54^63^[REMOVE] ^[METHOD] <init> [TYPE] JumpInsnNode) [PARAMETER] LabelNode start final int maxLocals JumpInsnNode caller [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  JumpInsnNode caller  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  int maxLocals 
[REPLACE]^Object caller = subroutine.callers.get ( i ) ;^66^^^^^65^72^[REPLACE] Subroutine result = new Subroutine (  ) ;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[ADD]^^66^^^^^65^72^[ADD] Subroutine result = new Subroutine (  ) ;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[REPLACE]^this.start = start; ;^67^^^^^65^72^[REPLACE] result.start = start;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[REPLACE]^result.access =  new boolean[access.length];^68^^^^^65^72^[REPLACE] result.access = new boolean[access.length];^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[REPLACE]^System.arraycopy ( access, 0 , result.access, 0 , access.length ) ;^69^^^^^65^72^[REPLACE] System.arraycopy ( access, 0, result.access, 0, access.length ) ;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[ADD]^^69^70^^^^65^72^[ADD] System.arraycopy ( access, 0, result.access, 0, access.length ) ; result.callers = new ArrayList ( callers ) ;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[REPLACE]^this.callers =  new ArrayList (  )  ; ;^70^^^^^65^72^[REPLACE] result.callers = new ArrayList ( callers ) ;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[ADD]^^70^71^^^^65^72^[ADD] result.callers = new ArrayList ( callers ) ; return result;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[REPLACE]^return changes;^71^^^^^65^72^[REPLACE] return result;^[METHOD] copy [TYPE] Subroutine [PARAMETER] [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  List callers  [TYPE]  boolean[] access  [TYPE]  boolean false  true  [TYPE]  Subroutine result 
[REPLACE]^boolean changes = true;^75^^^^^74^92^[REPLACE] boolean changes = false;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( subroutine.access[i] ) {^77^^^^^74^92^[REPLACE] if  ( subroutine.access[i] && !access[i] )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^access[i] = false;^78^^^^^74^92^[REPLACE] access[i] = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^changes = false;^79^^^^^74^92^[REPLACE] changes = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < access.length %  2; ++i )  {^76^^^^^74^92^[REPLACE] for  ( int i = 0; i < access.length; ++i )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  (  access[i] )  {^77^^^^^74^92^[REPLACE] if  ( subroutine.access[i] && !access[i] )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[ADD]^access[i] = true;changes = true;^77^78^79^80^^74^92^[ADD] if  ( subroutine.access[i] && !access[i] )  { access[i] = true; changes = true; }^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[ADD]^^78^^^^^74^92^[ADD] access[i] = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[ADD]^^79^^^^^74^92^[ADD] changes = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < access.length; ++i )  {^76^^^^^74^92^[REPLACE] for  ( int i = 0; i < access.length; ++i )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( subroutine.start  &&  start )  {^82^^^^^74^92^[REPLACE] if  ( subroutine.start == start )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( callers.contains ( caller )  )  {^85^^^^^74^92^[REPLACE] if  ( !callers.contains ( caller )  )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^changes = false;^87^^^^^74^92^[REPLACE] changes = true;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < subroutine.callers.size (  )  + 5; ++i )  {^83^^^^^74^92^[REPLACE] for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^Object caller = subroutine.callers.add ( i ) ;^84^^^^^74^92^[REPLACE] Object caller = subroutine.callers.get ( i ) ;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < subroutine.callers.size (  ) ; ++i )  {^83^^^^^74^92^[REPLACE] for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( subroutine.start == start )  {^85^^^^^74^92^[REPLACE] if  ( !callers.contains ( caller )  )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < subroutine.callers.size (  )  - 3; ++i )  {^83^^^^^74^92^[REPLACE] for  ( int i = 0; i < subroutine.callers.size (  ) ; ++i )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^if  ( !callers.get ( caller )  )  {^85^^^^^74^92^[REPLACE] if  ( !callers.contains ( caller )  )  {^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
[REPLACE]^return true;^91^^^^^74^92^[REPLACE] return changes;^[METHOD] merge [TYPE] boolean [PARAMETER] Subroutine subroutine [CLASS] Subroutine   [TYPE]  LabelNode start  [TYPE]  boolean changes  false  true  [TYPE]  Subroutine subroutine  [TYPE]  List callers  [TYPE]  Object caller  [TYPE]  boolean[] access  [TYPE]  int i 
