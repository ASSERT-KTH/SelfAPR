[REPLACE]^private String name;^48^^^^^^^[REPLACE] protected String name;^ [CLASS] ASMifierAbstractVisitor  
[REPLACE]^buf.setLength ( 1 ) ;^77^^^^^76^89^[REPLACE] buf.setLength ( 0 ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^buf.setLength ( "{\n" ) .append ( "av0 = " ) .append ( name ) .append ( ".visitAnnotation ( " ) ;^78^79^80^81^^76^89^[REPLACE] buf.append ( "{\n" ) .append ( "av0 = " ) .append ( name ) .append ( ".visitAnnotation ( " ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[ADD]^^78^79^80^^^76^89^[ADD] buf.append ( "{\n" ) .append ( "av0 = " ) .append ( name )^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( this )^78^79^80^81^^76^89^[REPLACE] buf.append ( "{\n" ) .append ( "av0 = " ) .append ( name ) .append ( ".visitAnnotation ( " ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( null )^78^79^80^81^^76^89^[REPLACE] buf.append ( "{\n" ) .append ( "av0 = " ) .append ( name ) .append ( ".visitAnnotation ( " ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^text.add ( av.getText (  )  )  ;^82^^^^^76^89^[REPLACE] appendConstant ( desc ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( ", " ) .append ( true ) .append ( " ) ;\n" ) ;^83^^^^^76^89^[REPLACE] buf.append ( ", " ) .append ( visible ) .append ( " ) ;\n" ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "{\n" ) .append ( "av0 = " )  ;^83^^^^^76^89^[REPLACE] buf.append ( ", " ) .append ( visible ) .append ( " ) ;\n" ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "\" ) " )  ;^83^^^^^76^89^[REPLACE] buf.append ( ", " ) .append ( visible ) .append ( " ) ;\n" ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^text.add ( buf .setLength ( 0 )   ) ;^84^^^^^76^89^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^text.add ( buf .setLength ( null )   ) ;^84^^^^^76^89^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^ASMifierAnnotationVisitor av = new ASMifierAnnotationVisitor ( 4 ) ;^85^^^^^76^89^[REPLACE] ASMifierAnnotationVisitor av = new ASMifierAnnotationVisitor ( 0 ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^text.add ( av .ASMifierAnnotationVisitor ( null )   ) ;^86^^^^^76^89^[REPLACE] text.add ( av.getText (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^text.add ( av .ASMifierAnnotationVisitor ( false )   ) ;^86^^^^^76^89^[REPLACE] text.add ( av.getText (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[ADD]^^86^^^^^76^89^[ADD] text.add ( av.getText (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^text.add ( av.getText (  )  )  ;^87^^^^^76^89^[REPLACE] text.add ( "}\n" ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[ADD]^^87^^^^^76^89^[ADD] text.add ( "}\n" ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^return av;  ;^88^^^^^76^89^[REPLACE] return av;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] ASMifierAbstractVisitor   [TYPE]  ASMifierAnnotationVisitor av  [TYPE]  String desc  name  [TYPE]  boolean false  true  visible  [TYPE]  Map labelNames 
[REPLACE]^if  ( cst != null )  {^137^^^^^136^221^[REPLACE] if  ( cst == null )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^137^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof String )  {^139^^^^^136^221^[REPLACE] } else if  ( cst instanceof String )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Type )  {^141^^^^^136^221^[REPLACE] } else if  ( cst instanceof Type )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^145^^^^^136^221^[REPLACE] } else if  ( cst instanceof Byte )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^145^146^147^148^^136^221^[ADD] else if  ( cst instanceof Byte )  { buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ; } else if  ( cst instanceof Boolean )  { buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Boolean )  {^147^^^^^136^221^[REPLACE] } else if  ( cst instanceof Boolean )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^147^148^149^150^^136^221^[ADD] else if  ( cst instanceof Boolean )  { buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ; } else if  ( cst instanceof Short )  { buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Character  )   {  ;^149^^^^^136^221^[REPLACE] } else if  ( cst instanceof Short )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Character )  {^151^^^^^136^221^[REPLACE] } else if  ( cst instanceof Character )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^154^^^^^136^221^[REPLACE] } else if  ( cst instanceof Integer )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^154^155^156^157^^136^221^[ADD] else if  ( cst instanceof Integer )  { buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ; } else if  ( cst instanceof Float )  { buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Float )  {^156^^^^^136^221^[REPLACE] } else if  ( cst instanceof Float )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^156^157^158^159^^136^221^[ADD] else if  ( cst instanceof Float )  { buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ; } else if  ( cst instanceof Long )  { buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Long )  {^158^^^^^136^221^[REPLACE] } else if  ( cst instanceof Long )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Double )  {^160^^^^^136^221^[REPLACE] } else if  ( cst instanceof Double )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^162^^^^^136^221^[REPLACE] } else if  ( cst instanceof byte[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^162^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^169^^^^^136^221^[REPLACE] } else if  ( cst instanceof boolean[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^176^^^^^136^221^[REPLACE] } else if  ( cst instanceof short[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^183^^^^^136^221^[REPLACE] } else if  ( cst instanceof char[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof int[] )  {^192^^^^^136^221^[REPLACE] } else if  ( cst instanceof int[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof long[] )  {^199^^^^^136^221^[REPLACE] } else if  ( cst instanceof long[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^206^^^^^136^221^[REPLACE] } else if  ( cst instanceof float[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof double[] )  {^213^^^^^136^221^[REPLACE] } else if  ( cst instanceof double[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new double[] {" ) ;^213^214^215^216^217^136^221^[ADD] else if  ( cst instanceof double[] )  { double[] v =  ( double[] )  cst; buf.append ( "new double[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'd' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( cst )  )  ;^214^^^^^136^221^[REPLACE] double[] v =  ( double[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^216^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^214^215^^^^136^221^[ADD] double[] v =  ( double[] )  cst; buf.append ( "new double[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( cst )  )  ;^207^^^^^136^221^[REPLACE] float[] v =  ( float[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^209^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof double[] )  {^213^^^^^136^221^[REPLACE] } else if  ( cst instanceof double[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^short[] v =  (  ( short[] )   ( cst )  )  ;^200^^^^^136^221^[REPLACE] long[] v =  ( long[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^202^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof float[] )  {^206^^^^^136^221^[REPLACE] } else if  ( cst instanceof float[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   float[] v =  ( float[] )  cst;buf.append ( "new float[] {" ) ;^206^207^208^209^210^136^221^[ADD] else if  ( cst instanceof float[] )  { float[] v =  ( float[] )  cst; buf.append ( "new float[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'f' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^214^^^^^136^221^[ADD] double[] v =  ( double[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^213^^^^^136^221^[REPLACE] } else if  ( cst instanceof double[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^200^201^^^^136^221^[ADD] long[] v =  ( long[] )  cst; buf.append ( "new long[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^207^^^^^136^221^[ADD] float[] v =  ( float[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^short[] v =  (  ( short[] )   ( cst )  )  ;^193^^^^^136^221^[REPLACE] int[] v =  ( int[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^195^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^199^^^^^136^221^[REPLACE] } else if  ( cst instanceof long[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   long[] v =  ( long[] )  cst;buf.append ( "new long[] {" ) ;^199^200^201^202^203^136^221^[ADD] else if  ( cst instanceof long[] )  { long[] v =  ( long[] )  cst; buf.append ( "new long[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'L' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^206^^^^^136^221^[REPLACE] } else if  ( cst instanceof float[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^213^^^^^136^221^[REPLACE] } else if  ( cst instanceof double[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   double[] v =  ( double[] )  cst;buf.append ( "new double[] {" ) ;^213^214^215^216^217^136^221^[ADD] else if  ( cst instanceof double[] )  { double[] v =  ( double[] )  cst; buf.append ( "new double[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'd' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new float[] {" ) ;^207^208^^^^136^221^[ADD] float[] v =  ( float[] )  cst; buf.append ( "new float[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^195^196^197^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^202^203^204^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'L' ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^207^208^^^^136^221^[ADD] float[] v =  ( float[] )  cst; buf.append ( "new float[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^209^210^211^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'f' ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^short[] v =  (  ( short[] )   ( cst )  )  ;^184^^^^^136^221^[REPLACE] char[] v =  ( char[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^186^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   int[] v =  ( int[] )  cst;buf.append ( "new int[] {" ) ;^192^193^194^195^196^136^221^[ADD] else if  ( cst instanceof int[] )  { int[] v =  ( int[] )  cst; buf.append ( "new int[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new long[] {" ) ;^199^200^201^202^203^136^221^[ADD] else if  ( cst instanceof long[] )  { long[] v =  ( long[] )  cst; buf.append ( "new long[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'L' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^216^217^218^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'd' ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof float[] )  {^206^^^^^136^221^[REPLACE] } else if  ( cst instanceof float[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^200^^^^^136^221^[ADD] long[] v =  ( long[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof long[] )  {^199^^^^^136^221^[REPLACE] } else if  ( cst instanceof long[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new double[] {" ) ;^214^215^^^^136^221^[ADD] double[] v =  ( double[] )  cst; buf.append ( "new double[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^byte[] v =  (  ( byte[] )   ( cst )  )  ;^177^^^^^136^221^[REPLACE] short[] v =  ( short[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^179^180^181^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( " ( short ) " ) .append ( v[i] ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^183^^^^^136^221^[REPLACE] } else if  ( cst instanceof char[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof int[] )  {^192^^^^^136^221^[REPLACE] } else if  ( cst instanceof int[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new float[] {" ) ;^206^207^208^209^210^136^221^[ADD] else if  ( cst instanceof float[] )  { float[] v =  ( float[] )  cst; buf.append ( "new float[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) .append ( 'f' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new short[] {" ) ;^177^178^^^^136^221^[ADD] short[] v =  ( short[] )  cst; buf.append ( "new short[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^double[] v =  (  ( double[] )   ( cst )  )  ;^170^^^^^136^221^[REPLACE] boolean[] v =  ( boolean[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^172^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof short[] )  {^176^^^^^136^221^[REPLACE] } else if  ( cst instanceof short[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof char[] )  {^183^^^^^136^221^[REPLACE] } else if  ( cst instanceof char[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   char[] v =  ( char[] )  cst;buf.append ( "new char[] {" ) ;^183^184^185^186^187^136^221^[ADD] else if  ( cst instanceof char[] )  { char[] v =  ( char[] )  cst; buf.append ( "new char[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," )^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^192^^^^^136^221^[REPLACE] } else if  ( cst instanceof int[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new int[] {" ) ;^193^194^^^^136^221^[ADD] int[] v =  ( int[] )  cst; buf.append ( "new int[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^184^^^^^136^221^[ADD] char[] v =  ( char[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^192^^^^^136^221^[REPLACE] } else if  ( cst instanceof int[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new int[] {" ) ;^192^193^194^195^196^136^221^[ADD] else if  ( cst instanceof int[] )  { int[] v =  ( int[] )  cst; buf.append ( "new int[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^186^187^188^189^190^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( " ( char ) " ) .append (  ( int )  v[i] ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new long[] {" ) ;^200^201^^^^136^221^[ADD] long[] v =  ( long[] )  cst; buf.append ( "new long[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^179^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^199^^^^^136^221^[REPLACE] } else if  ( cst instanceof long[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^172^173^174^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^184^185^^^^136^221^[ADD] char[] v =  ( char[] )  cst; buf.append ( "new char[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^193^194^^^^136^221^[ADD] int[] v =  ( int[] )  cst; buf.append ( "new int[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( cst )  )  ;^163^^^^^136^221^[REPLACE] byte[] v =  ( byte[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^165^^^^^136^221^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^176^^^^^136^221^[REPLACE] } else if  ( cst instanceof short[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   short[] v =  ( short[] )  cst;buf.append ( "new short[] {" ) ;^176^177^178^179^180^136^221^[ADD] else if  ( cst instanceof short[] )  { short[] v =  ( short[] )  cst; buf.append ( "new short[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( " ( short ) " ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new char[] {" ) ;^183^184^185^186^187^136^221^[ADD] else if  ( cst instanceof char[] )  { char[] v =  ( char[] )  cst; buf.append ( "new char[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," )^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof short[] )  {^176^^^^^136^221^[REPLACE] } else if  ( cst instanceof short[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof char[] )  {^183^^^^^136^221^[REPLACE] } else if  ( cst instanceof char[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new char[] {" ) ;^184^185^^^^136^221^[ADD] char[] v =  ( char[] )  cst; buf.append ( "new char[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' )  ;^161^^^^^136^221^[REPLACE] buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Double ( \"" )  ;^161^^^^^136^221^[REPLACE] buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new char[] {" )  ;^161^^^^^136^221^[REPLACE] buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof boolean[] )  {^169^^^^^136^221^[REPLACE] } else if  ( cst instanceof boolean[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   boolean[] v =  ( boolean[] )  cst;buf.append ( "new boolean[] {" ) ;^169^170^171^172^173^136^221^[ADD] else if  ( cst instanceof boolean[] )  { boolean[] v =  ( boolean[] )  cst; buf.append ( "new boolean[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^193^^^^^136^221^[ADD] int[] v =  ( int[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^177^^^^^136^221^[ADD] short[] v =  ( short[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^169^^^^^136^221^[REPLACE] } else if  ( cst instanceof boolean[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^177^178^^^^136^221^[ADD] short[] v =  ( short[] )  cst; buf.append ( "new short[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^165^166^167^^^136^221^[ADD] for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ; }^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Long ( " ) .append ( cst )  ;^159^^^^^136^221^[REPLACE] buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "\" ) " )  ;^159^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Float ( \"" ) .append ( cst )  ;^159^^^^^136^221^[REPLACE] buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^159^^^^^136^221^[ADD] buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( ", " )  ;^159^^^^^136^221^[REPLACE] buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^160^^^^^136^221^[REPLACE] } else if  ( cst instanceof Double )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   byte[] v =  ( byte[] )  cst;buf.append ( "new byte[] {" ) ;^160^161^162^163^164^136^221^[ADD] else if  ( cst instanceof Double )  { buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ; } else if  ( cst instanceof byte[] )  { byte[] v =  ( byte[] )  cst; buf.append ( "new byte[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^162^^^^^136^221^[REPLACE] } else if  ( cst instanceof byte[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Short )  {     buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ; }else     if  ( cst instanceof Character )  {         int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;         buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Integer )  {             buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;         }else             if  ( cst instanceof Float )  {                 buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;             }else                 if  ( cst instanceof Long )  {                     buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                 }else                     if  ( cst instanceof Double )  {                         buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                     }else                         if  ( cst instanceof byte[] )  {                             byte[] v =  (  ( byte[] )   ( cst )  ) ;                             buf.append ( "new byte[] {" ) ;                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                             }                             buf.append ( '}' ) ;                         }else                             if  ( cst instanceof boolean[] )  {                                 boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                 buf.append ( "new boolean[] {" ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                 }                                 buf.append ( '}' ) ;                             }else                                 if  ( cst instanceof short[] )  {                                     short[] v =  (  ( short[] )   ( cst )  ) ;                                     buf.append ( "new short[] {" ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                     }                                     buf.append ( '}' ) ;                                 }else                                     if  ( cst instanceof char[] )  {                                         char[] v =  (  ( char[] )   ( cst )  ) ;                                         buf.append ( "new char[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof int[] )  {                                             int[] v =  (  ( int[] )   ( cst )  ) ;                                             buf.append ( "new int[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof long[] )  {                                                 long[] v =  (  ( long[] )   ( cst )  ) ;                                                 buf.append ( "new long[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof float[] )  {                                                     float[] v =  (  ( float[] )   ( cst )  ) ;                                                     buf.append ( "new float[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof double[] )  {                                                         double[] v =  (  ( double[] )   ( cst )  ) ;                                                         buf.append ( "new double[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }^169^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^170^171^^^^136^221^[ADD] boolean[] v =  ( boolean[] )  cst; buf.append ( "new boolean[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^161^^^^^136^221^[ADD] buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof byte[] )  {^162^^^^^136^221^[REPLACE] } else if  ( cst instanceof byte[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof boolean[] )  {^169^^^^^136^221^[REPLACE] } else if  ( cst instanceof boolean[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' )  ;^157^^^^^136^221^[REPLACE] buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Long ( " ) .append ( cst )  ;^157^^^^^136^221^[REPLACE] buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Double ( \"" )  ;^157^^^^^136^221^[REPLACE] buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^158^^^^^136^221^[REPLACE] } else if  ( cst instanceof Long )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new byte[] {" ) ;^162^163^164^165^166^136^221^[ADD] else if  ( cst instanceof byte[] )  { byte[] v =  ( byte[] )  cst; buf.append ( "new byte[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new short[] {" ) ;^176^177^178^179^180^136^221^[ADD] else if  ( cst instanceof short[] )  { short[] v =  ( short[] )  cst; buf.append ( "new short[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( " ( short ) " ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^170^^^^^136^221^[ADD] boolean[] v =  ( boolean[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new boolean[] {" ) ;^169^170^171^172^173^136^221^[ADD] else if  ( cst instanceof boolean[] )  { boolean[] v =  ( boolean[] )  cst; buf.append ( "new boolean[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^163^^^^^136^221^[ADD] byte[] v =  ( byte[] )  cst;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )^159^^^^^136^221^[REPLACE] buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( i )^159^^^^^136^221^[REPLACE] buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^163^164^^^^136^221^[ADD] byte[] v =  ( byte[] )  cst; buf.append ( "new byte[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( i )^161^^^^^136^221^[REPLACE] buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )^161^^^^^136^221^[REPLACE] buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' )  ;^155^^^^^136^221^[REPLACE] buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Long ( " ) .append ( cst )  ;^155^^^^^136^221^[REPLACE] buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Double ( \"" )  ;^155^^^^^136^221^[REPLACE] buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Float )  {^156^^^^^136^221^[REPLACE] } else if  ( cst instanceof Float )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^158^^^^^136^221^[REPLACE] } else if  ( cst instanceof Long )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Double )  {^160^^^^^136^221^[REPLACE] } else if  ( cst instanceof Double )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;byte[] v =  ( byte[] )  cst;buf.append ( "new byte[] {" ) ;^160^161^162^163^164^136^221^[ADD] else if  ( cst instanceof Double )  { buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ; } else if  ( cst instanceof byte[] )  { byte[] v =  ( byte[] )  cst; buf.append ( "new byte[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof byte[] )  {^162^^^^^136^221^[REPLACE] } else if  ( cst instanceof byte[] )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   byte[] v =  ( byte[] )  cst;buf.append ( "new byte[] {" ) ;^162^163^164^165^166^136^221^[ADD] else if  ( cst instanceof byte[] )  { byte[] v =  ( byte[] )  cst; buf.append ( "new byte[] {" ) ; for  ( int i = 0; i < v.length; i++ )  { buf.append ( i == 0 ? "" : "," ) .append ( v[i] ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "\" ) " )  ;^161^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^160^^^^^136^221^[REPLACE] } else if  ( cst instanceof Double )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( cst )  )  ;^152^^^^^136^221^[REPLACE] int c =  (  ( Character )  cst ) .charValue (  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Integer )  {^154^^^^^136^221^[REPLACE] } else if  ( cst instanceof Integer )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^154^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Long )  {^158^^^^^136^221^[REPLACE] } else if  ( cst instanceof Long )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^158^159^160^161^^136^221^[ADD] else if  ( cst instanceof Long )  { buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ; } else if  ( cst instanceof Double )  { buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new byte[] {" ) ;^163^164^^^^136^221^[ADD] byte[] v =  ( byte[] )  cst; buf.append ( "new byte[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( i )^155^^^^^136^221^[REPLACE] buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^155^^^^^136^221^[ADD] buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^158^159^160^161^^136^221^[ADD] else if  ( cst instanceof Long )  { buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ; } else if  ( cst instanceof Double )  { buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^157^^^^^136^221^[ADD] buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^160^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new boolean[] {" ) ;^170^171^^^^136^221^[ADD] boolean[] v =  ( boolean[] )  cst; buf.append ( "new boolean[] {" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " )  ;^150^^^^^136^221^[REPLACE] buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Long ( " ) .append ( cst )  ;^150^^^^^136^221^[REPLACE] buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^150^^^^^136^221^[ADD] buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Byte (  ( byte ) " )  ;^150^^^^^136^221^[REPLACE] buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^151^^^^^136^221^[REPLACE] } else if  ( cst instanceof Character )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^154^155^156^157^^136^221^[ADD] else if  ( cst instanceof Integer )  { buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ; } else if  ( cst instanceof Float )  { buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( i )^157^^^^^136^221^[REPLACE] buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^158^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )^157^^^^^136^221^[REPLACE] buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^152^153^^^^136^221^[ADD] int c =  (  ( Character )  cst ) .charValue (  ) ; buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Integer )  {^154^^^^^136^221^[REPLACE] } else if  ( cst instanceof Integer )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^156^^^^^136^221^[REPLACE] } else if  ( cst instanceof Float )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^156^^^^^136^221^[REPLACE] } else if  ( cst instanceof Float )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "\" ) " )  ;^157^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^text.add ( av.getText (  )  )  ;^148^^^^^136^221^[REPLACE] buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^148^^^^^136^221^[ADD] buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^149^^^^^136^221^[REPLACE] } else if  ( cst instanceof Short )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^151^^^^^136^221^[REPLACE] } else if  ( cst instanceof Character )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )^155^^^^^136^221^[REPLACE] buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^156^157^158^159^^136^221^[ADD] else if  ( cst instanceof Float )  { buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ; } else if  ( cst instanceof Long )  { buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "new Double ( \"" )  ;^155^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' )  ;^146^^^^^136^221^[REPLACE] buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^146^^^^^136^221^[ADD] buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Long ( " ) .append ( cst )  ;^146^^^^^136^221^[REPLACE] buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Byte (  ( byte ) " ) .append ( cst )  ;^146^^^^^136^221^[REPLACE] buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Character )  {^151^^^^^136^221^[REPLACE] } else if  ( cst instanceof Character )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^152^^^^^136^221^[ADD] int c =  (  ( Character )  cst ) .charValue (  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )^150^^^^^136^221^[REPLACE] buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^(  ( Boolean )   ( cst )  ) .booleanValue (  )  ;^148^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Short )  {^149^^^^^136^221^[REPLACE] } else if  ( cst instanceof Short )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^156^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "\" ) " )  ;^155^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^151^152^153^154^155^136^221^[ADD] else if  ( cst instanceof Character )  { int c =  (  ( Character )  cst ) .charValue (  ) ; buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ; } else if  ( cst instanceof Integer )  { buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^154^^^^^136^221^[REPLACE] } else if  ( cst instanceof Integer )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "new Double ( \"" )  ;^142^^^^^136^221^[REPLACE] buf.append ( "Type.getType ( \"" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^142^^^^^136^221^[ADD] buf.append ( "Type.getType ( \"" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^(  ( Type )   ( cst )  ) .getDescriptor (  )  ;^143^^^^^136^221^[REPLACE] buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append (  (  ( Type )  cst )  .appendString ( buf , name )   ) ;^143^^^^^136^221^[REPLACE] buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( ", " )  ;^144^^^^^136^221^[REPLACE] buf.append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Byte )  {^145^^^^^136^221^[REPLACE] } else if  ( cst instanceof Byte )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  else {^147^^^^^136^221^[REPLACE] } else if  ( cst instanceof Boolean )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^147^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof Short )  {^149^^^^^136^221^[REPLACE] } else if  ( cst instanceof Short )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   int c =  (  ( Character )  cst ) .charValue (  ) ;buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^149^150^151^152^153^136^221^[ADD] else if  ( cst instanceof Short )  { buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ; } else if  ( cst instanceof Character )  { int c =  (  ( Character )  cst ) .charValue (  ) ; buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "\" ) " )  ;^150^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "new Double ( \"" )  ;^150^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   int c =  (  ( Character )  cst ) .charValue (  ) ;buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^151^152^153^154^155^136^221^[ADD] else if  ( cst instanceof Character )  { int c =  (  ( Character )  cst ) .charValue (  ) ; buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ; } else if  ( cst instanceof Integer )  { buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( "\" ) " )  ;^146^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^147^^^^^136^221^[REPLACE] } else if  ( cst instanceof Boolean )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^149^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^text.add ( av.getText (  )  )  ;^140^^^^^136^221^[REPLACE] appendString ( buf,  ( String )  cst ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;buf.append ( "\" ) " ) ;^141^142^143^144^^136^221^[ADD] else if  ( cst instanceof Type )  { buf.append ( "Type.getType ( \"" ) ; buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ; buf.append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^152^153^^^^136^221^[ADD] int c =  (  ( Character )  cst ) .charValue (  ) ; buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;int c =  (  ( Character )  cst ) .charValue (  ) ;buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^149^150^151^152^153^136^221^[ADD] else if  ( cst instanceof Short )  { buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ; } else if  ( cst instanceof Character )  { int c =  (  ( Character )  cst ) .charValue (  ) ; buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  )  ;^143^^^^^136^221^[REPLACE] buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^buf.append ( ", " )  ;^144^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if   (  cst instanceof Short  )   {  ;^145^^^^^136^221^[REPLACE] } else if  ( cst instanceof Byte )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .append ( name )  .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^148^^^^^136^221^[REPLACE] buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^147^148^149^150^^136^221^[ADD] else if  ( cst instanceof Boolean )  { buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ; } else if  ( cst instanceof Short )  { buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append ( "\" ) " )  ;^138^^^^^136^221^[REPLACE] buf.append ( "null" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^}  if  ( ! cst instanceof String )  {^139^^^^^136^221^[REPLACE] } else if  ( cst instanceof String )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   appendString ( buf,  ( String )  cst ) ;buf.append ( "Type.getType ( \"" ) ;buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;^139^140^141^142^143^136^221^[ADD] else if  ( cst instanceof String )  { appendString ( buf,  ( String )  cst ) ; } else if  ( cst instanceof Type )  { buf.append ( "Type.getType ( \"" ) ; buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^}   buf.append ( "Type.getType ( \"" ) ;buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;buf.append ( "\" ) " ) ;^141^142^143^144^^136^221^[ADD] else if  ( cst instanceof Type )  { buf.append ( "Type.getType ( \"" ) ; buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ; buf.append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( i )^150^^^^^136^221^[REPLACE] buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^(  ( Type )   ( cst )  ) .getDescriptor (  )  ;^148^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf.append (  (  ( Type )  cst ) .append (  )  ) ;^143^^^^^136^221^[REPLACE] buf.append (  (  ( Type )  cst ) .getDescriptor (  )  ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[ADD]^^144^^^^^136^221^[ADD] buf.append ( "\" ) " ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )^146^^^^^136^221^[REPLACE] buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( i )^146^^^^^136^221^[REPLACE] buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .append ( desc )  .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^148^^^^^136^221^[REPLACE] buf.append (  (  ( Boolean )  cst ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REMOVE]^if  ( cst instanceof Type )  {     buf.append ( "Type.getType ( \"" ) ;     buf.append (  (  ( Type )   ( cst )  ) .getDescriptor (  )  ) ;     buf.append ( "\" ) " ) ; }else     if  ( cst instanceof Byte )  {         buf.append ( "new Byte (  ( byte ) " ) .append ( cst ) .append ( ' ) ' ) ;     }else         if  ( cst instanceof Boolean )  {             buf.append (  (  (  ( Boolean )   ( cst )  ) .booleanValue (  )  ? "Boolean.TRUE" : "Boolean.FALSE" )  ) ;         }else             if  ( cst instanceof Short )  {                 buf.append ( "new Short (  ( short ) " ) .append ( cst ) .append ( ' ) ' ) ;             }else                 if  ( cst instanceof Character )  {                     int c =  (  ( Character )   ( cst )  ) .charValue (  ) ;                     buf.append ( "new Character (  ( char ) " ) .append ( c ) .append ( ' ) ' ) ;                 }else                     if  ( cst instanceof Integer )  {                         buf.append ( "new Integer ( " ) .append ( cst ) .append ( ' ) ' ) ;                     }else                         if  ( cst instanceof Float )  {                             buf.append ( "new Float ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                         }else                             if  ( cst instanceof Long )  {                                 buf.append ( "new Long ( " ) .append ( cst ) .append ( "L ) " ) ;                             }else                                 if  ( cst instanceof Double )  {                                     buf.append ( "new Double ( \"" ) .append ( cst ) .append ( "\" ) " ) ;                                 }else                                     if  ( cst instanceof byte[] )  {                                         byte[] v =  (  ( byte[] )   ( cst )  ) ;                                         buf.append ( "new byte[] {" ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                         }                                         buf.append ( '}' ) ;                                     }else                                         if  ( cst instanceof boolean[] )  {                                             boolean[] v =  (  ( boolean[] )   ( cst )  ) ;                                             buf.append ( "new boolean[] {" ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                             }                                             buf.append ( '}' ) ;                                         }else                                             if  ( cst instanceof short[] )  {                                                 short[] v =  (  ( short[] )   ( cst )  ) ;                                                 buf.append ( "new short[] {" ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( short ) " ) .append ( v[i] ) ;                                                 }                                                 buf.append ( '}' ) ;                                             }else                                                 if  ( cst instanceof char[] )  {                                                     char[] v =  (  ( char[] )   ( cst )  ) ;                                                     buf.append ( "new char[] {" ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( " ( char ) " ) .append (  (  ( int )   ( v[i] )  )  ) ;                                                     }                                                     buf.append ( '}' ) ;                                                 }else                                                     if  ( cst instanceof int[] )  {                                                         int[] v =  (  ( int[] )   ( cst )  ) ;                                                         buf.append ( "new int[] {" ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) ;                                                         }                                                         buf.append ( '}' ) ;                                                     }else                                                         if  ( cst instanceof long[] )  {                                                             long[] v =  (  ( long[] )   ( cst )  ) ;                                                             buf.append ( "new long[] {" ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'L' ) ;                                                             }                                                             buf.append ( '}' ) ;                                                         }else                                                             if  ( cst instanceof float[] )  {                                                                 float[] v =  (  ( float[] )   ( cst )  ) ;                                                                 buf.append ( "new float[] {" ) ;                                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                     buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'f' ) ;                                                                 }                                                                 buf.append ( '}' ) ;                                                             }else                                                                 if  ( cst instanceof double[] )  {                                                                     double[] v =  (  ( double[] )   ( cst )  ) ;                                                                     buf.append ( "new double[] {" ) ;                                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                         buf.append (  ( i == 0 ? "" : "," )  ) .append ( v[i] ) .append ( 'd' ) ;                                                                     }                                                                     buf.append ( '}' ) ;                                                                 }^151^^^^^136^221^[REMOVE] ^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Type )  {^141^^^^^136^221^[REPLACE] } else if  ( cst instanceof Type )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^} else if  ( ! cst instanceof Boolean )  {^147^^^^^136^221^[REPLACE] } else if  ( cst instanceof Boolean )  {^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
[REPLACE]^buf .setLength ( c )  ;^142^^^^^136^221^[REPLACE] buf.append ( "Type.getType ( \"" ) ;^[METHOD] appendConstant [TYPE] void [PARAMETER] StringBuffer buf Object cst [CLASS] ASMifierAbstractVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String desc  name  [TYPE]  int c  i  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  Object cst  [TYPE]  boolean[] v  [TYPE]  Map labelNames 
