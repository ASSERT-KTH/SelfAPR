[REPLACE]^private int valueNumber  = null ;^51^^^^^^^[REPLACE] private int valueNumber = 0;^ [CLASS] TraceAnnotationVisitor  
[REPLACE]^buf .append ( name )  ;^65^^^^^64^151^[REPLACE] buf.setLength ( 0 ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^66^^^^^64^151^[REPLACE] appendComa ( valueNumber++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^appendComa ( i )  ;^66^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^if  ( name == null )  {^68^^^^^64^151^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^buf.append ( '.' ) .append ( value )  ;^69^^^^^64^151^[REPLACE] buf.append ( name ) .append ( '=' ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^buf.append ( ", " )  ;^69^^^^^64^151^[REPLACE] buf.append ( name ) .append ( '=' ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^if  ( ! value instanceof String )  {^72^^^^^64^151^[REPLACE] if  ( value instanceof String )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Type )  {^74^^^^^64^151^[REPLACE] } else if  ( value instanceof Type )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitByte (  (  ( Byte )  value ) .byteValue (  )  ) ;^74^75^76^77^^64^151^[ADD] else if  ( value instanceof Type )  { visitType (  ( Type )  value ) ; } else if  ( value instanceof Byte )  { visitByte (  (  ( Byte )  value ) .byteValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Byte )  {^76^^^^^64^151^[REPLACE] } else if  ( value instanceof Byte )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ;^76^77^78^79^^64^151^[ADD] else if  ( value instanceof Byte )  { visitByte (  (  ( Byte )  value ) .byteValue (  )  ) ; } else if  ( value instanceof Boolean )  { visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Boolean )  {^78^^^^^64^151^[REPLACE] } else if  ( value instanceof Boolean )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Short )  {^80^^^^^64^151^[REPLACE] } else if  ( value instanceof Short )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitShort (  (  ( Short )  value ) .shortValue (  )  ) ;visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^80^81^82^83^^64^151^[ADD] else if  ( value instanceof Short )  { visitShort (  (  ( Short )  value ) .shortValue (  )  ) ; } else if  ( value instanceof Character )  { visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Character )  {^82^^^^^64^151^[REPLACE] } else if  ( value instanceof Character )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^84^^^^^64^151^[REPLACE] } else if  ( value instanceof Integer )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^84^85^86^87^^64^151^[ADD] else if  ( value instanceof Integer )  { visitInt (  (  ( Integer )  value ) .intValue (  )  ) ; } else if  ( value instanceof Float )  { visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^86^^^^^64^151^[REPLACE] } else if  ( value instanceof Float )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^86^87^88^89^^64^151^[ADD] else if  ( value instanceof Float )  { visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ; } else if  ( value instanceof Long )  { visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Long )  {^88^^^^^64^151^[REPLACE] } else if  ( value instanceof Long )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^88^89^90^91^^64^151^[ADD] else if  ( value instanceof Long )  { visitLong (  (  ( Long )  value ) .longValue (  )  ) ; } else if  ( value instanceof Double )  { visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^90^^^^^64^151^[REPLACE] } else if  ( value instanceof Double )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof Short )  {     visitShort (  (  ( Short )   ( value )  ) .shortValue (  )  ) ; }else     if  ( value instanceof Character )  {         visitChar (  (  ( Character )   ( value )  ) .charValue (  )  ) ;     }else         if  ( value instanceof Integer )  {             visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  ) ;         }else             if  ( value instanceof Float )  {                 visitFloat (  (  ( Float )   ( value )  ) .floatValue (  )  ) ;             }else                 if  ( value instanceof Long )  {                     visitLong (  (  ( Long )   ( value )  ) .longValue (  )  ) ;                 }else                     if  ( value instanceof Double )  {                         visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  ) ;                     }else                         if  ( value.getClass (  ) .isArray (  )  )  {                             buf.append ( '{' ) ;                             if  ( value instanceof byte[] )  {                                 byte[] v =  (  ( byte[] )   ( value )  ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     appendComa ( i ) ;                                     visitByte ( v[i] ) ;                                 }                             }else                                 if  ( value instanceof boolean[] )  {                                     boolean[] v =  (  ( boolean[] )   ( value )  ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         appendComa ( i ) ;                                         visitBoolean ( v[i] ) ;                                     }                                 }else                                     if  ( value instanceof short[] )  {                                         short[] v =  (  ( short[] )   ( value )  ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             appendComa ( i ) ;                                             visitShort ( v[i] ) ;                                         }                                     }else                                         if  ( value instanceof char[] )  {                                             char[] v =  (  ( char[] )   ( value )  ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 appendComa ( i ) ;                                                 visitChar ( v[i] ) ;                                             }                                         }else                                             if  ( value instanceof int[] )  {                                                 int[] v =  (  ( int[] )   ( value )  ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     appendComa ( i ) ;                                                     visitInt ( v[i] ) ;                                                 }                                             }else                                                 if  ( value instanceof long[] )  {                                                     long[] v =  (  ( long[] )   ( value )  ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         appendComa ( i ) ;                                                         visitLong ( v[i] ) ;                                                     }                                                 }else                                                     if  ( value instanceof float[] )  {                                                         float[] v =  (  ( float[] )   ( value )  ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             appendComa ( i ) ;                                                             visitFloat ( v[i] ) ;                                                         }                                                     }else                                                         if  ( value instanceof double[] )  {                                                             double[] v =  (  ( double[] )   ( value )  ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 appendComa ( i ) ;                                                                 visitDouble ( v[i] ) ;                                                             }                                                         }                                                                                                                                                                                                                                                                                                                            buf.append ( '}' ) ;                         }^90^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^92^^^^^64^151^[REPLACE] } else if  ( value.getClass (  ) .isArray (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   buf.append ( '{' ) ;byte[] v =  ( byte[] )  value;^92^93^94^95^^64^151^[ADD] else if  ( value.getClass (  ) .isArray (  )  )  { buf.append ( '{' ) ; if  ( value instanceof byte[] )  { byte[] v =  ( byte[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^if  ( ! value instanceof byte[] )  {^94^^^^^64^151^[REPLACE] if  ( value instanceof byte[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^100^^^^^64^151^[REPLACE] } else if  ( value instanceof boolean[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof short[] )  {^106^^^^^64^151^[REPLACE] } else if  ( value instanceof short[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof char[] )  {^112^^^^^64^151^[REPLACE] } else if  ( value instanceof char[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^118^^^^^64^151^[REPLACE] } else if  ( value instanceof int[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof long[] )  {^124^^^^^64^151^[REPLACE] } else if  ( value instanceof long[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof float[] )  {^130^^^^^64^151^[REPLACE] } else if  ( value instanceof float[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   float[] v =  ( float[] )  value;^130^131^132^133^134^64^151^[ADD] else if  ( value instanceof float[] )  { float[] v =  ( float[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitFloat ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^136^^^^^64^151^[REPLACE] } else if  ( value instanceof double[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( value )  )  ;^137^^^^^64^151^[REPLACE] double[] v =  ( double[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^138^139^140^141^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitDouble ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( value )  )  ;^131^^^^^64^151^[REPLACE] float[] v =  ( float[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^132^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof double[] )  {^136^^^^^64^151^[REPLACE] } else if  ( value instanceof double[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^138^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^131^^^^^64^151^[ADD] float[] v =  ( float[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^125^^^^^64^151^[ADD] long[] v =  ( long[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^126^127^128^129^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitLong ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   double[] v =  ( double[] )  value;^136^137^138^139^140^64^151^[ADD] else if  ( value instanceof double[] )  { double[] v =  ( double[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitDouble ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^137^^^^^64^151^[ADD] double[] v =  ( double[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^126^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^long[] v =  (  ( long[] )   ( value )  )  ;^119^^^^^64^151^[REPLACE] int[] v =  ( int[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^120^121^122^123^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitInt ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^124^^^^^64^151^[REPLACE] } else if  ( value instanceof long[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   long[] v =  ( long[] )  value;^124^125^126^127^128^64^151^[ADD] else if  ( value instanceof long[] )  { long[] v =  ( long[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitLong ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof double[] )  {^136^^^^^64^151^[REPLACE] } else if  ( value instanceof double[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^136^137^138^139^140^64^151^[ADD] else if  ( value instanceof double[] )  { double[] v =  ( double[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitDouble ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^136^^^^^64^151^[REPLACE] } else if  ( value instanceof double[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( value )  )  ;^125^^^^^64^151^[REPLACE] long[] v =  ( long[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^119^^^^^64^151^[ADD] int[] v =  ( int[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( value )  )  ;^113^^^^^64^151^[REPLACE] char[] v =  ( char[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^114^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^118^^^^^64^151^[REPLACE] } else if  ( value instanceof int[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof char[] )  {     char[] v =  (  ( char[] )   ( value )  ) ;     for  ( int i = 0; i <  ( v.length ) ; i++ )  {         appendComa ( i ) ;         visitChar ( v[i] ) ;     } }else     if  ( value instanceof int[] )  {         int[] v =  (  ( int[] )   ( value )  ) ;         for  ( int i = 0; i <  ( v.length ) ; i++ )  {             appendComa ( i ) ;             visitInt ( v[i] ) ;         }     }else         if  ( value instanceof long[] )  {             long[] v =  (  ( long[] )   ( value )  ) ;             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                 appendComa ( i ) ;                 visitLong ( v[i] ) ;             }         }else             if  ( value instanceof float[] )  {                 float[] v =  (  ( float[] )   ( value )  ) ;                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                     appendComa ( i ) ;                     visitFloat ( v[i] ) ;                 }             }else                 if  ( value instanceof double[] )  {                     double[] v =  (  ( double[] )   ( value )  ) ;                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                         appendComa ( i ) ;                         visitDouble ( v[i] ) ;                     }                 }^118^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof long[] )  {^124^^^^^64^151^[REPLACE] } else if  ( value instanceof long[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^130^^^^^64^151^[REPLACE] } else if  ( value instanceof float[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^132^133^134^135^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitFloat ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^120^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^124^^^^^64^151^[REPLACE] } else if  ( value instanceof long[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof float[] )  {^130^^^^^64^151^[REPLACE] } else if  ( value instanceof float[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( value )  )  ;^107^^^^^64^151^[REPLACE] short[] v =  ( short[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^108^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^112^^^^^64^151^[REPLACE] } else if  ( value instanceof char[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof int[] )  {^118^^^^^64^151^[REPLACE] } else if  ( value instanceof int[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^118^119^120^121^122^64^151^[ADD] else if  ( value instanceof int[] )  { int[] v =  ( int[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitInt ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^130^131^132^133^134^64^151^[ADD] else if  ( value instanceof float[] )  { float[] v =  ( float[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitFloat ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^130^^^^^64^151^[REPLACE] } else if  ( value instanceof float[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^113^^^^^64^151^[ADD] char[] v =  ( char[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   int[] v =  ( int[] )  value;^118^119^120^121^122^64^151^[ADD] else if  ( value instanceof int[] )  { int[] v =  ( int[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitInt ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^long[] v =  (  ( long[] )   ( value )  )  ;^101^^^^^64^151^[REPLACE] boolean[] v =  ( boolean[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^102^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof short[] )  {^106^^^^^64^151^[REPLACE] } else if  ( value instanceof short[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^106^107^108^109^110^64^151^[ADD] else if  ( value instanceof short[] )  { short[] v =  ( short[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitShort ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   char[] v =  ( char[] )  value;^112^113^114^115^116^64^151^[ADD] else if  ( value instanceof char[] )  { char[] v =  ( char[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitChar ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof int[] )  {^118^^^^^64^151^[REPLACE] } else if  ( value instanceof int[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^114^115^116^117^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitChar ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^108^109^110^111^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitShort ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^112^^^^^64^151^[REPLACE] } else if  ( value instanceof char[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^107^^^^^64^151^[ADD] short[] v =  ( short[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^boolean[] v =  (  ( boolean[] )   ( value )  )  ;^95^^^^^64^151^[REPLACE] byte[] v =  ( byte[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^for  ( int i = 0 ; i < v.length; i++ )  {^96^^^^^64^151^[REPLACE] for  ( int i = 0; i < v.length; i++ )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof boolean[] )  {^100^^^^^64^151^[REPLACE] } else if  ( value instanceof boolean[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof char[] )  {     char[] v =  (  ( char[] )   ( value )  ) ;     for  ( int i = 0; i <  ( v.length ) ; i++ )  {         appendComa ( i ) ;         visitChar ( v[i] ) ;     } }else     if  ( value instanceof int[] )  {         int[] v =  (  ( int[] )   ( value )  ) ;         for  ( int i = 0; i <  ( v.length ) ; i++ )  {             appendComa ( i ) ;             visitInt ( v[i] ) ;         }     }else         if  ( value instanceof long[] )  {             long[] v =  (  ( long[] )   ( value )  ) ;             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                 appendComa ( i ) ;                 visitLong ( v[i] ) ;             }         }else             if  ( value instanceof float[] )  {                 float[] v =  (  ( float[] )   ( value )  ) ;                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                     appendComa ( i ) ;                     visitFloat ( v[i] ) ;                 }             }else                 if  ( value instanceof double[] )  {                     double[] v =  (  ( double[] )   ( value )  ) ;                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                         appendComa ( i ) ;                         visitDouble ( v[i] ) ;                     }                 }^124^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^106^^^^^64^151^[REPLACE] } else if  ( value instanceof short[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   short[] v =  ( short[] )  value;^106^107^108^109^110^64^151^[ADD] else if  ( value instanceof short[] )  { short[] v =  ( short[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitShort ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^124^125^126^127^128^64^151^[ADD] else if  ( value instanceof long[] )  { long[] v =  ( long[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitLong ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^112^113^114^115^116^64^151^[ADD] else if  ( value instanceof char[] )  { char[] v =  ( char[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitChar ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^byte[] v =  ( byte[] )  value;^94^95^96^97^98^64^151^[ADD] if  ( value instanceof byte[] )  { byte[] v =  ( byte[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitByte ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof boolean[] )  {^100^^^^^64^151^[REPLACE] } else if  ( value instanceof boolean[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   boolean[] v =  ( boolean[] )  value;^100^101^102^103^104^64^151^[ADD] else if  ( value instanceof boolean[] )  { boolean[] v =  ( boolean[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitBoolean ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^106^^^^^64^151^[REPLACE] } else if  ( value instanceof short[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof char[] )  {^112^^^^^64^151^[REPLACE] } else if  ( value instanceof char[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^102^103^104^105^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitBoolean ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^95^^^^^64^151^[ADD] byte[] v =  ( byte[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof char[] )  {     char[] v =  (  ( char[] )   ( value )  ) ;     for  ( int i = 0; i <  ( v.length ) ; i++ )  {         appendComa ( i ) ;         visitChar ( v[i] ) ;     } }else     if  ( value instanceof int[] )  {         int[] v =  (  ( int[] )   ( value )  ) ;         for  ( int i = 0; i <  ( v.length ) ; i++ )  {             appendComa ( i ) ;             visitInt ( v[i] ) ;         }     }else         if  ( value instanceof long[] )  {             long[] v =  (  ( long[] )   ( value )  ) ;             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                 appendComa ( i ) ;                 visitLong ( v[i] ) ;             }         }else             if  ( value instanceof float[] )  {                 float[] v =  (  ( float[] )   ( value )  ) ;                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                     appendComa ( i ) ;                     visitFloat ( v[i] ) ;                 }             }else                 if  ( value instanceof double[] )  {                     double[] v =  (  ( double[] )   ( value )  ) ;                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                         appendComa ( i ) ;                         visitDouble ( v[i] ) ;                     }                 }^100^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Double )   ( value )  ) .doubleValue (  )  ;^91^^^^^64^151^[REPLACE] visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^91^^^^^64^151^[REPLACE] visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( value.getClass (  ) .isArray (  )  )  {^92^^^^^64^151^[REPLACE] } else if  ( value.getClass (  ) .isArray (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}^100^101^102^103^104^64^151^[ADD] else if  ( value instanceof boolean[] )  { boolean[] v =  ( boolean[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitBoolean ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^100^^^^^64^151^[REPLACE] } else if  ( value instanceof boolean[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^101^^^^^64^151^[ADD] boolean[] v =  ( boolean[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^89^^^^^64^151^[REPLACE] visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^89^^^^^64^151^[ADD] visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^89^^^^^64^151^[REPLACE] visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof char[] )  {     char[] v =  (  ( char[] )   ( value )  ) ;     for  ( int i = 0; i <  ( v.length ) ; i++ )  {         appendComa ( i ) ;         visitChar ( v[i] ) ;     } }else     if  ( value instanceof int[] )  {         int[] v =  (  ( int[] )   ( value )  ) ;         for  ( int i = 0; i <  ( v.length ) ; i++ )  {             appendComa ( i ) ;             visitInt ( v[i] ) ;         }     }else         if  ( value instanceof long[] )  {             long[] v =  (  ( long[] )   ( value )  ) ;             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                 appendComa ( i ) ;                 visitLong ( v[i] ) ;             }         }else             if  ( value instanceof float[] )  {                 float[] v =  (  ( float[] )   ( value )  ) ;                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                     appendComa ( i ) ;                     visitFloat ( v[i] ) ;                 }             }else                 if  ( value instanceof double[] )  {                     double[] v =  (  ( double[] )   ( value )  ) ;                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                         appendComa ( i ) ;                         visitDouble ( v[i] ) ;                     }                 }^106^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^91^^^^^64^151^[ADD] visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^87^^^^^64^151^[REPLACE] visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Double )   ( value )  ) .doubleValue (  )  ;^87^^^^^64^151^[REPLACE] visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^88^^^^^64^151^[REPLACE] } else if  ( value instanceof Long )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Double )  {^90^^^^^64^151^[REPLACE] } else if  ( value instanceof Double )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^94^95^96^97^98^64^151^[ADD] if  ( value instanceof byte[] )  { byte[] v =  ( byte[] )  value; for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitByte ( v[i] ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^96^97^98^99^^64^151^[ADD] for  ( int i = 0; i < v.length; i++ )  { appendComa ( i ) ; visitByte ( v[i] ) ; }^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^89^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof char[] )  {     char[] v =  (  ( char[] )   ( value )  ) ;     for  ( int i = 0; i <  ( v.length ) ; i++ )  {         appendComa ( i ) ;         visitChar ( v[i] ) ;     } }else     if  ( value instanceof int[] )  {         int[] v =  (  ( int[] )   ( value )  ) ;         for  ( int i = 0; i <  ( v.length ) ; i++ )  {             appendComa ( i ) ;             visitInt ( v[i] ) ;         }     }else         if  ( value instanceof long[] )  {             long[] v =  (  ( long[] )   ( value )  ) ;             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                 appendComa ( i ) ;                 visitLong ( v[i] ) ;             }         }else             if  ( value instanceof float[] )  {                 float[] v =  (  ( float[] )   ( value )  ) ;                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                     appendComa ( i ) ;                     visitFloat ( v[i] ) ;                 }             }else                 if  ( value instanceof double[] )  {                     double[] v =  (  ( double[] )   ( value )  ) ;                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                         appendComa ( i ) ;                         visitDouble ( v[i] ) ;                     }                 }^94^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof char[] )  {     char[] v =  (  ( char[] )   ( value )  ) ;     for  ( int i = 0; i <  ( v.length ) ; i++ )  {         appendComa ( i ) ;         visitChar ( v[i] ) ;     } }else     if  ( value instanceof int[] )  {         int[] v =  (  ( int[] )   ( value )  ) ;         for  ( int i = 0; i <  ( v.length ) ; i++ )  {             appendComa ( i ) ;             visitInt ( v[i] ) ;         }     }else         if  ( value instanceof long[] )  {             long[] v =  (  ( long[] )   ( value )  ) ;             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                 appendComa ( i ) ;                 visitLong ( v[i] ) ;             }         }else             if  ( value instanceof float[] )  {                 float[] v =  (  ( float[] )   ( value )  ) ;                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                     appendComa ( i ) ;                     visitFloat ( v[i] ) ;                 }             }else                 if  ( value instanceof double[] )  {                     double[] v =  (  ( double[] )   ( value )  ) ;                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                         appendComa ( i ) ;                         visitDouble ( v[i] ) ;                     }                 }^92^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^85^^^^^64^151^[REPLACE] visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^85^^^^^64^151^[REPLACE] visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^85^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^86^^^^^64^151^[REPLACE] } else if  ( value instanceof Float )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^86^87^88^89^^64^151^[ADD] else if  ( value instanceof Float )  { visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ; } else if  ( value instanceof Long )  { visitLong (  (  ( Long )  value ) .longValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitLong (  (  ( Long )  value ) .longValue (  )  ) ;visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^88^89^90^91^^64^151^[ADD] else if  ( value instanceof Long )  { visitLong (  (  ( Long )  value ) .longValue (  )  ) ; } else if  ( value instanceof Double )  { visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^90^^^^^64^151^[REPLACE] } else if  ( value instanceof Double )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Byte  )   {  ;^94^^^^^64^151^[REPLACE] if  ( value instanceof byte[] )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   byte[] v =  ( byte[] )  value;^92^93^94^95^^64^151^[ADD] else if  ( value.getClass (  ) .isArray (  )  )  { buf.append ( '{' ) ; if  ( value instanceof byte[] )  { byte[] v =  ( byte[] )  value;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ;buf.append ( '{' ) ;^90^91^92^93^^64^151^[ADD] else if  ( value instanceof Double )  { visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ; } else if  ( value.getClass (  ) .isArray (  )  )  { buf.append ( '{' ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^87^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Long )  {^88^^^^^64^151^[REPLACE] } else if  ( value instanceof Long )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Double )  {^90^^^^^64^151^[REPLACE] } else if  ( value instanceof Double )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^if   (  i != 0  )   {  ;^92^^^^^64^151^[REPLACE] } else if  ( value.getClass (  ) .isArray (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  )  ;^83^^^^^64^151^[REPLACE] visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^83^^^^^64^151^[REPLACE] visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^84^^^^^64^151^[REPLACE] } else if  ( value instanceof Integer )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Float )  {^86^^^^^64^151^[REPLACE] } else if  ( value instanceof Float )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^87^^^^^64^151^[ADD] visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   buf.append ( '{' ) ;^90^91^92^93^^64^151^[ADD] else if  ( value instanceof Double )  { visitDouble (  (  ( Double )  value ) .doubleValue (  )  ) ; } else if  ( value.getClass (  ) .isArray (  )  )  { buf.append ( '{' ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^85^^^^^64^151^[ADD] visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Float )  {^86^^^^^64^151^[REPLACE] } else if  ( value instanceof Float )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Boolean  )   {  ;^88^^^^^64^151^[REPLACE] } else if  ( value instanceof Long )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^91^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof Short )  {     visitShort (  (  ( Short )   ( value )  ) .shortValue (  )  ) ; }else     if  ( value instanceof Character )  {         visitChar (  (  ( Character )   ( value )  ) .charValue (  )  ) ;     }else         if  ( value instanceof Integer )  {             visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  ) ;         }else             if  ( value instanceof Float )  {                 visitFloat (  (  ( Float )   ( value )  ) .floatValue (  )  ) ;             }else                 if  ( value instanceof Long )  {                     visitLong (  (  ( Long )   ( value )  ) .longValue (  )  ) ;                 }else                     if  ( value instanceof Double )  {                         visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  ) ;                     }else                         if  ( value.getClass (  ) .isArray (  )  )  {                             buf.append ( '{' ) ;                             if  ( value instanceof byte[] )  {                                 byte[] v =  (  ( byte[] )   ( value )  ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     appendComa ( i ) ;                                     visitByte ( v[i] ) ;                                 }                             }else                                 if  ( value instanceof boolean[] )  {                                     boolean[] v =  (  ( boolean[] )   ( value )  ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         appendComa ( i ) ;                                         visitBoolean ( v[i] ) ;                                     }                                 }else                                     if  ( value instanceof short[] )  {                                         short[] v =  (  ( short[] )   ( value )  ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             appendComa ( i ) ;                                             visitShort ( v[i] ) ;                                         }                                     }else                                         if  ( value instanceof char[] )  {                                             char[] v =  (  ( char[] )   ( value )  ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 appendComa ( i ) ;                                                 visitChar ( v[i] ) ;                                             }                                         }else                                             if  ( value instanceof int[] )  {                                                 int[] v =  (  ( int[] )   ( value )  ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     appendComa ( i ) ;                                                     visitInt ( v[i] ) ;                                                 }                                             }else                                                 if  ( value instanceof long[] )  {                                                     long[] v =  (  ( long[] )   ( value )  ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         appendComa ( i ) ;                                                         visitLong ( v[i] ) ;                                                     }                                                 }else                                                     if  ( value instanceof float[] )  {                                                         float[] v =  (  ( float[] )   ( value )  ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             appendComa ( i ) ;                                                             visitFloat ( v[i] ) ;                                                         }                                                     }else                                                         if  ( value instanceof double[] )  {                                                             double[] v =  (  ( double[] )   ( value )  ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 appendComa ( i ) ;                                                                 visitDouble ( v[i] ) ;                                                             }                                                         }                                                                                                                                                                                                                                                                                                                            buf.append ( '}' ) ;                         }^88^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^81^^^^^64^151^[REPLACE] visitShort (  (  ( Short )  value ) .shortValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^81^^^^^64^151^[ADD] visitShort (  (  ( Short )  value ) .shortValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^81^^^^^64^151^[REPLACE] visitShort (  (  ( Short )  value ) .shortValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^82^^^^^64^151^[REPLACE] } else if  ( value instanceof Character )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Integer )  {^84^^^^^64^151^[REPLACE] } else if  ( value instanceof Integer )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^84^85^86^87^^64^151^[ADD] else if  ( value instanceof Integer )  { visitInt (  (  ( Integer )  value ) .intValue (  )  ) ; } else if  ( value instanceof Float )  { visitFloat (  (  ( Float )  value ) .floatValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^buf.append ( '.' ) .append ( value )  ;^91^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^79^^^^^64^151^[REPLACE] visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^79^^^^^64^151^[REPLACE] visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^80^^^^^64^151^[REPLACE] } else if  ( value instanceof Short )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Character )  {^82^^^^^64^151^[REPLACE] } else if  ( value instanceof Character )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitChar (  (  ( Character )  value ) .charValue (  )  ) ;visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^82^83^84^85^^64^151^[ADD] else if  ( value instanceof Character )  { visitChar (  (  ( Character )  value ) .charValue (  )  ) ; } else if  ( value instanceof Integer )  { visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^77^^^^^64^151^[REPLACE] visitByte (  (  ( Byte )  value ) .byteValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^77^^^^^64^151^[ADD] visitByte (  (  ( Byte )  value ) .byteValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^(  ( Float )   ( value )  ) .floatValue (  )  ;^77^^^^^64^151^[REPLACE] visitByte (  (  ( Byte )  value ) .byteValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^82^^^^^64^151^[REPLACE] } else if  ( value instanceof Character )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^82^83^84^85^^64^151^[ADD] else if  ( value instanceof Character )  { visitChar (  (  ( Character )  value ) .charValue (  )  ) ; } else if  ( value instanceof Integer )  { visitInt (  (  ( Integer )  value ) .intValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  if  ( ! value instanceof Integer )  {^84^^^^^64^151^[REPLACE] } else if  ( value instanceof Integer )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof Short )  {     visitShort (  (  ( Short )   ( value )  ) .shortValue (  )  ) ; }else     if  ( value instanceof Character )  {         visitChar (  (  ( Character )   ( value )  ) .charValue (  )  ) ;     }else         if  ( value instanceof Integer )  {             visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  ) ;         }else             if  ( value instanceof Float )  {                 visitFloat (  (  ( Float )   ( value )  ) .floatValue (  )  ) ;             }else                 if  ( value instanceof Long )  {                     visitLong (  (  ( Long )   ( value )  ) .longValue (  )  ) ;                 }else                     if  ( value instanceof Double )  {                         visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  ) ;                     }else                         if  ( value.getClass (  ) .isArray (  )  )  {                             buf.append ( '{' ) ;                             if  ( value instanceof byte[] )  {                                 byte[] v =  (  ( byte[] )   ( value )  ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     appendComa ( i ) ;                                     visitByte ( v[i] ) ;                                 }                             }else                                 if  ( value instanceof boolean[] )  {                                     boolean[] v =  (  ( boolean[] )   ( value )  ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         appendComa ( i ) ;                                         visitBoolean ( v[i] ) ;                                     }                                 }else                                     if  ( value instanceof short[] )  {                                         short[] v =  (  ( short[] )   ( value )  ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             appendComa ( i ) ;                                             visitShort ( v[i] ) ;                                         }                                     }else                                         if  ( value instanceof char[] )  {                                             char[] v =  (  ( char[] )   ( value )  ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 appendComa ( i ) ;                                                 visitChar ( v[i] ) ;                                             }                                         }else                                             if  ( value instanceof int[] )  {                                                 int[] v =  (  ( int[] )   ( value )  ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     appendComa ( i ) ;                                                     visitInt ( v[i] ) ;                                                 }                                             }else                                                 if  ( value instanceof long[] )  {                                                     long[] v =  (  ( long[] )   ( value )  ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         appendComa ( i ) ;                                                         visitLong ( v[i] ) ;                                                     }                                                 }else                                                     if  ( value instanceof float[] )  {                                                         float[] v =  (  ( float[] )   ( value )  ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             appendComa ( i ) ;                                                             visitFloat ( v[i] ) ;                                                         }                                                     }else                                                         if  ( value instanceof double[] )  {                                                             double[] v =  (  ( double[] )   ( value )  ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 appendComa ( i ) ;                                                                 visitDouble ( v[i] ) ;                                                             }                                                         }                                                                                                                                                                                                                                                                                                                            buf.append ( '}' ) ;                         }^86^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^83^^^^^64^151^[ADD] visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof Short )  {     visitShort (  (  ( Short )   ( value )  ) .shortValue (  )  ) ; }else     if  ( value instanceof Character )  {         visitChar (  (  ( Character )   ( value )  ) .charValue (  )  ) ;     }else         if  ( value instanceof Integer )  {             visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  ) ;         }else             if  ( value instanceof Float )  {                 visitFloat (  (  ( Float )   ( value )  ) .floatValue (  )  ) ;             }else                 if  ( value instanceof Long )  {                     visitLong (  (  ( Long )   ( value )  ) .longValue (  )  ) ;                 }else                     if  ( value instanceof Double )  {                         visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  ) ;                     }else                         if  ( value.getClass (  ) .isArray (  )  )  {                             buf.append ( '{' ) ;                             if  ( value instanceof byte[] )  {                                 byte[] v =  (  ( byte[] )   ( value )  ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     appendComa ( i ) ;                                     visitByte ( v[i] ) ;                                 }                             }else                                 if  ( value instanceof boolean[] )  {                                     boolean[] v =  (  ( boolean[] )   ( value )  ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         appendComa ( i ) ;                                         visitBoolean ( v[i] ) ;                                     }                                 }else                                     if  ( value instanceof short[] )  {                                         short[] v =  (  ( short[] )   ( value )  ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             appendComa ( i ) ;                                             visitShort ( v[i] ) ;                                         }                                     }else                                         if  ( value instanceof char[] )  {                                             char[] v =  (  ( char[] )   ( value )  ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 appendComa ( i ) ;                                                 visitChar ( v[i] ) ;                                             }                                         }else                                             if  ( value instanceof int[] )  {                                                 int[] v =  (  ( int[] )   ( value )  ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     appendComa ( i ) ;                                                     visitInt ( v[i] ) ;                                                 }                                             }else                                                 if  ( value instanceof long[] )  {                                                     long[] v =  (  ( long[] )   ( value )  ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         appendComa ( i ) ;                                                         visitLong ( v[i] ) ;                                                     }                                                 }else                                                     if  ( value instanceof float[] )  {                                                         float[] v =  (  ( float[] )   ( value )  ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             appendComa ( i ) ;                                                             visitFloat ( v[i] ) ;                                                         }                                                     }else                                                         if  ( value instanceof double[] )  {                                                             double[] v =  (  ( double[] )   ( value )  ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 appendComa ( i ) ;                                                                 visitDouble ( v[i] ) ;                                                             }                                                         }                                                                                                                                                                                                                                                                                                                            buf.append ( '}' ) ;                         }^84^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^81^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^79^^^^^64^151^[ADD] visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^80^^^^^64^151^[REPLACE] } else if  ( value instanceof Short )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^80^81^82^83^^64^151^[ADD] else if  ( value instanceof Short )  { visitShort (  (  ( Short )  value ) .shortValue (  )  ) ; } else if  ( value instanceof Character )  { visitChar (  (  ( Character )  value ) .charValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^75^^^^^64^151^[REPLACE] visitType (  ( Type )  value ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^76^^^^^64^151^[REPLACE] } else if  ( value instanceof Byte )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^}   visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ;visitShort (  (  ( Short )  value ) .shortValue (  )  ) ;^78^79^80^81^^64^151^[ADD] else if  ( value instanceof Boolean )  { visitBoolean (  (  ( Boolean )  value ) .booleanValue (  )  ) ; } else if  ( value instanceof Short )  { visitShort (  (  ( Short )  value ) .shortValue (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof Short )  {     visitShort (  (  ( Short )   ( value )  ) .shortValue (  )  ) ; }else     if  ( value instanceof Character )  {         visitChar (  (  ( Character )   ( value )  ) .charValue (  )  ) ;     }else         if  ( value instanceof Integer )  {             visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  ) ;         }else             if  ( value instanceof Float )  {                 visitFloat (  (  ( Float )   ( value )  ) .floatValue (  )  ) ;             }else                 if  ( value instanceof Long )  {                     visitLong (  (  ( Long )   ( value )  ) .longValue (  )  ) ;                 }else                     if  ( value instanceof Double )  {                         visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  ) ;                     }else                         if  ( value.getClass (  ) .isArray (  )  )  {                             buf.append ( '{' ) ;                             if  ( value instanceof byte[] )  {                                 byte[] v =  (  ( byte[] )   ( value )  ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     appendComa ( i ) ;                                     visitByte ( v[i] ) ;                                 }                             }else                                 if  ( value instanceof boolean[] )  {                                     boolean[] v =  (  ( boolean[] )   ( value )  ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         appendComa ( i ) ;                                         visitBoolean ( v[i] ) ;                                     }                                 }else                                     if  ( value instanceof short[] )  {                                         short[] v =  (  ( short[] )   ( value )  ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             appendComa ( i ) ;                                             visitShort ( v[i] ) ;                                         }                                     }else                                         if  ( value instanceof char[] )  {                                             char[] v =  (  ( char[] )   ( value )  ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 appendComa ( i ) ;                                                 visitChar ( v[i] ) ;                                             }                                         }else                                             if  ( value instanceof int[] )  {                                                 int[] v =  (  ( int[] )   ( value )  ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     appendComa ( i ) ;                                                     visitInt ( v[i] ) ;                                                 }                                             }else                                                 if  ( value instanceof long[] )  {                                                     long[] v =  (  ( long[] )   ( value )  ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         appendComa ( i ) ;                                                         visitLong ( v[i] ) ;                                                     }                                                 }else                                                     if  ( value instanceof float[] )  {                                                         float[] v =  (  ( float[] )   ( value )  ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             appendComa ( i ) ;                                                             visitFloat ( v[i] ) ;                                                         }                                                     }else                                                         if  ( value instanceof double[] )  {                                                             double[] v =  (  ( double[] )   ( value )  ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 appendComa ( i ) ;                                                                 visitDouble ( v[i] ) ;                                                             }                                                         }                                                                                                                                                                                                                                                                                                                            buf.append ( '}' ) ;                         }^82^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  )  ;^83^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^78^^^^^64^151^[REPLACE] } else if  ( value instanceof Boolean )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REMOVE]^if  ( value instanceof Short )  {     visitShort (  (  ( Short )   ( value )  ) .shortValue (  )  ) ; }else     if  ( value instanceof Character )  {         visitChar (  (  ( Character )   ( value )  ) .charValue (  )  ) ;     }else         if  ( value instanceof Integer )  {             visitInt (  (  ( Integer )   ( value )  ) .intValue (  )  ) ;         }else             if  ( value instanceof Float )  {                 visitFloat (  (  ( Float )   ( value )  ) .floatValue (  )  ) ;             }else                 if  ( value instanceof Long )  {                     visitLong (  (  ( Long )   ( value )  ) .longValue (  )  ) ;                 }else                     if  ( value instanceof Double )  {                         visitDouble (  (  ( Double )   ( value )  ) .doubleValue (  )  ) ;                     }else                         if  ( value.getClass (  ) .isArray (  )  )  {                             buf.append ( '{' ) ;                             if  ( value instanceof byte[] )  {                                 byte[] v =  (  ( byte[] )   ( value )  ) ;                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                     appendComa ( i ) ;                                     visitByte ( v[i] ) ;                                 }                             }else                                 if  ( value instanceof boolean[] )  {                                     boolean[] v =  (  ( boolean[] )   ( value )  ) ;                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                         appendComa ( i ) ;                                         visitBoolean ( v[i] ) ;                                     }                                 }else                                     if  ( value instanceof short[] )  {                                         short[] v =  (  ( short[] )   ( value )  ) ;                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                             appendComa ( i ) ;                                             visitShort ( v[i] ) ;                                         }                                     }else                                         if  ( value instanceof char[] )  {                                             char[] v =  (  ( char[] )   ( value )  ) ;                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                 appendComa ( i ) ;                                                 visitChar ( v[i] ) ;                                             }                                         }else                                             if  ( value instanceof int[] )  {                                                 int[] v =  (  ( int[] )   ( value )  ) ;                                                 for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                     appendComa ( i ) ;                                                     visitInt ( v[i] ) ;                                                 }                                             }else                                                 if  ( value instanceof long[] )  {                                                     long[] v =  (  ( long[] )   ( value )  ) ;                                                     for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                         appendComa ( i ) ;                                                         visitLong ( v[i] ) ;                                                     }                                                 }else                                                     if  ( value instanceof float[] )  {                                                         float[] v =  (  ( float[] )   ( value )  ) ;                                                         for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                             appendComa ( i ) ;                                                             visitFloat ( v[i] ) ;                                                         }                                                     }else                                                         if  ( value instanceof double[] )  {                                                             double[] v =  (  ( double[] )   ( value )  ) ;                                                             for  ( int i = 0; i <  ( v.length ) ; i++ )  {                                                                 appendComa ( i ) ;                                                                 visitDouble ( v[i] ) ;                                                             }                                                         }                                                                                                                                                                                                                                                                                                                            buf.append ( '}' ) ;                         }^78^^^^^64^151^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^73^^^^^64^151^[REPLACE] visitString (  ( String )  value ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^}  else {^74^^^^^64^151^[REPLACE] } else if  ( value instanceof Type )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Boolean )  {^78^^^^^64^151^[REPLACE] } else if  ( value instanceof Boolean )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if  ( ! value instanceof Short )  {^80^^^^^64^151^[REPLACE] } else if  ( value instanceof Short )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^} else if   (  value instanceof Long  )   {  ;^78^^^^^64^151^[REPLACE] } else if  ( value instanceof Boolean )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^text.add ( buf .setLength ( valueNumber )   ) ;^146^^^^^64^151^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[ADD]^^146^^^^^64^151^[ADD] text.add ( buf.toString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^text.add ( buf.append (  )  ) ;^146^^^^^64^151^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^if  ( av == null )  {^148^^^^^64^151^[REPLACE] if  ( av != null )  {^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^av.visitAnnotation ( name, value ) ;^149^^^^^64^151^[REPLACE] av.visit ( name, value ) ;^[METHOD] visit [TYPE] void [PARAMETER] String name Object value [CLASS] TraceAnnotationVisitor   [TYPE]  long[] v  [TYPE]  short[] v  [TYPE]  int[] v  [TYPE]  String name  [TYPE]  int i  valueNumber  [TYPE]  char[] v  [TYPE]  float[] v  [TYPE]  byte[] v  [TYPE]  boolean false  true  [TYPE]  double[] v  [TYPE]  AnnotationVisitor av  [TYPE]  Object value  [TYPE]  boolean[] v 
[REPLACE]^buf.setLength ( 0 >> 1 ) ;^198^^^^^197^210^[REPLACE] buf.setLength ( 0 ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^199^^^^^197^210^[REPLACE] appendComa ( valueNumber++ ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^if  ( name == null )  {^200^^^^^197^210^[REPLACE] if  ( name != null )  {^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^203^^^^^197^210^[REPLACE] appendDescriptor ( FIELD_DESCRIPTOR, desc ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( '.' ) .append ( name ) ;^204^^^^^197^210^[REPLACE] buf.append ( '.' ) .append ( value ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( ", " )  ;^204^^^^^197^210^[REPLACE] buf.append ( '.' ) .append ( value ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^204^^^^^197^210^[ADD] buf.append ( '.' ) .append ( value ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^text.add ( buf.append (  )  ) ;^205^^^^^197^210^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^text.add ( buf .setLength ( value )   ) ;^205^^^^^197^210^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^205^^^^^197^210^[ADD] text.add ( buf.toString (  )  ) ;^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^if  ( av == null )  {^207^^^^^197^210^[REPLACE] if  ( av != null )  {^[METHOD] visitEnum [TYPE] void [PARAMETER] String name String desc String value [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  String desc  name  value  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.setLength ( 1 ) ;^216^^^^^215^232^[REPLACE] buf.setLength ( 0 ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^216^217^^^^215^232^[ADD] buf.setLength ( 0 ) ; appendComa ( valueNumber++ ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^217^^^^^215^232^[REPLACE] appendComa ( valueNumber++ ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^217^^^^^215^232^[ADD] appendComa ( valueNumber++ ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^if  ( name == null )  {^218^^^^^215^232^[REPLACE] if  ( name != null )  {^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( '.' ) .append ( value )  ;^219^^^^^215^232^[REPLACE] buf.append ( name ) .append ( '=' ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( ", " )  ;^219^^^^^215^232^[REPLACE] buf.append ( name ) .append ( '=' ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^219^^^^^215^232^[ADD] buf.append ( name ) .append ( '=' ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( ", " )  ;^221^^^^^215^232^[REPLACE] buf.append ( '@' ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^222^^^^^215^232^[REPLACE] appendDescriptor ( FIELD_DESCRIPTOR, desc ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^222^^^^^215^232^[ADD] appendDescriptor ( FIELD_DESCRIPTOR, desc ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( ", " )  ;^223^^^^^215^232^[REPLACE] buf.append ( ' ( ' ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^223^^^^^215^232^[ADD] buf.append ( ' ( ' ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^buf.append ( " ( char ) " ) .append (  (  ( int )   ( value )  )  )  ;^224^^^^^215^232^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^224^^^^^215^232^[ADD] text.add ( buf.toString (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^text.add ( buf .setLength ( value )   ) ;^224^^^^^215^232^[REPLACE] text.add ( buf.toString (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^int i = 0  ;^225^^^^^215^232^[REPLACE] TraceAnnotationVisitor tav = createTraceAnnotationVisitor (  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^text.add ( tav .appendDescriptor ( false , name )   ) ;^226^^^^^215^232^[REPLACE] text.add ( tav.getText (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^text.add ( tav.createTraceAnnotationVisitor (  )  ) ;^226^^^^^215^232^[REPLACE] text.add ( tav.getText (  )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^text.add ( "}" )  ;^227^^^^^215^232^[REPLACE] text.add ( " ) " ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^if  ( av == this  )  {^228^^^^^215^232^[REPLACE] if  ( av != null )  {^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[ADD]^^229^^^^^215^232^[ADD] tav.av = av.visitAnnotation ( name, desc ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
[REPLACE]^return tav;  ;^231^^^^^215^232^[REPLACE] return tav;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String name String desc [CLASS] TraceAnnotationVisitor   [TYPE]  AnnotationVisitor av  [TYPE]  TraceAnnotationVisitor tav  [TYPE]  String desc  name  [TYPE]  boolean false  true  [TYPE]  int i  value  valueNumber 
