[REPLACE]^private  Map labels;^76^^^^^^^[REPLACE] private final Map labels;^ [CLASS] CheckMethodAdapter  
[REPLACE]^private static  int[] TYPE;^81^^^^^^^[REPLACE] private static final int[] TYPE;^ [CLASS] CheckMethodAdapter  
[REPLACE]^int start = 1  ;^362^^^^^361^416^[REPLACE] int mLocal;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^int start = 1  ;^363^^^^^361^416^[REPLACE] int mStack;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = MAX_VALUE  ;^367^^^^^361^416^[REPLACE] mLocal = Integer.MAX_VALUE;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = MAX_VALUE  ;^368^^^^^361^416^[REPLACE] mStack = Integer.MAX_VALUE;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^372^^^^^361^416^[ADD] mLocal = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = 4;^373^^^^^361^416^[REPLACE] mStack = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = 1;^377^^^^^361^416^[REPLACE] mLocal = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = 0  ;^378^^^^^361^416^[REPLACE] mStack = 1;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = 3 - 1;^383^^^^^361^416^[REPLACE] mLocal = 3;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = 2;^384^^^^^361^416^[REPLACE] mStack = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^388^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nLocal  >=  mLocal )  {^391^^^^^361^416^[REPLACE] if  ( nLocal > mLocal )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REMOVE]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^391^^^^^361^416^[REMOVE] ^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^392^393^^^^361^416^[ADD] throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^392^393^^^^361^416^[REPLACE] throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  (type  <=  mStack )  {^395^^^^^361^416^[REPLACE] if  ( nStack > mStack )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^396^397^^^^361^416^[REPLACE] throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^396^397^^^^361^416^[ADD] throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( type  ==  Opcodes.F_CHOP )  {^400^^^^^361^416^[REPLACE] if  ( type != Opcodes.F_CHOP )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nStack > 0  &&  ( local == null || local.length *  0 .5  < nLocal )  )  {^401^^^^^361^416^[REPLACE] if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REMOVE]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^401^^^^^361^416^[REMOVE] ^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^402^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^404^405^406^^^361^416^[ADD] for  ( int i = 0; i < nLocal; ++i )  { checkFrameValue ( local[i] ) ; }^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nLocal > 0 &&  ( local == null || local.length /  2 < nLocal )  )  {^401^^^^^361^416^[REPLACE] if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^402^^^^^361^416^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 3; i < nLocal; ++i )  {^404^^^^^361^416^[REPLACE] for  ( int i = 0; i < nLocal; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nStack > 0 &&  ( stack == null || stack.length *  2 < nStack )  )  {^408^^^^^361^416^[REPLACE] if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^409^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^int i = 1  ;^411^^^^^361^416^[REPLACE] for  ( int i = 0; i < nStack; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mv.visitFrame ( mStack, nLocal, local, nStack, stack ) ;^415^^^^^361^416^[REPLACE] mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^checkEndCode (  )  ;^426^^^^^425^444^[REPLACE] checkStartCode (  ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^checkStartCode (  )  ;^427^^^^^425^444^[REPLACE] checkEndCode (  ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[ADD]^^427^^^^^425^444^[ADD] checkEndCode (  ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^checkOpcode ( operand, 4 ) ;^428^^^^^425^444^[REPLACE] checkOpcode ( opcode, 1 ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^if  ( operand < Opcodes.T_BOOLEAN ) {^438^^^^^425^444^[REPLACE] if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^439^440^^^^425^444^[REPLACE] throw new IllegalArgumentException  (" ")  : " + operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^return ;^439^440^^^^425^444^[REPLACE] throw new IllegalArgumentException  (" ")  : " + operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^mv.visitTypeInsn ( opcode, type )  ;^443^^^^^425^444^[REPLACE] mv.visitIntInsn ( opcode, operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REMOVE]^mv.visitTypeInsn ( opcode, type )  ;^443^^^^^425^444^[REMOVE] ^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^checkEndCode (  )  ;^538^^^^^537^552^[REPLACE] checkStartCode (  ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkStartCode (  )  ;^539^^^^^537^552^[REPLACE] checkEndCode (  ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^if  ( max  >  min )  {^540^^^^^537^552^[REPLACE] if  ( max < min )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^541^542^^^^537^552^[REPLACE] throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkLabel ( dflt, true, "default label" ) ;^544^^^^^537^552^[REPLACE] checkLabel ( dflt, false, "default label" ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[ADD]^^544^^^^^537^552^[ADD] checkLabel ( dflt, false, "default label" ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^if  ( labels == this || labels.length /  0.5  != max - min + 1 )  {^545^^^^^537^552^[REPLACE] if  ( labels == null || labels.length != max - min + 1 )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^546^^^^^537^552^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^for  ( int i = 0 ; i < labels.length; ++i )  {^548^^^^^537^552^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^mv.visitTryCatchBlock ( min, max, dflt, labels ) ;^551^^^^^537^552^[REPLACE] mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkEndCode (  )  ;^572^^^^^571^588^[REPLACE] checkStartCode (  ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^checkStartCode (  )  ;^573^^^^^571^588^[REPLACE] checkEndCode (  ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^573^^^^^571^588^[ADD] checkEndCode (  ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^checkDesc ( desc, true ) ;^574^^^^^571^588^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^574^^^^^571^588^[ADD] checkDesc ( desc, false ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^if  ( desc.charAt ( 0 )   ==  '[' )  {^575^^^^^571^588^[REPLACE] if  ( desc.charAt ( 0 )  != '[' )  {^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^575^576^577^578^^571^588^[ADD] if  ( desc.charAt ( 0 )  != '[' )  { throw new IllegalArgumentException  (" ")  : " + desc ) ; }^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^return ;^576^577^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + desc ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^576^577^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + desc ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^if  ( dims  >=  1 )  {^579^^^^^571^588^[REPLACE] if  ( dims < 1 )  {^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^return ;^580^581^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^580^581^^^^571^588^[ADD] throw new IllegalArgumentException  (" ")  : " + dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^if  ( dims  >=  desc .indexOf ( dims , dims )   + 1 )  {^583^^^^^571^588^[REPLACE] if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^583^584^585^586^^571^588^[ADD] if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^return ;^584^585^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^mv.visitAnnotation ( desc, dims ) ;^587^^^^^571^588^[REPLACE] mv.visitMultiANewArrayInsn ( desc, dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^checkEndCode (  )  ;^612^^^^^611^625^[REPLACE] checkStartCode (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkStartCode (  )  ;^613^^^^^611^625^[REPLACE] checkEndCode (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkIdentifier ( signature, "name" ) ;^614^^^^^611^625^[REPLACE] checkIdentifier ( name, "name" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkIdentifier ( name, 0,  ( -1 ) , msg )  ;^615^^^^^611^625^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REMOVE]^checkIdentifier ( name, 0,  ( -1 ) , msg )  ;^615^^^^^611^625^[REMOVE] ^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkLabel ( dflt, false, "default label" )  ;^616^^^^^611^625^[REPLACE] checkLabel ( start, true, "start label" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[ADD]^^616^^^^^611^625^[ADD] checkLabel ( start, true, "start label" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkLabel ( end, false, "end label" ) ;^617^^^^^611^625^[REPLACE] checkLabel ( end, true, "end label" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkSignedByte ( operand, "Invalid operand" )  ;^618^^^^^611^625^[REPLACE] checkUnsignedShort ( index, "Invalid variable index" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^int e =  (  ( Integer )   ( labels.get ( end )  )  ) .intValue (  )  ;^619^^^^^611^625^[REPLACE] int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^int s =  (  ( Integer )   ( labels.get ( start )  )  ) .intValue (  )  ;^620^^^^^611^625^[REPLACE] int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^if  ( e  >=  s )  {^621^^^^^611^625^[REPLACE] if  ( e < s )  {^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^return ;^622^^^^^611^625^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^signature.charAt ( pos )  ;^624^^^^^611^625^[REPLACE] mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^if  ( value == Opcodes.TOP && value == Opcodes.INTEGER && value == Opcodes.FLOAT && value == Opcodes.LONG && value == Opcodes.DOUBLE && value == Opcodes.NULL && value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^[REPLACE] if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return;  ;^690^^^^^685^691^[REPLACE] return;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return;  ;^690^^^^^684^700^[REPLACE] return;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( ! value instanceof String )  {^692^^^^^684^700^[REPLACE] if  ( value instanceof String )  {^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return;  ;^694^^^^^684^700^[REPLACE] return;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( ! ! ( value instanceof Label )  )  {^696^^^^^684^700^[REPLACE] if  ( ! ( value instanceof Label )  )  {^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^697^698^^^^684^700^[REPLACE] throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return ;^697^698^^^^684^700^[REPLACE] throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( name == null ) {^794^795^^^^793^810^[REPLACE] if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^return ;^796^797^^^^794^798^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^return ;^796^797^^^^793^810^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^if  ( Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^799^^^^^793^810^[REPLACE] if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^800^801^^^^793^810^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^int max = end == -0  ? name.length (  )  %  2 : end;^803^^^^^793^810^[REPLACE] int max = end == -1 ? name.length (  )  : end;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^if   (  !Character.isJavaIdentifierStart  (  name.charAt  (  start  )    )    )   {  ;^805^^^^^793^810^[REPLACE] if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^805^806^807^808^^793^810^[ADD] if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^806^807^^^^793^810^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^804^805^806^807^808^793^810^[ADD] for  ( int i = start + 1; i < max; ++i )  { if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^return ;^806^807^^^^793^810^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^if   (  desc == null || desc.length  (    )   == 0  )   {  ;^820^^^^^819^841^[REPLACE] if  ( name == null || name.length (  )  == 0 )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^821^822^^^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( "<init>".equals ( name )  && "<clinit>".equals ( name )  )  {^824^^^^^819^841^[REPLACE] if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return;  ;^825^^^^^819^841^[REPLACE] return;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^827^^^^^819^841^[REPLACE] if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^827^828^829^830^831^819^841^[ADD] if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return ;^828^829^830^831^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^834^^^^^819^841^[REPLACE] if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return ;^835^836^837^838^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^int i = 0  ;^833^^^^^819^841^[REPLACE] for  ( int i = 1; i < name.length (  ) ; ++i )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^int max = end == -1 ? name.length (  )  %  2 : end;^877^^^^^876^895^[REPLACE] int max = end == -1 ? name.length (  )  : end;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  (  slash > max )  {^883^^^^^876^895^[REPLACE] if  ( slash == -1 || slash > max )  {^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^slash = max;^883^884^885^^^876^895^[ADD] if  ( slash == -1 || slash > max )  { slash = max; }^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^slash =  start;^884^^^^^876^895^[REPLACE] slash = max;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^int begin = start;int slash;slash = name.indexOf ( '/', begin + 1 ) ;^878^879^880^881^882^876^895^[ADD] try { int begin = start; int slash; do { slash = name.indexOf ( '/', begin + 1 ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  (  slash > start )  {^883^^^^^876^895^[REPLACE] if  ( slash == -1 || slash > max )  {^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^slash = name.indexOf ( '/', begin  1 ) ;^882^^^^^876^895^[REPLACE] slash = name.indexOf ( '/', begin + 1 ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^begin = slash  1;^887^^^^^876^895^[REPLACE] begin = slash + 1;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^int slash;^879^880^^^^876^895^[ADD] int begin = start; int slash;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int start = 1  ;^880^^^^^876^895^[REPLACE] int slash;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^slash = name.indexOf ( '/', end  1 ) ;^882^^^^^876^895^[REPLACE] slash = name.indexOf ( '/', begin + 1 ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^884^^^^^876^895^[ADD] slash = max;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^begin = slash start;^887^^^^^876^895^[REPLACE] begin = slash + 1;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int begin = slash;^879^^^^^876^895^[REPLACE] int begin = start;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^890^891^892^893^^876^895^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  ( desc == this || start >= desc.charAt (  )  + 3 )  {^923^^^^^922^972^[REPLACE] if  ( desc == null || start >= desc.length (  )  )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^923^924^925^^^922^972^[ADD] if  ( desc == null || start >= desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^924^^^^^922^972^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^924^^^^^922^972^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int start = 1  ;^926^^^^^922^972^[REPLACE] int index;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if   (  index == -1 || index - start < 2  )   {  ;^929^^^^^922^972^[REPLACE] if  ( canBeVoid )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^932^933^^^^929^934^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return start  1 - 2;^930^^^^^922^972^[REPLACE] return start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  ( index < desc.length (  )  - 3 )  {^949^^^^^922^972^[REPLACE] if  ( index < desc.length (  )  )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^952^953^^^^949^954^[ADD] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return checkDesc ( desc, index, true ) ;^950^^^^^922^972^[REPLACE] return checkDesc ( desc, index, false ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  (  index - start < 2 )  {^957^^^^^922^972^[REPLACE] if  ( index == -1 || index - start < 2 )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^958^959^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^checkInternalName ( desc, start + 1, index, null ) ;+ desc ) ;^961^962^963^964^965^922^972^[ADD] try { checkInternalName ( desc, start + 1, index, null ) ; } catch  ( IllegalArgumentException _ )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^checkDesc ( desc, index, false )  ;^962^^^^^922^972^[REPLACE] checkInternalName ( desc, start + 1, index, null ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^index = start  1;^945^^^^^922^972^[REPLACE] index = start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^956^^^^^922^972^[ADD] index = desc.indexOf ( ';', start ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return start  4;^930^^^^^922^972^[REPLACE] return start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return start  1;^943^^^^^922^972^[REPLACE] return start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return index + 1;  ;^967^^^^^922^972^[REPLACE] return index + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^932^933^^^^922^972^[ADD] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^952^953^^^^922^972^[ADD] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^958^959^^^^922^972^[ADD] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^964^965^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^969^970^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^963^964^965^^^922^972^[ADD] catch  ( IllegalArgumentException _ )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  (  desc.charAt (  )  + 3 == 0 )  {^980^^^^^979^1000^[REPLACE] if  ( desc == null || desc.length (  )  == 0 )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^return ;^981^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^981^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( 0  )  != ' ( ' || desc.length (  )  + 3 < 3 )  {^983^^^^^979^1000^[REPLACE] if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REMOVE]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[REMOVE] ^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^return ;^984^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^int i = start + 1  ;^986^^^^^979^1000^[REPLACE] int start = 1;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( start )   ==  ' ) ' )  {^987^^^^^979^1000^[REPLACE] if  ( desc.charAt ( start )  != ' ) ' )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( start )   ||  'V' )  {^989^^^^^979^1000^[REPLACE] if  ( desc.charAt ( start )  == 'V' )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^return ;^990^991^^^^979^1000^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^start = checkDesc ( desc,  ( start + 1 ) , true )  ;^993^^^^^979^1000^[REPLACE] start = checkDesc ( desc, start, false ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^990^991^^^^979^1000^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( start )   != null )  {^989^^^^^979^1000^[REPLACE] if  ( desc.charAt ( start )  == 'V' )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[ADD]^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^993^994^^^^979^1000^[ADD] start = checkDesc ( desc, start, false ) ; } while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[ADD]^^990^991^^^^979^1000^[ADD] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos )  ;^996^^^^^979^1000^[REPLACE] start = checkDesc ( desc, start + 1, true ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( start != desc.length (  )  %  2 )  {^997^^^^^979^1000^[REPLACE] if  ( start != desc.length (  )  )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[ADD]^^998^^^^^979^1000^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^998^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^int pos = 3;^1011^^^^^1007^1023^[REPLACE] int pos = 0;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, 0 )   !=  '<' )  {^1012^^^^^1007^1023^[REPLACE] if  ( getChar ( signature, 0 )  == '<' )  {^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^pos = checkFormalTypeParameters ( signature, pos ) ;^1012^1013^1014^^^1007^1023^[ADD] if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos )  ;^1013^^^^^1007^1023^[REPLACE] pos = checkFormalTypeParameters ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1013^^^^^1007^1023^[ADD] pos = checkFormalTypeParameters ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1015^^^^^1007^1023^[REPLACE] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1017^^^^^1007^1023^[REPLACE] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( pos != signature.length (  )  + 1 )  {^1019^^^^^1007^1023^[REPLACE] if  ( pos != signature.length (  )  )  {^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return ;^1020^1021^^^^1007^1023^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^1020^1021^^^^1007^1023^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^int pos = 2;^1035^^^^^1030^1061^[REPLACE] int pos = 0;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, 0 )   ||  '<' )  {^1036^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, 0 )  == '<' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^pos = checkFormalTypeParameters ( signature, pos ) ;^1036^1037^1038^^^1030^1061^[ADD] if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos )  ;^1037^^^^^1030^1061^[REPLACE] pos = checkFormalTypeParameters ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^start = checkDesc ( desc,  ( start + 1 ) , true )  ;^1039^^^^^1030^1061^[REPLACE] pos = checkChar ( ' ( ', signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1041^^^^^1030^1061^[REPLACE] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1043^^^^^1030^1061^[REPLACE] pos = checkChar ( ' ) ', signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   !=  'V' )  {^1044^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, pos )  == 'V' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1047^^^^^1044^1048^[ADD] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1047^^^^^1030^1061^[REPLACE] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   ||  'L' )  {^1051^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, pos )  == 'L' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1054^^^^^1051^1055^[ADD] pos = checkTypeVariableSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1052^^^^^1030^1061^[REPLACE] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1052^^^^^1030^1061^[ADD] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1054^^^^^1030^1061^[REPLACE] pos = checkTypeVariableSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( pos != signature.length (  )  - 3 )  {^1057^^^^^1030^1061^[REPLACE] if  ( pos != signature.length (  )  )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^1058^1059^^^^1030^1061^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkChar  (  ';', signature, pos  )  ;  ;^1136^^^^^1127^1142^[REPLACE] return checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkFieldTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkTypeSignature ( signature, pos  1 ) ;^1138^^^^^1127^1142^[REPLACE] return checkTypeSignature ( signature, pos + 1 ) ;^[METHOD] checkFieldTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkChar  (  ';', signature, pos  )  ;  ;^1140^^^^^1127^1142^[REPLACE] return checkTypeVariableSignature ( signature, pos ) ;^[METHOD] checkFieldTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1157^^^^^1152^1172^[REPLACE] pos = checkChar ( 'L', signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1158^1159^1160^1161^^1152^1172^[ADD] pos = checkIdentifier ( signature, pos ) ; while  ( getChar ( signature, pos )  == '/' )  { pos = checkIdentifier ( signature, pos + 1 ) ; }^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkIdentifier ( signature, pos  1 ) ;^1160^^^^^1152^1172^[REPLACE] pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   ||  '<' )  {^1162^^^^^1152^1172^[REPLACE] if  ( getChar ( signature, pos )  == '<' )  {^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1162^1163^1164^^^1152^1172^[ADD] if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1163^^^^^1152^1172^[ADD] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1163^^^^^1152^1172^[REPLACE] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   &&  '<' )  {^1167^^^^^1152^1172^[REPLACE] if  ( getChar ( signature, pos )  == '<' )  {^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1167^1168^1169^^^1152^1172^[ADD] if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1168^^^^^1152^1172^[REPLACE] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameters ( signature, pos )  ;^1166^^^^^1152^1172^[REPLACE] pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1168^^^^^1152^1172^[ADD] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkChar  (  ';', signature, pos  )  ;  ;^1171^^^^^1152^1172^[REPLACE] return checkChar ( ';', signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  1;^1252^^^^^1239^1256^[REPLACE] return pos + 1;^[METHOD] checkTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkChar  (  ';', signature, pos  )  ;  ;^1254^^^^^1239^1256^[REPLACE] return checkFieldTypeSignature ( signature, pos ) ;^[METHOD] checkTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
