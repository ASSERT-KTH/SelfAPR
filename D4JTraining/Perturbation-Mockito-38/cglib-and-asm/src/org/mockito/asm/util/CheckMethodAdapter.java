[REPLACE]^private  Map labels;^76^^^^^^^[REPLACE] private final Map labels;^ [CLASS] CheckMethodAdapter  
[REPLACE]^mv.visitLabel ( label ) ;^312^^^^^311^314^[REPLACE] super ( cv ) ;^[METHOD] <init> [TYPE] MethodVisitor) [PARAMETER] MethodVisitor cv [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  [TYPE]  Map labels  [TYPE]  MethodVisitor cv 
[REPLACE]^this.labels ;^313^^^^^311^314^[REPLACE] this.labels = new HashMap (  ) ;^[METHOD] <init> [TYPE] MethodVisitor) [PARAMETER] MethodVisitor cv [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  [TYPE]  Map labels  [TYPE]  MethodVisitor cv 
[REPLACE]^checkConstant ( cst ) ;^320^^^^^316^323^[REPLACE] checkEndMethod (  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels 
[REMOVE]^checkLabel ( label, false, "label" ) ;^320^^^^^316^323^[REMOVE] ^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels 
[REPLACE]^checkDesc ( desc, true ) ;^321^^^^^316^323^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels 
[ADD]^^321^322^^^^316^323^[ADD] checkDesc ( desc, false ) ; return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels 
[REPLACE]^return new CheckAnnotationAdapter ( mv.visitMultiANewArrayInsn ( desc, visible )  ) ;^322^^^^^316^323^[REPLACE] return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^326^^^^^325^328^[REPLACE] checkEndMethod (  ) ;^[METHOD] visitAnnotationDefault [TYPE] AnnotationVisitor [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^326^^^^^325^328^[ADD] checkEndMethod (  ) ;^[METHOD] visitAnnotationDefault [TYPE] AnnotationVisitor [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return new CheckAnnotationAdapter ( mv.visitCode (  ) , false ) ;^327^^^^^325^328^[REPLACE] return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , false ) ;^[METHOD] visitAnnotationDefault [TYPE] AnnotationVisitor [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^335^^^^^330^340^[REPLACE] checkEndMethod (  ) ;^[METHOD] visitParameterAnnotation [TYPE] AnnotationVisitor [PARAMETER] final int parameter String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int parameter 
[REPLACE]^checkDesc ( desc, true ) ;^336^^^^^330^340^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitParameterAnnotation [TYPE] AnnotationVisitor [PARAMETER] final int parameter String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int parameter 
[REPLACE]^return new CheckAnnotationAdapter ( mv .visitAnnotation ( desc , visible )   ) ;^337^338^339^^^330^340^[REPLACE] return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[METHOD] visitParameterAnnotation [TYPE] AnnotationVisitor [PARAMETER] final int parameter String desc final boolean visible [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int parameter 
[REPLACE]^checkConstant ( cst ) ;^343^^^^^342^348^[REPLACE] checkEndMethod (  ) ;^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  Attribute attr 
[REPLACE]^if  ( attr != true )  {^344^^^^^342^348^[REPLACE] if  ( attr == null )  {^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  Attribute attr 
[ADD]^^344^345^346^^^342^348^[ADD] if  ( attr == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  Attribute attr 
[REPLACE]^return ;^345^^^^^342^348^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  Attribute attr 
[ADD]^^345^^^^^342^348^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  Attribute attr 
[REPLACE]^mv.visitLabel ( attr ) ;^347^^^^^342^348^[REPLACE] mv.visitAttribute ( attr ) ;^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  Attribute attr 
[REPLACE]^endCode = true; ;^351^^^^^350^353^[REPLACE] startCode = true;^[METHOD] visitCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^351^^^^^350^353^[ADD] startCode = true;^[METHOD] visitCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^mv .visitEnd (  )  ;^352^^^^^350^353^[REPLACE] mv.visitCode (  ) ;^[METHOD] visitCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^int pos = 0;^362^^^^^361^416^[REPLACE] int mLocal;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^int pos = 0;^363^^^^^361^416^[REPLACE] int mStack;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = Integer.MAX_VALUE; ;^367^^^^^361^416^[REPLACE] mLocal = Integer.MAX_VALUE;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^mStack = Integer.MAX_VALUE;^367^368^^^^361^416^[ADD] mLocal = Integer.MAX_VALUE; mStack = Integer.MAX_VALUE;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = Integer.MAX_VALUE; ;^368^^^^^361^416^[REPLACE] mStack = Integer.MAX_VALUE;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = 1;^372^^^^^361^416^[REPLACE] mLocal = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = 3;^373^^^^^361^416^[REPLACE] mStack = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = 1;^377^^^^^361^416^[REPLACE] mLocal = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = 4;^378^^^^^361^416^[REPLACE] mStack = 1;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mLocal = 0;^383^^^^^361^416^[REPLACE] mLocal = 3;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mStack = 3;^384^^^^^361^416^[REPLACE] mStack = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^384^^^^^361^416^[ADD] mStack = 0;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^388^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nLocal  == nStack )  {^391^^^^^361^416^[REPLACE] if  ( nLocal > mLocal )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^391^392^393^394^^361^416^[ADD] if  ( nLocal > mLocal )  { throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ; }^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^392^393^^^^361^416^[REPLACE] throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^392^393^^^^361^416^[ADD] throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^392^393^^^^361^416^[REPLACE] throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nStack  !=  nStack )  {^395^^^^^361^416^[REPLACE] if  ( nStack > mStack )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^396^397^^^^361^416^[REPLACE] throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^396^397^^^^361^416^[REPLACE] throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^396^397^^^^361^416^[ADD] throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nStack  ==  Opcodes.F_CHOP )  {^400^^^^^361^416^[REPLACE] if  ( type != Opcodes.F_CHOP )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nLocal > 0  &&  ( local == null || local.length /  2 < nLocal )  )  {^401^^^^^361^416^[REPLACE] if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^401^402^403^^^361^416^[ADD] if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^402^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^402^^^^^361^416^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 0; i  ==  nLocal; ++i )  {^404^^^^^361^416^[REPLACE] for  ( int i = 0; i < nLocal; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ;^405^^^^^361^416^[REPLACE] checkFrameValue ( local[i] ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 3; i < nLocal; ++i )  {^404^^^^^361^416^[REPLACE] for  ( int i = 0; i < nLocal; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  (  local.length %  0 .5  < nLocal )  )  {^401^^^^^361^416^[REPLACE] if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^402^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 2; i  >  nLocal; ++i )  {^404^^^^^361^416^[REPLACE] for  ( int i = 0; i < nLocal; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 0 - 0; i < nLocal; ++i )  {^404^^^^^361^416^[REPLACE] for  ( int i = 0; i < nLocal; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^404^405^406^^^361^416^[ADD] for  ( int i = 0; i < nLocal; ++i )  { checkFrameValue ( local[i] ) ; }^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^if  ( nStack > 0  &&  ( stack == null ) {^408^^^^^361^416^[REPLACE] if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REMOVE]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^408^^^^^361^416^[REMOVE] ^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^return ;^409^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^409^^^^^361^416^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 0; i  !=  nStack; ++i )  {^411^^^^^361^416^[REPLACE] for  ( int i = 0; i < nStack; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ;^412^^^^^361^416^[REPLACE] checkFrameValue ( stack[i] ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REMOVE]^pos = checkFormalTypeParameter ( signature, pos ) ;^412^^^^^361^416^[REMOVE] ^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^for  ( int i = 3; i < nStack; ++i )  {^411^^^^^361^416^[REPLACE] for  ( int i = 0; i < nStack; ++i )  {^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[ADD]^^411^412^413^^^361^416^[ADD] for  ( int i = 0; i < nStack; ++i )  { checkFrameValue ( stack[i] ) ; }^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^mv .visitLabel ( this )  ;^415^^^^^361^416^[REPLACE] mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[METHOD] visitFrame [TYPE] void [PARAMETER] final int type final int nLocal Object[] local final int nStack Object[] stack [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  mLocal  mStack  nLocal  nStack  type  [TYPE]  Object[] local  stack 
[REPLACE]^checkConstant ( cst ) ;^419^^^^^418^423^[REPLACE] checkStartCode (  ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^419^^^^^418^423^[ADD] checkStartCode (  ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^420^^^^^418^423^[REPLACE] checkEndCode (  ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REMOVE]^mv.visitLabel ( label ) ;^420^^^^^418^423^[REMOVE] ^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkOpcode ( opcode, 2 ) ;^421^^^^^418^423^[REPLACE] checkOpcode ( opcode, 0 ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^mv.visitLdcInsn ( opcode ) ;^422^^^^^418^423^[REPLACE] mv.visitInsn ( opcode ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^422^^^^^418^423^[ADD] mv.visitInsn ( opcode ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] final int opcode [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^426^^^^^425^444^[REPLACE] checkStartCode (  ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^checkConstant ( cst ) ;^427^^^^^425^444^[REPLACE] checkEndCode (  ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^checkOpcode ( opcode, 1 << 1 ) ;^428^^^^^425^444^[REPLACE] checkOpcode ( opcode, 1 ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^if  (  operand > Opcodes.T_LONG )  {^438^^^^^425^444^[REPLACE] if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^return ;^439^440^^^^425^444^[REPLACE] throw new IllegalArgumentException  (" ")  : " + operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^439^440^^^^425^444^[REPLACE] throw new IllegalArgumentException  (" ")  : " + operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[ADD]^^439^440^^^^425^444^[ADD] throw new IllegalArgumentException  (" ")  : " + operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^mv.visitIincInsn ( opcode, operand ) ;^443^^^^^425^444^[REPLACE] mv.visitIntInsn ( opcode, operand ) ;^[METHOD] visitIntInsn [TYPE] void [PARAMETER] final int opcode final int operand [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  operand 
[REPLACE]^checkConstant ( cst ) ;^447^^^^^446^452^[REPLACE] checkStartCode (  ) ;^[METHOD] visitVarInsn [TYPE] void [PARAMETER] final int opcode final int var [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  var 
[REPLACE]^checkConstant ( cst ) ;^448^^^^^446^452^[REPLACE] checkEndCode (  ) ;^[METHOD] visitVarInsn [TYPE] void [PARAMETER] final int opcode final int var [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  var 
[REPLACE]^checkOpcode ( opcode, 3 ) ;^449^^^^^446^452^[REPLACE] checkOpcode ( opcode, 2 ) ;^[METHOD] visitVarInsn [TYPE] void [PARAMETER] final int opcode final int var [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  var 
[REPLACE]^checkUnsignedShort ( index, "Invalid variable index" ) ;^450^^^^^446^452^[REPLACE] checkUnsignedShort ( var, "Invalid variable index" ) ;^[METHOD] visitVarInsn [TYPE] void [PARAMETER] final int opcode final int var [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  var 
[REPLACE]^mv.visitIntInsn ( opcode, var ) ;^451^^^^^446^452^[REPLACE] mv.visitVarInsn ( opcode, var ) ;^[METHOD] visitVarInsn [TYPE] void [PARAMETER] final int opcode final int var [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  var 
[ADD]^^451^^^^^446^452^[ADD] mv.visitVarInsn ( opcode, var ) ;^[METHOD] visitVarInsn [TYPE] void [PARAMETER] final int opcode final int var [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  var 
[REPLACE]^checkConstant ( cst ) ;^455^^^^^454^464^[REPLACE] checkStartCode (  ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^456^^^^^454^464^[REPLACE] checkEndCode (  ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^456^^^^^454^464^[ADD] checkEndCode (  ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkOpcode ( opcode, 5 ) ;^457^^^^^454^464^[REPLACE] checkOpcode ( opcode, 3 ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^checkInternalName ( type, "type" ) ;^457^458^^^^454^464^[ADD] checkOpcode ( opcode, 3 ) ; checkInternalName ( type, "type" ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ;^458^^^^^454^464^[REPLACE] checkInternalName ( type, "type" ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^if  ( opcode == Opcodes.NEW || type.charAt ( 0 >>> 4 )  == '[' )  {^459^^^^^454^464^[REPLACE] if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^460^461^^^^454^464^[REPLACE] throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^return ;^460^461^^^^454^464^[REPLACE] throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^mv .visitInsn ( opcode )  ;^463^^^^^454^464^[REPLACE] mv.visitTypeInsn ( opcode, type ) ;^[METHOD] visitTypeInsn [TYPE] void [PARAMETER] final int opcode String type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^472^^^^^466^479^[REPLACE] checkStartCode (  ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^473^^^^^466^479^[REPLACE] checkEndCode (  ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkOpcode ( opcode, 4 >>> 1 ) ;^474^^^^^466^479^[REPLACE] checkOpcode ( opcode, 4 ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkInternalName ( name, "owner" ) ;^475^^^^^466^479^[REPLACE] checkInternalName ( owner, "owner" ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^checkIdentifier ( name, "name" ) ;^475^476^^^^466^479^[ADD] checkInternalName ( owner, "owner" ) ; checkIdentifier ( name, "name" ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkIdentifier ( owner, "name" ) ;^476^^^^^466^479^[REPLACE] checkIdentifier ( name, "name" ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^476^477^478^479^^466^479^[ADD] checkIdentifier ( name, "name" ) ; checkDesc ( desc, false ) ; mv.visitFieldInsn ( opcode, owner, name, desc ) ; }^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkDesc ( desc, true ) ;^477^^^^^466^479^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^mv .visitIntInsn ( opcode , opcode )  ;^478^^^^^466^479^[REPLACE] mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^478^^^^^466^479^[ADD] mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[METHOD] visitFieldInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^487^^^^^481^494^[REPLACE] checkStartCode (  ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^488^^^^^481^494^[REPLACE] checkEndCode (  ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkOpcode ( opcode, 4 ) ;^489^^^^^481^494^[REPLACE] checkOpcode ( opcode, 5 ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkMethodIdentifier ( owner, "name" ) ;^490^^^^^481^494^[REPLACE] checkMethodIdentifier ( name, "name" ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkInternalName ( name, "owner" ) ;^491^^^^^481^494^[REPLACE] checkInternalName ( owner, "owner" ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkLabel ( label, false, "label" ) ;^492^^^^^481^494^[REPLACE] checkMethodDesc ( desc ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^492^^^^^481^494^[ADD] checkMethodDesc ( desc ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^mv.visitMethodInsn ( opcode, owner, owner, desc ) ;^493^^^^^481^494^[REPLACE] mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^493^^^^^481^494^[ADD] mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] final int opcode String owner String name String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  owner  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^497^^^^^496^502^[REPLACE] checkStartCode (  ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^498^^^^^496^502^[REPLACE] checkEndCode (  ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkOpcode ( opcode, 2 ) ;^499^^^^^496^502^[REPLACE] checkOpcode ( opcode, 6 ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkLabel ( label, true, "label" ) ;^500^^^^^496^502^[REPLACE] checkLabel ( label, false, "label" ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^500^^^^^496^502^[ADD] checkLabel ( label, false, "label" ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^mv.visitLineNumber ( opcode, label ) ;^501^^^^^496^502^[REPLACE] mv.visitJumpInsn ( opcode, label ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[ADD]^^501^^^^^496^502^[ADD] mv.visitJumpInsn ( opcode, label ) ;^[METHOD] visitJumpInsn [TYPE] void [PARAMETER] final int opcode Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode 
[REPLACE]^checkConstant ( cst ) ;^505^^^^^504^513^[REPLACE] checkStartCode (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^506^^^^^504^513^[REPLACE] checkEndCode (  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkLabel ( label, true, "label" ) ;^507^^^^^504^513^[REPLACE] checkLabel ( label, false, "label" ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( labels.get ( label )  == false )  {^508^^^^^504^513^[REPLACE] if  ( labels.get ( label )  != null )  {^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^509^^^^^504^513^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^509^^^^^504^513^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^labels .get ( null )   ) ;^511^^^^^504^513^[REPLACE] labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkLabel ( label, false, "label" ) ;^511^^^^^504^513^[REPLACE] labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REMOVE]^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^511^^^^^504^513^[REMOVE] ^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^mv.visitAttribute ( label ) ;^512^^^^^504^513^[REPLACE] mv.visitLabel ( label ) ;^[METHOD] visitLabel [TYPE] void [PARAMETER] Label label [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^516^^^^^515^522^[REPLACE] checkStartCode (  ) ;^[METHOD] visitLdcInsn [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^517^^^^^515^522^[REPLACE] checkEndCode (  ) ;^[METHOD] visitLdcInsn [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( ! ! ( cst instanceof Type )  )  {^518^^^^^515^522^[REPLACE] if  ( ! ( cst instanceof Type )  )  {^[METHOD] visitLdcInsn [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^518^519^520^^^515^522^[ADD] if  ( ! ( cst instanceof Type )  )  { checkConstant ( cst ) ; }^[METHOD] visitLdcInsn [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkOpcode ( opcode, 4 ) ;^519^^^^^515^522^[REPLACE] checkConstant ( cst ) ;^[METHOD] visitLdcInsn [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^mv.visitInsn ( cst ) ;^521^^^^^515^522^[REPLACE] mv.visitLdcInsn ( cst ) ;^[METHOD] visitLdcInsn [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^525^^^^^524^530^[REPLACE] checkStartCode (  ) ;^[METHOD] visitIincInsn [TYPE] void [PARAMETER] final int var final int increment [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int increment  var 
[REPLACE]^checkConstant ( cst ) ;^526^^^^^524^530^[REPLACE] checkEndCode (  ) ;^[METHOD] visitIincInsn [TYPE] void [PARAMETER] final int var final int increment [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int increment  var 
[REMOVE]^mv.visitLabel ( label ) ;^526^^^^^524^530^[REMOVE] ^[METHOD] visitIincInsn [TYPE] void [PARAMETER] final int var final int increment [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int increment  var 
[REPLACE]^checkUnsignedShort ( increment, "Invalid variable index" ) ;^527^^^^^524^530^[REPLACE] checkUnsignedShort ( var, "Invalid variable index" ) ;^[METHOD] visitIincInsn [TYPE] void [PARAMETER] final int var final int increment [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int increment  var 
[REPLACE]^checkSignedShort ( var, "Invalid increment" ) ;^528^^^^^524^530^[REPLACE] checkSignedShort ( increment, "Invalid increment" ) ;^[METHOD] visitIincInsn [TYPE] void [PARAMETER] final int var final int increment [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int increment  var 
[REPLACE]^mv.visitIntInsn ( var, increment ) ;^529^^^^^524^530^[REPLACE] mv.visitIincInsn ( var, increment ) ;^[METHOD] visitIincInsn [TYPE] void [PARAMETER] final int var final int increment [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int increment  var 
[REPLACE]^checkConstant ( cst ) ;^538^^^^^532^552^[REPLACE] checkStartCode (  ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkConstant ( cst ) ;^539^^^^^532^552^[REPLACE] checkEndCode (  ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^if  ( max  ==  min )  {^540^^^^^532^552^[REPLACE] if  ( max < min )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^541^542^^^^532^552^[REPLACE] throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkLabel ( dflt, true, "default label" ) ;^544^^^^^532^552^[REPLACE] checkLabel ( dflt, false, "default label" ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[ADD]^^544^^^^^532^552^[ADD] checkLabel ( dflt, false, "default label" ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^if  (  labels.length *  2 != max - min + 1 )  {^545^^^^^532^552^[REPLACE] if  ( labels == null || labels.length != max - min + 1 )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^return ;^546^^^^^532^552^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^546^^^^^532^552^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^for  ( int i = 0 ; i < labels.length *  0 .5 ; ++i )  {^548^^^^^532^552^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[ADD]^^548^549^550^^^532^552^[ADD] for  ( int i = 0; i < labels.length; ++i )  { checkLabel ( labels[i], false, "label at index " + i ) ; }^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkLabel ( labels[min], true, 0 + i ) ;^549^^^^^532^552^[REPLACE] checkLabel ( labels[i], false, "label at index " + i ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^for  ( int i = 0 ; i < labels.length; ++i )  {^548^^^^^532^552^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^mv.visitTryCatchBlock ( min, max, dflt, labels ) ;^551^^^^^532^552^[REPLACE] mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[ADD]^^551^^^^^532^552^[ADD] mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[METHOD] visitTableSwitchInsn [TYPE] void [PARAMETER] final int min final int max Label dflt Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i  max  min 
[REPLACE]^checkConstant ( cst ) ;^559^^^^^554^569^[REPLACE] checkEndCode (  ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^checkConstant ( cst ) ;^560^^^^^554^569^[REPLACE] checkStartCode (  ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^checkLabel ( dflt, true, "default label" ) ;^561^^^^^554^569^[REPLACE] checkLabel ( dflt, false, "default label" ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^561^^^^^554^569^[ADD] checkLabel ( dflt, false, "default label" ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( keys == false || labels == false || keys.length - 5 != labels.length - 5 )  {^562^^^^^554^569^[REPLACE] if  ( keys == null || labels == null || keys.length != labels.length )  {^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REMOVE]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^562^^^^^554^569^[REMOVE] ^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^563^^^^^554^569^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < labels.length - 2; ++i )  {^565^^^^^554^569^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^checkLabel ( labels[i], false, "label at index "  <=  i ) ;^566^^^^^554^569^[REPLACE] checkLabel ( labels[i], false, "label at index " + i ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^566^^^^^554^569^[ADD] checkLabel ( labels[i], false, "label at index " + i ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < labels.length; ++i )  {^565^^^^^554^569^[REPLACE] for  ( int i = 0; i < labels.length; ++i )  {^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^mv.visitParameterAnnotation ( dflt, keys, labels ) ;^568^^^^^554^569^[REPLACE] mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[METHOD] visitLookupSwitchInsn [TYPE] void [PARAMETER] Label dflt final int[] keys Label[] labels [CLASS] CheckMethodAdapter   [TYPE]  Label dflt  [TYPE]  int[] TYPE  keys  [TYPE]  Label[] labels  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^checkConstant ( cst ) ;^572^^^^^571^588^[REPLACE] checkStartCode (  ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^checkConstant ( cst ) ;^573^^^^^571^588^[REPLACE] checkEndCode (  ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REMOVE]^mv.visitLabel ( label ) ;^573^^^^^571^588^[REMOVE] ^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^checkDesc ( desc, true ) ;^574^^^^^571^588^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^574^^^^^571^588^[ADD] checkDesc ( desc, false ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^if  ( desc.charAt ( 1 )   ==  '[' )  {^575^^^^^571^588^[REPLACE] if  ( desc.charAt ( 0 )  != '[' )  {^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^575^576^577^578^^571^588^[ADD] if  ( desc.charAt ( 0 )  != '[' )  { throw new IllegalArgumentException  (" ")  : " + desc ) ; }^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^return ;^576^577^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + desc ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^576^577^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + desc ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^if  ( dims  ==  1 >> 1 )  {^579^^^^^571^588^[REPLACE] if  ( dims < 1 )  {^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^579^580^581^582^^571^588^[ADD] if  ( dims < 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^580^581^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^if  ( dims  <  desc.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^[REPLACE] if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[ADD]^^583^584^585^586^^571^588^[ADD] if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^584^585^^^^571^588^[REPLACE] throw new IllegalArgumentException  (" ")  : " + dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^mv.visitAnnotation ( desc, dims ) ;^587^^^^^571^588^[REPLACE] mv.visitMultiANewArrayInsn ( desc, dims ) ;^[METHOD] visitMultiANewArrayInsn [TYPE] void [PARAMETER] String desc final int dims [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int dims 
[REPLACE]^checkConstant ( cst ) ;^596^^^^^590^602^[REPLACE] checkStartCode (  ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[ADD]^^596^597^^^^590^602^[ADD] checkStartCode (  ) ; checkEndCode (  ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^597^^^^^590^602^[REPLACE] checkEndCode (  ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[REPLACE]^if  ( type == false )  {^598^^^^^590^602^[REPLACE] if  ( type != null )  {^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ;^599^^^^^590^602^[REPLACE] checkInternalName ( type, "type" ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[ADD]^^599^^^^^590^602^[ADD] checkInternalName ( type, "type" ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[REPLACE]^mv.visitTryCatchBlock ( start, handler, handler, type ) ;^601^^^^^590^602^[REPLACE] mv.visitTryCatchBlock ( start, end, handler, type ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[ADD]^^601^^^^^590^602^[ADD] mv.visitTryCatchBlock ( start, end, handler, type ) ;^[METHOD] visitTryCatchBlock [TYPE] void [PARAMETER] Label start Label end Label handler String type [CLASS] CheckMethodAdapter   [TYPE]  Label end  handler  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String type  [TYPE]  Map labels 
[REPLACE]^checkConstant ( cst ) ;^612^^^^^604^625^[REPLACE] checkStartCode (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkConstant ( cst ) ;^613^^^^^604^625^[REPLACE] checkEndCode (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[ADD]^^613^614^^^^604^625^[ADD] checkEndCode (  ) ; checkIdentifier ( name, "name" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkIdentifier ( signature, "name" ) ;^614^^^^^604^625^[REPLACE] checkIdentifier ( name, "name" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkDesc ( desc, true ) ;^615^^^^^604^625^[REPLACE] checkDesc ( desc, false ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REMOVE]^checkLabel ( label, false, "label" ) ;^615^^^^^604^625^[REMOVE] ^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkLabel ( start, false, "start label" ) ;^616^^^^^604^625^[REPLACE] checkLabel ( start, true, "start label" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkLabel ( end, false, "end label" ) ;^617^^^^^604^625^[REPLACE] checkLabel ( end, true, "end label" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkUnsignedShort ( var, "Invalid variable index" ) ;^618^^^^^604^625^[REPLACE] checkUnsignedShort ( index, "Invalid variable index" ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^619^^^^^604^625^[REPLACE] int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^620^^^^^604^625^[REPLACE] int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^if  (index  >=  s )  {^621^^^^^604^625^[REPLACE] if  ( e < s )  {^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[ADD]^^621^622^623^^^604^625^[ADD] if  ( e < s )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^622^^^^^604^625^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^mv .visitAttribute ( null )  ;^624^^^^^604^625^[REPLACE] mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[METHOD] visitLocalVariable [TYPE] void [PARAMETER] String name String desc String signature Label start Label end final int index [CLASS] CheckMethodAdapter   [TYPE]  Label end  start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  name  signature  [TYPE]  Map labels  [TYPE]  int e  index  s 
[REPLACE]^checkConstant ( cst ) ;^628^^^^^627^633^[REPLACE] checkStartCode (  ) ;^[METHOD] visitLineNumber [TYPE] void [PARAMETER] final int line Label start [CLASS] CheckMethodAdapter   [TYPE]  Label start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int line 
[REPLACE]^checkConstant ( cst ) ;^629^^^^^627^633^[REPLACE] checkEndCode (  ) ;^[METHOD] visitLineNumber [TYPE] void [PARAMETER] final int line Label start [CLASS] CheckMethodAdapter   [TYPE]  Label start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int line 
[REPLACE]^checkLabel ( label, false, "label" ) ;^630^^^^^627^633^[REPLACE] checkUnsignedShort ( line, "Invalid line number" ) ;^[METHOD] visitLineNumber [TYPE] void [PARAMETER] final int line Label start [CLASS] CheckMethodAdapter   [TYPE]  Label start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int line 
[REPLACE]^checkLabel ( start, false, "start label" ) ;^631^^^^^627^633^[REPLACE] checkLabel ( start, true, "start label" ) ;^[METHOD] visitLineNumber [TYPE] void [PARAMETER] final int line Label start [CLASS] CheckMethodAdapter   [TYPE]  Label start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int line 
[REPLACE]^mv.visitJumpInsn ( line, start ) ;^632^^^^^627^633^[REPLACE] mv.visitLineNumber ( line, start ) ;^[METHOD] visitLineNumber [TYPE] void [PARAMETER] final int line Label start [CLASS] CheckMethodAdapter   [TYPE]  Label start  [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int line 
[REPLACE]^checkConstant ( cst ) ;^636^^^^^635^642^[REPLACE] checkStartCode (  ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[REPLACE]^checkConstant ( cst ) ;^637^^^^^635^642^[REPLACE] checkEndCode (  ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[REPLACE]^endCode = false;^638^^^^^635^642^[REPLACE] endCode = true;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[REPLACE]^checkUnsignedShort ( maxLocals, "Invalid max stack" ) ;^639^^^^^635^642^[REPLACE] checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[ADD]^^639^640^^^^635^642^[ADD] checkUnsignedShort ( maxStack, "Invalid max stack" ) ; checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[REPLACE]^checkLabel ( label, false, "label" ) ;^640^^^^^635^642^[REPLACE] checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[REPLACE]^mv.visitVarInsn ( maxStack, maxLocals ) ;^641^^^^^635^642^[REPLACE] mv.visitMaxs ( maxStack, maxLocals ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] final int maxStack final int maxLocals [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int maxLocals  maxStack 
[REPLACE]^checkConstant ( cst ) ;^645^^^^^644^648^[REPLACE] checkEndMethod (  ) ;^[METHOD] visitEnd [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^endMethod = false;^646^^^^^644^648^[REPLACE] endMethod = true;^[METHOD] visitEnd [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^mv.visitCode (  ) ;^647^^^^^644^648^[REPLACE] mv.visitEnd (  ) ;^[METHOD] visitEnd [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( startCode )  {^656^^^^^655^659^[REPLACE] if  ( !startCode )  {^[METHOD] checkStartCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return ;^657^^^^^655^659^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] checkStartCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException  (" ")  : " + operand ) ; ;^657^^^^^655^659^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] checkStartCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^657^^^^^655^659^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] checkStartCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( index == -1 || index - start < 2 )  {^665^^^^^664^668^[REPLACE] if  ( endCode )  {^[METHOD] checkEndCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REMOVE]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^665^^^^^664^668^[REMOVE] ^[METHOD] checkEndCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException  (" ")  : " + operand ) ; ;^666^^^^^664^668^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] checkEndCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^666^^^^^664^668^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] checkEndCode [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( index == -1 || index - start < 2 )  {^674^^^^^673^677^[REPLACE] if  ( endMethod )  {^[METHOD] checkEndMethod [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^674^675^676^^^673^677^[ADD] if  ( endMethod )  { throw new IllegalStateException  (" ")  ; }^[METHOD] checkEndMethod [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException  (" ")  : " + operand ) ; ;^675^^^^^673^677^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] checkEndMethod [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^675^^^^^673^677^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] checkEndMethod [TYPE] void [PARAMETER] [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( value == Opcodes.TOP && value == Opcodes.INTEGER && value == Opcodes.FLOAT && value == Opcodes.LONG && value == Opcodes.DOUBLE && value == Opcodes.NULL && value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^[REPLACE] if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return pos;^690^^^^^684^700^[REPLACE] return;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( ! value instanceof String )  {^692^^^^^684^700^[REPLACE] if  ( value instanceof String )  {^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return pos;^694^^^^^684^700^[REPLACE] return;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( ! ! ( value instanceof Label )  )  {^696^^^^^684^700^[REPLACE] if  ( ! ( value instanceof Label )  )  {^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^696^697^698^699^^684^700^[ADD] if  ( ! ( value instanceof Label )  )  { throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ; }^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^return ;^697^698^^^^684^700^[REPLACE] throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^697^698^^^^684^700^[REPLACE] throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[METHOD] checkFrameValue [TYPE] void [PARAMETER] Object value [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object value  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^if  ( opcode < 2 && opcode > 199 && TYPE[opcode] != type )  {^709^^^^^708^712^[REPLACE] if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[METHOD] checkOpcode [TYPE] void [PARAMETER] final int opcode final int type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  type 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^710^^^^^708^712^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkOpcode [TYPE] void [PARAMETER] final int opcode final int type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  type 
[REPLACE]^return ;^710^^^^^708^712^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkOpcode [TYPE] void [PARAMETER] final int opcode final int type [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels  [TYPE]  int opcode  type 
[REPLACE]^if  ( value < Byte.MIN_VALUE && value > Byte.MAX_VALUE )  {^721^^^^^720^725^[REPLACE] if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[METHOD] checkSignedByte [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REMOVE]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^721^^^^^720^725^[REMOVE] ^[METHOD] checkSignedByte [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^722^723^^^^720^725^[REPLACE] throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[METHOD] checkSignedByte [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REPLACE]^if  ( value < Short.MIN_VALUE ) {^734^^^^^733^738^[REPLACE] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[METHOD] checkSignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[ADD]^^734^735^736^737^^733^738^[ADD] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  { throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ; }^[METHOD] checkSignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REPLACE]^return ;^735^736^^^^733^738^[REPLACE] throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[METHOD] checkSignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[ADD]^^735^736^^^^733^738^[ADD] throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[METHOD] checkSignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REPLACE]^if  (visible ) {^747^^^^^746^751^[REPLACE] if  ( value < 0 || value > 65535 )  {^[METHOD] checkUnsignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[ADD]^^747^748^749^750^^746^751^[ADD] if  ( value < 0 || value > 65535 )  { throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ; }^[METHOD] checkUnsignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^748^749^^^^746^751^[REPLACE] throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[METHOD] checkUnsignedShort [TYPE] void [PARAMETER] final int value String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels  [TYPE]  int value 
[REPLACE]^if  ( ! ! ( cst instanceof Integer )  ) {^760^761^762^763^^759^766^[REPLACE] if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[METHOD] checkConstant [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^760^761^762^763^764^759^766^[ADD] if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) { throw new IllegalArgumentException  (" ")  ;^[METHOD] checkConstant [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^764^^^^^759^766^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkConstant [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[ADD]^^764^^^^^759^766^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkConstant [TYPE] void [PARAMETER] Object cst [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  Object cst  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  Map labels 
[REPLACE]^checkIdentifier ( name, 1, -1, msg ) ;^775^^^^^774^776^[REPLACE] checkIdentifier ( name, 0, -1, msg ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[REPLACE]^if  (   ( end == -1 ? name.charAt (  )  /  0.5  <= max : end <= start )  ) {^794^795^^^^788^810^[REPLACE] if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^794^795^796^797^798^788^810^[ADD] if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^return ;^796^797^^^^788^810^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^796^797^^^^788^810^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^if  ( Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^799^^^^^788^810^[REPLACE] if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^799^800^801^802^^788^810^[ADD] if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^800^801^^^^788^810^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^800^801^^^^788^810^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^int max = end == -1 ? name.length (  )  *  0.5  : end;^803^^^^^788^810^[REPLACE] int max = end == -1 ? name.length (  )  : end;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^803^^^^^788^810^[ADD] int max = end == -1 ? name.length (  )  : end;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^if  ( Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^805^^^^^788^810^[REPLACE] if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^805^806^807^808^^788^810^[ADD] if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^806^807^^^^788^810^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^806^807^^^^788^810^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^for  ( int i = start  <  1; i < max;  <  < i )  {^804^^^^^788^810^[REPLACE] for  ( int i = start + 1; i < max; ++i )  {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[ADD]^^804^805^806^807^808^788^810^[ADD] for  ( int i = start + 1; i < max; ++i )  { if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^for  ( int i =max + 1; i < max; ++i )  {^804^^^^^788^810^[REPLACE] for  ( int i = start + 1; i < max; ++i )  {^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^return ;^806^807^^^^788^810^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[METHOD] checkIdentifier [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int end  i  max  start 
[REPLACE]^if  ( name == null ) {^820^^^^^819^841^[REPLACE] if  ( name == null || name.length (  )  == 0 )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^820^821^822^823^^819^841^[ADD] if  ( name == null || name.length (  )  == 0 )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return ;^821^822^^^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^821^822^^^^819^841^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^821^822^^^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  (  "<clinit>".equals ( name )  )  {^824^^^^^819^841^[REPLACE] if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return pos;^825^^^^^819^841^[REPLACE] return;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^827^^^^^819^841^[REPLACE] if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^828^829^830^831^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^828^829^830^^^819^841^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : "^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return ;^828^829^830^831^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( Character.isJavaIdentifierStart ( name.charAt ( i )  )  )  {^834^^^^^819^841^[REPLACE] if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^835^836^837^838^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < name.length (  )  /  0.5 ; ++i )  {^833^^^^^819^841^[REPLACE] for  ( int i = 1; i < name.length (  ) ; ++i )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[ADD]^^833^834^835^836^837^819^841^[ADD] for  ( int i = 1; i < name.length (  ) ; ++i )  { if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : "^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < name.length (  ) ; ++i )  {^833^^^^^819^841^[REPLACE] for  ( int i = 1; i < name.length (  ) ; ++i )  {^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^return ;^835^836^837^838^^819^841^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[METHOD] checkMethodIdentifier [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int i 
[REPLACE]^if  ( name == null || name.size (  )  == 0 )  {^850^^^^^849^859^[REPLACE] if  ( name == null || name.length (  )  == 0 )  {^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[ADD]^^850^851^852^853^^849^859^[ADD] if  ( name == null || name.length (  )  == 0 )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[REPLACE]^return ;^851^852^^^^849^859^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[ADD]^^851^852^^^^849^859^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[REPLACE]^if  ( name.charAt ( 0 )   &&  '[' )  {^854^^^^^849^859^[REPLACE] if  ( name.charAt ( 0 )  == '[' )  {^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[ADD]^^854^855^856^857^858^849^859^[ADD] if  ( name.charAt ( 0 )  == '[' )  { checkDesc ( name, false ) ; } else { checkInternalName ( name, 0, -1, msg ) ; }^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[REPLACE]^checkInternalName ( name, 1, -1, msg ) ;^857^^^^^849^859^[REPLACE] checkInternalName ( name, 0, -1, msg ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[REPLACE]^checkDesc ( name, true ) ;^855^^^^^849^859^[REPLACE] checkDesc ( name, false ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[ADD]^^855^^^^^849^859^[ADD] checkDesc ( name, false ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels 
[REPLACE]^int max = end == -0  ? name.size (  )  : end;^877^^^^^871^895^[REPLACE] int max = end == -1 ? name.length (  )  : end;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  (  slash > max )  {^883^^^^^871^895^[REPLACE] if  ( slash == -1 || slash > max )  {^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^slash =  start;^884^^^^^871^895^[REPLACE] slash = max;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^int begin = start;int slash;slash = name.indexOf ( '/', begin + 1 ) ;^878^879^880^881^882^871^895^[ADD] try { int begin = start; int slash; do { slash = name.indexOf ( '/', begin + 1 ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  ( visible )  {^883^^^^^871^895^[REPLACE] if  ( slash == -1 || slash > max )  {^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^slash = max;^883^884^885^^^871^895^[ADD] if  ( slash == -1 || slash > max )  { slash = max; }^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^slash = name.indexOf ( '/', end + 1 ) ;^882^^^^^871^895^[REPLACE] slash = name.indexOf ( '/', begin + 1 ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^begin =start + 1;^887^^^^^871^895^[REPLACE] begin = slash + 1;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int begin = slash;^879^^^^^871^895^[REPLACE] int begin = start;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^879^880^^^^871^895^[ADD] int begin = start; int slash;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int pos = 0;^880^^^^^871^895^[REPLACE] int slash;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^slash = name.indexOf ( '/',end + 1 ) ;^882^^^^^871^895^[REPLACE] slash = name.indexOf ( '/', begin + 1 ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^begin = start + 1;^887^^^^^871^895^[REPLACE] begin = slash + 1;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^890^891^892^893^^871^895^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[METHOD] checkInternalName [TYPE] void [PARAMETER] String name final int start final int end String msg [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  name  [TYPE]  Map labels  [TYPE]  int begin  end  max  slash  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int end = checkDesc ( desc, 0 + 0, canBeVoid ) ;^904^^^^^903^908^[REPLACE] int end = checkDesc ( desc, 0, canBeVoid ) ;^[METHOD] checkDesc [TYPE] void [PARAMETER] String desc final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int end 
[ADD]^^904^^^^^903^908^[ADD] int end = checkDesc ( desc, 0, canBeVoid ) ;^[METHOD] checkDesc [TYPE] void [PARAMETER] String desc final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int end 
[REPLACE]^if  ( end != desc.size (  )  )  {^905^^^^^903^908^[REPLACE] if  ( end != desc.length (  )  )  {^[METHOD] checkDesc [TYPE] void [PARAMETER] String desc final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int end 
[ADD]^^905^906^907^^^903^908^[ADD] if  ( end != desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] checkDesc [TYPE] void [PARAMETER] String desc final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int end 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^906^^^^^903^908^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkDesc [TYPE] void [PARAMETER] String desc final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int end 
[REPLACE]^if  ( desc == null || start >= desc.length (  )  /  0.5  )  {^923^^^^^922^972^[REPLACE] if  ( desc == null || start >= desc.length (  )  )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^924^^^^^922^972^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^924^^^^^922^972^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^int pos = 0;^926^^^^^922^972^[REPLACE] int index;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^while  ( index < desc.length (  )  %  0.5  && desc.charAt ( index )  == '[' )  {^946^^^^^922^972^[REPLACE] while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  ( index == -1 || index - start < 2 )  {^929^^^^^922^972^[REPLACE] if  ( canBeVoid )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^929^930^931^932^933^922^972^[ADD] if  ( canBeVoid )  { return start + 1; } else { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^932^933^^^^929^934^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^^932^933^^^^929^934^[ADD] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return true ;^930^^^^^922^972^[REPLACE] return start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  ( index < desc.size (  )  )  {^949^^^^^922^972^[REPLACE] if  ( index < desc.length (  )  )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^952^953^^^^949^954^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return checkDesc ( desc, index, true ) ;^950^^^^^922^972^[REPLACE] return checkDesc ( desc, index, false ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  (  index - start < 2 )  {^957^^^^^922^972^[REPLACE] if  ( index == -1 || index - start < 2 )  {^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^958^959^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[ADD]^checkInternalName ( desc, start + 1, index, null ) ;+ desc ) ;^961^962^963^964^965^922^972^[ADD] try { checkInternalName ( desc, start + 1, index, null ) ; } catch  ( IllegalArgumentException _ )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^checkInternalName ( desc, start  |  1, index, null ) ;^962^^^^^922^972^[REPLACE] checkInternalName ( desc, start + 1, index, null ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^index = start  >  1;^945^^^^^922^972^[REPLACE] index = start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^index =  null.indexOf ( ';', start ) ;^956^^^^^922^972^[REPLACE] index = desc.indexOf ( ';', start ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return false ;^930^^^^^922^972^[REPLACE] return start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return start  ;^943^^^^^922^972^[REPLACE] return start + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return index  &&  1 + 4;^967^^^^^922^972^[REPLACE] return index + 1;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^932^933^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^952^953^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^return ;^964^965^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^969^970^^^^922^972^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkDesc [TYPE] int [PARAMETER] String desc final int start final boolean canBeVoid [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int index  start  [TYPE]  IllegalArgumentException _ 
[REPLACE]^if  ( desc == this || desc.charAt (  )  + 2 == 0 )  {^980^^^^^979^1000^[REPLACE] if  ( desc == null || desc.length (  )  == 0 )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[ADD]^^980^981^982^^^979^1000^[ADD] if  ( desc == null || desc.length (  )  == 0 )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^return ;^981^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^981^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[ADD]^^981^^^^^979^1000^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( 0  )  != ' ( ' ) {^983^^^^^979^1000^[REPLACE] if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^984^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^return ;^984^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^int start = 1 % 4;^986^^^^^979^1000^[REPLACE] int start = 1;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( start )   ==  ' ) ' )  {^987^^^^^979^1000^[REPLACE] if  ( desc.charAt ( start )  != ' ) ' )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( desc.charAt ( start )   &&  'V' )  {^989^^^^^979^1000^[REPLACE] if  ( desc.charAt ( start )  == 'V' )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^990^991^^^^979^1000^[REPLACE] throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^start = checkDesc ( desc, start, true ) ;^993^^^^^979^1000^[REPLACE] start = checkDesc ( desc, start, false ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[ADD]^^993^^^^^979^1000^[ADD] start = checkDesc ( desc, start, false ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^start = checkDesc ( desc, start  >=  1, true ) ;^996^^^^^979^1000^[REPLACE] start = checkDesc ( desc, start + 1, true ) ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^if  ( start != desc.length (  )  + 2 )  {^997^^^^^979^1000^[REPLACE] if  ( start != desc.length (  )  )  {^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^998^^^^^979^1000^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkMethodDesc [TYPE] void [PARAMETER] String desc [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String desc  [TYPE]  Map labels  [TYPE]  int start 
[REPLACE]^int pos = 2;^1011^^^^^1007^1023^[REPLACE] int pos = 0;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, 3 )   ||  '<' )  {^1012^^^^^1007^1023^[REPLACE] if  ( getChar ( signature, 0 )  == '<' )  {^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^pos = checkFormalTypeParameters ( signature, pos ) ;^1012^1013^1014^^^1007^1023^[ADD] if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1013^^^^^1007^1023^[REPLACE] pos = checkFormalTypeParameters ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1015^^^^^1007^1023^[REPLACE] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   &&  'L' )  {^1016^^^^^1007^1023^[REPLACE] while  ( getChar ( signature, pos )  == 'L' )  {^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1017^^^^^1007^1023^[REPLACE] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( pos != signature.size (  )  )  {^1019^^^^^1007^1023^[REPLACE] if  ( pos != signature.length (  )  )  {^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1020^1021^^^^1007^1023^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkClassSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^int pos = 3;^1035^^^^^1030^1061^[REPLACE] int pos = 0;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1035^^^^^1030^1061^[ADD] int pos = 0;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, 0 )   !=  '<' )  {^1036^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, 0 )  == '<' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1037^^^^^1030^1061^[REPLACE] pos = checkFormalTypeParameters ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1037^^^^^1030^1061^[ADD] pos = checkFormalTypeParameters ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( 'T', signature, pos ) ; ;^1039^^^^^1030^1061^[REPLACE] pos = checkChar ( ' ( ', signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )   ==  -1 )  {^1040^^^^^1030^1061^[REPLACE] while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1041^^^^^1030^1061^[REPLACE] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1041^^^^^1030^1061^[ADD] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1043^^^^^1030^1061^[REPLACE] pos = checkChar ( ' ) ', signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   !=  'V' )  {^1044^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, pos )  == 'V' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1044^1045^1046^1047^1048^1030^1061^[ADD] if  ( getChar ( signature, pos )  == 'V' )  { ++pos; } else { pos = checkTypeSignature ( signature, pos ) ; }^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1047^^^^^1044^1048^[REPLACE] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1047^^^^^1030^1061^[REPLACE] pos = checkTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   ||  '^' )  {^1049^^^^^1030^1061^[REPLACE] while  ( getChar ( signature, pos )  == '^' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   !=  'L' )  {^1051^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, pos )  == 'L' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ; ;^1054^^^^^1051^1055^[REPLACE] pos = checkTypeVariableSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1052^^^^^1030^1061^[REPLACE] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ; ;^1054^^^^^1030^1061^[REPLACE] pos = checkTypeVariableSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   &&  'L' )  {^1051^^^^^1030^1061^[REPLACE] if  ( getChar ( signature, pos )  == 'L' )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1051^1052^1053^1054^1055^1030^1061^[ADD] if  ( getChar ( signature, pos )  == 'L' )  { pos = checkClassTypeSignature ( signature, pos ) ; } else { pos = checkTypeVariableSignature ( signature, pos ) ; }^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1052^^^^^1030^1061^[ADD] pos = checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( pos != signature.length (  )  *  2 )  {^1057^^^^^1030^1061^[REPLACE] if  ( pos != signature.length (  )  )  {^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1057^1058^1059^1060^^1030^1061^[ADD] if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return ;^1058^1059^^^^1030^1061^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1058^1059^^^^1030^1061^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkMethodSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^int pos = checkFieldTypeSignature ( signature, 4 ) ;^1069^^^^^1068^1074^[REPLACE] int pos = checkFieldTypeSignature ( signature, 0 ) ;^[METHOD] checkFieldSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1069^^^^^1068^1074^[ADD] int pos = checkFieldTypeSignature ( signature, 0 ) ;^[METHOD] checkFieldSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( pos != signature .lastIndexOf ( pos )   %  0.5  )  {^1070^^^^^1068^1074^[REPLACE] if  ( pos != signature.length (  )  )  {^[METHOD] checkFieldSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1071^1072^^^^1068^1074^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkFieldSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return ;^1071^1072^^^^1068^1074^[REPLACE] throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[METHOD] checkFieldSignature [TYPE] void [PARAMETER] String signature [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1088^^^^^1083^1094^[REPLACE] pos = checkChar ( '<', signature, pos ) ;^[METHOD] checkFormalTypeParameters [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkTypeArguments ( signature, pos ) ; ;^1089^^^^^1083^1094^[REPLACE] pos = checkFormalTypeParameter ( signature, pos ) ;^[METHOD] checkFormalTypeParameters [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   ==  '>' )  {^1090^^^^^1083^1094^[REPLACE] while  ( getChar ( signature, pos )  != '>' )  {^[METHOD] checkFormalTypeParameters [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkTypeArguments ( signature, pos ) ; ;^1091^^^^^1083^1094^[REPLACE] pos = checkFormalTypeParameter ( signature, pos ) ;^[METHOD] checkFormalTypeParameters [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1091^^^^^1083^1094^[ADD] pos = checkFormalTypeParameter ( signature, pos ) ;^[METHOD] checkFormalTypeParameters [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  ||  1;^1093^^^^^1083^1094^[REPLACE] return pos + 1;^[METHOD] checkFormalTypeParameters [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1108^^^^^1103^1117^[REPLACE] pos = checkIdentifier ( signature, pos ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1109^^^^^1103^1117^[REPLACE] pos = checkChar ( ':', signature, pos ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( "L[T".indexOf ( getChar ( signature, pos )  )   ==  -1 )  {^1110^^^^^1103^1117^[REPLACE] if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1111^^^^^1103^1117^[REPLACE] pos = checkFieldTypeSignature ( signature, pos ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   &&  ':' )  {^1113^^^^^1103^1117^[REPLACE] while  ( getChar ( signature, pos )  == ':' )  {^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1113^1114^^^^1103^1117^[ADD] while  ( getChar ( signature, pos )  == ':' )  { pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFieldTypeSignature ( signature, pos  &  1 ) ;^1114^^^^^1103^1117^[REPLACE] pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFieldTypeSignature ( signature, pos  >  3 ) ;^1114^^^^^1103^1117^[REPLACE] pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1114^^^^^1103^1117^[ADD] pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return start + 1;^1116^^^^^1103^1117^[REPLACE] return pos;^[METHOD] checkFormalTypeParameter [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkTypeVariableSignature ( signature, pos ) ;^1136^^^^^1126^1142^[REPLACE] return checkClassTypeSignature ( signature, pos ) ;^[METHOD] checkFieldTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkTypeSignature ( signature, pos  &&  1 + 0 ) ;^1138^^^^^1126^1142^[REPLACE] return checkTypeSignature ( signature, pos + 1 ) ;^[METHOD] checkFieldTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkClassTypeSignature ( signature, pos ) ;^1140^^^^^1126^1142^[REPLACE] return checkTypeVariableSignature ( signature, pos ) ;^[METHOD] checkFieldTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1157^^^^^1151^1172^[REPLACE] pos = checkChar ( 'L', signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1158^^^^^1151^1172^[REPLACE] pos = checkIdentifier ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   !=  '/' )  {^1159^^^^^1151^1172^[REPLACE] while  ( getChar ( signature, pos )  == '/' )  {^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkIdentifier ( signature, pos  !=  1 ) ;^1160^^^^^1151^1172^[REPLACE] pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkIdentifier ( signature, pos  ^  1 ) ;^1160^^^^^1151^1172^[REPLACE] pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1160^1161^^^^1151^1172^[ADD] pos = checkIdentifier ( signature, pos + 1 ) ; }^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   ||  '<' )  {^1162^^^^^1151^1172^[REPLACE] if  ( getChar ( signature, pos )  == '<' )  {^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1162^1163^1164^^^1151^1172^[ADD] if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1163^^^^^1151^1172^[REPLACE] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1163^^^^^1151^1172^[ADD] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   &&  '.' )  {^1165^^^^^1151^1172^[REPLACE] while  ( getChar ( signature, pos )  == '.' )  {^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1165^1166^^^^1151^1172^[ADD] while  ( getChar ( signature, pos )  == '.' )  { pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   ||  '<' )  {^1167^^^^^1151^1172^[REPLACE] if  ( getChar ( signature, pos )  == '<' )  {^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1168^^^^^1151^1172^[REPLACE] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1168^^^^^1151^1172^[ADD] pos = checkTypeArguments ( signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkIdentifier ( signature, pos  ==  0 ) ;^1166^^^^^1151^1172^[REPLACE] pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkIdentifier ( signature, pos  <  1 ) ;^1166^^^^^1151^1172^[REPLACE] pos = checkIdentifier ( signature, pos + 1 ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkDesc ( desc, index, false ) ;^1171^^^^^1151^1172^[REPLACE] return checkChar ( ';', signature, pos ) ;^[METHOD] checkClassTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1185^^^^^1181^1191^[REPLACE] pos = checkChar ( '<', signature, pos ) ;^[METHOD] checkTypeArguments [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1186^^^^^1181^1191^[REPLACE] pos = checkTypeArgument ( signature, pos ) ;^[METHOD] checkTypeArguments [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( getChar ( signature, pos )   ==  '>' )  {^1187^^^^^1181^1191^[REPLACE] while  ( getChar ( signature, pos )  != '>' )  {^[METHOD] checkTypeArguments [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1187^1188^^^^1181^1191^[ADD] while  ( getChar ( signature, pos )  != '>' )  { pos = checkTypeArgument ( signature, pos ) ;^[METHOD] checkTypeArguments [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkFormalTypeParameter ( signature, pos ) ; ;^1188^^^^^1181^1191^[REPLACE] pos = checkTypeArgument ( signature, pos ) ;^[METHOD] checkTypeArguments [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  !=  1;;^1190^^^^^1181^1191^[REPLACE] return pos + 1;^[METHOD] checkTypeArguments [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^int pos = checkFieldTypeSignature ( signature, 0 ) ;^1204^^^^^1200^1211^[REPLACE] char c = getChar ( signature, pos ) ;^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1204^^^^^1200^1211^[ADD] char c = getChar ( signature, pos ) ;^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( c  !=  '*' )  {^1205^^^^^1200^1211^[REPLACE] if  ( c == '*' )  {^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^}  if  ( c == '+' && c == '-' )  {^1207^^^^^1200^1211^[REPLACE] } else if  ( c == '+' || c == '-' )  {^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  ;^1206^^^^^1200^1211^[REPLACE] return pos + 1;^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^}   pos++;^1207^1208^1209^^^1200^1211^[ADD] else if  ( c == '+' || c == '-' )  { pos++; }^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return false ;^1206^^^^^1200^1211^[REPLACE] return pos + 1;^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkTypeVariableSignature ( signature, pos ) ;^1210^^^^^1200^1211^[REPLACE] return checkFieldTypeSignature ( signature, pos ) ;^[METHOD] checkTypeArgument [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1227^^^^^1220^1230^[REPLACE] pos = checkChar ( 'T', signature, pos ) ;^[METHOD] checkTypeVariableSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1227^1228^^^^1220^1230^[ADD] pos = checkChar ( 'T', signature, pos ) ; pos = checkIdentifier ( signature, pos ) ;^[METHOD] checkTypeVariableSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^pos = checkChar ( ' ( ', signature, pos ) ; ;^1228^^^^^1220^1230^[REPLACE] pos = checkIdentifier ( signature, pos ) ;^[METHOD] checkTypeVariableSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkDesc ( desc, index, false ) ;^1229^^^^^1220^1230^[REPLACE] return checkChar ( ';', signature, pos ) ;^[METHOD] checkTypeVariableSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return false ;^1252^^^^^1239^1256^[REPLACE] return pos + 1;^[METHOD] checkTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return checkTypeVariableSignature ( signature, pos ) ;^1254^^^^^1239^1256^[REPLACE] return checkFieldTypeSignature ( signature, pos ) ;^[METHOD] checkTypeSignature [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^1266^^^^^1265^1275^[REPLACE] if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[METHOD] checkIdentifier [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return ;^1267^1268^^^^1265^1275^[REPLACE] throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[METHOD] checkIdentifier [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1267^1268^^^^1265^1275^[ADD] throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[METHOD] checkIdentifier [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^while  ( Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^1271^^^^^1265^1275^[REPLACE] while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  {^[METHOD] checkIdentifier [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return start + 1;^1274^^^^^1265^1275^[REPLACE] return pos;^[METHOD] checkIdentifier [TYPE] int [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( getChar ( signature, pos )   ||  c )  {^1286^^^^^1284^1291^[REPLACE] if  ( getChar ( signature, pos )  == c )  {^[METHOD] checkChar [TYPE] int [PARAMETER] final char c String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REMOVE]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1286^^^^^1284^1291^[REMOVE] ^[METHOD] checkChar [TYPE] int [PARAMETER] final char c String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  &&  1;^1287^^^^^1284^1291^[REPLACE] return pos + 1;^[METHOD] checkChar [TYPE] int [PARAMETER] final char c String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  ^  1;^1287^^^^^1284^1291^[REPLACE] return pos + 1;^[METHOD] checkChar [TYPE] int [PARAMETER] final char c String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1289^1290^^^^1284^1291^[REPLACE] throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[METHOD] checkChar [TYPE] int [PARAMETER] final char c String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[ADD]^^1289^1290^^^^1284^1291^[ADD] throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[METHOD] checkChar [TYPE] int [PARAMETER] final char c String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  char c  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^return pos  !=  signature.charAt (  )  ? signature.charAt ( pos )  :  ( char )  0;;^1302^^^^^1301^1303^[REPLACE] return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[METHOD] getChar [TYPE] char [PARAMETER] String signature int pos [CLASS] CheckMethodAdapter   [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  endCode  endMethod  false  startCode  true  visible  [TYPE]  String signature  [TYPE]  Map labels  [TYPE]  int pos 
[REPLACE]^if  ( label != null )  {^1319^^^^^1314^1327^[REPLACE] if  ( label == null )  {^[METHOD] checkLabel [TYPE] void [PARAMETER] Label label final boolean checkVisited String msg [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  checkVisited  endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1320^1321^^^^1314^1327^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] Label label final boolean checkVisited String msg [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  checkVisited  endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels 
[REPLACE]^if  ( checkVisited ) {^1323^^^^^1314^1327^[REPLACE] if  ( checkVisited && labels.get ( label )  == null )  {^[METHOD] checkLabel [TYPE] void [PARAMETER] Label label final boolean checkVisited String msg [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  checkVisited  endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels 
[REPLACE]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1324^1325^^^^1314^1327^[REPLACE] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] Label label final boolean checkVisited String msg [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  checkVisited  endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels 
[ADD]^^1324^1325^^^^1314^1327^[ADD] throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] Label label final boolean checkVisited String msg [CLASS] CheckMethodAdapter   [TYPE]  Label label  [TYPE]  int[] TYPE  keys  [TYPE]  boolean canBeVoid  checkVisited  endCode  endMethod  false  startCode  true  visible  [TYPE]  String msg  [TYPE]  Map labels 
