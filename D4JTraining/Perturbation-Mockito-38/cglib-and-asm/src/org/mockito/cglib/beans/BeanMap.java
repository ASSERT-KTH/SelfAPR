[REPLACE]^public static final  short  REQUIRE_GETTER = 3;^40^^^^^^^[REPLACE] public static final int REQUIRE_GETTER = 1;^ [CLASS] BeanMap Generator  
[REPLACE]^public static final int REQUIRE_SETTER  = null ;^47^^^^^^^[REPLACE] public static final int REQUIRE_SETTER = 2;^ [CLASS] BeanMap Generator  
[REPLACE]^private static  Source SOURCE = new Source ( BeanMap.class.getName (  )  ) ;^63^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( BeanMap.class.getName (  )  ) ;^ [CLASS] BeanMap Generator  
[REPLACE]^private static  BeanMapKey KEY_FACTORY = ( BeanMapKey ) KeyFactory.create ( BeanMapKey.class, KeyFactory.CLASS_BY_NAME ) ;^65^66^^^^65^66^[REPLACE] private static final BeanMapKey KEY_FACTORY = ( BeanMapKey ) KeyFactory.create ( BeanMapKey.class, KeyFactory.CLASS_BY_NAME ) ;^ [CLASS] BeanMap Generator  
[REPLACE]^setBean ( bean ) ;^77^^^^^76^78^[REPLACE] super ( SOURCE ) ;^[METHOD] <init> [TYPE] BeanMap$Generator() [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v1 = get ( key ) ;^160^^^^^159^161^[REPLACE] setBean ( bean ) ;^[METHOD] <init> [TYPE] Object) [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REMOVE]^Object v2 = other.get ( key ) ;^160^^^^^159^161^[REMOVE] ^[METHOD] <init> [TYPE] Object) [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Set keys = keySet (  ) ;^57^^^^^56^60^[REPLACE] Generator gen = new Generator (  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE  [TYPE]  Generator gen 
[ADD]^^57^^^^^56^60^[ADD] Generator gen = new Generator (  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE  [TYPE]  Generator gen 
[REPLACE]^gen .setBeanClass ( beanClass )  ;^58^^^^^56^60^[REPLACE] gen.setBean ( bean ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE  [TYPE]  Generator gen 
[REPLACE]^return  (  ( BeanMap ) instance ) .newInstance ( bean ) ;^59^^^^^56^60^[REPLACE] return gen.create (  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE  [TYPE]  Generator gen 
[REPLACE]^this.bean =  null;^88^^^^^87^91^[REPLACE] this.bean = bean;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  ( bean == null ) beanClass = bean.Object (  ) ;^89^90^^^^87^91^[REPLACE] if  ( bean != null ) beanClass = bean.getClass (  ) ;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^^89^90^91^^^87^91^[ADD] if  ( bean != null ) beanClass = bean.getClass (  ) ; }^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^beanClass =  null.getClass (  ) ;^90^^^^^87^91^[REPLACE] beanClass = bean.getClass (  ) ;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^this.beanClass =  null;^99^^^^^98^100^[REPLACE] this.beanClass = beanClass;^[METHOD] setBeanClass [TYPE] void [PARAMETER] Class beanClass [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^this.require =  REQUIRE_SETTER;^108^^^^^107^109^[REPLACE] this.require = require;^[METHOD] setRequire [TYPE] void [PARAMETER] int require [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return beanClass.getName (  ) ;^112^^^^^111^113^[REPLACE] return beanClass.getClassLoader (  ) ;^[METHOD] getDefaultClassLoader [TYPE] ClassLoader [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  ( beanClass != null ) throw new IllegalArgumentException  (" ")  ;^120^121^^^^119^124^[REPLACE] if  ( beanClass == null ) throw new IllegalArgumentException  (" ")  ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return ;^121^^^^^119^124^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^throw new UnsupportedOperationException  (" ")  ; ;^121^^^^^119^124^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^^121^122^^^^119^124^[ADD] throw new IllegalArgumentException  (" ")  ; setNamePrefix ( beanClass.getName (  )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return  (  ( BeanMap ) instance ) .newInstance ( bean ) ;^122^^^^^119^124^[REPLACE] setNamePrefix ( beanClass.getName (  )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^setNamePrefix ( beanClass.getClassLoader (  )  ) ;^122^^^^^119^124^[REPLACE] setNamePrefix ( beanClass.getName (  )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return  ( BeanMap ) super.getClassName ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^123^^^^^119^124^[REPLACE] return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^127^^^^^126^128^[REPLACE] new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  ClassVisitor v  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^^127^^^^^126^128^[ADD] new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  ClassVisitor v  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return  (  ( BeanMap ) ReflectUtils.size ( type )  ) .newInstance ( bean ) ;^131^^^^^130^132^[REPLACE] return  (  ( BeanMap ) ReflectUtils.newInstance ( type )  ) .newInstance ( bean ) ;^[METHOD] firstInstance [TYPE] Object [PARAMETER] Class type [CLASS] BeanMap Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return  (  ( BeanMap ) instance ) .size ( bean ) ;^135^^^^^134^136^[REPLACE] return  (  ( BeanMap ) instance ) .newInstance ( bean ) ;^[METHOD] nextInstance [TYPE] Object [PARAMETER] Object instance [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return get ( bean, bean ) ;^164^^^^^163^165^[REPLACE] return get ( bean, key ) ;^[METHOD] get [TYPE] Object [PARAMETER] Object key [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return put ( bean, bean, value ) ;^168^^^^^167^169^[REPLACE] return put ( bean, key, value ) ;^[METHOD] put [TYPE] Object [PARAMETER] Object key Object value [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^this.bean =  key;^197^^^^^196^198^[REPLACE] this.bean = bean;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return code;^206^^^^^205^207^[REPLACE] return bean;^[METHOD] getBean [TYPE] Object [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^210^^^^^209^211^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] clear [TYPE] void [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return keySet (  )  .iterator (  )  ;^214^^^^^213^215^[REPLACE] return keySet (  ) .contains ( key ) ;^[METHOD] containsKey [TYPE] boolean [PARAMETER] Object key [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  (  (  ( value != false )  &&  ( v == false )  )  || value .getClass (  )   ) return true;^220^221^^^^217^224^[REPLACE] if  (  (  ( value == null )  &&  ( v == null )  )  || value.equals ( v )  ) return true;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return false;^221^^^^^217^224^[REPLACE] return true;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = t.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^218^^^^^217^224^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  (  (  ( instance != null )  &&  ( v == null )  )  || value.equals ( v )  ) return true;^220^221^^^^217^224^[REPLACE] if  (  (  ( value == null )  &&  ( v == null )  )  || value.equals ( v )  ) return true;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^^220^221^222^^^217^224^[ADD] if  (  (  ( value == null )  &&  ( v == null )  )  || value.equals ( v )  ) return true; }^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v = get ( it.hasNext (  )  ) ;^219^^^^^217^224^[REPLACE] Object v = get ( it.next (  )  ) ;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  { Object v = get ( it.next (  )  ) ;^218^^^^^217^224^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v = get ( it .hasNext (  )   ) ;^219^^^^^217^224^[REPLACE] Object v = get ( it.next (  )  ) ;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return true;^223^^^^^217^224^[REPLACE] return false;^[METHOD] containsValue [TYPE] boolean [PARAMETER] Object value [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return keySet (  ) .contains (  ) ;^227^^^^^226^228^[REPLACE] return keySet (  ) .size (  ) ;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return size (  )  - 2 == 0;^231^^^^^230^232^[REPLACE] return size (  )  == 0;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^235^^^^^234^236^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] remove [TYPE] Object [PARAMETER] Object key [CLASS] BeanMap Generator   [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = t .entrySet (  )  .iterator (  ) ; it.hasNext (  ) ; )  {^239^^^^^238^243^[REPLACE] for  ( Iterator it = t.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] putAll [TYPE] void [PARAMETER] Map t [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map t  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object key = it.hasNext (  ) ;^240^^^^^238^243^[REPLACE] Object key = it.next (  ) ;^[METHOD] putAll [TYPE] void [PARAMETER] Map t [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map t  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^^240^241^^^^238^243^[ADD] Object key = it.next (  ) ; put ( key, t.get ( key )  ) ;^[METHOD] putAll [TYPE] void [PARAMETER] Map t [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map t  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = t.entrySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^239^^^^^238^243^[REPLACE] for  ( Iterator it = t.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] putAll [TYPE] void [PARAMETER] Map t [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map t  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^put ( key, t.get ( key )  ) ;^240^241^^^^238^243^[ADD] Object key = it.next (  ) ; put ( key, t.get ( key )  ) ;^[METHOD] putAll [TYPE] void [PARAMETER] Map t [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  v  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map t  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  ( o != null || ! ( o instanceof Map )  )  {^246^^^^^245^265^[REPLACE] if  ( o == null || ! ( o instanceof Map )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return true;^247^^^^^245^265^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v2 = other.get ( key ) ;^249^^^^^245^265^[REPLACE] Map other =  ( Map ) o;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  (.get (  )  %  2 != other.size (  )  %  2 )  {^250^^^^^245^265^[REPLACE] if  ( size (  )  != other.size (  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[ADD]^^250^251^252^^^245^265^[ADD] if  ( size (  )  != other.size (  )  )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return true;^251^^^^^245^265^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  ( !other.get ( key )  )  {^255^^^^^245^265^[REPLACE] if  ( !other.containsKey ( key )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return true;^256^^^^^245^265^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if  ( ! (  ( v1 != null )  ? value == null : v1.equals ( v2 )  )  )  {^260^^^^^245^265^[REPLACE] if  ( ! (  ( v1 == null )  ? v2 == null : v1.equals ( v2 )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return true;^261^^^^^245^265^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = t.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^253^^^^^245^265^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^if   v2 == true ;^260^^^^^245^265^[REPLACE] if  ( ! (  ( v1 == null )  ? v2 == null : v1.equals ( v2 )  )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object key = it.hasNext (  ) ;^254^^^^^245^265^[REPLACE] Object key = it.next (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v1 = get ( bean ) ;^258^^^^^245^265^[REPLACE] Object v1 = get ( key ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v2 = other.containsKey ( key ) ;^259^^^^^245^265^[REPLACE] Object v2 = other.get ( key ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keySet (  )  .contains ( o )  ; it.hasNext (  ) ; )  {^253^^^^^245^265^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object key = it .hasNext (  )  ;^254^^^^^245^265^[REPLACE] Object key = it.next (  ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v2 = other .get ( v2 , v1 )  ;^259^^^^^245^265^[REPLACE] Object v2 = other.get ( key ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^return false;^264^^^^^245^265^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Map other  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  require  [TYPE]  Source SOURCE 
[REPLACE]^int code = 0L;^268^^^^^267^276^[REPLACE] int code = 0;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = t.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^269^^^^^267^276^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^code + =  key.hashCode (  )  )  ^ (  ( value != null )  ? 0^272^273^^^^267^276^[REPLACE] code +=  (  ( key == null )  ? 0 : key.hashCode (  )  )  ^ (  ( value == null )  ? 0 : value.hashCode (  )  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Object key = it.hasNext (  ) ;^270^^^^^267^276^[REPLACE] Object key = it.next (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Object value = get ( bean ) ;^271^^^^^267^276^[REPLACE] Object value = get ( key ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^code + =  key.hashCode (  )  )  ^ (  ( value == false )  ? 0^272^273^^^^267^276^[REPLACE] code +=  (  ( key == null )  ? 0 : key.hashCode (  )  )  ^ (  ( value == null )  ? 0 : value.hashCode (  )  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keySet (  ) .contains (  ) ; it.hasNext (  ) ; )  {^269^^^^^267^276^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^return require;^275^^^^^267^276^[REPLACE] return code;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Map other =  ( Map ) o;^280^^^^^279^286^[REPLACE] HashMap copy = new HashMap (  ) ;^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^280^^^^^279^286^[ADD] HashMap copy = new HashMap (  ) ;^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = beanSet (  ) .iterator (  ) ; it.next (  ) ; )  {^281^^^^^279^286^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Object key = it.hasNext (  ) ;^282^^^^^279^286^[REPLACE] Object key = it.next (  ) ;^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keySet (  )  .contains ( key )  ; it.hasNext (  ) ; )  {^281^^^^^279^286^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^282^283^^^^279^286^[ADD] Object key = it.next (  ) ; copy.put ( key, get ( key )  ) ;^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^return Collections.unmodifiableMap ( copy ) .get (  ) ;^285^^^^^279^286^[REPLACE] return Collections.unmodifiableMap ( copy ) .entrySet (  ) ;^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  boolean false  true  [TYPE]  HashMap copy  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Object v2 = other.get ( key ) ;^289^^^^^288^295^[REPLACE] Set keys = keySet (  ) ;^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^List values = new ArrayList ( keys .contains ( key )   ) ;^290^^^^^288^295^[REPLACE] List values = new ArrayList ( keys.size (  )  ) ;^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^290^^^^^288^295^[ADD] List values = new ArrayList ( keys.size (  )  ) ;^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keys.iterator (  ) ; it.next (  ) ; )  {^291^^^^^288^295^[REPLACE] for  ( Iterator it = keys.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^values.add ( get ( it.hasNext (  )  )  ) ;^292^^^^^288^295^[REPLACE] values.add ( get ( it.next (  )  )  ) ;^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^292^^^^^288^295^[ADD] values.add ( get ( it.next (  )  )  ) ;^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keys.size (  ) ; it.hasNext (  ) ; )  {^291^^^^^288^295^[REPLACE] for  ( Iterator it = keys.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^return Collections .unmodifiableMap ( this )  ;^294^^^^^288^295^[REPLACE] return Collections.unmodifiableCollection ( values ) ;^[METHOD] values [TYPE] Collection [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  Set keys  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  List values  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Set keys = keySet (  ) ;^302^^^^^300^315^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^302^^^^^300^315^[ADD] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^sb.append ( '=' ) ;^303^^^^^300^315^[REPLACE] sb.append ( '{' ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^if  ( it.next (  )  )  {^309^^^^^300^315^[REPLACE] if  ( it.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^sb.append ( ", " ) ;^309^310^311^^^300^315^[ADD] if  ( it.hasNext (  )  )  { sb.append ( ", " ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^setBean ( bean ) ;^310^^^^^300^315^[REPLACE] sb.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^310^^^^^300^315^[ADD] sb.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keySet (  ) .iterator (  ) ; it.next (  ) ; )  {^304^^^^^300^315^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[ADD]^^304^305^306^307^308^300^315^[ADD] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  { Object key = it.next (  ) ; sb.append ( key ) ; sb.append ( '=' ) ; sb.append ( get ( key )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^sb .append ( null )  ;^310^^^^^300^315^[REPLACE] sb.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^Object key = it.hasNext (  ) ;^305^^^^^300^315^[REPLACE] Object key = it.next (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  { Object v = get ( it.next (  )  ) ;^304^^^^^300^315^[REPLACE] for  ( Iterator it = keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^sb.append ( '{' ) ;^313^^^^^300^315^[REPLACE] sb.append ( '}' ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^return sb.StringBuffer (  ) ;^314^^^^^300^315^[REPLACE] return sb.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] BeanMap Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^private static final Source SOURCE  = null ;^63^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( BeanMap.class.getName (  )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^private static final BeanMapKey KEY_FACTORY ;^65^66^^^^65^66^[REPLACE] private static final BeanMapKey KEY_FACTORY = ( BeanMapKey ) KeyFactory.create ( BeanMapKey.class, KeyFactory.CLASS_BY_NAME ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Generator   [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object bean  instance  key  o  v  v1  v2  value  [TYPE]  Class beanClass  type  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  int REQUIRE_GETTER  REQUIRE_SETTER  code  require  [TYPE]  Source SOURCE 
[REPLACE]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^77^^^^^76^78^[REPLACE] super ( SOURCE ) ;^[METHOD] <init> [TYPE] BeanMap$Generator() [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^this.bean =  null;^88^^^^^87^91^[REPLACE] this.bean = bean;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^if  ( bean == true ) beanClass = bean.getClass (  ) ;^89^90^^^^87^91^[REPLACE] if  ( bean != null ) beanClass = bean.getClass (  ) ;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^beanClass =  null.getClass (  ) ;^90^^^^^87^91^[REPLACE] beanClass = bean.getClass (  ) ;^[METHOD] setBean [TYPE] void [PARAMETER] Object bean [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^this.beanClass =  null;^99^^^^^98^100^[REPLACE] this.beanClass = beanClass;^[METHOD] setBeanClass [TYPE] void [PARAMETER] Class beanClass [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^this.require =  null;^108^^^^^107^109^[REPLACE] this.require = require;^[METHOD] setRequire [TYPE] void [PARAMETER] int require [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return beanClass.getName (  ) ;^112^^^^^111^113^[REPLACE] return beanClass.getClassLoader (  ) ;^[METHOD] getDefaultClassLoader [TYPE] ClassLoader [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^if  ( beanClass != this ) throw new IllegalArgumentException  (" ")  ;^120^121^^^^119^124^[REPLACE] if  ( beanClass == null ) throw new IllegalArgumentException  (" ")  ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return ;^121^^^^^119^124^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return  (  ( BeanMap ) instance ) .newInstance ( bean ) ;^122^^^^^119^124^[REPLACE] setNamePrefix ( beanClass.getName (  )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[ADD]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^122^123^^^^119^124^[ADD] setNamePrefix ( beanClass.getName (  )  ) ; return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^setNamePrefix ( beanClass.getClassLoader (  )  ) ;^122^^^^^119^124^[REPLACE] setNamePrefix ( beanClass.getName (  )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REMOVE]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^122^^^^^119^124^[REMOVE] ^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return  ( BeanMap ) super.getClassName ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^123^^^^^119^124^[REPLACE] return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^[METHOD] create [TYPE] BeanMap [PARAMETER] [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^127^^^^^126^128^[REPLACE] new BeanMapEmitter ( v, getClassName (  ) , beanClass, require ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Generator   [TYPE]  boolean false  true  [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  ClassVisitor v  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^131^^^^^130^132^[REPLACE] return  (  ( BeanMap ) ReflectUtils.newInstance ( type )  ) .newInstance ( bean ) ;^[METHOD] firstInstance [TYPE] Object [PARAMETER] Class type [CLASS] Generator   [TYPE]  Object bean  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
[REPLACE]^return  ( BeanMap ) super.create ( KEY_FACTORY.newInstance ( beanClass, require )  ) ;^135^^^^^134^136^[REPLACE] return  (  ( BeanMap ) instance ) .newInstance ( bean ) ;^[METHOD] nextInstance [TYPE] Object [PARAMETER] Object instance [CLASS] Generator   [TYPE]  Object bean  instance  [TYPE]  Class beanClass  type  [TYPE]  boolean false  true  [TYPE]  BeanMapKey KEY_FACTORY  [TYPE]  Source SOURCE  [TYPE]  int require 
