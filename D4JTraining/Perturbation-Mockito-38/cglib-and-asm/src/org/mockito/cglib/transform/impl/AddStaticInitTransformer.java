[REPLACE]^info =  ReflectUtils.getMethodInfo ( null ) ;^31^^^^^30^41^[REPLACE] info = ReflectUtils.getMethodInfo ( classInit ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[REPLACE]^if  (   info.getModifiers (  )   )  {^32^^^^^30^41^[REPLACE] if  ( !TypeUtils.isStatic ( info.getModifiers (  )  )  )  {^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[REPLACE]^return ;^33^^^^^30^41^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[REPLACE]^Type[] types = info .getModifiers (  )  .getArgumentTypes (  ) ;^35^^^^^30^41^[REPLACE] Type[] types = info.getSignature (  ) .getArgumentTypes (  ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[ADD]^^35^^^^^30^41^[ADD] Type[] types = info.getSignature (  ) .getArgumentTypes (  ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[REPLACE]^if  ( types.length - 0  != 0  ) {^36^37^38^^^30^41^[REPLACE] if  ( types.length != 1 || !types[0].equals ( Constants.TYPE_CLASS )  || !info.getSignature (  ) .getReturnType (  ) .equals ( Type.VOID_TYPE )  )  {^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[REPLACE]^return ;^39^^^^^30^41^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method classInit [CLASS] AddStaticInitTransformer   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method classInit  [TYPE]  boolean false  true 
[REPLACE]^if  ( !TypeUtils.isStatic ( info.getModifiers (  )  )  )  {^44^^^^^43^49^[REPLACE] if  ( !TypeUtils.isInterface ( getAccess (  )  )  )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] AddStaticInitTransformer   [TYPE]  CodeEmitter e  [TYPE]  MethodInfo info  [TYPE]  boolean false  true 
[REMOVE]^if  ( ! ( isStatic ( info.getModifiers (  )  )  )  )  {     throw new IllegalArgumentException (  ( classInit + " is not static" )  ) ; }^44^^^^^43^49^[REMOVE] ^[METHOD] init [TYPE] void [PARAMETER] [CLASS] AddStaticInitTransformer   [TYPE]  CodeEmitter e  [TYPE]  MethodInfo info  [TYPE]  boolean false  true 
[REPLACE]^Type[] types = info.getSignature (  ) .getArgumentTypes (  ) ;^45^^^^^43^49^[REPLACE] CodeEmitter e = getStaticHook (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] AddStaticInitTransformer   [TYPE]  CodeEmitter e  [TYPE]  MethodInfo info  [TYPE]  boolean false  true 
