[REPLACE]^this.wrapper =  Type.getType ( null ) ;^30^^^^^29^42^[REPLACE] this.wrapper = Type.getType ( wrapper ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^boolean found = true;^31^^^^^29^42^[REPLACE] boolean found = false;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^Class[] types = cstructs[i].getParameterTypes (  ) ;^32^^^^^29^42^[REPLACE] Constructor[] cstructs = wrapper.getConstructors (  ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^if  (  types[0].equals ( Throwable.class )  )  {^35^^^^^29^42^[REPLACE] if  ( types.length == 1 && types[0].equals ( Throwable.class )  )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^found = false;^36^^^^^29^42^[REPLACE] found = true;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < cstructs.length (  ) ; i++ )  {^33^^^^^29^42^[REPLACE] for  ( int i = 0; i < cstructs.length; i++ )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^if  ( types.length *  2 == 1 ) {^35^^^^^29^42^[REPLACE] if  ( types.length == 1 && types[0].equals ( Throwable.class )  )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[ADD]^^35^36^37^38^^29^42^[ADD] if  ( types.length == 1 && types[0].equals ( Throwable.class )  )  { found = true; break; }^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[ADD]^^36^37^^^^29^42^[ADD] found = true; break;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < cstructs.length; i++ )  { Class[] types = cstructs[i].getParameterTypes (  ) ;^34^^^^^29^42^[REPLACE] Class[] types = cstructs[i].getParameterTypes (  ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[ADD]^^34^^^^^29^42^[ADD] Class[] types = cstructs[i].getParameterTypes (  ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < cstructs.length; i++ )  {^33^^^^^29^42^[REPLACE] for  ( int i = 0; i < cstructs.length; i++ )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^if  ( found ) throw new IllegalArgumentException  (" ")  ;^40^41^^^^29^42^[REPLACE] if  ( !found ) throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[ADD]^^40^41^42^^^29^42^[ADD] if  ( !found ) throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^return ;^41^^^^^29^42^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class wrapper [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Type wrapper  [TYPE]  boolean false  found  true  [TYPE]  Class[] types  [TYPE]  Constructor[] cstructs  [TYPE]  Block handler  [TYPE]  Class wrapper  [TYPE]  int i 
[REPLACE]^CodeEmitter e = super .ClassEmitterTransformer (  )  ;^45^^^^^44^60^[REPLACE] CodeEmitter e = super.begin_method ( access, sig, exceptions ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  Type[] exceptions  [TYPE]  Block handler  [TYPE]  int access  maxLocals  maxStack 
[ADD]^^45^^^^^44^60^[ADD] CodeEmitter e = super.begin_method ( access, sig, exceptions ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  Type[] exceptions  [TYPE]  Block handler  [TYPE]  int access  maxLocals  maxStack 
[REPLACE]^if  (  sig.equals ( Constants.SIG_STATIC )  )  {^46^^^^^44^60^[REPLACE] if  ( TypeUtils.isAbstract ( access )  || sig.equals ( Constants.SIG_STATIC )  )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  Type[] exceptions  [TYPE]  Block handler  [TYPE]  int access  maxLocals  maxStack 
[REPLACE]^return new CodeEmitter ( e )  { private Block handler;^47^^^^^44^60^[REPLACE] return e;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  Type[] exceptions  [TYPE]  Block handler  [TYPE]  int access  maxLocals  maxStack 
[REPLACE]^handler  =  handler ;^52^^^^^44^60^[REPLACE] handler = begin_block (  ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  Type[] exceptions  [TYPE]  Block handler  [TYPE]  int access  maxLocals  maxStack 
[REPLACE]^return new CodeEmitter ( e )  { private Block handler;^49^^^^^44^60^[REPLACE] return new CodeEmitter ( e )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  Type[] exceptions  [TYPE]  Block handler  [TYPE]  int access  maxLocals  maxStack 
[REPLACE]^handler = begin_block (  ) ;^55^^^^^54^58^[REPLACE] handler.end (  ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Block handler  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  int maxLocals  maxStack 
[REPLACE]^EmitUtils.wrap_undeclared_throwable ( this, handler, null, wrapper ) ;^56^^^^^54^58^[REPLACE] EmitUtils.wrap_undeclared_throwable ( this, handler, exceptions, wrapper ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Block handler  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  int maxLocals  maxStack 
[REPLACE]^super.visitMaxs ( maxStack, maxStack ) ;^57^^^^^54^58^[REPLACE] super.visitMaxs ( maxStack, maxLocals ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] UndeclaredThrowableTransformer 1   [TYPE]  Block handler  [TYPE]  Type wrapper  [TYPE]  boolean false  true  [TYPE]  int maxLocals  maxStack 
[REPLACE]^EmitUtils.wrap_undeclared_throwable ( this, handler, exceptions, wrapper ) ;^55^^^^^54^58^[REPLACE] handler.end (  ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] 1   [TYPE]  Block handler  [TYPE]  int maxLocals  maxStack  [TYPE]  boolean false  true 
[REPLACE]^EmitUtils.wrap_undeclared_throwable ( this, handler, this, wrapper ) ;^56^^^^^54^58^[REPLACE] EmitUtils.wrap_undeclared_throwable ( this, handler, exceptions, wrapper ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] 1   [TYPE]  Block handler  [TYPE]  int maxLocals  maxStack  [TYPE]  boolean false  true 
[REPLACE]^super.visitMaxs ( maxLocals, maxLocals ) ;^57^^^^^54^58^[REPLACE] super.visitMaxs ( maxStack, maxLocals ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] 1   [TYPE]  Block handler  [TYPE]  int maxLocals  maxStack  [TYPE]  boolean false  true 
[ADD]^^57^^^^^54^58^[ADD] super.visitMaxs ( maxStack, maxLocals ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] 1   [TYPE]  Block handler  [TYPE]  int maxLocals  maxStack  [TYPE]  boolean false  true 
