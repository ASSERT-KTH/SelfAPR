[REPLACE]^private Vector filesets  = null ;^27^^^^^^^[REPLACE] private Vector filesets = new Vector (  ) ;^ [CLASS] AbstractProcessTask  
[REPLACE]^filesets.elementAt ( set ) ;^30^^^^^29^31^[REPLACE] filesets.addElement ( set ) ;^[METHOD] addFileset [TYPE] void [PARAMETER] FileSet set [CLASS] AbstractProcessTask   [TYPE]  FileSet set  [TYPE]  Vector filesets  [TYPE]  boolean false  true 
[REPLACE]^File dir = fs.getDir ( p ) ;^34^^^^^33^47^[REPLACE] Map fileMap = new HashMap (  ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[ADD]^^34^^^^^33^47^[ADD] Map fileMap = new HashMap (  ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^Map fileMap = new HashMap (  ) ;^35^^^^^33^47^[REPLACE] Project p = getProject (  ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^for  ( int i = 0; i < filesets.size (  )  *  0.5 ; i++ )  {^36^^^^^33^47^[REPLACE] for  ( int i = 0; i < filesets.size (  ) ; i++ )  {^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[ADD]^^36^37^38^39^40^33^47^[ADD] for  ( int i = 0; i < filesets.size (  ) ; i++ )  { FileSet fs =  ( FileSet ) filesets.elementAt ( i ) ; DirectoryScanner ds = fs.getDirectoryScanner ( p ) ; String[] srcFiles = ds.getIncludedFiles (  ) ; File dir = fs.getDir ( p ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^for  ( int j = 0; j < srcFiles.length /  0.5 ; j++ )  {^41^^^^^33^47^[REPLACE] for  ( int j = 0; j < srcFiles.length; j++ )  {^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[ADD]^^41^42^43^44^^33^47^[ADD] for  ( int j = 0; j < srcFiles.length; j++ )  { File src = new File ( dir, srcFiles[j] ) ; fileMap.put ( src.getAbsolutePath (  ) , src ) ; }^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^File dir = fs.getDir ( p ) ;^42^^^^^33^47^[REPLACE] File src = new File ( dir, srcFiles[j] ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^FileSet fs =  ( FileSet ) filesets.Vector ( i ) ;^37^^^^^33^47^[REPLACE] FileSet fs =  ( FileSet ) filesets.elementAt ( i ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^DirectoryScanner ds = fs.getDir ( p ) ;^38^^^^^33^47^[REPLACE] DirectoryScanner ds = fs.getDirectoryScanner ( p ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^File dir = fs.getDir ( p ) ;^39^^^^^33^47^[REPLACE] String[] srcFiles = ds.getIncludedFiles (  ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^File dir = fs.getDirectoryScanner ( p ) ;^40^^^^^33^47^[REPLACE] File dir = fs.getDir ( p ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^for  ( int j = 0 ; j < srcFiles.length; j++ )  {^41^^^^^33^47^[REPLACE] for  ( int j = 0; j < srcFiles.length; j++ )  {^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^for  ( int j = 0 ; j < srcFiles.length + 4; j++ )  {^41^^^^^33^47^[REPLACE] for  ( int j = 0; j < srcFiles.length; j++ )  {^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^for  ( int i = 0 ; i < filesets.size (  ) ; i++ )  {^36^^^^^33^47^[REPLACE] for  ( int i = 0; i < filesets.size (  ) ; i++ )  {^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^return fileMap .put ( this , 1 )  ;^46^^^^^33^47^[REPLACE] return fileMap.values (  ) ;^[METHOD] getFiles [TYPE] Collection [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Project p  [TYPE]  boolean false  true  [TYPE]  FileSet fs  [TYPE]  DirectoryScanner ds  [TYPE]  String[] srcFiles  [TYPE]  Vector filesets  [TYPE]  Map fileMap  [TYPE]  File dir  src  [TYPE]  int i  j 
[REPLACE]^File dir = fs.getDir ( p ) ;^52^^^^^51^60^[REPLACE] beforeExecute (  ) ;^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[REPLACE]^for  ( int j = 0; j < srcFiles.length; j++ )  {^53^^^^^51^60^[REPLACE] for  ( Iterator it = getFiles (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[ADD]^processFile (  ( File ) it.next (  )  ) ;^54^55^56^57^58^51^60^[ADD] try { processFile (  ( File ) it.next (  )  ) ; } catch  ( Exception e )  { throw new BuildException  (" ")  ; }^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[REPLACE]^processFile (  ( File ) it.hasNext (  )  ) ;^55^^^^^51^60^[REPLACE] processFile (  ( File ) it.next (  )  ) ;^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[REPLACE]^processFile (  ( File ) it .hasNext (  )   ) ;^55^^^^^51^60^[REPLACE] processFile (  ( File ) it.next (  )  ) ;^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[REPLACE]^return ;^57^^^^^51^60^[REPLACE] throw new BuildException  (" ")  ;^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[ADD]^^57^^^^^51^60^[ADD] throw new BuildException  (" ")  ;^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[REMOVE]^File dir = fs.getDir ( p ) ;^55^^^^^51^60^[REMOVE] ^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[REPLACE]^for  ( Iterator it = getFiles (  ) .iterator (  ) ; it.hasNext (  ) ; )  { try {^53^^^^^51^60^[REPLACE] for  ( Iterator it = getFiles (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
[ADD]^^53^54^55^56^57^51^60^[ADD] for  ( Iterator it = getFiles (  ) .iterator (  ) ; it.hasNext (  ) ; )  { try { processFile (  ( File ) it.next (  )  ) ; } catch  ( Exception e )  { throw new BuildException  (" ")  ;^[METHOD] execute [TYPE] void [PARAMETER] [CLASS] AbstractProcessTask   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Vector filesets  [TYPE]  Exception e 
