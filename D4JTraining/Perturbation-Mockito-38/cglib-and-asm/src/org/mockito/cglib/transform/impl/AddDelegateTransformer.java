[REPLACE]^private static final String DELEGATE ;^30^^^^^^^[REPLACE] private static final String DELEGATE = "$CGLIB_DELEGATE";^ [CLASS] AddDelegateTransformer 1  
[REPLACE]^private static final Signature CSTRUCT_OBJECT  = null ;^31^32^^^^31^32^[REPLACE] private static final Signature CSTRUCT_OBJECT = TypeUtils.parseSignature ( "void <init> ( Object ) " ) ;^ [CLASS] AddDelegateTransformer 1  
[REPLACE]^private boolean transformInit ;^78^^^^^^^[REPLACE] private boolean transformInit = true;^ [CLASS] AddDelegateTransformer 1  
[ADD]^delegateImpl.getConstructor ( new Class[]{ Object.class } ) ;this.delegateIf = delegateIf;this.delegateImpl = delegateImpl;delegateType = Type.getType ( delegateImpl ) ;^40^41^42^43^44^39^48^[ADD] try { delegateImpl.getConstructor ( new Class[]{ Object.class } ) ; this.delegateIf = delegateIf; this.delegateImpl = delegateImpl; delegateType = Type.getType ( delegateImpl ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class[] delegateIf Class delegateImpl [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  [TYPE]  NoSuchMethodException e 
[REPLACE]^this.delegateImpl = delegateImpl; ;^42^^^^^39^48^[REPLACE] this.delegateIf = delegateIf;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class[] delegateIf Class delegateImpl [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  [TYPE]  NoSuchMethodException e 
[REPLACE]^this.delegateIf = delegateIf; ;^43^^^^^39^48^[REPLACE] this.delegateImpl = delegateImpl;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class[] delegateIf Class delegateImpl [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  [TYPE]  NoSuchMethodException e 
[REPLACE]^delegateType =  Type.getType ( null ) ;^44^^^^^39^48^[REPLACE] delegateType = Type.getType ( delegateImpl ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class[] delegateIf Class delegateImpl [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  [TYPE]  NoSuchMethodException e 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^46^^^^^39^48^[REPLACE] throw new CodeGenerationException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class[] delegateIf Class delegateImpl [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  [TYPE]  NoSuchMethodException e 
[REPLACE]^if ( TypeUtils.isInterface ( access )  ) {^52^^^^^50^72^[REPLACE] if ( !TypeUtils.isInterface ( access )  ) {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^super.begin_class ( version, access, sourceFile, superType, interfaces, sourceFile ) ;^70^^^^^50^72^[REPLACE] super.begin_class ( version, access, className, superType, interfaces, sourceFile ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^64^^^^^50^72^[REPLACE] if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[ADD]^addDelegate ( methods[j] ) ;^64^65^66^^^50^72^[ADD] if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  { addDelegate ( methods[j] ) ; }^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^e.end_method (  ) ;^65^^^^^50^72^[REPLACE] addDelegate ( methods[j] ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[ADD]^^65^^^^^50^72^[ADD] addDelegate ( methods[j] ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int i = 0; i < delegateIf.length *  0.5 ; i++ )  {^61^^^^^50^72^[REPLACE] for  ( int i = 0; i < delegateIf.length; i++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^if  (   methods[j].getModifiers (  )   )  {^64^^^^^50^72^[REPLACE] if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int j = 0; j < methods.length - 4; j++ )  {^63^^^^^50^72^[REPLACE] for  ( int j = 0; j < methods.length; j++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[ADD]^^64^65^66^^^50^72^[ADD] if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  { addDelegate ( methods[j] ) ; }^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^Method[] methods = delegateIf[i] .getMethod ( className , null )  ;^62^^^^^50^72^[REPLACE] Method[] methods = delegateIf[i].getMethods (  ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int j = 0 ; j < methods.length; j++ )  {^63^^^^^50^72^[REPLACE] for  ( int j = 0; j < methods.length; j++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int j = 0; j < methods.length - 2; j++ )  {^63^^^^^50^72^[REPLACE] for  ( int j = 0; j < methods.length; j++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^if  ( Modifier.isAbstract ( methods[j] .getParameterTypes (  )   )  )  {^64^^^^^50^72^[REPLACE] if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^Type[] all = TypeUtils.add ( all, TypeUtils.getTypes ( delegateIf )  ) ;^54^^^^^50^72^[REPLACE] Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[ADD]^^54^^^^^50^72^[ADD] Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int i = 0 ; i < delegateIf.length; i++ )  {^61^^^^^50^72^[REPLACE] for  ( int i = 0; i < delegateIf.length; i++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^Method[] methods = delegateIf[i].getName (  ) ;^62^^^^^50^72^[REPLACE] Method[] methods = delegateIf[i].getMethods (  ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^if  ( Modifier.isAbstract ( methods[j].getName (  )  )  )  {^64^^^^^50^72^[REPLACE] if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REMOVE]^putfield ( DELEGATE ) ;^65^^^^^50^72^[REMOVE] ^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int i = 0; i < delegateIf.length + 1; i++ )  {^61^^^^^50^72^[REPLACE] for  ( int i = 0; i < delegateIf.length; i++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int j = 0; j < methods.length *  2; j++ )  {^63^^^^^50^72^[REPLACE] for  ( int j = 0; j < methods.length; j++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[ADD]^^63^64^65^66^^50^72^[ADD] for  ( int j = 0; j < methods.length; j++ )  { if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  { addDelegate ( methods[j] ) ; }^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^for  ( int j = 0; j < methods.length %  0.5 ; j++ )  {^63^^^^^50^72^[REPLACE] for  ( int j = 0; j < methods.length; j++ )  {^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^Type[] all = TypeUtils.add ( interfaces, TypeUtils.add ( delegateIf )  ) ;^54^^^^^50^72^[REPLACE] Type[] all = TypeUtils.add ( interfaces, TypeUtils.getTypes ( delegateIf )  ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^Method[] methods = delegateIf[i] .getMethod ( DELEGATE , this )  ;^62^^^^^50^72^[REPLACE] Method[] methods = delegateIf[i].getMethods (  ) ;^[METHOD] begin_class [TYPE] void [PARAMETER] int version int access String className Type superType Type[] interfaces String sourceFile [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  [TYPE]  Type[] all  interfaces  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  sourceFile  [TYPE]  Method[] methods  [TYPE]  int access  i  j  version 
[REPLACE]^final CodeEmitter e = super.begin_method ( access, CSTRUCT_OBJECT, exceptions ) ;^75^^^^^74^94^[REPLACE] final CodeEmitter e = super.begin_method ( access, sig, exceptions ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[ADD]^^75^^^^^74^94^[ADD] final CodeEmitter e = super.begin_method ( access, sig, exceptions ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[REPLACE]^if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  {^76^^^^^74^94^[REPLACE] if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[REPLACE]^if  (  opcode == Constants.INVOKESPECIAL )  {^81^^^^^74^94^[REPLACE] if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[REPLACE]^transformInit = true;^88^^^^^74^94^[REPLACE] transformInit = false;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[ADD]^^88^89^^^^74^94^[ADD] transformInit = false; }^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[REPLACE]^return new CodeEmitter ( e )  { private boolean transformInit = true;^77^^^^^74^94^[REPLACE] return new CodeEmitter ( e )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[REPLACE]^if  ( transformInit || access == Constants.INVOKESPECIAL )  {^81^^^^^74^94^[REPLACE] if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int access  opcode 
[REPLACE]^super.visitMethodInsn ( opcode, owner, sourceFile, desc ) ;^80^^^^^79^90^[REPLACE] super.visitMethodInsn ( opcode, owner, name, desc ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] int opcode String owner String name String desc [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int opcode 
[REPLACE]^if  (true || opcode == Constants.INVOKESPECIAL )  {^81^^^^^79^90^[REPLACE] if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] int opcode String owner String name String desc [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int opcode 
[REPLACE]^transformInit = true;^88^^^^^79^90^[REPLACE] transformInit = false;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] int opcode String owner String name String desc [CLASS] AddDelegateTransformer 1   [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  int opcode 
[REPLACE]^for  ( int j = 0; j < methods.length; j++ )  { if  ( Modifier.isAbstract ( methods[j].getModifiers (  )  )  )  {^97^^^^^96^116^[REPLACE] Method delegate;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( delegate.getReturnType (  ) .getName (  ) .equals ( m.getReturnType (  ) .getName (  )  )  ) {^100^^^^^96^116^[REPLACE] if  ( !delegate.getReturnType (  ) .getName (  ) .equals ( m.getReturnType (  ) .getName (  )  )  ) {^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^throw new CodeGenerationException  (" ")  ; ;^101^^^^^96^116^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[ADD]^delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ;^98^99^100^101^102^96^116^[ADD] try { delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ; if  ( !delegate.getReturnType (  ) .getName (  ) .equals ( m.getReturnType (  ) .getName (  )  )  ) { throw new IllegalArgumentException  (" ")  ; }^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^delegate =  delegateInullpl.getMethod ( null.getNanulle (  ) , null.getParanulleterTypes (  )  ) ;^99^^^^^96^116^[REPLACE] delegate = delegateImpl.getMethod ( m.getName (  ) , m.getParameterTypes (  )  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^104^^^^^96^116^[REPLACE] throw new CodeGenerationException  (" ")  ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^final Signature sig =   m   ;^107^^^^^96^116^[REPLACE] final Signature sig = ReflectUtils.getSignature ( m ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^Type[] exceptions = TypeUtils .parseSignature ( sourceFile )  ;^108^^^^^96^116^[REPLACE] Type[] exceptions = TypeUtils.getTypes ( m.getExceptionTypes (  )  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[ADD]^^108^^^^^96^116^[ADD] Type[] exceptions = TypeUtils.getTypes ( m.getExceptionTypes (  )  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^CodeEmitter e = super.begin_method ( Constants.ACC_PUBLIC, CSTRUCT_OBJECT, exceptions ) ;^109^^^^^96^116^[REPLACE] CodeEmitter e = super.begin_method ( Constants.ACC_PUBLIC, sig, exceptions ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^e.load_args (  ) ;^110^^^^^96^116^[REPLACE] e.load_this (  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^putfield ( DELEGATE ) ;^111^^^^^96^116^[REPLACE] e.getfield ( DELEGATE ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^e.load_this (  ) ;^112^^^^^96^116^[REPLACE] e.load_args (  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^e .CodeEmitter (  )  ;^113^^^^^96^116^[REPLACE] e.invoke_virtual ( delegateType, sig ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^e.load_args (  ) ;^114^^^^^96^116^[REPLACE] e.return_value (  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^e .load_this (  )  ;^115^^^^^96^116^[REPLACE] e.end_method (  ) ;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] AddDelegateTransformer 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^private boolean transformInit  = null ;^78^^^^^^^[REPLACE] private boolean transformInit = true;^[METHOD] addDelegate [TYPE] void [PARAMETER] Method m [CLASS] 1   [TYPE]  CodeEmitter e  [TYPE]  Type delegateType  superType  [TYPE]  Class[] delegateIf  [TYPE]  boolean false  transformInit  true  [TYPE]  Signature CSTRUCT_OBJECT  sig  [TYPE]  Type[] exceptions  [TYPE]  Class delegateImpl  [TYPE]  String DELEGATE  className  desc  name  owner  sourceFile  [TYPE]  Method delegate  m  [TYPE]  NoSuchMethodException e 
[REPLACE]^putfield ( DELEGATE ) ;^80^^^^^79^90^[REPLACE] super.visitMethodInsn ( opcode, owner, name, desc ) ;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] int opcode String owner String name String desc [CLASS] 1   [TYPE]  int opcode  [TYPE]  boolean false  transformInit  true  [TYPE]  String desc  name  owner 
[REPLACE]^if  ( transformInit ) {^81^^^^^79^90^[REPLACE] if  ( transformInit && opcode == Constants.INVOKESPECIAL )  {^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] int opcode String owner String name String desc [CLASS] 1   [TYPE]  int opcode  [TYPE]  boolean false  transformInit  true  [TYPE]  String desc  name  owner 
[REPLACE]^transformInit = true;^88^^^^^79^90^[REPLACE] transformInit = false;^[METHOD] visitMethodInsn [TYPE] void [PARAMETER] int opcode String owner String name String desc [CLASS] 1   [TYPE]  int opcode  [TYPE]  boolean false  transformInit  true  [TYPE]  String desc  name  owner 
