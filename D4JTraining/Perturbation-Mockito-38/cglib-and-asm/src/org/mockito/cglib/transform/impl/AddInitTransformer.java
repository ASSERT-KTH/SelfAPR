[REPLACE]^info =  ReflectUtils.getMethodInfo ( null ) ;^37^^^^^36^45^[REPLACE] info = ReflectUtils.getMethodInfo ( method ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method method [CLASS] AddInitTransformer 1   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method method  [TYPE]  boolean false  true 
[ADD]^^37^^^^^36^45^[ADD] info = ReflectUtils.getMethodInfo ( method ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method method [CLASS] AddInitTransformer 1   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method method  [TYPE]  boolean false  true 
[REPLACE]^final CodeEmitter emitter = super.begin_method ( access, sig, exceptions ) ;^39^^^^^36^45^[REPLACE] Type[] types = info.getSignature (  ) .getArgumentTypes (  ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method method [CLASS] AddInitTransformer 1   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method method  [TYPE]  boolean false  true 
[REPLACE]^if  ( types.length *  2 != 1 ) {^40^41^42^^^36^45^[REPLACE] if  ( types.length != 1 || !types[0].equals ( Constants.TYPE_OBJECT )  || !info.getSignature (  ) .getReturnType (  ) .equals ( Type.VOID_TYPE )  )  {^[METHOD] <init> [TYPE] Method) [PARAMETER] Method method [CLASS] AddInitTransformer 1   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method method  [TYPE]  boolean false  true 
[REPLACE]^return ;^43^^^^^36^45^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Method) [PARAMETER] Method method [CLASS] AddInitTransformer 1   [TYPE]  Type[] types  [TYPE]  MethodInfo info  [TYPE]  Method method  [TYPE]  boolean false  true 
[REPLACE]^Type[] types = info.getSignature (  ) .getArgumentTypes (  ) ;^48^^^^^47^61^[REPLACE] final CodeEmitter emitter = super.begin_method ( access, sig, exceptions ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^if  ( opcode == Constants.RETURN )  {^49^^^^^47^61^[REPLACE] if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[ADD]^^49^50^51^52^53^47^61^[ADD] if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  { return new CodeEmitter ( emitter )  { public void visitInsn ( int opcode )  { if  ( opcode == Constants.RETURN )  { load_this (  ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^if  (access  !=  Constants.RETURN )  {^52^^^^^47^61^[REPLACE] if  ( opcode == Constants.RETURN )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[ADD]^load_this (  ) ;invoke ( info ) ;^52^53^54^55^^47^61^[ADD] if  ( opcode == Constants.RETURN )  { load_this (  ) ; invoke ( info ) ; }^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^final CodeEmitter emitter = super.begin_method ( access, sig, exceptions ) ;^53^^^^^47^61^[REPLACE] load_this (  ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^final CodeEmitter emitter = super.begin_method ( access, sig, exceptions ) ;^54^^^^^47^61^[REPLACE] invoke ( info ) ;^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^return emitter;^50^^^^^47^61^[REPLACE] return new CodeEmitter ( emitter )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^if  ( access  &&  Constants.RETURN )  {^52^^^^^47^61^[REPLACE] if  ( opcode == Constants.RETURN )  {^[METHOD] begin_method [TYPE] CodeEmitter [PARAMETER] int access Signature sig Type[] exceptions [CLASS] AddInitTransformer 1   [TYPE]  Type[] exceptions  [TYPE]  CodeEmitter emitter  [TYPE]  MethodInfo info  [TYPE]  boolean false  true  [TYPE]  int access  opcode  [TYPE]  Signature sig 
[REPLACE]^if  ( opcode  !=  Constants.RETURN )  {^52^^^^^51^57^[REPLACE] if  ( opcode == Constants.RETURN )  {^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] AddInitTransformer 1   [TYPE]  MethodInfo info  [TYPE]  int opcode  [TYPE]  boolean false  true 
[REPLACE]^final CodeEmitter emitter = super.begin_method ( access, sig, exceptions ) ;^53^^^^^51^57^[REPLACE] load_this (  ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] AddInitTransformer 1   [TYPE]  MethodInfo info  [TYPE]  int opcode  [TYPE]  boolean false  true 
[ADD]^^53^^^^^51^57^[ADD] load_this (  ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] AddInitTransformer 1   [TYPE]  MethodInfo info  [TYPE]  int opcode  [TYPE]  boolean false  true 
[REPLACE]^final CodeEmitter emitter = super.begin_method ( access, sig, exceptions ) ;^54^^^^^51^57^[REPLACE] invoke ( info ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] AddInitTransformer 1   [TYPE]  MethodInfo info  [TYPE]  int opcode  [TYPE]  boolean false  true 
[ADD]^^54^^^^^51^57^[ADD] invoke ( info ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] AddInitTransformer 1   [TYPE]  MethodInfo info  [TYPE]  int opcode  [TYPE]  boolean false  true 
[REPLACE]^super .visitInsn ( opcode )  ;^56^^^^^51^57^[REPLACE] super.visitInsn ( opcode ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] AddInitTransformer 1   [TYPE]  MethodInfo info  [TYPE]  int opcode  [TYPE]  boolean false  true 
[REPLACE]^if  ( opcode  !=  Constants.RETURN )  {^52^^^^^51^57^[REPLACE] if  ( opcode == Constants.RETURN )  {^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  int opcode 
[ADD]^load_this (  ) ;invoke ( info ) ;^52^53^54^55^^51^57^[ADD] if  ( opcode == Constants.RETURN )  { load_this (  ) ; invoke ( info ) ; }^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  int opcode 
[REPLACE]^invoke ( info ) ;^53^^^^^51^57^[REPLACE] load_this (  ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  int opcode 
[REPLACE]^super.visitInsn ( opcode ) ;^54^^^^^51^57^[REPLACE] invoke ( info ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  int opcode 
[REPLACE]^super .visitInsn ( opcode )  ;^56^^^^^51^57^[REPLACE] super.visitInsn ( opcode ) ;^[METHOD] visitInsn [TYPE] void [PARAMETER] int opcode [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  int opcode 
