[REPLACE]^this.pass =  null;^30^^^^^29^31^[REPLACE] this.pass = pass;^[METHOD] <init> [TYPE] ClassTransformer) [PARAMETER] ClassTransformer pass [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
[ADD]^^30^^^^^29^31^[ADD] this.pass = pass;^[METHOD] <init> [TYPE] ClassTransformer) [PARAMETER] ClassTransformer pass [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
[REPLACE]^target.visitSource ( source, debug ) ;^25^^^^^24^27^[REPLACE] super.setTarget ( target ) ;^[METHOD] setTarget [TYPE] void [PARAMETER] ClassVisitor target [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
[ADD]^pass.setTarget ( target ) ;^25^26^^^^24^27^[ADD] super.setTarget ( target ) ; pass.setTarget ( target ) ;^[METHOD] setTarget [TYPE] void [PARAMETER] ClassVisitor target [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
[REPLACE]^pass .AbstractClassTransformer (  )  ;^26^^^^^24^27^[REPLACE] pass.setTarget ( target ) ;^[METHOD] setTarget [TYPE] void [PARAMETER] ClassVisitor target [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
[REPLACE]^target =  accept ( null, access, name, signature, superName, interfaces )  ? pass : cv;^41^^^^^35^43^[REPLACE] target = accept ( version, access, name, signature, superName, interfaces )  ? pass : cv;^[METHOD] visit [TYPE] void [PARAMETER] int version int access String name String signature String superName String[] interfaces [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String name  signature  superName  [TYPE]  String[] interfaces  [TYPE]  boolean false  true  [TYPE]  int access  version 
[REPLACE]^target.visit ( version, access, superName, signature, superName, interfaces ) ;^42^^^^^35^43^[REPLACE] target.visit ( version, access, name, signature, superName, interfaces ) ;^[METHOD] visit [TYPE] void [PARAMETER] int version int access String name String signature String superName String[] interfaces [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String name  signature  superName  [TYPE]  String[] interfaces  [TYPE]  boolean false  true  [TYPE]  int access  version 
[REMOVE]^target.visitSource ( source, debug ) ;^42^^^^^35^43^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] int version int access String name String signature String superName String[] interfaces [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String name  signature  superName  [TYPE]  String[] interfaces  [TYPE]  boolean false  true  [TYPE]  int access  version 
[REPLACE]^target.visitAnnotation ( source, debug ) ;^46^^^^^45^47^[REPLACE] target.visitSource ( source, debug ) ;^[METHOD] visitSource [TYPE] void [PARAMETER] String source String debug [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String debug  source  [TYPE]  boolean false  true 
[REPLACE]^target .visitInnerClass ( desc , owner , owner , null )  ;^50^^^^^49^51^[REPLACE] target.visitOuterClass ( owner, name, desc ) ;^[METHOD] visitOuterClass [TYPE] void [PARAMETER] String owner String name String desc [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String desc  name  owner  [TYPE]  boolean false  true 
[REPLACE]^return target.visitField ( access, name, desc, signature, value ) ;^54^^^^^53^55^[REPLACE] return target.visitAnnotation ( desc, visible ) ;^[METHOD] visitAnnotation [TYPE] AnnotationVisitor [PARAMETER] String desc boolean visible [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String desc  [TYPE]  boolean false  true  visible 
[REPLACE]^target .visitSource ( null , null )  ;^58^^^^^57^59^[REPLACE] target.visitAttribute ( attr ) ;^[METHOD] visitAttribute [TYPE] void [PARAMETER] Attribute attr [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true  [TYPE]  Attribute attr 
[REPLACE]^target.visitSource ( source, debug ) ;^62^^^^^61^63^[REPLACE] target.visitInnerClass ( name, outerName, innerName, access ) ;^[METHOD] visitInnerClass [TYPE] void [PARAMETER] String name String outerName String innerName int access [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String innerName  name  outerName  [TYPE]  boolean false  true  [TYPE]  int access 
[REPLACE]^return target.visitMethod ( access, name, desc, signature, value ) ;^70^^^^^65^71^[REPLACE] return target.visitField ( access, name, desc, signature, value ) ;^[METHOD] visitField [TYPE] FieldVisitor [PARAMETER] int access String name String desc String signature Object value [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  Object value  [TYPE]  ClassVisitor target  [TYPE]  String desc  name  signature  [TYPE]  boolean false  true  [TYPE]  int access 
[REPLACE]^return target.visitMethod ( access, name, desc, name, exceptions ) ;^78^^^^^73^79^[REPLACE] return target.visitMethod ( access, name, desc, signature, exceptions ) ;^[METHOD] visitMethod [TYPE] MethodVisitor [PARAMETER] int access String name String desc String signature String[] exceptions [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  String desc  name  signature  [TYPE]  String[] exceptions  [TYPE]  boolean false  true  [TYPE]  int access 
[REPLACE]^target.visitSource ( source, debug ) ;^82^^^^^81^84^[REPLACE] target.visitEnd (  ) ;^[METHOD] visitEnd [TYPE] void [PARAMETER] [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
[REPLACE]^target = true;^83^^^^^81^84^[REPLACE] target = null;^[METHOD] visitEnd [TYPE] void [PARAMETER] [CLASS] AbstractClassFilterTransformer   [TYPE]  ClassTransformer pass  [TYPE]  ClassVisitor target  [TYPE]  boolean false  true 
