[REPLACE]^private  final int MERGESORT_THRESHOLD = 12;^21^^^^^^^[REPLACE] private static final int MERGESORT_THRESHOLD = 12;^ [CLASS] SorterTemplate  
[REPLACE]^private static final int QUICKSORT_THRESHOLD  = null ;^22^^^^^^^[REPLACE] private static final int QUICKSORT_THRESHOLD = 7;^ [CLASS] SorterTemplate  
[REPLACE]^if  ( i  >  QUICKSORT_THRESHOLD )  {^35^^^^^32^73^[REPLACE] if  ( diff <= QUICKSORT_THRESHOLD )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( lo, i )   == lo )  {^39^^^^^32^73^[REPLACE] if  ( compare ( lo, i )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( lo, hi ) ;^40^^^^^32^73^[REPLACE] swap ( lo, i ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^40^^^^^32^73^[ADD] swap ( lo, i ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if   (  compare  (  lo, i  )   > 0  )   {  ;^42^^^^^32^73^[REPLACE] if  ( compare ( lo, hi )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^swap ( lo, hi ) ;^42^43^44^^^32^73^[ADD] if  ( compare ( lo, hi )  > 0 )  { swap ( lo, hi ) ; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( lo, i )  ;^43^^^^^32^73^[REPLACE] swap ( lo, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( i, hi )   >=  3 )  {^45^^^^^32^73^[REPLACE] if  ( compare ( i, hi )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^swap ( i, hi ) ;^45^46^47^^^32^73^[ADD] if  ( compare ( i, hi )  > 0 )  { swap ( i, hi ) ; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( diff, hi ) ;^46^^^^^32^73^[REPLACE] swap ( i, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( j  !=  i )  {^59^^^^^32^73^[REPLACE] if  ( j < i )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^break;^59^60^61^^^32^73^[ADD] if  ( j < i )  { break; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  (lo  >  hi - i + 1 )  {^65^^^^^32^73^[REPLACE] if  ( j - lo <= hi - i + 1 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^quickSortHelper ( lo, j ) ;lo = i + 1;quickSortHelper ( i + 1, hi ) ;^65^66^67^68^69^32^73^[ADD] if  ( j - lo <= hi - i + 1 )  { quickSortHelper ( lo, j ) ; lo = i + 1; } else { quickSortHelper ( i + 1, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^hi =  null;^70^^^^^65^71^[REPLACE] hi = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^67^^^^^32^73^[ADD] lo = i + 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^50^51^^^^32^73^[ADD] i = lo; int v = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^lo = mid + 1  ;^67^^^^^32^73^[REPLACE] lo = i + 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^hi =  null;^70^^^^^32^73^[REPLACE] hi = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^34^35^36^37^^32^73^[ADD] int diff = hi - lo; if  ( diff <= QUICKSORT_THRESHOLD )  { break; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int i =  ( hi + QUICKSORT_THRESHOLD )  lo;^38^^^^^32^73^[REPLACE] int i =  ( hi + lo )  / 2;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int j = hi  1;^48^^^^^32^73^[REPLACE] int j = hi - 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int j = i  ;^51^^^^^32^73^[REPLACE] int v = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if   (  len1 + len2 == 2  )   {  ;^100^^^^^99^126^[REPLACE] if  ( len1 == 0 || len2 == 0 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^return;  ;^101^^^^^99^126^[REPLACE] return;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( len1 + len2  &&  2 )  {^103^^^^^99^126^[REPLACE] if  ( len1 + len2 == 2 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if   (  compare  (  lo, hi  )   > 0  )   {  ;^104^^^^^99^126^[REPLACE] if  ( compare ( pivot, lo )  < 0 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( v, lo ) ;^105^^^^^99^126^[REPLACE] swap ( pivot, lo ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^105^^^^^99^126^[ADD] swap ( pivot, lo ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^return;  ;^107^^^^^99^126^[REPLACE] return;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( pivot, lo )   ==  0 )  {^104^^^^^99^126^[REPLACE] if  ( compare ( pivot, lo )  < 0 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^swap ( pivot, lo ) ;^104^105^106^^^99^126^[ADD] if  ( compare ( pivot, lo )  < 0 )  { swap ( pivot, lo ) ; }^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( pivot, second_cut ) ;^105^^^^^99^126^[REPLACE] swap ( pivot, lo ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int v = j  ;^109^^^^^99^126^[REPLACE] int first_cut, second_cut;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int len22  ;^110^^^^^99^126^[REPLACE] int len11, len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^110^^^^^99^126^[ADD] int len11, len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( second_cut  !=  second_cut )  {^111^^^^^99^126^[REPLACE] if  ( len1 > len2 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^117^^^^^111^121^[ADD] len22 = len2 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^118^119^^^^111^121^[ADD] second_cut = pivot + len22; first_cut = upper ( lo, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^first_cut =  upper ( second_cut, pivot, second_cut ) ;^119^^^^^111^121^[REPLACE] first_cut = upper ( lo, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len11 = first_cut  lo;^120^^^^^111^121^[REPLACE] len11 = first_cut - lo;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len11 = len1  2 >>> 1;^112^^^^^99^126^[REPLACE] len11 = len1 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^113^114^^^^99^126^[ADD] first_cut = lo + len11; second_cut = lower ( pivot, hi, first_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^second_cut =  lower ( v, hi, first_cut ) ;^114^^^^^99^126^[REPLACE] second_cut = lower ( pivot, hi, first_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^115^^^^^99^126^[ADD] len22 = second_cut - pivot;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len22 = len2 / 2  ;^112^^^^^99^126^[REPLACE] len11 = len1 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^first_cut = second_cut  second_cut;^113^^^^^99^126^[REPLACE] first_cut = lo + len11;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^114^115^^^^99^126^[ADD] second_cut = lower ( pivot, hi, first_cut ) ; len22 = second_cut - pivot;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len11 = len1 / 2  ;^117^^^^^99^126^[REPLACE] len22 = len2 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^118^119^^^^99^126^[ADD] second_cut = pivot + len22; first_cut = upper ( lo, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^len11 = first_cut - lo;^119^120^^^^99^126^[ADD] first_cut = upper ( lo, pivot, second_cut ) ; len11 = first_cut - lo;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^120^^^^^99^126^[ADD] len11 = first_cut - lo;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^rotate ( first_cut, pivot, new_mid ) ;^122^^^^^99^126^[REPLACE] rotate ( first_cut, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^123^^^^^99^126^[ADD] int new_mid = first_cut + len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^merge ( lo, first_cut, new_mid, second_cut, len22 ) ;^124^^^^^99^126^[REPLACE] merge ( lo, first_cut, new_mid, len11, len22 ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^merge ( new_mid, second_cut, hi, len1  len11, len2  len22 ) ;^125^^^^^99^126^[REPLACE] merge ( new_mid, second_cut, hi, len1 - len11, len2 - len22 ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
