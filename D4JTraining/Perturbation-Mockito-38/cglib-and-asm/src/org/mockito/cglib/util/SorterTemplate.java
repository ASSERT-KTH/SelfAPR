[REPLACE]^private static final int MERGESORT_THRESHOLD  = null ;^21^^^^^^^[REPLACE] private static final int MERGESORT_THRESHOLD = 12;^ [CLASS] SorterTemplate  
[REPLACE]^private static final int QUICKSORT_THRESHOLD ;^22^^^^^^^[REPLACE] private static final int QUICKSORT_THRESHOLD = 7;^ [CLASS] SorterTemplate  
[REPLACE]^quickSortHelper ( lo, i ) ;^28^^^^^27^30^[REPLACE] quickSortHelper ( lo, hi ) ;^[METHOD] quickSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  hi  i  j  lo  [TYPE]  boolean false  true 
[REPLACE]^insertionSort ( QUICKSORT_THRESHOLD, hi ) ;^29^^^^^27^30^[REPLACE] insertionSort ( lo, hi ) ;^[METHOD] quickSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  hi  i  j  lo  [TYPE]  boolean false  true 
[REMOVE]^quickSortHelper ( lo, j ) ;^29^^^^^27^30^[REMOVE] ^[METHOD] quickSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  hi  i  j  lo  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( ++i, v )   > v )  {^53^^^^^32^73^[REPLACE] while  ( compare ( ++i, v )  < 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( --j, v )   <  0 )  {^56^^^^^32^73^[REPLACE] while  ( compare ( --j, v )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( diff  >  QUICKSORT_THRESHOLD )  {^35^^^^^32^73^[REPLACE] if  ( diff <= QUICKSORT_THRESHOLD )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^break;^35^36^37^^^32^73^[ADD] if  ( diff <= QUICKSORT_THRESHOLD )  { break; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( lo, i )   >=  0 )  {^39^^^^^32^73^[REPLACE] if  ( compare ( lo, i )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( QUICKSORT_THRESHOLD, i ) ;^40^^^^^32^73^[REPLACE] swap ( lo, i ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^40^^^^^32^73^[ADD] swap ( lo, i ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( lo, hi )   < lo )  {^42^^^^^32^73^[REPLACE] if  ( compare ( lo, hi )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^42^43^44^^^32^73^[ADD] if  ( compare ( lo, hi )  > 0 )  { swap ( lo, hi ) ; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( lo, i ) ;^43^^^^^32^73^[REPLACE] swap ( lo, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( i, hi )   ==  0 )  {^45^^^^^32^73^[REPLACE] if  ( compare ( i, hi )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( diff, hi ) ;^46^^^^^32^73^[REPLACE] swap ( i, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( j  !=  i )  {^59^^^^^32^73^[REPLACE] if  ( j < i )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( j - lo  ==  hi - i + 1 / 0 )  {^65^^^^^32^73^[REPLACE] if  ( j - lo <= hi - i + 1 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^65^66^67^68^69^32^73^[ADD] if  ( j - lo <= hi - i + 1 )  { quickSortHelper ( lo, j ) ; lo = i + 1; } else { quickSortHelper ( i + 1, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^hi =  null;^70^^^^^65^71^[REPLACE] hi = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^lo =hi + 1;^67^^^^^32^73^[REPLACE] lo = i + 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( int j = i; j > lo; j-- )  {^33^^^^^32^73^[REPLACE] for  ( ;; )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( ++i, v )   >  0 )  {^53^^^^^32^73^[REPLACE] while  ( compare ( ++i, v )  < 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( --j, v )   <=  0 )  {^56^^^^^32^73^[REPLACE] while  ( compare ( --j, v )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( i  !=  QUICKSORT_THRESHOLD )  {^35^^^^^32^73^[REPLACE] if  ( diff <= QUICKSORT_THRESHOLD )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( lo, i )   ==  0 )  {^39^^^^^32^73^[REPLACE] if  ( compare ( lo, i )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( compare ( lo, hi )  )  > 0 )  {     swap ( lo, hi ) ; }^39^^^^^32^73^[REMOVE] ^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( lo, hi ) ;^40^^^^^32^73^[REPLACE] swap ( lo, i ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( lo, hi )   !=  0 )  {^42^^^^^32^73^[REPLACE] if  ( compare ( lo, hi )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^swap ( lo, hi ) ;^42^43^44^^^32^73^[ADD] if  ( compare ( lo, hi )  > 0 )  { swap ( lo, hi ) ; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^43^^^^^32^73^[ADD] swap ( lo, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( i, hi )   !=  3 )  {^45^^^^^32^73^[REPLACE] if  ( compare ( i, hi )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( i, j ) ;^46^^^^^32^73^[REPLACE] swap ( i, hi ) ;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( j  ==  i )  {^59^^^^^32^73^[REPLACE] if  ( j < i )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( j - lo  !=  hi - i + 1 )  {^65^^^^^32^73^[REPLACE] if  ( j - lo <= hi - i + 1 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^70^^^^^65^71^[ADD] hi = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^lo = i +hi;^67^^^^^32^73^[REPLACE] lo = i + 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( int j = i; j > lo; j-- )  {^52^^^^^32^73^[REPLACE] for  ( ;; )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( ++i, v )   !=  0 )  {^53^^^^^32^73^[REPLACE] while  ( compare ( ++i, v )  < 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( --j, v )   !=  3 )  {^56^^^^^32^73^[REPLACE] while  ( compare ( --j, v )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^56^57^58^^^32^73^[ADD] while  ( compare ( --j, v )  > 0 )  {  }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^break;^59^60^61^^^32^73^[ADD] if  ( j < i )  { break; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^i =  QUICKSORT_THRESHOLD;^50^^^^^32^73^[REPLACE] i = lo;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^hi =  null;^70^^^^^32^73^[REPLACE] hi = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int diff = i - QUICKSORT_THRESHOLD;^34^^^^^32^73^[REPLACE] int diff = hi - lo;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^34^35^36^37^^32^73^[ADD] int diff = hi - lo; if  ( diff <= QUICKSORT_THRESHOLD )  { break; }^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int i =  ( hi + lo )   ;^38^^^^^32^73^[REPLACE] int i =  ( hi + lo )  / 2;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int j =i - 1;^48^^^^^32^73^[REPLACE] int j = hi - 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int half = len / 2;^51^^^^^32^73^[REPLACE] int v = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( ++i, v )   <=  0 >>> 3 )  {^53^^^^^32^73^[REPLACE] while  ( compare ( ++i, v )  < 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( compare ( --j, v )   !=  1 )  {^56^^^^^32^73^[REPLACE] while  ( compare ( --j, v )  > 0 )  {^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^i =  null;^50^^^^^32^73^[REPLACE] i = lo;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^int v = j;^50^51^^^^32^73^[ADD] i = lo; int v = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^lo = mid + 1; ;^67^^^^^32^73^[REPLACE] lo = i + 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^67^^^^^32^73^[ADD] lo = i + 1;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int diff = hi  |  lo;^34^^^^^32^73^[REPLACE] int diff = hi - lo;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int i =  ( hi + QUICKSORT_THRESHOLD )   ;^38^^^^^32^73^[REPLACE] int i =  ( hi + lo )  / 2;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^51^^^^^32^73^[ADD] int v = j;^[METHOD] quickSortHelper [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( j - 1, j )   <=  0 )  {^78^^^^^75^85^[REPLACE] if  ( compare ( j - 1, j )  > 0 )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( compare ( lo, hi )  )  > 0 )  {     swap ( lo, hi ) ; }^78^^^^^75^85^[REMOVE] ^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( j  ^  1, j ) ;^79^^^^^75^85^[REPLACE] swap ( j - 1, j ) ;^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^79^^^^^75^85^[ADD] swap ( j - 1, j ) ;^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = lo  ||  1L ; i <= hi; i ||  ||  )  {^76^^^^^75^85^[REPLACE] for  ( int i = lo + 1 ; i <= hi; i++ )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^76^77^78^79^^75^85^[ADD] for  ( int i = lo + 1 ; i <= hi; i++ )  { for  ( int j = i; j > lo; j-- )  { if  ( compare ( j - 1, j )  > 0 )  { swap ( j - 1, j ) ;^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( j  >  1 << 2, j ) ;^79^^^^^75^85^[REPLACE] swap ( j - 1, j ) ;^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( int j = i; j  ==  lo; j-- )  {^77^^^^^75^85^[REPLACE] for  ( int j = i; j > lo; j-- )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( j - 1L, j )   !=  0 )  {^78^^^^^75^85^[REPLACE] if  ( compare ( j - 1, j )  > 0 )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( j  |  2, j ) ;^79^^^^^75^85^[REPLACE] swap ( j - 1, j ) ;^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( hint j = i; j > lo; j-- )  {^77^^^^^75^85^[REPLACE] for  ( int j = i; j > lo; j-- )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( int j = i; j  <  lo; j-- )  {^77^^^^^75^85^[REPLACE] for  ( int j = i; j > lo; j-- )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[ADD]^^77^78^79^80^81^75^85^[ADD] for  ( int j = i; j > lo; j-- )  { if  ( compare ( j - 1, j )  > 0 )  { swap ( j - 1, j ) ; } else { break;^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( j - 1, j )   >=  0 )  {^78^^^^^75^85^[REPLACE] if  ( compare ( j - 1, j )  > 0 )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i =QUICKSORT_THRESHOLD + 1 ; i <= hi; i++ )  {^76^^^^^75^85^[REPLACE] for  ( int i = lo + 1 ; i <= hi; i++ )  {^[METHOD] insertionSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  v  [TYPE]  boolean false  true 
[REPLACE]^int diff = hi  |  lo;^88^^^^^87^97^[REPLACE] int diff = hi - lo;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( diff  < mid )  {^89^^^^^87^97^[REPLACE] if  ( diff <= MERGESORT_THRESHOLD )  {^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^return lo;^91^^^^^87^97^[REPLACE] return;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^int mid = QUICKSORT_THRESHOLD + mid;^93^^^^^87^97^[REPLACE] int mid = lo + diff / 2;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^mergeSort ( lo, i ) ;^94^^^^^87^97^[REPLACE] mergeSort ( lo, mid ) ;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[ADD]^^94^95^^^^87^97^[ADD] mergeSort ( lo, mid ) ; mergeSort ( mid, hi ) ;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^mergeSort ( i, hi ) ;^95^^^^^87^97^[REPLACE] mergeSort ( mid, hi ) ;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REMOVE]^insertionSort ( lo, hi ) ;^95^^^^^87^97^[REMOVE] ^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^merge (i, mid, hi, mid -i, hi - mid ) ;^96^^^^^87^97^[REPLACE] merge ( lo, mid, hi, mid - lo, hi - mid ) ;^[METHOD] mergeSort [TYPE] void [PARAMETER] int lo int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  hi  i  j  lo  mid  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( len1 == 0 + 0 ) {^100^^^^^99^126^[REPLACE] if  ( len1 == 0 || len2 == 0 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^return lo;^101^^^^^99^126^[REPLACE] return;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( len1 + len2  &&  2 )  {^103^^^^^99^126^[REPLACE] if  ( len1 + len2 == 2 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( pivot, lo )   <=  0 )  {^104^^^^^99^126^[REPLACE] if  ( compare ( pivot, lo )  < 0 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( pivot, second_cut ) ;^105^^^^^99^126^[REPLACE] swap ( pivot, lo ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^return lo;^107^^^^^99^126^[REPLACE] return;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( pivot, lo )   <=  0 >>> 0 )  {^104^^^^^99^126^[REPLACE] if  ( compare ( pivot, lo )  < 0 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^swap ( pivot, lo ) ;^104^105^106^^^99^126^[ADD] if  ( compare ( pivot, lo )  < 0 )  { swap ( pivot, lo ) ; }^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^105^^^^^99^126^[ADD] swap ( pivot, lo ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int new_mid = first_cut + len22;^109^^^^^99^126^[REPLACE] int first_cut, second_cut;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int half = len / 2;^110^^^^^99^126^[REPLACE] int len11, len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^110^^^^^99^126^[ADD] int len11, len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^if  ( len1  >=  len2 )  {^111^^^^^99^126^[REPLACE] if  ( len1 > len2 )  {^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len22 = len2  ;^117^^^^^111^121^[REPLACE] len22 = len2 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^second_cut = pivot +v;^118^^^^^111^121^[REPLACE] second_cut = pivot + len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^first_cut =  upper ( second_cut, pivot, second_cut ) ;^119^^^^^111^121^[REPLACE] first_cut = upper ( lo, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len11 = first_cut -second_cut;^120^^^^^111^121^[REPLACE] len11 = first_cut - lo;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^120^^^^^111^121^[ADD] len11 = first_cut - lo;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^second_cut1 = len1  ;^112^^^^^99^126^[REPLACE] len11 = len1 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^first_cut =second_cut + len11;^113^^^^^99^126^[REPLACE] first_cut = lo + len11;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^113^^^^^99^126^[ADD] first_cut = lo + len11;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^second_cut =  lower ( v, hi, first_cut ) ;^114^^^^^99^126^[REPLACE] second_cut = lower ( pivot, hi, first_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len22 =mid - pivot;^115^^^^^99^126^[REPLACE] len22 = second_cut - pivot;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len11 = len1  ;^112^^^^^99^126^[REPLACE] len11 = len1 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^first_cut = lo +second_cut;^113^^^^^99^126^[REPLACE] first_cut = lo + len11;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^second_cut =  lower ( null, hi, first_cut ) ;^114^^^^^99^126^[REPLACE] second_cut = lower ( pivot, hi, first_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len22 = second_cut -new_mid;^115^^^^^99^126^[REPLACE] len22 = second_cut - pivot;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^115^^^^^99^126^[ADD] len22 = second_cut - pivot;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len22 = len2  ;^117^^^^^99^126^[REPLACE] len22 = len2 / 2;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^second_cut = pivot + len22;^117^118^^^^99^126^[ADD] len22 = len2 / 2; second_cut = pivot + len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^second_cut = pivot +v;^118^^^^^99^126^[REPLACE] second_cut = pivot + len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^first_cut =  upper ( second_cut, pivot, second_cut ) ;^119^^^^^99^126^[REPLACE] first_cut = upper ( lo, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^len11 = first_cut  >=  lo;^120^^^^^99^126^[REPLACE] len11 = first_cut - lo;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^rotate ( first_cut, v, second_cut ) ;^122^^^^^99^126^[REPLACE] rotate ( first_cut, pivot, second_cut ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int new_mid =second_cut + len22;^123^^^^^99^126^[REPLACE] int new_mid = first_cut + len22;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^merge ( lo, first_cut, new_mid, second_cut, len22 ) ;^124^^^^^99^126^[REPLACE] merge ( lo, first_cut, new_mid, len11, len22 ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^merge ( new_mid, second_cut, hi,second_cut - len11, len2 - second_cut ) ;^125^^^^^99^126^[REPLACE] merge ( new_mid, second_cut, hi, len1 - len11, len2 - len22 ) ;^[METHOD] merge [TYPE] void [PARAMETER] int lo int pivot int hi int len1 int len2 [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  i  j  len1  len11  len2  len22  lo  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int half = len / 2;^129^^^^^128^142^[REPLACE] int lot = lo;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int hit =second_cut - 1L;^130^^^^^128^142^[REPLACE] int hit = mid - 1;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^while  (second_cut  ==  hit )  {^131^^^^^128^142^[REPLACE] while  ( lot < hit )  {^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( i, hi - 1 ) ;^132^^^^^128^142^[REPLACE] swap ( lot++, hit-- ) ;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^lot = lo; hit = hi - 1; ;^134^^^^^128^142^[REPLACE] lot = mid; hit = hi - 1;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^lot = mid; hit = hi  |  1;^134^^^^^128^142^[REPLACE] lot = mid; hit = hi - 1;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^while  ( lot  >= second_cut )  {^135^^^^^128^142^[REPLACE] while  ( lot < hit )  {^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( i, hi - 1 ) ;^136^^^^^128^142^[REPLACE] swap ( lot++, hit-- ) ;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^lot = mid; hit = hi - 1; ;^138^^^^^128^142^[REPLACE] lot = lo; hit = hi - 1;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^lot = lo; pivott = hi - len11;^138^^^^^128^142^[REPLACE] lot = lo; hit = hi - 1;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^138^^^^^128^142^[ADD] lot = lo; hit = hi - 1;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^while  (second_cut  <=  second_cut )  {^139^^^^^128^142^[REPLACE] while  ( lot < hit )  {^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[ADD]^^139^140^^^^128^142^[ADD] while  ( lot < hit )  { swap ( lot++, hit-- ) ;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^swap ( i, hi - 1 ) ;^140^^^^^128^142^[REPLACE] swap ( lot++, hit-- ) ;^[METHOD] rotate [TYPE] void [PARAMETER] int lo int mid int hi [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  hi  hit  i  j  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  [TYPE]  boolean false  true 
[REPLACE]^int len =pivot - lo;^145^^^^^144^157^[REPLACE] int len = hi - lo;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^while  (second_cut  <=  0 )  {^146^^^^^144^157^[REPLACE] while  ( len > 0 )  {^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( mid, val )   >  0 )  {^149^^^^^144^157^[REPLACE] if  ( compare ( mid, val )  < 0 )  {^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len =  val;^153^^^^^144^157^[REPLACE] len = half;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^lo = i + 1; ;^150^^^^^144^157^[REPLACE] lo = mid + 1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[ADD]^^150^151^^^^144^157^[ADD] lo = mid + 1; len = len - half -1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len =val -1;^151^^^^^144^157^[REPLACE] len = len - half -1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^lo = second_cut + len1L1L;^150^^^^^144^157^[REPLACE] lo = mid + 1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[ADD]^^150^^^^^144^157^[ADD] lo = mid + 1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len = len  >  half  > 1;^151^^^^^144^157^[REPLACE] len = len - half -1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int half = len  ;^147^^^^^144^157^[REPLACE] int half = len / 2;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int mid= lo +second_cut;^148^^^^^144^157^[REPLACE] int mid= lo + half;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[ADD]^^148^^^^^144^157^[ADD] int mid= lo + half;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[ADD]^^153^^^^^144^157^[ADD] len = half;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len =new_mid -1;^151^^^^^144^157^[REPLACE] len = len - half -1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len = len  |  half  | 1;^151^^^^^144^157^[REPLACE] len = len - half -1;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int mid= lo  !=  half;^148^^^^^144^157^[REPLACE] int mid= lo + half;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^return second_cut;^156^^^^^144^157^[REPLACE] return lo;^[METHOD] lower [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int len =pivot - lo;^160^^^^^159^172^[REPLACE] int len = hi - lo;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^while  (second_cut  !=  0 * 0 )  {^161^^^^^159^172^[REPLACE] while  ( len > 0 )  {^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( val, mid )   >=  0 )  {^164^^^^^159^172^[REPLACE] if  ( compare ( val, mid )  < 0 )  {^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^lo = second_cut + len11;^167^^^^^159^172^[REPLACE] lo = mid + 1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len = len  <=  half  <= 1;^168^^^^^159^172^[REPLACE] len = len - half -1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len =  val;^165^^^^^159^172^[REPLACE] len = half;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^lo =second_cut + 1;^167^^^^^159^172^[REPLACE] lo = mid + 1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[ADD]^^167^^^^^159^172^[ADD] lo = mid + 1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len = len  &  half  & 1;^168^^^^^159^172^[REPLACE] len = len - half -1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[ADD]^^168^^^^^159^172^[ADD] len = len - half -1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int half =second_cut  ;^162^^^^^159^172^[REPLACE] int half = len / 2;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int mid =second_cut + half;^163^^^^^159^172^[REPLACE] int mid = lo + half;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^if  ( compare ( val, mid )   <=  3 )  {^164^^^^^159^172^[REPLACE] if  ( compare ( val, mid )  < 0 )  {^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len =new_mid -1;^168^^^^^159^172^[REPLACE] len = len - half -1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^lo = i + 1; ;^167^^^^^159^172^[REPLACE] lo = mid + 1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^len = len  &  half  & 0;^168^^^^^159^172^[REPLACE] len = len - half -1;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^int half = len  ;^162^^^^^159^172^[REPLACE] int half = len / 2;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
[REPLACE]^return second_cut;^171^^^^^159^172^[REPLACE] return lo;^[METHOD] upper [TYPE] int [PARAMETER] int lo int hi int val [CLASS] SorterTemplate   [TYPE]  int MERGESORT_THRESHOLD  QUICKSORT_THRESHOLD  diff  first_cut  half  hi  hit  i  j  len  len1  len11  len2  len22  lo  lot  mid  new_mid  pivot  second_cut  v  val  [TYPE]  boolean false  true 
