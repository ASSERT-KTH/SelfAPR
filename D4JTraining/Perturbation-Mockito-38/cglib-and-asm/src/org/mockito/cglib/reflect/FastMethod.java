[REPLACE]^return  (  ( Method ) member ) .getExceptionTypes (  ) ;^24^^^^^23^25^[REPLACE] super ( fc, method, helper ( fc, method )  ) ;^[METHOD] <init> [TYPE] Method) [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method 
[REPLACE]^int index = fc.getIndex ( method.getName (  ) , method .getReturnType (  )   ) ;^28^^^^^27^38^[REPLACE] int index = fc.getIndex ( method.getName (  ) , method.getParameterTypes (  )  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[ADD]^^28^^^^^27^38^[ADD] int index = fc.getIndex ( method.getName (  ) , method.getParameterTypes (  )  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^if  ( index  > i )  {^29^^^^^27^38^[REPLACE] if  ( index < 0 )  {^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0; i < types.length + 1; i++ )  {^32^^^^^27^38^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^System.err.println ( "  types["  ==  i  ==  "]="  ==  types[i].getName (  )  ) ;^33^^^^^27^38^[REPLACE] System.err.println ( "  types[" + i + "]=" + types[i].getName (  )  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REMOVE]^System.err.println ( "hash=" + method.getName (  ) .hashCode (  )  + " size=" + types.length ) ;^33^^^^^27^38^[REMOVE] ^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^System.err.println ( "  types[" + i + "]=" + types[i] .getReturnType (  )   ) ;^33^^^^^27^38^[REPLACE] System.err.println ( "  types[" + i + "]=" + types[i].getName (  )  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^Class[] types = method.getReturnType (  ) ;^30^^^^^27^38^[REPLACE] Class[] types = method.getParameterTypes (  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[ADD]^System.err.println ( "hash=" + method.getName (  ) .hashCode (  )  + " size=" + types.length ) ;^30^31^^^^27^38^[ADD] Class[] types = method.getParameterTypes (  ) ; System.err.println ( "hash=" + method.getName (  ) .hashCode (  )  + " size=" + types.length ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^32^^^^^27^38^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^return ;^35^^^^^27^38^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[ADD]^^35^^^^^27^38^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0; i < types.length *  2; i++ )  {^32^^^^^27^38^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^System.err.println ( "  types[" + index + "]=" + types[i] .getReturnType (  )   ) ;^33^^^^^27^38^[REPLACE] System.err.println ( "  types[" + i + "]=" + types[i].getName (  )  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^System.err.println ( "  types[" + index + "]=" + types[i].getName (  )  ) ;^33^^^^^27^38^[REPLACE] System.err.println ( "  types[" + i + "]=" + types[i].getName (  )  ) ;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[ADD]^^32^33^34^^^27^38^[ADD] for  ( int i = 0; i < types.length; i++ )  { System.err.println ( "  types[" + i + "]=" + types[i].getName (  )  ) ; }^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^return i;^37^^^^^27^38^[REPLACE] return index;^[METHOD] helper [TYPE] int [PARAMETER] FastClass fc Method method [CLASS] FastMethod   [TYPE]  Class[] types  [TYPE]  boolean false  true  [TYPE]  FastClass fc  [TYPE]  Method method  [TYPE]  int i  index 
[REPLACE]^return  (  ( Method ) member ) .getParameterTypes (  ) ;^41^^^^^40^42^[REPLACE] return  (  ( Method ) member ) .getReturnType (  ) ;^[METHOD] getReturnType [TYPE] Class [PARAMETER] [CLASS] FastMethod   [TYPE]  boolean false  true 
[REPLACE]^return  (  ( Method ) member ) .getExceptionTypes (  ) ;^45^^^^^44^46^[REPLACE] return  (  ( Method ) member ) .getParameterTypes (  ) ;^[METHOD] getParameterTypes [TYPE] Class[] [PARAMETER] [CLASS] FastMethod   [TYPE]  boolean false  true 
[REPLACE]^return  (  ( Method ) member )  .getReturnType (  )  ;^49^^^^^48^50^[REPLACE] return  (  ( Method ) member ) .getExceptionTypes (  ) ;^[METHOD] getExceptionTypes [TYPE] Class[] [PARAMETER] [CLASS] FastMethod   [TYPE]  boolean false  true 
[REPLACE]^return  (  ( Method ) member ) .getExceptionTypes (  ) ;^53^^^^^52^54^[REPLACE] return fc.invoke ( index, obj, args ) ;^[METHOD] invoke [TYPE] Object [PARAMETER] Object obj Object[] args [CLASS] FastMethod   [TYPE]  boolean false  true  [TYPE]  Object obj  [TYPE]  Object[] args 
[REPLACE]^return  (  ( Method ) member ) .getExceptionTypes (  ) ;^57^^^^^56^58^[REPLACE] return  ( Method ) member;^[METHOD] getJavaMethod [TYPE] Method [PARAMETER] [CLASS] FastMethod   [TYPE]  boolean false  true 
