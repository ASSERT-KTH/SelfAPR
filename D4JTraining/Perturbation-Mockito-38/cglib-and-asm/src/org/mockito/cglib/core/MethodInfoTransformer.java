[REPLACE]^private static final MethodInfoTransformer INSTANCE  = null ;^22^^^^^^^[REPLACE] private static final MethodInfoTransformer INSTANCE = new MethodInfoTransformer (  ) ;^ [CLASS] MethodInfoTransformer  
[REPLACE]^return ReflectUtils.getMethodInfo (  ( Method ) value ) ;^25^^^^^24^26^[REPLACE] return INSTANCE;^[METHOD] getInstance [TYPE] MethodInfoTransformer [PARAMETER] [CLASS] MethodInfoTransformer   [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! value instanceof Method )  {^29^^^^^28^36^[REPLACE] if  ( value instanceof Method )  {^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^}  else {^31^^^^^28^36^[REPLACE] } else if  ( value instanceof Constructor )  {^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[ADD]^}^31^32^33^34^35^28^36^[ADD] else if  ( value instanceof Constructor )  { return ReflectUtils.getMethodInfo (  ( Constructor ) value ) ; } else { throw new IllegalArgumentException  (" ")  ; }^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^return ;^34^^^^^28^36^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^return ReflectUtils.getMethodInfo (  ( Method ) value ) ;^32^^^^^28^36^[REPLACE] return ReflectUtils.getMethodInfo (  ( Constructor ) value ) ;^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[ADD]^^34^^^^^28^36^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^return ReflectUtils.getMethodInfo (  ( Constructor ) value ) ;^30^^^^^28^36^[REPLACE] return ReflectUtils.getMethodInfo (  ( Method ) value ) ;^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( ! value instanceof Constructor )  {^31^^^^^28^36^[REPLACE] } else if  ( value instanceof Constructor )  {^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[ADD]^}   return ReflectUtils.getMethodInfo (  ( Constructor ) value ) ;^31^32^33^34^35^28^36^[ADD] else if  ( value instanceof Constructor )  { return ReflectUtils.getMethodInfo (  ( Constructor ) value ) ; } else { throw new IllegalArgumentException  (" ")  ; }^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
[REPLACE]^return ReflectUtils .getMethodInfo ( 0 )  ;^30^^^^^28^36^[REPLACE] return ReflectUtils.getMethodInfo (  ( Method ) value ) ;^[METHOD] transform [TYPE] Object [PARAMETER] Object value [CLASS] MethodInfoTransformer   [TYPE]  Object value  [TYPE]  MethodInfoTransformer INSTANCE  [TYPE]  boolean false  true 
