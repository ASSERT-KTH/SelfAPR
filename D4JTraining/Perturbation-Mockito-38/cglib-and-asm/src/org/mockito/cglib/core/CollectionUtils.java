[REPLACE]^Object key = it.next (  ) ;^29^^^^^28^40^[REPLACE] Map buckets = new HashMap (  ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[ADD]^^29^^^^^28^40^[ADD] Map buckets = new HashMap (  ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^if  ( bucket != null )  {^34^^^^^28^40^[REPLACE] if  ( bucket == null )  {^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^buckets.put ( key, bucket ;^35^^^^^28^40^[REPLACE] buckets.put ( key, bucket = new LinkedList (  )  ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[ADD]^^35^^^^^28^40^[ADD] buckets.put ( key, bucket = new LinkedList (  )  ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^for  ( Iterator it = list.iterator (  ) ; it.hasNext (  ) ; )  {^30^^^^^28^40^[REPLACE] for  ( Iterator it = c.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[ADD]^^34^35^36^^^28^40^[ADD] if  ( bucket == null )  { buckets.put ( key, bucket = new LinkedList (  )  ) ; }^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^buckets.put ( key, bucket  =  buckets.put ( key, bucket ;^35^^^^^28^40^[REPLACE] buckets.put ( key, bucket = new LinkedList (  )  ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^Object value =  ( Object ) it.hasNext (  ) ;^31^^^^^28^40^[REPLACE] Object value =  ( Object ) it.next (  ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^Object key = it.next (  ) ;^32^^^^^28^40^[REPLACE] Object key = t.transform ( value ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[ADD]^^32^33^34^35^36^28^40^[ADD] Object key = t.transform ( value ) ; List bucket =  ( List ) buckets.get ( key ) ; if  ( bucket == null )  { buckets.put ( key, bucket = new LinkedList (  )  ) ; }^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^List bucket =  ( List ) buckets.keySet ( key ) ;^33^^^^^28^40^[REPLACE] List bucket =  ( List ) buckets.get ( key ) ;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^for  ( Iterator it = c.size (  ) ; it.hasNext (  ) ; )  {^30^^^^^28^40^[REPLACE] for  ( Iterator it = c.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^return indexes;^39^^^^^28^40^[REPLACE] return buckets;^[METHOD] bucket [TYPE] Map [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Object key  value  [TYPE]  List bucket  [TYPE]  Map buckets 
[REPLACE]^for  ( Iterator it = source .get ( key )  .iterator (  ) ; it.hasNext (  ) ; )  {^43^^^^^42^47^[REPLACE] for  ( Iterator it = source.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] reverse [TYPE] void [PARAMETER] Map source Map target [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object key  [TYPE]  Map source  target 
[REPLACE]^Object key = it.hasNext (  ) ;^44^^^^^42^47^[REPLACE] Object key = it.next (  ) ;^[METHOD] reverse [TYPE] void [PARAMETER] Map source Map target [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object key  [TYPE]  Map source  target 
[REPLACE]^for  ( Iterator it = target.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^43^^^^^42^47^[REPLACE] for  ( Iterator it = source.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] reverse [TYPE] void [PARAMETER] Map source Map target [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object key  [TYPE]  Map source  target 
[ADD]^^43^44^45^46^^42^47^[ADD] for  ( Iterator it = source.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  { Object key = it.next (  ) ; target.put ( source.get ( key ) , key ) ; }^[METHOD] reverse [TYPE] void [PARAMETER] Map source Map target [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Object key  [TYPE]  Map source  target 
[REPLACE]^Iterator it = c.size (  ) ;^50^^^^^49^57^[REPLACE] Iterator it = c.iterator (  ) ;^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[REPLACE]^while  ( it .next (  )   )  {^51^^^^^49^57^[REPLACE] while  ( it.hasNext (  )  )  {^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[REPLACE]^if  ( p.evaluate ( it.next (  )  )  )  {^52^^^^^49^57^[REPLACE] if  ( !p.evaluate ( it.next (  )  )  )  {^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[REPLACE]^it .next (  )  ;^53^^^^^49^57^[REPLACE] it.remove (  ) ;^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[REPLACE]^if  ( !p.evaluate ( it .hasNext (  )   )  )  {^52^^^^^49^57^[REPLACE] if  ( !p.evaluate ( it.next (  )  )  )  {^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[ADD]^it.remove (  ) ;^52^53^54^^^49^57^[ADD] if  ( !p.evaluate ( it.next (  )  )  )  { it.remove (  ) ; }^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[REPLACE]^return indexes;^56^^^^^49^57^[REPLACE] return c;^[METHOD] filter [TYPE] Collection [PARAMETER] Collection c Predicate p [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  Predicate p 
[REPLACE]^List result = new ArrayList ( c.iterator (  )  ) ;^60^^^^^59^65^[REPLACE] List result = new ArrayList ( c.size (  )  ) ;^[METHOD] transform [TYPE] List [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  List result 
[REPLACE]^for  ( Iterator it = c.iterator (  ) ; it.next (  ) ; )  {^61^^^^^59^65^[REPLACE] for  ( Iterator it = c.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] transform [TYPE] List [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  List result 
[REPLACE]^result.add ( t.transform ( it.hasNext (  )  )  ) ;^62^^^^^59^65^[REPLACE] result.add ( t.transform ( it.next (  )  )  ) ;^[METHOD] transform [TYPE] List [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  List result 
[ADD]^^62^63^^^^59^65^[ADD] result.add ( t.transform ( it.next (  )  )  ) ; }^[METHOD] transform [TYPE] List [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  List result 
[REPLACE]^for  ( Iterator it = c.size (  ) ; it.hasNext (  ) ; )  {^61^^^^^59^65^[REPLACE] for  ( Iterator it = c.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] transform [TYPE] List [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  List result 
[REPLACE]^return indexes;^64^^^^^59^65^[REPLACE] return result;^[METHOD] transform [TYPE] List [PARAMETER] Collection c Transformer t [CLASS] CollectionUtils   [TYPE]  Transformer t  [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  Collection c  [TYPE]  List result 
[REPLACE]^Map buckets = new HashMap (  ) ;^68^^^^^67^74^[REPLACE] Map indexes = new HashMap (  ) ;^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
[REPLACE]^int index = 2;^69^^^^^67^74^[REPLACE] int index = 0;^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
[REPLACE]^for  ( Iterator it = c.iterator (  ) ; it.hasNext (  ) ; )  {^70^^^^^67^74^[REPLACE] for  ( Iterator it = list.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
[REPLACE]^indexes.get ( it.next (  ) , new Integer ( index++ )  ) ;^71^^^^^67^74^[REPLACE] indexes.put ( it.next (  ) , new Integer ( index++ )  ) ;^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
[REPLACE]^indexes.put ( it.hasNext (  ) , new Integer ( index++ )  ) ;^71^^^^^67^74^[REPLACE] indexes.put ( it.next (  ) , new Integer ( index++ )  ) ;^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
[REPLACE]^for  ( Iterator it = list .size (  )  ; it.hasNext (  ) ; )  {^70^^^^^67^74^[REPLACE] for  ( Iterator it = list.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
[REPLACE]^return result;^73^^^^^67^74^[REPLACE] return indexes;^[METHOD] getIndexMap [TYPE] Map [PARAMETER] List list [CLASS] CollectionUtils   [TYPE]  boolean false  true  [TYPE]  Iterator it  [TYPE]  List list  [TYPE]  Map indexes  [TYPE]  int index 
