[REPLACE]^private static final Map transforms  = null ;^23^^^^^^^[REPLACE] private static final Map transforms = new HashMap (  ) ;^ [CLASS] TypeUtils  
[REPLACE]^private static  Map rtransforms = new HashMap (  ) ;^24^^^^^^^[REPLACE] private static final Map rtransforms = new HashMap (  ) ;^ [CLASS] TypeUtils  
[REPLACE]^if  ( t.equals ( "" )  )  {^223^^^^^222^241^[REPLACE] if  ( type.equals ( "" )  )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return t;^224^^^^^222^241^[REPLACE] return type;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^^226^227^228^229^230^222^241^[ADD] String t =  ( String ) transforms.get ( type ) ; if  ( t != null )  { return t; } else if  ( type.indexOf ( '.' )  < 0 )  { return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^if   (  types == null  )   {  ;^227^^^^^222^241^[REPLACE] if  ( t != null )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^}  else {^229^^^^^222^241^[REPLACE] } else if  ( type.indexOf ( '.' )  < 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )   1 )  > 0 )  {^234^^^^^229^240^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0 , type.length (  )  - 4 - sb.length (  )  - 4 * 2 ) ;^237^^^^^229^240^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return sb.StringBuffer (  ) ;^239^^^^^229^240^[REPLACE] return sb.toString (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^String[] names = new length]  ;^232^^^^^229^240^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int index = 4;^233^^^^^229^240^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return map ( "java.lang."  type ) ;^230^^^^^222^241^[REPLACE] return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )   1 )  > 0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0 , type.size (  )  - sb.size (  )  * 2 ) ;^237^^^^^222^241^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return sb.StringBuffer (  ) ;^239^^^^^222^241^[REPLACE] return sb.toString (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^String[] names = new length]  ;^232^^^^^222^241^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int index = 2;^233^^^^^222^241^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return s;  ;^228^^^^^222^241^[REPLACE] return t;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^} else if  ( type.indexOf ( '.' )   >  0 )  {^229^^^^^222^241^[REPLACE] } else if  ( type.indexOf ( '.' )  < 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0, type.length (  )  + 3 - sb.length (  )  + 3 * 2 ) ;^237^^^^^229^240^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return sb .StringBuffer (  )  ;^239^^^^^229^240^[REPLACE] return sb.toString (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^^232^^^^^229^240^[ADD] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int index = 0 - 1;^233^^^^^229^240^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return map ( "java.lang."  t ) ;^230^^^^^222^241^[REPLACE] return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0 , type.length (  )  /  0 .5  - sb.length (  )  /  0 .5  * 2 ) ;^237^^^^^222^241^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return sb .StringBuffer (  )  ;^239^^^^^222^241^[REPLACE] return sb.toString (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^^232^^^^^222^241^[ADD] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int size = 0  ;^233^^^^^222^241^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^246^^^^^243^264^[REPLACE] return Constants.TYPE_CHARACTER;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^248^^^^^243^264^[REPLACE] return Constants.TYPE_BOOLEAN;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^250^^^^^243^264^[REPLACE] return Constants.TYPE_DOUBLE;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^252^^^^^243^264^[REPLACE] return Constants.TYPE_FLOAT;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^254^^^^^243^264^[REPLACE] return Constants.TYPE_LONG;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^256^^^^^243^264^[REPLACE] return Constants.TYPE_INTEGER;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^258^^^^^243^264^[REPLACE] return Constants.TYPE_SHORT;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^260^^^^^243^264^[REPLACE] return Constants.TYPE_BYTE;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type;  ;^262^^^^^243^264^[REPLACE] return type;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^267^^^^^266^286^[REPLACE] if  ( Constants.TYPE_INTEGER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^return Type.INT_TYPE;return Type.BOOLEAN_TYPE;^267^268^269^270^^266^286^[ADD] if  ( Constants.TYPE_INTEGER.equals ( type )  )  { return Type.INT_TYPE; } else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  { return Type.BOOLEAN_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^269^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.BOOLEAN_TYPE;return Type.DOUBLE_TYPE;^269^270^271^272^^266^286^[ADD] else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  { return Type.BOOLEAN_TYPE; } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  { return Type.DOUBLE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^271^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.LONG_TYPE;^271^272^273^274^^266^286^[ADD] else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  { return Type.DOUBLE_TYPE; } else if  ( Constants.TYPE_LONG.equals ( type )  )  { return Type.LONG_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.LONG_TYPE;return Type.CHAR_TYPE;^273^274^275^276^^266^286^[ADD] else if  ( Constants.TYPE_LONG.equals ( type )  )  { return Type.LONG_TYPE; } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.CHAR_TYPE;return Type.BYTE_TYPE;^275^276^277^278^^266^286^[ADD] else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE; } else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type;  ;^284^^^^^281^285^[REPLACE] return type;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^282^^^^^266^286^[REPLACE] return Type.SHORT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type;  ;^284^^^^^266^286^[REPLACE] return type;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^280^^^^^266^286^[REPLACE] return Type.FLOAT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^278^^^^^266^286^[REPLACE] return Type.BYTE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT.equals ( type )  )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^276^^^^^266^286^[REPLACE] return Type.CHAR_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.FLOAT_TYPE;^277^278^279^280^^266^286^[ADD] else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE; } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.SHORT_TYPE;^279^280^281^282^^266^286^[ADD] else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE; } else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return type;^281^282^283^284^285^266^286^[ADD] else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE; } else { return type; }^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.FLOAT_TYPE;return Type.SHORT_TYPE;^279^280^281^282^^266^286^[ADD] else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE; } else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( this , true )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^274^^^^^266^286^[REPLACE] return Type.LONG_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BYTE .replace ( null , null )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.SHORT_TYPE;return type;^281^282^283^284^285^266^286^[ADD] else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE; } else { return type; }^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( this , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BYTE.equals ( type )  )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( null , this )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^272^^^^^266^286^[REPLACE] return Type.DOUBLE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if   (  equals  (  type  )    )   {  ;^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.CHAR_TYPE;^273^274^275^276^^266^286^[ADD] else if  ( Constants.TYPE_LONG.equals ( type )  )  { return Type.LONG_TYPE; } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.BYTE_TYPE;return Type.FLOAT_TYPE;^277^278^279^280^^266^286^[ADD] else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE; } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_CHARACTER .replace ( null , null )   )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^270^^^^^266^286^[REPLACE] return Type.BOOLEAN_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^271^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_LONG .replace ( 0 , this )   )  {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( null , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_FLOAT .replace ( 1 , true )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_LONG.equals ( type )  )  {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BYTE .replace ( false , null )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE .replace ( null , null )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BYTE .replace ( this , null )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName  (  getComponentType  (  type  )    )   + "[]";  ;^268^^^^^266^286^[REPLACE] return Type.INT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  {^269^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.DOUBLE_TYPE;^269^270^271^272^^266^286^[ADD] else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  { return Type.BOOLEAN_TYPE; } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  { return Type.DOUBLE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_DOUBLE .replace ( this , null )   )  {^271^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_LONG .replace ( null , true )   )  {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.BYTE_TYPE;^275^276^277^278^^266^286^[ADD] else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE; } else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( this , this )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( null , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT .replace ( true , null )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT .replace ( null , null )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( true , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( false , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( null , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( null , 0 )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_CHARACTER .replace ( null , 1 )   )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( null , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT .replace ( this , null )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;  ;^380^^^^^377^398^[REPLACE] return Constants.T_BYTE;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;  ;^382^^^^^377^398^[REPLACE] return Constants.T_CHAR;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_CHAR;  ;^384^^^^^377^398^[REPLACE] return Constants.T_DOUBLE;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;  ;^386^^^^^377^398^[REPLACE] return Constants.T_FLOAT;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;  ;^388^^^^^377^398^[REPLACE] return Constants.T_INT;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;  ;^390^^^^^377^398^[REPLACE] return Constants.T_LONG;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;  ;^392^^^^^377^398^[REPLACE] return Constants.T_SHORT;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;  ;^394^^^^^377^398^[REPLACE] return Constants.T_BOOLEAN;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return -3;^396^^^^^377^398^[REPLACE] return -1;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^String[] names = new length]  ;^401^^^^^400^417^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 , len = s.length (  ) ; i < len; i++ )  {^402^^^^^400^417^[REPLACE] for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = s .lastIndexOf ( i )  ; i < len; i++ )  {^402^^^^^400^417^[REPLACE] for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[ADD]^^403^^^^^400^417^[ADD] char c = s.charAt ( i ) ;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^return sb.StringBuffer (  ) ;^416^^^^^400^417^[REPLACE] return sb.toString (  ) ;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
