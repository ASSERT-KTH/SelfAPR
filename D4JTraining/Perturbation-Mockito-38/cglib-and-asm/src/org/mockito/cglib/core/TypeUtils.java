[REPLACE]^private static final Map transforms  = null ;^23^^^^^^^[REPLACE] private static final Map transforms = new HashMap (  ) ;^ [CLASS] TypeUtils  
[REPLACE]^private static final Map rtransforms ;^24^^^^^^^[REPLACE] private static final Map rtransforms = new HashMap (  ) ;^ [CLASS] TypeUtils  
[REPLACE]^return Type .getType ( className )  ;^44^^^^^43^45^[REPLACE] return Type.getType ( "L" + className.replace ( '.', '/' )  + ";" ) ;^[METHOD] getType [TYPE] Type [PARAMETER] String className [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String className  [TYPE]  boolean false  true 
[REPLACE]^return  ( Constants.ACC_SYNTHETIC & access )  != 0;^48^^^^^47^49^[REPLACE] return  ( Constants.ACC_FINAL & access )  != 0;^[METHOD] isFinal [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return true ;^52^^^^^51^53^[REPLACE] return  ( Constants.ACC_STATIC & access )  != 0;^[METHOD] isStatic [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return true ;^56^^^^^55^57^[REPLACE] return  ( Constants.ACC_PROTECTED & access )  != 0;^[METHOD] isProtected [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return  ( Constants.ACC_PUBLIC & access )   ;^60^^^^^59^61^[REPLACE] return  ( Constants.ACC_PUBLIC & access )  != 0;^[METHOD] isPublic [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return true ;^64^^^^^63^65^[REPLACE] return  ( Constants.ACC_ABSTRACT & access )  != 0;^[METHOD] isAbstract [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return  ( Constants.ACC_INTERFACE & access )   ;^68^^^^^67^69^[REPLACE] return  ( Constants.ACC_INTERFACE & access )  != 0;^[METHOD] isInterface [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return  ( Constants.ACC_PRIVATE & access )   ;^72^^^^^71^73^[REPLACE] return  ( Constants.ACC_PRIVATE & access )  != 0;^[METHOD] isPrivate [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return  ( Constants.ACC_SYNTHETIC & access )   ;^76^^^^^75^77^[REPLACE] return  ( Constants.ACC_SYNTHETIC & access )  != 0;^[METHOD] isSynthetic [TYPE] boolean [PARAMETER] int access [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int access  [TYPE]  boolean false  true 
[REPLACE]^return getClassName ( getComponentType ( type )  )  + "[]";^81^^^^^80^82^[REPLACE] return getPackageName ( getClassName ( type )  ) ;^[METHOD] getPackageName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^int idx = className.indexOf ( '.' ) ;^85^^^^^84^87^[REPLACE] int idx = className.lastIndexOf ( '.' ) ;^[METHOD] getPackageName [TYPE] String [PARAMETER] String className [CLASS] TypeUtils   [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int idx 
[ADD]^^85^^^^^84^87^[ADD] int idx = className.lastIndexOf ( '.' ) ;^[METHOD] getPackageName [TYPE] String [PARAMETER] String className [CLASS] TypeUtils   [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int idx 
[REPLACE]^return  ( idx < 0 )  ? "" : className.indexOf ( 0, idx ) ;^86^^^^^84^87^[REPLACE] return  ( idx < 0 )  ? "" : className.substring ( 0, idx ) ;^[METHOD] getPackageName [TYPE] String [PARAMETER] String className [CLASS] TypeUtils   [TYPE]  String className  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int idx 
[REPLACE]^if  ( s == null || s.charAt (  )  %  2 == 0 )  {^90^^^^^89^94^[REPLACE] if  ( s == null || s.length (  )  == 0 )  {^[METHOD] upperFirst [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String s  [TYPE]  boolean false  true 
[ADD]^^90^91^92^^^89^94^[ADD] if  ( s == null || s.length (  )  == 0 )  { return s; }^[METHOD] upperFirst [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String s  [TYPE]  boolean false  true 
[REPLACE]^return t;^91^^^^^89^94^[REPLACE] return s;^[METHOD] upperFirst [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String s  [TYPE]  boolean false  true 
[REPLACE]^return Character.toUpperCase ( s.charAt ( 0 - 0 )  )   |  s.charAt ( 1 ) ;^93^^^^^89^94^[REPLACE] return Character.toUpperCase ( s.charAt ( 0 )  )  + s.substring ( 1 ) ;^[METHOD] upperFirst [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String s  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( isArray ( type )  )  {^97^^^^^96^104^[REPLACE] if  ( isPrimitive ( type )  )  {^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( isArray ( type )  )  {^99^^^^^96^104^[REPLACE] } else if  ( isArray ( type )  )  {^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type.getSort (  ) ;^102^^^^^96^104^[REPLACE] return type.getClassName (  ) ;^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName ( getComponentType ( type )  )   &&  "[]";^100^^^^^96^104^[REPLACE] return getClassName ( getComponentType ( type )  )  + "[]";^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName ( getComponentType ( type )  )   ^  "[]";^100^^^^^96^104^[REPLACE] return getClassName ( getComponentType ( type )  )  + "[]";^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName ( getComponentType ( type )  )  + "[]";^98^^^^^96^104^[REPLACE] return  ( String ) rtransforms.get ( type.getDescriptor (  )  ) ;^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^99^^^^^96^104^[REPLACE] } else if  ( isArray ( type )  )  {^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type .getClassName ( type )  ;^102^^^^^96^104^[REPLACE] return type.getClassName (  ) ;^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName ( getComponentType ( type )  )   ;^100^^^^^96^104^[REPLACE] return getClassName ( getComponentType ( type )  )  + "[]";^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return  ( String ) rtransforms.get ( type.getSort (  )  ) ;^98^^^^^96^104^[REPLACE] return  ( String ) rtransforms.get ( type.getDescriptor (  )  ) ;^[METHOD] getClassName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^if  ( copy != null )  {^107^^^^^106^119^[REPLACE] if  ( types == null )  {^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^if  ( list.get ( extra )  )  {^111^^^^^106^119^[REPLACE] if  ( list.contains ( extra )  )  {^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[ADD]^^111^112^113^^^106^119^[ADD] if  ( list.contains ( extra )  )  { return types; }^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^return copy;^112^^^^^106^119^[REPLACE] return types;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^copy[types.length]  =  copy[types.length] ;^116^^^^^106^119^[REPLACE] copy[types.length] = extra;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^return types;^117^^^^^106^119^[REPLACE] return copy;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^List list = Arrays.asList ( copy ) ;^110^^^^^106^119^[REPLACE] List list = Arrays.asList ( types ) ;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[ADD]^^110^^^^^106^119^[ADD] List list = Arrays.asList ( types ) ;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^Type[] copy = new Type[types.length - 2 + 1];^114^^^^^106^119^[REPLACE] Type[] copy = new Type[types.length + 1];^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^return names;^108^^^^^106^119^[REPLACE] return new Type[]{ extra };^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[ADD]^return types;^111^112^113^^^106^119^[ADD] if  ( list.contains ( extra )  )  { return types; }^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^copy[types.length] ;^116^^^^^106^119^[REPLACE] copy[types.length] = extra;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[ADD]^^116^^^^^106^119^[ADD] copy[types.length] = extra;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^return type;^112^^^^^106^119^[REPLACE] return types;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^Type[] copy = new Type[types.length (  )  + 1];^114^^^^^106^119^[REPLACE] Type[] copy = new Type[types.length + 1];^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] types Type extra [CLASS] TypeUtils   [TYPE]  Type[] copy  types  [TYPE]  Type extra  [TYPE]  List list  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms 
[REPLACE]^Type[] all = new Type[t1.length + 3 + t2.length + 3];^123^^^^^121^127^[REPLACE] Type[] all = new Type[t1.length + t2.length];^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] t1 Type[] t2 [CLASS] TypeUtils   [TYPE]  Type[] all  t1  t2  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^System.arraycopy ( t1, 0 , all, 0 , t1.length ) ;^124^^^^^121^127^[REPLACE] System.arraycopy ( t1, 0, all, 0, t1.length ) ;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] t1 Type[] t2 [CLASS] TypeUtils   [TYPE]  Type[] all  t1  t2  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^System.arraycopy ( t2, 0 , all, t2.length, t2.length ) ;^125^^^^^121^127^[REPLACE] System.arraycopy ( t2, 0, all, t1.length, t2.length ) ;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] t1 Type[] t2 [CLASS] TypeUtils   [TYPE]  Type[] all  t1  t2  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return null;^126^^^^^121^127^[REPLACE] return all;^[METHOD] add [TYPE] Type[] [PARAMETER] Type[] t1 Type[] t2 [CLASS] TypeUtils   [TYPE]  Type[] all  t1  t2  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return Type .getType ( name )  ;^131^^^^^129^132^[REPLACE] return Type.getType ( "L" + name + ";" ) ;^[METHOD] fromInternalName [TYPE] Type [PARAMETER] String name [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^if  ( names != null )  {^135^^^^^134^143^[REPLACE] if  ( names == null )  {^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return true;^136^^^^^134^143^[REPLACE] return null;^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return all;^136^^^^^134^143^[REPLACE] return null;^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^Type[] types = new Type[classes.length];^138^^^^^134^143^[REPLACE] Type[] types = new Type[names.length];^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^138^^^^^134^143^[ADD] Type[] types = new Type[names.length];^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < names.length %  2; i++ )  {^139^^^^^134^143^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^types[i]  =  types[i] ;^140^^^^^134^143^[REPLACE] types[i] = fromInternalName ( names[i] ) ;^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < names.length; i++ )  {^139^^^^^134^143^[REPLACE] for  ( int i = 0; i < names.length; i++ )  {^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return type;^142^^^^^134^143^[REPLACE] return types;^[METHOD] fromInternalNames [TYPE] Type[] [PARAMETER] String[] names [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^int size = 0 ;^146^^^^^145^151^[REPLACE] int size = 0;^[METHOD] getStackSize [TYPE] int [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  size 
[REPLACE]^for  ( sizent i = 0; i < types.length %  2; i++ )  {^147^^^^^145^151^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] getStackSize [TYPE] int [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  size 
[REPLACE]^size +=  null[i].getSize (  ) ;^148^^^^^145^151^[REPLACE] size += types[i].getSize (  ) ;^[METHOD] getStackSize [TYPE] int [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  size 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^147^^^^^145^151^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] getStackSize [TYPE] int [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  size 
[REPLACE]^return i;^150^^^^^145^151^[REPLACE] return size;^[METHOD] getStackSize [TYPE] int [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  size 
[REPLACE]^if  ( types != null )  {^154^^^^^153^162^[REPLACE] if  ( types == null )  {^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return true;^155^^^^^153^162^[REPLACE] return null;^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return this;^155^^^^^153^162^[REPLACE] return null;^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^List types = new ArrayList ( 5 ) ;^157^^^^^153^162^[REPLACE] String[] names = new String[types.length];^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^157^^^^^153^162^[ADD] String[] names = new String[types.length];^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < types.length (  ) ; i++ )  {^158^^^^^153^162^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^158^159^160^^^153^162^[ADD] for  ( int i = 0; i < types.length; i++ )  { names[i] = types[i].getInternalName (  ) ; }^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^names[i]  =  names[i] ;^159^^^^^153^162^[REPLACE] names[i] = types[i].getInternalName (  ) ;^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^158^^^^^153^162^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return Constants.TYPE_INTEGER;^161^^^^^153^162^[REPLACE] return names;^[METHOD] toInternalNames [TYPE] String[] [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  String[] names  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^int space = s .indexOf ( rparen , space )  ;^165^^^^^164^178^[REPLACE] int space = s.indexOf ( ' ' ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^int lparen = s.length ( ' ( ', rparen ) ;^166^^^^^164^178^[REPLACE] int lparen = s.indexOf ( ' ( ', space ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^int rparen = s.indexOf ( ' ) ', space ) ;^167^^^^^164^178^[REPLACE] int rparen = s.indexOf ( ' ) ', lparen ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[ADD]^^167^^^^^164^178^[ADD] int rparen = s.indexOf ( ' ) ', lparen ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^String returnType = s.indexOf ( 0L, space ) ;^168^^^^^164^178^[REPLACE] String returnType = s.substring ( 0, space ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^String methodName = s.substring (rparen + 0, lparen ) ;^169^^^^^164^178^[REPLACE] String methodName = s.substring ( space + 1, lparen ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^List types = new ArrayList ( 5 ) ;^170^^^^^164^178^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^sb.length ( ' ( ' ) ;^171^^^^^164^178^[REPLACE] sb.append ( ' ( ' ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^for  ( Iterator it = parseTypes ( s, lparen  |  1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^[REPLACE] for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^sb.append ( it.hasNext (  )  ) ;^173^^^^^164^178^[REPLACE] sb.append ( it.next (  )  ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^sb.append ( it .hasNext (  )   ) ;^173^^^^^164^178^[REPLACE] sb.append ( it.next (  )  ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^for  ( Iterator it = parseTypes ( s, space + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^172^^^^^164^178^[REPLACE] for  ( Iterator it = parseTypes ( s, lparen + 1, rparen ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^sb .toString (  )  ' ) ;^175^^^^^164^178^[REPLACE] sb.append ( ' ) ' ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^sb.append ( map ( methodName )  ) ;^176^^^^^164^178^[REPLACE] sb.append ( map ( returnType )  ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^return  new Signature ( Constants.CONSTRUCTOR_NAME, sb.toString (  )  )   ) ;^177^^^^^164^178^[REPLACE] return new Signature ( methodName, sb.toString (  )  ) ;^[METHOD] parseSignature [TYPE] Signature [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Iterator it  [TYPE]  StringBuffer sb  [TYPE]  String methodName  returnType  s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int lparen  rparen  space 
[REPLACE]^return getClassName ( getComponentType ( type )  )  + "[]";^181^^^^^180^182^[REPLACE] return Type.getType ( map ( s )  ) ;^[METHOD] parseType [TYPE] Type [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String s  [TYPE]  boolean false  true 
[REPLACE]^List names = parseTypes ( s, 0 , s.length (  )  ) ;^185^^^^^184^191^[REPLACE] List names = parseTypes ( s, 0, s.length (  )  ) ;^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^Type[] types = new Type[names.iterator (  ) ];^186^^^^^184^191^[REPLACE] Type[] types = new Type[names.size (  ) ];^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < types.length /  0.5 ; i++ )  {^187^^^^^184^191^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^types[i] ;^188^^^^^184^191^[REPLACE] types[i] = Type.getType (  ( String ) names.get ( i )  ) ;^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^types[i]  =  types[i] ;^188^^^^^184^191^[REPLACE] types[i] = Type.getType (  ( String ) names.get ( i )  ) ;^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^187^^^^^184^191^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return type;^190^^^^^184^191^[REPLACE] return types;^[METHOD] parseTypes [TYPE] Type[] [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  List names  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^List types = new ArrayList ( 5 ) ;^194^^^^^193^202^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^194^^^^^193^202^[ADD] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^sb.toString ( " ( " ) ;^195^^^^^193^202^[REPLACE] sb.append ( " ( " ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < types.length /  0.5 ; i++ )  {^196^^^^^193^202^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^sb.append ( types[i].getSize (  )  ) ;^197^^^^^193^202^[REPLACE] sb.append ( types[i].getDescriptor (  )  ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^196^^^^^193^202^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^196^197^198^^^193^202^[ADD] for  ( int i = 0; i < types.length; i++ )  { sb.append ( types[i].getDescriptor (  )  ) ; }^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^sb .toString (  )  " ) ;^199^^^^^193^202^[REPLACE] sb.append ( " ) " ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^sb.append ( " ( " ) ;^200^^^^^193^202^[REPLACE] sb.append ( "V" ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^200^^^^^193^202^[ADD] sb.append ( "V" ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return new Signature ( Constants.CONSTRUCTOR_NAME, sb .StringBuffer (  )   ) ;^201^^^^^193^202^[REPLACE] return new Signature ( Constants.CONSTRUCTOR_NAME, sb.toString (  )  ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] Type[] types [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  StringBuffer sb  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return parseSignature ( "void ;^205^^^^^204^206^[REPLACE] return parseSignature ( "void <init> ( " + sig + " ) " ) ;^[METHOD] parseConstructor [TYPE] Signature [PARAMETER] String sig [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  String sig  [TYPE]  boolean false  true 
[REPLACE]^List types = new ArrayList ( 2 ) ;^209^^^^^208^220^[REPLACE] List types = new ArrayList ( 5 ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^if  ( next  <=  0 )  {^212^^^^^208^220^[REPLACE] if  ( next < 0 )  {^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^210^^^^^208^220^[REPLACE] for  ( ;; )  {^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^if  (end  !=  0 )  {^212^^^^^208^220^[REPLACE] if  ( next < 0 )  {^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[ADD]^break;^212^213^214^^^208^220^[ADD] if  ( next < 0 )  { break; }^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^mark =end + 1;^216^^^^^208^220^[REPLACE] mark = next + 1;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^int next = s .indexOf ( end )  ;^211^^^^^208^220^[REPLACE] int next = s.indexOf ( ',', mark ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^mark = next +end;^216^^^^^208^220^[REPLACE] mark = next + 1;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^String methodName = s.substring ( space + 1, lparen ) ;^211^^^^^208^220^[REPLACE] int next = s.indexOf ( ',', mark ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^types.add ( map ( s.substring ( mark, next ) .trim (  )  )  ) ;^218^^^^^208^220^[REPLACE] types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^types.add ( map ( s.substring ( mark, end )  .substring ( mark , end )   )  ) ;^218^^^^^208^220^[REPLACE] types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[ADD]^^218^^^^^208^220^[ADD] types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^types.add ( map ( s.indexOf ( mark, end ) .trim (  )  )  ) ;^218^^^^^208^220^[REPLACE] types.add ( map ( s.substring ( mark, end ) .trim (  )  )  ) ;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^return type;^219^^^^^208^220^[REPLACE] return types;^[METHOD] parseTypes [TYPE] List [PARAMETER] String s int mark int end [CLASS] TypeUtils   [TYPE]  List types  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int end  mark  next 
[REPLACE]^if  ( t.equals ( "" )  )  {^223^^^^^222^241^[REPLACE] if  ( type.equals ( "" )  )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return t;^224^^^^^222^241^[REPLACE] return type;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^String t =  ( String ) transforms.get ( t ) ;^226^^^^^222^241^[REPLACE] String t =  ( String ) transforms.get ( type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.equals ( "[]", index )  + 1 )   <=  0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^sb .toString (  )  ;^235^^^^^222^241^[REPLACE] sb.append ( '[' ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^if  ( t == null )  {^227^^^^^222^241^[REPLACE] if  ( t != null )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )  + 1 )   <= index )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^sb.append ( ' ( ' ) ;^235^^^^^222^241^[REPLACE] sb.append ( '[' ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^}  if  ( type.indexOf ( '.' )   <=  0 )  {^229^^^^^222^241^[REPLACE] } else if  ( type.indexOf ( '.' )  < 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )  + 1 )   <  0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^^234^235^^^^222^241^[ADD] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  { sb.append ( '[' ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )   &  1 )  > 0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0 , type.length (  )  /  0 .5  - sb.length (  )  /  0 .5  * 2 ) ;^237^^^^^222^241^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return sb.StringBuffer (  ) ;^239^^^^^222^241^[REPLACE] return sb.toString (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^List types = new ArrayList ( 5 ) ;^232^^^^^222^241^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int index = 4;^233^^^^^222^241^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return false ;^230^^^^^222^241^[REPLACE] return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )  +index )  > 0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0, type.length (  )  + 3 - sb.length (  )  + 3 * 2 ) ;^237^^^^^222^241^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return map ( "java.lang."  |  type ) ;^230^^^^^222^241^[REPLACE] return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int index = 0 / 2;^233^^^^^222^241^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return type;^228^^^^^222^241^[REPLACE] return t;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^}  else {^229^^^^^222^241^[REPLACE] } else if  ( type.indexOf ( '.' )  < 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^}   StringBuffer sb = new StringBuffer (  ) ;int index = 0;^229^230^231^232^233^222^241^[ADD] else if  ( type.indexOf ( '.' )  < 0 )  { return map ( "java.lang." + type ) ; } else { StringBuffer sb = new StringBuffer (  ) ; int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )   <  1 )  > 0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0, type.size (  )  - sb.size (  )  * 2 ) ;^237^^^^^222^241^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^^232^^^^^222^241^[ADD] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^int index = 0L;^233^^^^^222^241^[REPLACE] int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return map ( "java.lang."  |  t ) ;^230^^^^^222^241^[REPLACE] return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^while  (  ( index = type.indexOf ( "[]", index )   ==  1 )  > 0 )  {^234^^^^^222^241^[REPLACE] while  (  ( index = type.indexOf ( "[]", index )  + 1 )  > 0 )  {^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^type = type.substring ( 0, type.length (  )  *  0.5  - sb.length (  )  *  0.5  * 2 ) ;^237^^^^^222^241^[REPLACE] type = type.substring ( 0, type.length (  )  - sb.length (  )  * 2 ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return map ( "java.lang."  ||  t ) ;^230^^^^^222^241^[REPLACE] return map ( "java.lang." + type ) ;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[ADD]^int index = 0;^232^233^^^^222^241^[ADD] StringBuffer sb = new StringBuffer (  ) ; int index = 0;^[METHOD] map [TYPE] String [PARAMETER] String type [CLASS] TypeUtils   [TYPE]  StringBuffer sb  [TYPE]  String t  type  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int index 
[REPLACE]^return Constants.TYPE_SHORT;^246^^^^^243^264^[REPLACE] return Constants.TYPE_CHARACTER;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;^248^^^^^243^264^[REPLACE] return Constants.TYPE_BOOLEAN;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_BYTE;^250^^^^^243^264^[REPLACE] return Constants.TYPE_DOUBLE;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_BYTE;^252^^^^^243^264^[REPLACE] return Constants.TYPE_FLOAT;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;^254^^^^^243^264^[REPLACE] return Constants.TYPE_LONG;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_BYTE;^256^^^^^243^264^[REPLACE] return Constants.TYPE_INTEGER;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;^258^^^^^243^264^[REPLACE] return Constants.TYPE_SHORT;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_INTEGER;^260^^^^^243^264^[REPLACE] return Constants.TYPE_BYTE;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return types;^262^^^^^243^264^[REPLACE] return type;^[METHOD] getBoxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^267^^^^^266^286^[REPLACE] if  ( Constants.TYPE_INTEGER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BOOLEAN .replace ( null , false )   )  {^269^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.BOOLEAN_TYPE;return Type.DOUBLE_TYPE;^269^270^271^272^^266^286^[ADD] else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  { return Type.BOOLEAN_TYPE; } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  { return Type.DOUBLE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^271^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.DOUBLE_TYPE;return Type.LONG_TYPE;^271^272^273^274^^266^286^[ADD] else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  { return Type.DOUBLE_TYPE; } else if  ( Constants.TYPE_LONG.equals ( type )  )  { return Type.LONG_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.CHAR_TYPE;^273^274^275^276^^266^286^[ADD] else if  ( Constants.TYPE_LONG.equals ( type )  )  { return Type.LONG_TYPE; } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_CHARACTER .replace ( 1 , null )   )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.BYTE_TYPE;^275^276^277^278^^266^286^[ADD] else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE; } else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.SHORT_TYPE;^279^280^281^282^^266^286^[ADD] else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE; } else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return types;^284^^^^^266^286^[REPLACE] return type;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type.LONG_TYPE;^282^^^^^266^286^[REPLACE] return Type.SHORT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type.LONG_TYPE;^280^^^^^266^286^[REPLACE] return Type.FLOAT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( this , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type.LONG_TYPE;^278^^^^^266^286^[REPLACE] return Type.BYTE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type.LONG_TYPE;^276^^^^^266^286^[REPLACE] return Type.CHAR_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  (   type    )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  (   type    )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( false , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( 0 , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type.INT_TYPE;^274^^^^^266^286^[REPLACE] return Type.LONG_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BYTE.equals ( type )  )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.BYTE_TYPE;return Type.FLOAT_TYPE;^277^278^279^280^^266^286^[ADD] else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE; } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  (   type    )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.SHORT_TYPE;return type;^281^282^283^284^285^266^286^[ADD] else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE; } else { return type; }^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return type;^281^282^283^284^285^266^286^[ADD] else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE; } else { return type; }^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.FLOAT_TYPE;return Type.SHORT_TYPE;^279^280^281^282^^266^286^[ADD] else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE; } else if  ( Constants.TYPE_SHORT.equals ( type )  )  { return Type.SHORT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( this , this )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( null , 0 )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return names;^272^^^^^266^286^[REPLACE] return Type.DOUBLE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_LONG .replace ( 0 , null )   )  {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE .replace ( null , null )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  (   type    )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  (   type    )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.CHAR_TYPE;return Type.BYTE_TYPE;^275^276^277^278^^266^286^[ADD] else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  { return Type.CHAR_TYPE; } else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  (   type    )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( null , this )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return names;^270^^^^^266^286^[REPLACE] return Type.BOOLEAN_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE .replace ( null , 0 )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_FLOAT .replace ( this , this )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_CHARACTER .replace ( true , this )   )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( this , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_LONG.equals ( type )  )  {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE .replace ( this , 0 )   )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT .replace ( null , null )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( 0 , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( false , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_FLOAT .replace ( false , null )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( this , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type.LONG_TYPE;^268^^^^^266^286^[REPLACE] return Type.INT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  {^269^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BOOLEAN.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_DOUBLE .replace ( null , this )   )  {^271^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_CHARACTER .replace ( null , true )   )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_SHORT .replace ( this , false )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( null , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^}   return Type.FLOAT_TYPE;^277^278^279^280^^266^286^[ADD] else if  ( Constants.TYPE_BYTE.equals ( type )  )  { return Type.BYTE_TYPE; } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  { return Type.FLOAT_TYPE;^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_FLOAT .replace ( true , this )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT .replace ( this , 0 )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  (   type    )  {^277^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( Constants.TYPE_BYTE.equals ( type )  )  {^271^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_DOUBLE.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  else {^273^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_LONG.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_FLOAT .replace ( null , false )   )  {^279^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_FLOAT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_CHARACTER .replace ( null , this )   )  {^275^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_CHARACTER.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( Constants.TYPE_SHORT .replace ( true , null )   )  {^281^^^^^266^286^[REPLACE] } else if  ( Constants.TYPE_SHORT.equals ( type )  )  {^[METHOD] getUnboxedType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type.getType (  )  == Type.ARRAY;^289^^^^^288^290^[REPLACE] return type.getSort (  )  == Type.ARRAY;^[METHOD] isArray [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^if  ( isArray ( type )  )  {^293^^^^^292^297^[REPLACE] if  ( !isArray ( type )  )  {^[METHOD] getComponentType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return ;^294^^^^^292^297^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getComponentType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[ADD]^^294^^^^^292^297^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getComponentType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Type .getSort (  )   ) ;^296^^^^^292^297^[REPLACE] return Type.getType ( type.getDescriptor (  ) .substring ( 1 )  ) ;^[METHOD] getComponentType [TYPE] Type [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return true;^303^^^^^299^307^[REPLACE] return false;^[METHOD] isPrimitive [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return false;^305^^^^^299^307^[REPLACE] return true;^[METHOD] isPrimitive [TYPE] boolean [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( isArray ( type )  )  {^310^^^^^309^315^[REPLACE] if  ( isArray ( type )  )  {^[METHOD] emulateClassGetName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return getClassName ( getComponentType ( type )  )  + "[]";^313^^^^^309^315^[REPLACE] return getClassName ( type ) ;^[METHOD] emulateClassGetName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return type.getDescriptor (  ) .substring ( '/', '.' ) ;^311^^^^^309^315^[REPLACE] return type.getDescriptor (  ) .replace ( '/', '.' ) ;^[METHOD] emulateClassGetName [TYPE] String [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return method.getSignature (  )  .getSize (  )  .equals ( Constants.CONSTRUCTOR_NAME ) ;^318^^^^^317^319^[REPLACE] return method.getSignature (  ) .getName (  ) .equals ( Constants.CONSTRUCTOR_NAME ) ;^[METHOD] isConstructor [TYPE] boolean [PARAMETER] MethodInfo method [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  MethodInfo method  [TYPE]  boolean false  true 
[REPLACE]^if  ( classes != null )  {^322^^^^^321^330^[REPLACE] if  ( classes == null )  {^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return true;^323^^^^^321^330^[REPLACE] return null;^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^Type[] types = new Type[names.length];^325^^^^^321^330^[REPLACE] Type[] types = new Type[classes.length];^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < classes.length - 5; i++ )  {^326^^^^^321^330^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^types[i]  =  types[i] ;^327^^^^^321^330^[REPLACE] types[i] = Type.getType ( classes[i] ) ;^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^types[i]  = null ;^327^^^^^321^330^[REPLACE] types[i] = Type.getType ( classes[i] ) ;^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^326^^^^^321^330^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[ADD]^^326^327^328^^^321^330^[ADD] for  ( int i = 0; i < classes.length; i++ )  { types[i] = Type.getType ( classes[i] ) ; }^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^return type;^329^^^^^321^330^[REPLACE] return types;^[METHOD] getTypes [TYPE] Type[] [PARAMETER] Class[] classes [CLASS] TypeUtils   [TYPE]  Type[] types  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i 
[REPLACE]^case 1: return Constants.ICONST_1;^334^^^^^332^343^[REPLACE] case -1: return Constants.ICONST_M1;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^case -1: return Constants.ICONST_M1;^335^^^^^332^343^[REPLACE] case 0: return Constants.ICONST_0;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^case -1: return Constants.ICONST_M1;^336^^^^^332^343^[REPLACE] case 1: return Constants.ICONST_1;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^case -1: return Constants.ICONST_M1;^337^^^^^332^343^[REPLACE] case 2: return Constants.ICONST_2;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^case -1: return Constants.ICONST_M1;^338^^^^^332^343^[REPLACE] case 3: return Constants.ICONST_3;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^case -1: return Constants.ICONST_M1;^339^^^^^332^343^[REPLACE] case 4: return Constants.ICONST_4;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^case -1: return Constants.ICONST_M1;^340^^^^^332^343^[REPLACE] case 5: return Constants.ICONST_5;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^return -0;^342^^^^^332^343^[REPLACE] return -1;^[METHOD] ICONST [TYPE] int [PARAMETER] int value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  int value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value  ||  0 )  {^346^^^^^345^353^[REPLACE] if  ( value == 0L )  {^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( value  &&  1L )  {^348^^^^^345^353^[REPLACE] } else if  ( value == 1L )  {^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[ADD]^}   return -1;^348^349^350^351^352^345^353^[ADD] else if  ( value == 1L )  { return Constants.LCONST_1; } else { return -1; }^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return -4;^351^^^^^345^353^[REPLACE] return -1;^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return Constants.LCONST_0;^349^^^^^345^353^[REPLACE] return Constants.LCONST_1;^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return Constants.FCONST_0;^347^^^^^345^353^[REPLACE] return Constants.LCONST_0;^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^348^^^^^345^353^[REPLACE] } else if  ( value == 1L )  {^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return -2;^351^^^^^345^353^[REPLACE] return -1;^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^return -3;^351^^^^^345^353^[REPLACE] return -1;^[METHOD] LCONST [TYPE] int [PARAMETER] long value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  long value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value  &&  0f )  {^356^^^^^355^365^[REPLACE] if  ( value == 0f )  {^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( value  !=  1f )  {^358^^^^^355^365^[REPLACE] } else if  ( value == 1f )  {^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( value  &&  2f )  {^360^^^^^355^365^[REPLACE] } else if  ( value == 2f )  {^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return -1L;^363^^^^^355^365^[REPLACE] return -1;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return Constants.LCONST_0;^361^^^^^355^365^[REPLACE] return Constants.FCONST_2;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return Constants.LCONST_0;^359^^^^^355^365^[REPLACE] return Constants.FCONST_1;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^}  else {^360^^^^^355^365^[REPLACE] } else if  ( value == 2f )  {^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[ADD]^}   return -1;^360^361^362^363^364^355^365^[ADD] else if  ( value == 2f )  { return Constants.FCONST_2; } else { return -1; }^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return -3;^363^^^^^355^365^[REPLACE] return -1;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return Constants.LCONST_0;^357^^^^^355^365^[REPLACE] return Constants.FCONST_0;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( value  ||  1f )  {^358^^^^^355^365^[REPLACE] } else if  ( value == 1f )  {^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[ADD]^}   return Constants.FCONST_1;return Constants.FCONST_2;^358^359^360^361^^355^365^[ADD] else if  ( value == 1f )  { return Constants.FCONST_1; } else if  ( value == 2f )  { return Constants.FCONST_2;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^return -4;^363^^^^^355^365^[REPLACE] return -1;^[METHOD] FCONST [TYPE] int [PARAMETER] float value [CLASS] TypeUtils   [TYPE]  float value  [TYPE]  Map rtransforms  transforms  [TYPE]  boolean false  true 
[REPLACE]^if  ( value  &&  0d )  {^368^^^^^367^375^[REPLACE] if  ( value == 0d )  {^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^370^^^^^367^375^[REPLACE] } else if  ( value == 1d )  {^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return -1 >>> 2;^373^^^^^367^375^[REPLACE] return -1;^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return Constants.LCONST_0;^371^^^^^367^375^[REPLACE] return Constants.DCONST_1;^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return -2;^373^^^^^367^375^[REPLACE] return -1;^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return Constants.LCONST_0;^369^^^^^367^375^[REPLACE] return Constants.DCONST_0;^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( value  &&  1d )  {^370^^^^^367^375^[REPLACE] } else if  ( value == 1d )  {^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return -1L;^373^^^^^367^375^[REPLACE] return -1;^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return -3;^373^^^^^367^375^[REPLACE] return -1;^[METHOD] DCONST [TYPE] int [PARAMETER] double value [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  double value  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_CHAR;^380^^^^^377^398^[REPLACE] return Constants.T_BYTE;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_BYTE;^382^^^^^377^398^[REPLACE] return Constants.T_CHAR;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_BOOLEAN;^384^^^^^377^398^[REPLACE] return Constants.T_DOUBLE;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.TYPE_FLOAT;^386^^^^^377^398^[REPLACE] return Constants.T_FLOAT;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_CHAR;^388^^^^^377^398^[REPLACE] return Constants.T_INT;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_CHAR;^390^^^^^377^398^[REPLACE] return Constants.T_LONG;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_CHAR;^392^^^^^377^398^[REPLACE] return Constants.T_SHORT;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return Constants.T_BYTE;^394^^^^^377^398^[REPLACE] return Constants.T_BOOLEAN;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^return -0;^396^^^^^377^398^[REPLACE] return -1;^[METHOD] NEWARRAY [TYPE] int [PARAMETER] Type type [CLASS] TypeUtils   [TYPE]  Map rtransforms  transforms  [TYPE]  Type type  [TYPE]  boolean false  true 
[REPLACE]^List types = new ArrayList ( 5 ) ;^401^^^^^400^417^[REPLACE] StringBuffer sb = new StringBuffer (  ) ;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = s.size (  ) ; i < len; i++ )  {^402^^^^^400^417^[REPLACE] for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^char c = s .trim (  )  ;^403^^^^^400^417^[REPLACE] char c = s.charAt ( i ) ;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 , len = s.length (  ) ; i < len; i++ )  {^402^^^^^400^417^[REPLACE] for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[ADD]^^402^403^404^405^406^400^417^[ADD] for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  { char c = s.charAt ( i ) ; switch  ( c )  { case '$': sb.append ( "$24" ) ; break; case '.': sb.append ( "$2E" ) ; break;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = s.trim (  ) ; i < len; i++ )  {^402^^^^^400^417^[REPLACE] for  ( int i = 0, len = s.length (  ) ; i < len; i++ )  {^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
[REPLACE]^return sb.StringBuffer (  ) ;^416^^^^^400^417^[REPLACE] return sb.toString (  ) ;^[METHOD] escapeType [TYPE] String [PARAMETER] String s [CLASS] TypeUtils   [TYPE]  char c  [TYPE]  StringBuffer sb  [TYPE]  String s  [TYPE]  boolean false  true  [TYPE]  Map rtransforms  transforms  [TYPE]  int i  len 
