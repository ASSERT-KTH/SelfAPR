[REPLACE]^private  double  pkg;^24^^^^^^^[REPLACE] private String pkg;^ [CLASS] VisibilityPredicate  
[REPLACE]^this.protectedOk =  true;^27^^^^^26^29^[REPLACE] this.protectedOk = protectedOk;^[METHOD] <init> [TYPE] Class,boolean) [PARAMETER] Class source boolean protectedOk [CLASS] VisibilityPredicate   [TYPE]  Class source  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg 
[REPLACE]^pkg =  TypeUtils.getPackageName ( Type.getType ( null )  ) ;^28^^^^^26^29^[REPLACE] pkg = TypeUtils.getPackageName ( Type.getType ( source )  ) ;^[METHOD] <init> [TYPE] Class,boolean) [PARAMETER] Class source boolean protectedOk [CLASS] VisibilityPredicate   [TYPE]  Class source  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg 
[REPLACE]^int mod  =   (  ( Integer ) arg ) .intValue (  ) ;^32^^^^^31^42^[REPLACE] int mod =  ( arg instanceof Member )  ?  (  ( Member ) arg ) .getModifiers (  )  :  (  ( Integer ) arg ) .intValue (  ) ;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^} else if  ( Modifier.isProtected ( mod )  )  {^33^^^^^31^42^[REPLACE] if  ( Modifier.isPrivate ( mod )  )  {^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^}  if  ( Modifier.isPublic ( mod )  )  {^35^^^^^31^42^[REPLACE] } else if  ( Modifier.isPublic ( mod )  )  {^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^}  else {^37^^^^^31^42^[REPLACE] } else if  ( Modifier.isProtected ( mod )  )  {^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REMOVE]^if  ( isPrivate ( mod )  )  {     return false; }else     if  ( isPublic ( mod )  )  {         return true;     }else         if  ( isProtected ( mod )  )  {             return protectedOk;         }else {             return pkg.equals ( getPackageName ( getType (  (  ( Member )   ( arg )  ) .getDeclaringClass (  )  )  )  ) ;         }^37^^^^^31^42^[REMOVE] ^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^return pkg.equals (   Type.getType (  (  ( Member )  .getDeclaringClass (  )  )  )  ) ;^40^^^^^31^42^[REPLACE] return pkg.equals ( TypeUtils.getPackageName ( Type.getType (  (  ( Member ) arg ) .getDeclaringClass (  )  )  )  ) ;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^return false;^38^^^^^31^42^[REPLACE] return protectedOk;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^return pkg.equals ( TypeUtils.getPackageName ( Type .getType ( null )  .getDeclaringClass (  )  )  )  ) ;^40^^^^^31^42^[REPLACE] return pkg.equals ( TypeUtils.getPackageName ( Type.getType (  (  ( Member ) arg ) .getDeclaringClass (  )  )  )  ) ;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^return false;^36^^^^^31^42^[REPLACE] return true;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[ADD]^}   return protectedOk;return pkg.equals ( TypeUtils.getPackageName ( Type.getType (  (  ( Member ) arg ) .getDeclaringClass (  )  )  )  ) ;^37^38^39^40^41^31^42^[ADD] else if  ( Modifier.isProtected ( mod )  )  { return protectedOk; } else { return pkg.equals ( TypeUtils.getPackageName ( Type.getType (  (  ( Member ) arg ) .getDeclaringClass (  )  )  )  ) ; }^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^return true;^34^^^^^31^42^[REPLACE] return false;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^} else if  ( Modifier.isProtected ( mod )  )  {^35^^^^^31^42^[REPLACE] } else if  ( Modifier.isPublic ( mod )  )  {^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[ADD]^}   return true;return protectedOk;^35^36^37^38^^31^42^[ADD] else if  ( Modifier.isPublic ( mod )  )  { return true; } else if  ( Modifier.isProtected ( mod )  )  { return protectedOk;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^}  if  ( Modifier.isProtected ( mod )  )  {^37^^^^^31^42^[REPLACE] } else if  ( Modifier.isProtected ( mod )  )  {^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
[REPLACE]^return pkg.equals ( TypeUtils.getPackageName ( Type.getType (  (  ( Member ) arg ) .getModifiers (  )  )  )  ) ;^40^^^^^31^42^[REPLACE] return pkg.equals ( TypeUtils.getPackageName ( Type.getType (  (  ( Member ) arg ) .getDeclaringClass (  )  )  )  ) ;^[METHOD] evaluate [TYPE] boolean [PARAMETER] Object arg [CLASS] VisibilityPredicate   [TYPE]  Object arg  [TYPE]  boolean false  protectedOk  true  [TYPE]  String pkg  [TYPE]  int mod 
