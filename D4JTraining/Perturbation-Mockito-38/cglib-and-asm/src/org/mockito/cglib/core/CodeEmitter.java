[REPLACE]^private static final Signature BOOLEAN_VALUE  = null ;^27^28^^^^27^28^[REPLACE] private static final Signature BOOLEAN_VALUE = TypeUtils.parseSignature ( "boolean booleanValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature CHAR_VALUE ;^29^30^^^^29^30^[REPLACE] private static final Signature CHAR_VALUE = TypeUtils.parseSignature ( "char charValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static  Signature LONG_VALUE = TypeUtils.parseSignature ( "long longValue (  ) " ) ;^31^32^^^^31^32^[REPLACE] private static final Signature LONG_VALUE = TypeUtils.parseSignature ( "long longValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature DOUBLE_VALUE ;^33^34^^^^33^34^[REPLACE] private static final Signature DOUBLE_VALUE = TypeUtils.parseSignature ( "double doubleValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static  Signature FLOAT_VALUE = TypeUtils.parseSignature ( "float floatValue (  ) " ) ;^35^36^^^^35^36^[REPLACE] private static final Signature FLOAT_VALUE = TypeUtils.parseSignature ( "float floatValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature INT_VALUE ;^37^38^^^^37^38^[REPLACE] private static final Signature INT_VALUE = TypeUtils.parseSignature ( "int intValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static  Signature CSTRUCT_NULL = TypeUtils.parseConstructor ( "" ) ;^39^40^^^^39^40^[REPLACE] private static final Signature CSTRUCT_NULL = TypeUtils.parseConstructor ( "" ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature CSTRUCT_STRING ;^41^42^^^^41^42^[REPLACE] private static final Signature CSTRUCT_STRING = TypeUtils.parseConstructor ( "String" ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^public  final int ADD = Constants.IADD;^44^^^^^^^[REPLACE] public static final int ADD = Constants.IADD;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int MUL  = null ;^45^^^^^^^[REPLACE] public static final int MUL = Constants.IMUL;^ [CLASS] CodeEmitter State  
[REPLACE]^public  final int XOR = Constants.IXOR;^46^^^^^^^[REPLACE] public static final int XOR = Constants.IXOR;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int USHR ;^47^^^^^^^[REPLACE] public static final int USHR = Constants.IUSHR;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final  long  SUB = Constants.ISUB;^48^^^^^^^[REPLACE] public static final int SUB = Constants.ISUB;^ [CLASS] CodeEmitter State  
[REPLACE]^public static  int DIV = Constants.IDIV;^49^^^^^^^[REPLACE] public static final int DIV = Constants.IDIV;^ [CLASS] CodeEmitter State  
[REPLACE]^public static   short  NEG = Constants.INEG;^50^^^^^^^[REPLACE] public static final int NEG = Constants.INEG;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int REM  = null ;^51^^^^^^^[REPLACE] public static final int REM = Constants.IREM;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int AND  = null ;^52^^^^^^^[REPLACE] public static final int AND = Constants.IAND;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int OR ;^53^^^^^^^[REPLACE] public static final int OR = Constants.IOR;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int GT ;^55^^^^^^^[REPLACE] public static final int GT = Constants.IFGT;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final  long  LT = Constants.IFLT;^56^^^^^^^[REPLACE] public static final int LT = Constants.IFLT;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int GE  = null ;^57^^^^^^^[REPLACE] public static final int GE = Constants.IFGE;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int LE  = null ;^58^^^^^^^[REPLACE] public static final int LE = Constants.IFLE;^ [CLASS] CodeEmitter State  
[REPLACE]^public static   short  NE = Constants.IFNE;^59^^^^^^^[REPLACE] public static final int NE = Constants.IFNE;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int EQ  = null ;^60^^^^^^^[REPLACE] public static final int EQ = Constants.IFEQ;^ [CLASS] CodeEmitter State  
[REPLACE]^this.classInfo =  null;^76^^^^^75^82^[REPLACE] this.classInfo = classInfo;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.access =  localOffset;^77^^^^^75^82^[REPLACE] this.access = access;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[ADD]^^77^^^^^75^82^[ADD] this.access = access;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.sig =  LONG_VALUE;^78^^^^^75^82^[REPLACE] this.sig = sig;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.exceptionTypes =  argumentTypes;^79^^^^^75^82^[REPLACE] this.exceptionTypes = exceptionTypes;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^localOffset = TypeUtils.isStatic ( access )  ? 0 * 1 : 1;^80^^^^^75^82^[REPLACE] localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^argumentTypes =  LONG_VALUE.getArgumentTypes (  ) ;^81^^^^^75^82^[REPLACE] argumentTypes = sig.getArgumentTypes (  ) ;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^super ( access, LONG_VALUE.getDescriptor (  ) , mv ) ;^107^^^^^106^110^[REPLACE] super ( access, sig.getDescriptor (  ) , mv ) ;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo  [TYPE]  MethodVisitor mv 
[REPLACE]^this.ce = wrap.ce; ;^108^^^^^106^110^[REPLACE] this.ce = ce;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo  [TYPE]  MethodVisitor mv 
[REPLACE]^state =  new State ( null.getClassInfo (  ) , acnullss, sig, exnullptionTypes ) ;^109^^^^^106^110^[REPLACE] state = new State ( ce.getClassInfo (  ) , access, sig, exceptionTypes ) ;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassEmitter ce MethodVisitor mv int access Signature sig Type[] exceptionTypes [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo  [TYPE]  MethodVisitor mv 
[REPLACE]^push ( 1 ) ;^113^^^^^112^116^[REPLACE] super ( wrap ) ;^[METHOD] <init> [TYPE] CodeEmitter) [PARAMETER] CodeEmitter wrap [CLASS] CodeEmitter State   [TYPE]  CodeEmitter wrap  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[ADD]^this.ce = wrap.ce;^113^114^^^^112^116^[ADD] super ( wrap ) ; this.ce = wrap.ce;^[METHOD] <init> [TYPE] CodeEmitter) [PARAMETER] CodeEmitter wrap [CLASS] CodeEmitter State   [TYPE]  CodeEmitter wrap  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.ce = ce; ;^114^^^^^112^116^[REPLACE] this.ce = wrap.ce;^[METHOD] <init> [TYPE] CodeEmitter) [PARAMETER] CodeEmitter wrap [CLASS] CodeEmitter State   [TYPE]  CodeEmitter wrap  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.state =  null.state;^115^^^^^112^116^[REPLACE] this.state = wrap.state;^[METHOD] <init> [TYPE] CodeEmitter) [PARAMETER] CodeEmitter wrap [CLASS] CodeEmitter State   [TYPE]  CodeEmitter wrap  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getReturnType (  ) ;^85^^^^^84^86^[REPLACE] return classInfo;^[METHOD] getClassInfo [TYPE] ClassInfo [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^89^^^^^88^90^[REPLACE] return access;^[METHOD] getModifiers [TYPE] int [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^93^^^^^92^94^[REPLACE] return sig;^[METHOD] getSignature [TYPE] Signature [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getReturnType (  ) ;^97^^^^^96^98^[REPLACE] return exceptionTypes;^[METHOD] getExceptionTypes [TYPE] Type[] [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return this;^102^^^^^100^103^[REPLACE] return null;^[METHOD] getAttribute [TYPE] Attribute [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return true;^119^^^^^118^120^[REPLACE] return false;^[METHOD] isStaticHook [TYPE] boolean [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getReturnType (  ) ;^123^^^^^122^124^[REPLACE] return state.sig;^[METHOD] getSignature [TYPE] Signature [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getArgumentTypes (  ) ;^127^^^^^126^128^[REPLACE] return state.sig.getReturnType (  ) ;^[METHOD] getReturnType [TYPE] Type [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getReturnType (  ) ;^131^^^^^130^132^[REPLACE] return state;^[METHOD] getMethodInfo [TYPE] MethodInfo [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^135^^^^^134^136^[REPLACE] return ce;^[METHOD] getClassEmitter [TYPE] ClassEmitter [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^visitMaxs ( 2, 2 ) ;^139^^^^^138^140^[REPLACE] visitMaxs ( 0, 0 ) ;^[METHOD] end_method [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return  new Label (  )  ;^143^^^^^142^144^[REPLACE] return new Block ( this ) ;^[METHOD] begin_block [TYPE] Block [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( block .getStart (  )   != null )  {^147^^^^^146^154^[REPLACE] if  ( block.getEnd (  )  == null )  {^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^148^^^^^146^154^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^148^^^^^146^154^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[ADD]^^148^^^^^146^154^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitTryCatchBlock ( block.getStart (  ) , block.getEnd (  ) , mark (  ) , exception.getSort (  )  ) ;^150^151^152^153^^146^154^[REPLACE] mv.visitTryCatchBlock ( block.getStart (  ) , block.getEnd (  ) , mark (  ) , exception.getInternalName (  )  ) ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitTryCatchBlock ( block .getEnd (  )  , block.getEnd (  ) , mark (  ) , exception.getInternalName (  )  ) ;^150^151^152^153^^146^154^[REPLACE] mv.visitTryCatchBlock ( block.getStart (  ) , block.getEnd (  ) , mark (  ) , exception.getInternalName (  )  ) ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^block.getStart (  ) , mark (  ) , exception.getInternalName (  )  ) ;^151^152^153^^^146^154^[REPLACE] block.getEnd (  ) , mark (  ) , exception.getInternalName (  )  ) ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^exception .getSort (  )   ) ;^153^^^^^146^154^[REPLACE] exception.getInternalName (  )  ) ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[ADD]^^153^^^^^146^154^[ADD] exception.getInternalName (  )  ) ;^[METHOD] catch_exception [TYPE] void [PARAMETER] Block block Type exception [CLASS] CodeEmitter State   [TYPE]  Type exception  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Block block  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void goTo ( Label label )  { mv .visitJumpInsn ( label )  ; }^156^^^^^^^[REPLACE] public void goTo ( Label label )  { mv.visitJumpInsn ( Constants.GOTO, label ) ; }^[METHOD] goTo [TYPE] void [PARAMETER] Label label [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[ADD]^^156^157^158^^^^^[ADD] public void goTo ( Label label )  { mv.visitJumpInsn ( Constants.GOTO, label ) ; } public void ifnull ( Label label )  { mv.visitJumpInsn ( Constants.IFNULL, label ) ; } public void ifnonnull ( Label label )  { mv.visitJumpInsn ( Constants.IFNONNULL, label ) ; }^[METHOD] goTo [TYPE] void [PARAMETER] Label label [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void ifnull ( Label label )  { mv .visitJumpInsn ( label )  ; }^157^^^^^^^[REPLACE] public void ifnull ( Label label )  { mv.visitJumpInsn ( Constants.IFNULL, label ) ; }^[METHOD] ifnull [TYPE] void [PARAMETER] Label label [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitTypeInsn ( localOffset, label ) ;^161^^^^^160^162^[REPLACE] mv.visitJumpInsn ( mode, label ) ;^[METHOD] if_jump [TYPE] void [PARAMETER] int mode Label label [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if_cmp ( Type.INT_TYPE, localOffset, label ) ;^165^^^^^164^166^[REPLACE] if_cmp ( Type.INT_TYPE, mode, label ) ;^[METHOD] if_icmp [TYPE] void [PARAMETER] int mode Label label [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^int intOp = -0;^169^^^^^168^209^[REPLACE] int intOp = -1;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^int jumpmode = mode;^169^170^^^^168^209^[ADD] int intOp = -1; int jumpmode = mode;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^int jumpmode = localOffset;^170^^^^^168^209^[REPLACE] int jumpmode = mode;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^case LE: jumpmode = GT; break; ;^172^^^^^168^209^[REPLACE] case GE: jumpmode = LT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^172^173^^^^168^209^[ADD] case GE: jumpmode = LT; break; case LE: jumpmode = GT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^case GE: jumpmode = LT; break; ;^173^^^^^168^209^[REPLACE] case LE: jumpmode = GT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^case GT: intOp = Constants.IF_ICMPGT; break; ;^198^^^^^168^209^[REPLACE] case EQ: intOp = Constants.IF_ICMPEQ; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^case EQ: intOp = Constants.IF_ICMPEQ; break; ;^199^^^^^168^209^[REPLACE] case NE: intOp = Constants.IF_ICMPNE; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^case EQ: intOp = Constants.IF_ICMPEQ; break; ;^201^^^^^168^209^[REPLACE] case LT: intOp = Constants.IF_ICMPLT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^201^^^^^168^209^[ADD] case LT: intOp = Constants.IF_ICMPLT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^case EQ: intOp = Constants.IF_ICMPEQ; break; ;^203^^^^^168^209^[REPLACE] case GT: intOp = Constants.IF_ICMPGT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^190^^^^^168^209^[REPLACE] return;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^193^^^^^168^209^[REPLACE] return;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^206^^^^^168^209^[REPLACE] return;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^195^^^^^168^209^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if_jump ( XOR, label ) ;^208^^^^^168^209^[REPLACE] if_jump ( jumpmode, label ) ;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void pop (  )  { mv.visitIntInsn ( Constants.POP ) ; }^211^^^^^^^[REPLACE] public void pop (  )  { mv.visitInsn ( Constants.POP ) ; }^[METHOD] pop [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void pop2 (  )  { mv.visitIntInsn ( Constants.POP2 ) ; }^212^^^^^^^[REPLACE] public void pop2 (  )  { mv.visitInsn ( Constants.POP2 ) ; }^[METHOD] pop2 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void dup (  )  { mv .visitLdcInsn ( null )  ; }^213^^^^^^^[REPLACE] public void dup (  )  { mv.visitInsn ( Constants.DUP ) ; }^[METHOD] dup [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^213^214^215^^^^^[ADD] public void dup (  )  { mv.visitInsn ( Constants.DUP ) ; } public void dup2 (  )  { mv.visitInsn ( Constants.DUP2 ) ; } public void dup_x1 (  )  { mv.visitInsn ( Constants.DUP_X1 ) ; }^[METHOD] dup [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void dup2 (  )  { mv.visitIntInsn ( Constants.DUP2 ) ; }^214^^^^^^^[REPLACE] public void dup2 (  )  { mv.visitInsn ( Constants.DUP2 ) ; }^[METHOD] dup2 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void dup_x1 (  )  { mv .visitLdcInsn ( null )  ; }^215^^^^^^^[REPLACE] public void dup_x1 (  )  { mv.visitInsn ( Constants.DUP_X1 ) ; }^[METHOD] dup_x1 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void dup_x2 (  )  { mv.visitIntInsn ( Constants.DUP_X2 ) ; }^216^^^^^^^[REPLACE] public void dup_x2 (  )  { mv.visitInsn ( Constants.DUP_X2 ) ; }^[METHOD] dup_x2 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void dup2_x1 (  )  { mv.visitIntInsn ( Constants.DUP2_X1 ) ; }^217^^^^^^^[REPLACE] public void dup2_x1 (  )  { mv.visitInsn ( Constants.DUP2_X1 ) ; }^[METHOD] dup2_x1 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void dup2_x2 (  )  { mv .visitLdcInsn ( null )  ; }^218^^^^^^^[REPLACE] public void dup2_x2 (  )  { mv.visitInsn ( Constants.DUP2_X2 ) ; }^[METHOD] dup2_x2 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^218^219^220^^^^^[ADD] public void dup2_x2 (  )  { mv.visitInsn ( Constants.DUP2_X2 ) ; } public void swap (  )  { mv.visitInsn ( Constants.SWAP ) ; } public void aconst_null (  )  { mv.visitInsn ( Constants.ACONST_NULL ) ; }^[METHOD] dup2_x2 [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void swap (  )  { mv.visitIntInsn ( Constants.SWAP ) ; }^219^^^^^^^[REPLACE] public void swap (  )  { mv.visitInsn ( Constants.SWAP ) ; }^[METHOD] swap [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^219^220^221^^^^^[ADD] public void swap (  )  { mv.visitInsn ( Constants.SWAP ) ; } public void aconst_null (  )  { mv.visitInsn ( Constants.ACONST_NULL ) ; }^[METHOD] swap [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void aconst_null (  )  { mv.visitIntInsn ( Constants.ACONST_NULL ) ; }^220^^^^^^^[REPLACE] public void aconst_null (  )  { mv.visitInsn ( Constants.ACONST_NULL ) ; }^[METHOD] aconst_null [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   !=  4 )  {^223^^^^^222^239^[REPLACE] if  ( type.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( prev .getSort (  )    &&  2 )  {^231^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  (  ( prev.getSize (  )  )  == 1 )  {     swap (  ) ; }else {     dup_x2 (  ) ;     pop (  ) ; }^231^^^^^222^239^[REMOVE] ^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup_x1 (  ) ;^235^^^^^222^239^[REPLACE] dup2_x2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop (  ) ;^236^^^^^222^239^[REPLACE] pop2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup_x1 (  ) ;^232^^^^^222^239^[REPLACE] dup2_x1 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop (  ) ;^233^^^^^222^239^[REPLACE] pop2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( prev.getOpcode (  )   ||  1 >>> 4 )  {^224^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup_x1 (  ) ;^227^^^^^222^239^[REPLACE] dup_x2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^227^^^^^222^239^[ADD] dup_x2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop2 (  ) ;^228^^^^^222^239^[REPLACE] pop (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^225^^^^^222^239^[REPLACE] swap (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( prev.getSize (  )   ||  1 )  {^224^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( prev.getSize (  )   &&  3 )  {^231^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^232^^^^^222^239^[ADD] dup2_x1 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void monitorenter (  )  { mv .visitLdcInsn ( null )  ; }^241^^^^^^^[REPLACE] public void monitorenter (  )  { mv.visitInsn ( Constants.MONITORENTER ) ; }^[METHOD] monitorenter [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void monitorexit (  )  { mv .visitLdcInsn ( null )  ; }^242^^^^^^^[REPLACE] public void monitorexit (  )  { mv.visitInsn ( Constants.MONITOREXIT ) ; }^[METHOD] monitorexit [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^242^243^244^^^^^[ADD] public void monitorexit (  )  { mv.visitInsn ( Constants.MONITOREXIT ) ; }  public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[METHOD] monitorexit [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void math ( int op, Type type )  { mv.visitIntInsn ( type.getOpcode ( op )  ) ; }^244^^^^^^^[REPLACE] public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[METHOD] math [TYPE] void [PARAMETER] int op Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void math ( int op, Type type )  { mv.visitInsn ( type .getSort (  )   ) ; }^244^^^^^^^[REPLACE] public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^[METHOD] math [TYPE] void [PARAMETER] int op Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void array_load ( Type type )  { mv.visitIntInsn ( type.getOpcode ( Constants.IALOAD )  ) ; }^246^^^^^^^[REPLACE] public void array_load ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IALOAD )  ) ; }^[METHOD] array_load [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void array_store ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^246^^^^^^^[REPLACE] public void array_load ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IALOAD )  ) ; }^[METHOD] array_load [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^246^247^248^^^^^[ADD] public void array_load ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IALOAD )  ) ; } public void array_store ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^[METHOD] array_load [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void array_store ( Type type )  { mv.visitIntInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^247^^^^^^^[REPLACE] public void array_store ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^[METHOD] array_store [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void array_store ( Type type )  { mv.visitInsn ( type .getSort (  )   ) ; }^247^^^^^^^[REPLACE] public void array_store ( Type type )  { mv.visitInsn ( type.getOpcode ( Constants.IASTORE )  ) ; }^[METHOD] array_store [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ==  to )  {^253^^^^^252^297^[REPLACE] if  ( from != to )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  &&  Type.DOUBLE_TYPE )  {^254^^^^^252^297^[REPLACE] if  ( from == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.FLOAT_TYPE )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( from != to )  {     if  ( from ==  ( Type.DOUBLE_TYPE )  )  {         if  ( to ==  ( Type.FLOAT_TYPE )  )  {             mv.visitInsn ( Constants.D2F ) ;         }else             if  ( to ==  ( Type.LONG_TYPE )  )  {                 mv.visitInsn ( Constants.D2L ) ;             }else {                 mv.visitInsn ( Constants.D2I ) ;                 cast_numeric ( Type.INT_TYPE, to ) ;             }              }else         if  ( from ==  ( Type.FLOAT_TYPE )  )  {             if  ( to ==  ( Type.DOUBLE_TYPE )  )  {                 mv.visitInsn ( Constants.F2D ) ;             }else                 if  ( to ==  ( Type.LONG_TYPE )  )  {                     mv.visitInsn ( Constants.F2L ) ;                 }else {                     mv.visitInsn ( Constants.F2I ) ;                     cast_numeric ( Type.INT_TYPE, to ) ;                 }                      }else             if  ( from ==  ( Type.LONG_TYPE )  )  {                 if  ( to ==  ( Type.DOUBLE_TYPE )  )  {                     mv.visitInsn ( Constants.L2D ) ;                 }else                     if  ( to ==  ( Type.FLOAT_TYPE )  )  {                         mv.visitInsn ( Constants.L2F ) ;                     }else {                         mv.visitInsn ( Constants.L2I ) ;                         cast_numeric ( Type.INT_TYPE, to ) ;                     }                              }else {                 if  ( to ==  ( Type.BYTE_TYPE )  )  {                     mv.visitInsn ( Constants.I2B ) ;                 }else                     if  ( to ==  ( Type.CHAR_TYPE )  )  {                         mv.visitInsn ( Constants.I2C ) ;                     }else                         if  ( to ==  ( Type.DOUBLE_TYPE )  )  {                             mv.visitInsn ( Constants.I2D ) ;                         }else                             if  ( to ==  ( Type.FLOAT_TYPE )  )  {                                 mv.visitInsn ( Constants.I2F ) ;                             }else                                 if  ( to ==  ( Type.LONG_TYPE )  )  {                                     mv.visitInsn ( Constants.I2L ) ;                                 }else                                     if  ( to ==  ( Type.SHORT_TYPE )  )  {                                         mv.visitInsn ( Constants.I2S ) ;                                     }                                                                                                                                          }               }^263^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (to  !=  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( from != to )  {     if  ( from ==  ( Type.DOUBLE_TYPE )  )  {         if  ( to ==  ( Type.FLOAT_TYPE )  )  {             mv.visitInsn ( Constants.D2F ) ;         }else             if  ( to ==  ( Type.LONG_TYPE )  )  {                 mv.visitInsn ( Constants.D2L ) ;             }else {                 mv.visitInsn ( Constants.D2I ) ;                 cast_numeric ( Type.INT_TYPE, to ) ;             }              }else         if  ( from ==  ( Type.FLOAT_TYPE )  )  {             if  ( to ==  ( Type.DOUBLE_TYPE )  )  {                 mv.visitInsn ( Constants.F2D ) ;             }else                 if  ( to ==  ( Type.LONG_TYPE )  )  {                     mv.visitInsn ( Constants.F2L ) ;                 }else {                     mv.visitInsn ( Constants.F2I ) ;                     cast_numeric ( Type.INT_TYPE, to ) ;                 }                      }else             if  ( from ==  ( Type.LONG_TYPE )  )  {                 if  ( to ==  ( Type.DOUBLE_TYPE )  )  {                     mv.visitInsn ( Constants.L2D ) ;                 }else                     if  ( to ==  ( Type.FLOAT_TYPE )  )  {                         mv.visitInsn ( Constants.L2F ) ;                     }else {                         mv.visitInsn ( Constants.L2I ) ;                         cast_numeric ( Type.INT_TYPE, to ) ;                     }                              }else {                 if  ( to ==  ( Type.BYTE_TYPE )  )  {                     mv.visitInsn ( Constants.I2B ) ;                 }else                     if  ( to ==  ( Type.CHAR_TYPE )  )  {                         mv.visitInsn ( Constants.I2C ) ;                     }else                         if  ( to ==  ( Type.DOUBLE_TYPE )  )  {                             mv.visitInsn ( Constants.I2D ) ;                         }else                             if  ( to ==  ( Type.FLOAT_TYPE )  )  {                                 mv.visitInsn ( Constants.I2F ) ;                             }else                                 if  ( to ==  ( Type.LONG_TYPE )  )  {                                     mv.visitInsn ( Constants.I2L ) ;                                 }else                                     if  ( to ==  ( Type.SHORT_TYPE )  )  {                                         mv.visitInsn ( Constants.I2S ) ;                                     }                                                                                                                                          }               }^272^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^272^295^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^290^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2S ) ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2L   ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( ! ( type.equals ( Constants.TYPE_OBJECT )  )  )  {     emit_type ( Constants.CHECKCAST, type ) ; }^292^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^291^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2D ) ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^272^295^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^272^295^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^293^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2F ) ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^272^295^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2S   ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2C ) ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^272^295^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^288^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2L ) ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^292^293^294^^^272^295^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}^292^293^294^^^272^295^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2B ) ;^283^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^272^295^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^293^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  || from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.L2I ) ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^cast_numeric ( Type.INT_TYPE, from ) ;^279^^^^^275^280^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.L2D ) ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.L2F ) ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ||  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.L2I   ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^276^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^278^^^^^275^280^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  &&  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^282^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^286^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^293^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2F ) ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2L ) ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^293^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2D ) ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^287^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2S ) ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2C ) ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^285^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^291^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2S   ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^291^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^284^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( ! ( type.equals ( Constants.TYPE_OBJECT )  )  )  {     emit_type ( Constants.CHECKCAST, type ) ; }^292^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^288^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}^292^293^294^^^252^297^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^292^293^294^^^252^297^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  || from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^289^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^290^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  || from )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^264^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.F2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^266^267^268^269^270^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.F2L ) ; } else { mv.visitInsn ( Constants.F2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.F2I ) ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^cast_numeric ( Type.INT_TYPE, from ) ;^270^^^^^266^271^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.F2L ) ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^267^^^^^252^297^[ADD] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^265^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.F2L ) ;mv.visitInsn ( Constants.F2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^266^267^268^269^270^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.F2L ) ; } else { mv.visitInsn ( Constants.F2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^269^^^^^266^271^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  != from )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.F2D ) ;mv.visitInsn ( Constants.F2L ) ;^264^265^266^267^^252^297^[ADD] if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.F2D ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.F2D ) ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  || from )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^289^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^283^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^287^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^289^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  ||  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.L2F   ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^276^^^^^252^297^[ADD] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^279^^^^^275^280^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^278^279^^^^275^280^[ADD] mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  || from )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^252^297^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  || from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2L   ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2B ) ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^252^297^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2C   ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  || from )  {^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.D2F ) ;mv.visitInsn ( Constants.D2L ) ;^255^256^257^258^^252^297^[ADD] if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.D2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.D2L ) ;mv.visitInsn ( Constants.D2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^257^258^259^260^261^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ; } else { mv.visitInsn ( Constants.D2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^260^^^^^257^262^[REPLACE] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^cast_numeric ( Type.INT_TYPE, from ) ;^261^^^^^257^262^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.D2L ) ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.D2F ) ;^256^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.D2I ) ;^260^^^^^257^262^[REPLACE] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.FLOAT_TYPE )  {^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^255^256^257^258^^252^297^[ADD] if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.D2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^257^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^260^^^^^257^262^[REPLACE] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^260^^^^^257^262^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^256^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (to  !=  Type.FLOAT_TYPE )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^272^295^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^291^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^283^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  && from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.L2F ) ;mv.visitInsn ( Constants.L2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^275^276^277^278^279^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ; } else { mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^279^^^^^275^280^[ADD] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  !=  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  || from )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2D   ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^287^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.I2F   ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  ||  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^265^^^^^252^297^[ADD] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^270^^^^^266^271^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^269^^^^^266^271^[ADD] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (to  ||  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^286^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^287^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  != from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  || from )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  && from )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ||  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^285^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  && from )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  != to )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.F2D ) ;mv.visitInsn ( Constants.F2L ) ;^263^264^265^266^267^252^297^[ADD] else if  ( from == Type.FLOAT_TYPE )  { if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.F2D ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  ||  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.I2B ) ;mv.visitInsn ( Constants.I2C ) ;^282^283^284^285^^272^295^[ADD] if  ( to == Type.BYTE_TYPE )  { mv.visitInsn ( Constants.I2B ) ; } else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  && from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^285^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  || from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  || from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  != from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  != from )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  || from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^289^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^252^297^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  || from )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  &&  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  &&  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^270^^^^^266^271^[ADD] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^266^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  && to )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^284^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  != from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  != from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  != from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.L2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^275^276^277^278^279^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ; } else { mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  || from )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.FLOAT_TYPE )  {^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.D2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^257^258^259^260^261^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ; } else { mv.visitInsn ( Constants.D2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^261^^^^^257^262^[ADD] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^258^^^^^252^297^[ADD] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^260^261^^^^257^262^[ADD] mv.visitInsn ( Constants.D2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^261^^^^^257^262^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (to  ||  Type.FLOAT_TYPE )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.L2D ) ;mv.visitInsn ( Constants.L2F ) ;^272^273^274^275^276^252^297^[ADD] else if  ( from == Type.LONG_TYPE )  { if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.L2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^285^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2C ) ;mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^272^295^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  || from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^274^^^^^252^297^[ADD] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^278^^^^^275^280^[ADD] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.L2D ) ;mv.visitInsn ( Constants.L2F ) ;^273^274^275^276^^252^297^[ADD] if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.L2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  != from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^283^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  !=  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^283^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  && from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( i  >=  -1L )  {^300^^^^^299^311^[REPLACE] if  ( i < -1 )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitLdcInsn ( new Integer ( i )  ) ;mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^300^301^302^303^^299^311^[ADD] if  ( i < -1 )  { mv.visitLdcInsn ( new Integer ( i )  ) ; } else if  ( i <= 5 )  { mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  intOpf  ( i  < intOp )  {^302^^^^^299^311^[REPLACE] } else if  ( i <= 5 )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} intOpf  ( i  <  Byte.MAX_VALUE )  {^304^^^^^299^311^[REPLACE] } else if  ( i <= Byte.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitIntInsn ( Constants.SIPUSH, i ) ;^304^305^306^307^^299^311^[ADD] else if  ( i <= Byte.MAX_VALUE )  { mv.visitIntInsn ( Constants.BIPUSH, i ) ; } else if  ( i <= Short.MAX_VALUE )  { mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  (  (  ( value == 0.0F )  ||  ( value == 1.0F )  )  ||  ( value == 2.0F )  )  {     mv.visitInsn ( FCONST ( value )  ) ; }else {     mv.visitLdcInsn ( new Float ( value )  ) ; }^306^^^^^299^311^[REMOVE] ^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitLdcInsn ( new Integer ( intOp )  ) ;^309^^^^^299^311^[REPLACE] mv.visitLdcInsn ( new Integer ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.SIPUSH, intOp ) ;^307^^^^^299^311^[REPLACE] mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.BIPUSH, intOp ) ;^305^^^^^299^311^[REPLACE] mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( i  <  Short.MAX_VALUE )  {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^309^^^^^299^311^[ADD] mv.visitLdcInsn ( new Integer ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitMaxs ( Constants.SIPUSH, intOp ) ;^307^^^^^299^311^[REPLACE] mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^307^^^^^299^311^[ADD] mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( TypeUtils.ICONST ( intOp )  ) ;^303^^^^^299^311^[REPLACE] mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^303^^^^^299^311^[ADD] mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( i  >=  Byte.MAX_VALUE )  {^304^^^^^299^311^[REPLACE] } else if  ( i <= Byte.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( i  ==  Short.MAX_VALUE )  {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitLdcInsn ( new Integer ( i )  ) ;^306^307^308^309^310^299^311^[ADD] else if  ( i <= Short.MAX_VALUE )  { mv.visitIntInsn ( Constants.SIPUSH, i ) ; } else { mv.visitLdcInsn ( new Integer ( i )  ) ; }^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^sig.getDescriptor (  )  ) ;^309^^^^^299^311^[REMOVE] ^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitIntInsn ( USHR )  ;^305^^^^^299^311^[REPLACE] mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitIntInsn ( Constants.SIPUSH, i ) ;mv.visitLdcInsn ( new Integer ( i )  ) ;^306^307^308^309^310^299^311^[ADD] else if  ( i <= Short.MAX_VALUE )  { mv.visitIntInsn ( Constants.SIPUSH, i ) ; } else { mv.visitLdcInsn ( new Integer ( i )  ) ; }^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitLdcInsn ( new Integer ( intOp )  ) ;^301^^^^^299^311^[REPLACE] mv.visitLdcInsn ( new Integer ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^302^^^^^299^311^[REPLACE] } else if  ( i <= 5 )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} intOpf  ( i  >  Byte.MAX_VALUE )  {^304^^^^^299^311^[REPLACE] } else if  ( i <= Byte.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  intOpf  ( i  >=  Short.MAX_VALUE )  {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitIincInsn ( EQ )  ;^309^^^^^299^311^[REPLACE] mv.visitLdcInsn ( new Integer ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitMaxs ( Constants.SIPUSH, i ) ;^307^^^^^299^311^[REPLACE] mv.visitIntInsn ( Constants.SIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} intOpf  ( intOp  >  Short.MAX_VALUE )  {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( TypeUtils.LCONST ( i )  ) ;^303^^^^^299^311^[REPLACE] mv.visitInsn ( TypeUtils.ICONST ( i )  ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^304^^^^^299^311^[REPLACE] } else if  ( i <= Byte.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} intOpf  ( i  !=  Short.MAX_VALUE )  {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^305^^^^^299^311^[ADD] mv.visitIntInsn ( Constants.BIPUSH, i ) ;^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( i  !=  Short.MAX_VALUE )  {^306^^^^^299^311^[REPLACE] } else if  ( i <= Short.MAX_VALUE )  {^[METHOD] push [TYPE] void [PARAMETER] int i [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( value == 0 &&true )  {^314^^^^^313^319^[REPLACE] if  ( value == 0L || value == 1L )  {^[METHOD] push [TYPE] void [PARAMETER] long value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  long value  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitIincInsn ( intOp )  ;^317^^^^^313^319^[REPLACE] mv.visitLdcInsn ( new Long ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] long value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  long value  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( TypeUtils.FCONST ( value )  ) ;^315^^^^^313^319^[REPLACE] mv.visitInsn ( TypeUtils.LCONST ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] long value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  long value  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( value == 0f && value == 1f && value == 2f )  {^322^^^^^321^327^[REPLACE] if  ( value == 0f || value == 1f || value == 2f )  {^[METHOD] push [TYPE] void [PARAMETER] float value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  float value  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitIincInsn ( LE )  ;^325^^^^^321^327^[REPLACE] mv.visitLdcInsn ( new Float ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] float value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  float value  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^325^^^^^321^327^[ADD] mv.visitLdcInsn ( new Float ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] float value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  float value  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( TypeUtils.FCONST ( value )  ) ;^323^^^^^321^327^[REPLACE] mv.visitInsn ( TypeUtils.FCONST ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] float value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  float value  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( TypeUtils.LCONST ( value )  ) ;^323^^^^^321^327^[REPLACE] mv.visitInsn ( TypeUtils.FCONST ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] float value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  float value  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (  value == 1d )  {^329^^^^^328^334^[REPLACE] if  ( value == 0d || value == 1d )  {^[METHOD] push [TYPE] void [PARAMETER] double value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  double value  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.L2I ) ;^332^^^^^328^334^[REPLACE] mv.visitLdcInsn ( new Double ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] double value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  double value  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^332^^^^^328^334^[ADD] mv.visitLdcInsn ( new Double ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] double value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  double value  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( TypeUtils.LCONST ( value )  ) ;^330^^^^^328^334^[REPLACE] mv.visitInsn ( TypeUtils.DCONST ( value )  ) ;^[METHOD] push [TYPE] void [PARAMETER] double value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  double value  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.L2I ) ;^337^^^^^336^338^[REPLACE] mv.visitLdcInsn ( value ) ;^[METHOD] push [TYPE] void [PARAMETER] String value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String value  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^341^^^^^340^342^[REPLACE] newarray ( Constants.TYPE_OBJECT ) ;^[METHOD] newarray [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^341^^^^^340^342^[REMOVE] ^[METHOD] newarray [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isArray ( type )  )  {^345^^^^^344^350^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] newarray [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitIntInsn ( Constants.NEWARRAY, TypeUtils.NEWARRAY ( type )  ) ;emit_type ( Constants.ANEWARRAY, type ) ;^345^346^347^348^349^344^350^[ADD] if  ( TypeUtils.isPrimitive ( type )  )  { mv.visitIntInsn ( Constants.NEWARRAY, TypeUtils.NEWARRAY ( type )  ) ; } else { emit_type ( Constants.ANEWARRAY, type ) ; }^[METHOD] newarray [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_type ( Constants.NEW, type ) ;^348^^^^^344^350^[REPLACE] emit_type ( Constants.ANEWARRAY, type ) ;^[METHOD] newarray [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitMaxs ( Constants.NEWARRAY, TypeUtils.NEWARRAY ( type )  ) ;^346^^^^^344^350^[REPLACE] mv.visitIntInsn ( Constants.NEWARRAY, TypeUtils.NEWARRAY ( type )  ) ;^[METHOD] newarray [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.isArray, TypeUtils.NEWARRAY ( type )  ) ;^346^^^^^344^350^[REPLACE] mv.visitIntInsn ( Constants.NEWARRAY, TypeUtils.NEWARRAY ( type )  ) ;^[METHOD] newarray [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^Constants.ARRAYLENGTH   ;^353^^^^^352^354^[REPLACE] mv.visitInsn ( Constants.ARRAYLENGTH ) ;^[METHOD] arraylength [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isAbstract ( state.access )  )  {^357^^^^^356^361^[REPLACE] if  ( TypeUtils.isStatic ( state.access )  )  {^[METHOD] load_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^357^358^359^^^356^361^[ADD] if  ( TypeUtils.isStatic ( state.access )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] load_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^358^^^^^356^361^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] load_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^358^^^^^356^361^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] load_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^358^^^^^356^361^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] load_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitVarInsn ( Constants.ALOAD, 4 ) ;^360^^^^^356^361^[REPLACE] mv.visitVarInsn ( Constants.ALOAD, 0 ) ;^[METHOD] load_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^load_args ( 0 , state.argumentTypes.length ) ;^367^^^^^366^368^[REPLACE] load_args ( 0, state.argumentTypes.length ) ;^[METHOD] load_args [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^load_local ( state.argumentTypes[index], state.localOffset  &  skipArgs ( index )  ) ;^375^376^^^^374^377^[REPLACE] load_local ( state.argumentTypes[index], state.localOffset + skipArgs ( index )  ) ;^[METHOD] load_arg [TYPE] void [PARAMETER] int index [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^state.localOffset + skipArgs ( jumpmode )  ) ;^376^^^^^374^377^[REPLACE] state.localOffset + skipArgs ( index )  ) ;^[METHOD] load_arg [TYPE] void [PARAMETER] int index [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^376^^^^^374^377^[ADD] state.localOffset + skipArgs ( index )  ) ;^[METHOD] load_arg [TYPE] void [PARAMETER] int index [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  i  index  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^int pos =XOR + skipArgs ( fromArg ) ;^381^^^^^380^387^[REPLACE] int pos = state.localOffset + skipArgs ( fromArg ) ;^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  >  pos; i++ )  {^382^^^^^380^387^[REPLACE] for  ( int i = 0; i < count; i++ )  {^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^382^383^384^385^386^380^387^[ADD] for  ( int i = 0; i < count; i++ )  { Type t = state.argumentTypes[fromArg + i]; load_local ( t, pos ) ; pos += t.getSize (  ) ; }^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^pos +=  null.genullSize (  ) ;^385^^^^^380^387^[REPLACE] pos += t.getSize (  ) ;^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type t = state.argumentTypes[fromArg  <  i];^383^^^^^380^387^[REPLACE] Type t = state.argumentTypes[fromArg + i];^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^383^384^^^^380^387^[ADD] Type t = state.argumentTypes[fromArg + i]; load_local ( t, pos ) ;^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 * 2; i < count; i++ )  {^382^^^^^380^387^[REPLACE] for  ( int i = 0; i < count; i++ )  {^[METHOD] load_args [TYPE] void [PARAMETER] int fromArg int count [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^int amount = 0L;^390^^^^^389^395^[REPLACE] int amount = 0;^[METHOD] skipArgs [TYPE] int [PARAMETER] int numArgs [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 + 3; i  ==  pos; i++ )  {^391^^^^^389^395^[REPLACE] for  ( int i = 0; i < numArgs; i++ )  {^[METHOD] skipArgs [TYPE] int [PARAMETER] int numArgs [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^amount +=  state.argumentTypes[intOp].getSintOpze (  ) ;^392^^^^^389^395^[REPLACE] amount += state.argumentTypes[i].getSize (  ) ;^[METHOD] skipArgs [TYPE] int [PARAMETER] int numArgs [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < numArgs; i++ )  {^391^^^^^389^395^[REPLACE] for  ( int i = 0; i < numArgs; i++ )  {^[METHOD] skipArgs [TYPE] int [PARAMETER] int numArgs [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^return pos;^394^^^^^389^395^[REPLACE] return amount;^[METHOD] skipArgs [TYPE] int [PARAMETER] int numArgs [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( t.getOpcode ( Constants.ILOAD ) , pos ) ;^399^^^^^397^400^[REPLACE] mv.visitVarInsn ( t.getOpcode ( Constants.ILOAD ) , pos ) ;^[METHOD] load_local [TYPE] void [PARAMETER] Type t int pos [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitVarInsn ( t .getSort (  )  , pos ) ;^399^^^^^397^400^[REPLACE] mv.visitVarInsn ( t.getOpcode ( Constants.ILOAD ) , pos ) ;^[METHOD] load_local [TYPE] void [PARAMETER] Type t int pos [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , op ) ;^404^^^^^402^405^[REPLACE] mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , pos ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Type t int pos [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitVarInsn ( t .getSort (  )  , pos ) ;^404^^^^^402^405^[REPLACE] mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , pos ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Type t int pos [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^404^^^^^402^405^[ADD] mv.visitVarInsn ( t.getOpcode ( Constants.ISTORE ) , pos ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Type t int pos [CLASS] CodeEmitter State   [TYPE]  Type t  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( local.getIndex (  ) , amount ) ;^408^^^^^407^409^[REPLACE] mv.visitIincInsn ( local.getIndex (  ) , amount ) ;^[METHOD] iinc [TYPE] void [PARAMETER] Local local int amount [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIincInsn ( local.getType (  ) , amount ) ;^408^^^^^407^409^[REPLACE] mv.visitIincInsn ( local.getIndex (  ) , amount ) ;^[METHOD] iinc [TYPE] void [PARAMETER] Local local int amount [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^load_local ( local.getType (  ) , local.getIndex (  )  ) ;^412^^^^^411^413^[REPLACE] store_local ( local.getType (  ) , local.getIndex (  )  ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^412^^^^^411^413^[ADD] store_local ( local.getType (  ) , local.getIndex (  )  ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^store_local ( local.getIndex (  ) , local.getIndex (  )  ) ;^412^^^^^411^413^[REPLACE] store_local ( local.getType (  ) , local.getIndex (  )  ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^store_local ( local.getType (  ) , local.getType (  )  ) ;^412^^^^^411^413^[REPLACE] store_local ( local.getType (  ) , local.getIndex (  )  ) ;^[METHOD] store_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^load_local ( local.getType (  ) , local.getType (  )  ) ;^416^^^^^415^417^[REPLACE] load_local ( local.getType (  ) , local.getIndex (  )  ) ;^[METHOD] load_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REMOVE]^public void math ( int op, Type type )  { mv.visitInsn ( type.getOpcode ( op )  ) ; }^416^^^^^415^417^[REMOVE] ^[METHOD] load_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^load_local ( local.getIndex (  ) , local.getIndex (  )  ) ;^416^^^^^415^417^[REPLACE] load_local ( local.getType (  ) , local.getIndex (  )  ) ;^[METHOD] load_local [TYPE] void [PARAMETER] Local local [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Local local  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( state.sig.getReturnType (  ) .newLocal ( Constants.IRETURN )  ) ;^420^^^^^419^421^[REPLACE] mv.visitInsn ( state.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^[METHOD] return_value [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( state.sig.getArgumentTypes (  ) .getOpcode ( Constants.IRETURN )  ) ;^420^^^^^419^421^[REPLACE] mv.visitInsn ( state.sig.getReturnType (  ) .getOpcode ( Constants.IRETURN )  ) ;^[METHOD] return_value [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^ClassInfo classInfo = method.getClassInfo (  ) ;^424^^^^^423^427^[REPLACE] ClassEmitter.FieldInfo info = ce.getFieldInfo ( name ) ;^[METHOD] getfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^int opcode = TypeUtils.isStatic ( false.access )  ? Constants.GETSTATIC : Constants.GETFIELD;^425^^^^^423^427^[REPLACE] int opcode = TypeUtils.isStatic ( info.access )  ? Constants.GETSTATIC : Constants.GETFIELD;^[METHOD] getfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( opcode, ce.getClassInfo (  ) , name, info.type ) ;^426^^^^^423^427^[REPLACE] emit_field ( opcode, ce.getClassType (  ) , name, info.type ) ;^[METHOD] getfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( opcode, ce .getClassInfo (  )  , name, info.type ) ;^426^^^^^423^427^[REPLACE] emit_field ( opcode, ce.getClassType (  ) , name, info.type ) ;^[METHOD] getfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^ClassInfo classInfo = method.getClassInfo (  ) ;^430^^^^^429^433^[REPLACE] ClassEmitter.FieldInfo info = ce.getFieldInfo ( name ) ;^[METHOD] putfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^int opcode = TypeUtils.isStatic ( this.access )  ? Constants.PUTSTATIC : Constants.PUTFIELD;^431^^^^^429^433^[REPLACE] int opcode = TypeUtils.isStatic ( info.access )  ? Constants.PUTSTATIC : Constants.PUTFIELD;^[METHOD] putfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( opcode, ce.getClassType (  ) , name, false.type ) ;^432^^^^^429^433^[REPLACE] emit_field ( opcode, ce.getClassType (  ) , name, info.type ) ;^[METHOD] putfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( opcode, ce .getClassInfo (  )  , name, info.type ) ;^432^^^^^429^433^[REPLACE] emit_field ( opcode, ce.getClassType (  ) , name, info.type ) ;^[METHOD] putfield [TYPE] void [PARAMETER] String name [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  FieldInfo info  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.GETFIELD, ce.getClassType (  ) , name, type ) ;^436^^^^^435^437^[REPLACE] emit_field ( Constants.GETFIELD, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_getfield [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^436^^^^^435^437^[ADD] emit_field ( Constants.GETFIELD, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_getfield [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTFIELD, ce.getClassType (  ) , name, type ) ;^440^^^^^439^441^[REPLACE] emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_putfield [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTFIELD, ce .getClassType (  )  , name, type ) ;^440^^^^^439^441^[REPLACE] emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_putfield [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^440^^^^^439^441^[ADD] emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_putfield [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.GETSTATIC, ce.getClassType (  ) , name, type ) ;^444^^^^^443^445^[REPLACE] emit_field ( Constants.GETSTATIC, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_getstatic [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.GETSTATIC, ce .getClassType (  )  , name, type ) ;^444^^^^^443^445^[REPLACE] emit_field ( Constants.GETSTATIC, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_getstatic [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTSTATIC, ce .getClassType (  )  , name, type ) ;^448^^^^^447^449^[REPLACE] emit_field ( Constants.PUTSTATIC, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_putstatic [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTSTATIC, ce.getClassType (  ) , name, type ) ;^448^^^^^447^449^[REPLACE] emit_field ( Constants.PUTSTATIC, ce.getSuperType (  ) , name, type ) ;^[METHOD] super_putstatic [TYPE] void [PARAMETER] String name Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.GETFIELD, type, name, type ) ;^452^^^^^451^453^[REPLACE] emit_field ( Constants.GETFIELD, owner, name, type ) ;^[METHOD] getfield [TYPE] void [PARAMETER] Type owner String name Type type [CLASS] CodeEmitter State   [TYPE]  Type owner  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^452^^^^^451^453^[ADD] emit_field ( Constants.GETFIELD, owner, name, type ) ;^[METHOD] getfield [TYPE] void [PARAMETER] Type owner String name Type type [CLASS] CodeEmitter State   [TYPE]  Type owner  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTSTATIC, owner, name, type ) ;^456^^^^^455^457^[REPLACE] emit_field ( Constants.PUTFIELD, owner, name, type ) ;^[METHOD] putfield [TYPE] void [PARAMETER] Type owner String name Type type [CLASS] CodeEmitter State   [TYPE]  Type owner  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTSTATIC, owner, name, type ) ;^460^^^^^459^461^[REPLACE] emit_field ( Constants.GETSTATIC, owner, name, type ) ;^[METHOD] getstatic [TYPE] void [PARAMETER] Type owner String name Type type [CLASS] CodeEmitter State   [TYPE]  Type owner  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTSTATIC, owner, name, owner ) ;^464^^^^^463^465^[REPLACE] emit_field ( Constants.PUTSTATIC, owner, name, type ) ;^[METHOD] putstatic [TYPE] void [PARAMETER] Type owner String name Type type [CLASS] CodeEmitter State   [TYPE]  Type owner  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitFieldInsn ( pos, ctype.getInternalName (  ) , name, ftype.getDescriptor (  )  ) ;^469^470^471^472^^468^473^[REPLACE] mv.visitFieldInsn ( opcode, ctype.getInternalName (  ) , name, ftype.getDescriptor (  )  ) ;^[METHOD] emit_field [TYPE] void [PARAMETER] int opcode Type ctype String name Type ftype [CLASS] CodeEmitter State   [TYPE]  Type ctype  ftype  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^469^470^471^^^468^473^[ADD] mv.visitFieldInsn ( opcode, ctype.getInternalName (  ) , name,^[METHOD] emit_field [TYPE] void [PARAMETER] int opcode Type ctype String name Type ftype [CLASS] CodeEmitter State   [TYPE]  Type ctype  ftype  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^ctype .getSort (  )  , name, ftype.getDescriptor (  )  ) ;^470^471^472^^^468^473^[REPLACE] ctype.getInternalName (  ) , name, ftype.getDescriptor (  )  ) ;^[METHOD] emit_field [TYPE] void [PARAMETER] int opcode Type ctype String name Type ftype [CLASS] CodeEmitter State   [TYPE]  Type ctype  ftype  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^ftype.getSort (  )  ) ;^472^^^^^468^473^[REPLACE] ftype.getDescriptor (  )  ) ;^[METHOD] emit_field [TYPE] void [PARAMETER] int opcode Type ctype String name Type ftype [CLASS] CodeEmitter State   [TYPE]  Type ctype  ftype  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REMOVE]^sig.getDescriptor (  )  ) ;^472^^^^^468^473^[REMOVE] ^[METHOD] emit_field [TYPE] void [PARAMETER] int opcode Type ctype String name Type ftype [CLASS] CodeEmitter State   [TYPE]  Type ctype  ftype  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String name  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^476^^^^^475^477^[REPLACE] super_invoke ( state.sig ) ;^[METHOD] super_invoke [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, ce.getClassType (  ) , LONG_VALUE ) ;^480^^^^^479^481^[REPLACE] emit_invoke ( Constants.INVOKESPECIAL, ce.getSuperType (  ) , sig ) ;^[METHOD] super_invoke [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, ce.getClassType (  ) , sig ) ;^480^^^^^479^481^[REPLACE] emit_invoke ( Constants.INVOKESPECIAL, ce.getSuperType (  ) , sig ) ;^[METHOD] super_invoke [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( type, CSTRUCT_STRING ) ;^484^^^^^483^485^[REPLACE] invoke_constructor ( type, CSTRUCT_NULL ) ;^[METHOD] invoke_constructor [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce.getClassType (  )  ) ;^488^^^^^487^489^[REPLACE] invoke_constructor ( ce.getSuperType (  )  ) ;^[METHOD] super_invoke_constructor [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^488^^^^^487^489^[ADD] invoke_constructor ( ce.getSuperType (  )  ) ;^[METHOD] super_invoke_constructor [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce.getSuperType (  )  ) ;^492^^^^^491^493^[REPLACE] invoke_constructor ( ce.getClassType (  )  ) ;^[METHOD] invoke_constructor_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce .getClassInfo (  )   ) ;^492^^^^^491^493^[REPLACE] invoke_constructor ( ce.getClassType (  )  ) ;^[METHOD] invoke_constructor_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (  (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^496^497^498^^^495^505^[REPLACE] if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  && (  ( opcode == Constants.INVOKEVIRTUAL )  || ( opcode == Constants.INVOKESTATIC )  )  )  {^[METHOD] emit_invoke [TYPE] void [PARAMETER] int opcode Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitMethodInsn ( pos, type.getSort (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^501^502^503^504^^495^505^[REPLACE] mv.visitMethodInsn ( opcode, type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[METHOD] emit_invoke [TYPE] void [PARAMETER] int opcode Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^type.getSort (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^502^503^504^^^495^505^[REPLACE] type.getInternalName (  ) , sig.getName (  ) , sig.getDescriptor (  )  ) ;^[METHOD] emit_invoke [TYPE] void [PARAMETER] int opcode Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig.getName (  ) , LONG_VALUE.getDescriptor (  )  ) ;^503^504^^^^495^505^[REPLACE] sig.getName (  ) , sig.getDescriptor (  )  ) ;^[METHOD] emit_invoke [TYPE] void [PARAMETER] int opcode Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig.getReturnType (  )  ) ;^504^^^^^495^505^[REPLACE] sig.getDescriptor (  )  ) ;^[METHOD] emit_invoke [TYPE] void [PARAMETER] int opcode Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESTATIC, owner, sig ) ;^508^^^^^507^509^[REPLACE] emit_invoke ( Constants.INVOKEINTERFACE, owner, sig ) ;^[METHOD] invoke_interface [TYPE] void [PARAMETER] Type owner Signature sig [CLASS] CodeEmitter State   [TYPE]  Type owner  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESTATIC, owner, sig ) ;^512^^^^^511^513^[REPLACE] emit_invoke ( Constants.INVOKEVIRTUAL, owner, sig ) ;^[METHOD] invoke_virtual [TYPE] void [PARAMETER] Type owner Signature sig [CLASS] CodeEmitter State   [TYPE]  Type owner  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESTATIC, owner, LONG_VALUE ) ;^516^^^^^515^517^[REPLACE] emit_invoke ( Constants.INVOKESTATIC, owner, sig ) ;^[METHOD] invoke_static [TYPE] void [PARAMETER] Type owner Signature sig [CLASS] CodeEmitter State   [TYPE]  Type owner  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_virtual ( ce.getClassType (  ) , LONG_VALUE ) ;^520^^^^^519^521^[REPLACE] invoke_virtual ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_virtual_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_virtual ( ce .getClassInfo (  )  , sig ) ;^520^^^^^519^521^[REPLACE] invoke_virtual ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_virtual_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_static ( ce.getClassType (  ) , LONG_VALUE ) ;^524^^^^^523^525^[REPLACE] invoke_static ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_static_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^524^^^^^523^525^[ADD] invoke_static ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_static_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_static ( ce.getClassInfo (  ) , sig ) ;^524^^^^^523^525^[REPLACE] invoke_static ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_static_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, type, LONG_VALUE ) ;^528^^^^^527^529^[REPLACE] emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^[METHOD] invoke_constructor [TYPE] void [PARAMETER] Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^528^^^^^527^529^[ADD] emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^[METHOD] invoke_constructor [TYPE] void [PARAMETER] Type type Signature sig [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce.getClassType (  ) , LONG_VALUE ) ;^532^^^^^531^533^[REPLACE] invoke_constructor ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_constructor_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^532^^^^^531^533^[ADD] invoke_constructor ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_constructor_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce.getClassInfo (  ) , sig ) ;^532^^^^^531^533^[REPLACE] invoke_constructor ( ce.getClassType (  ) , sig ) ;^[METHOD] invoke_constructor_this [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce.getSuperType (  ) , LONG_VALUE ) ;^536^^^^^535^537^[REPLACE] invoke_constructor ( ce.getSuperType (  ) , sig ) ;^[METHOD] super_invoke_constructor [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REMOVE]^emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^536^^^^^535^537^[REMOVE] ^[METHOD] super_invoke_constructor [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce .getClassType (  )  , sig ) ;^536^^^^^535^537^[REPLACE] invoke_constructor ( ce.getSuperType (  ) , sig ) ;^[METHOD] super_invoke_constructor [TYPE] void [PARAMETER] Signature sig [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^new_instance ( ce.getClassInfo (  )  ) ;^540^^^^^539^541^[REPLACE] new_instance ( ce.getClassType (  )  ) ;^[METHOD] new_instance_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_type ( Constants.ANEWARRAY, type ) ;^544^^^^^543^545^[REPLACE] emit_type ( Constants.NEW, type ) ;^[METHOD] new_instance [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[0];^548^^^^^547^555^[REPLACE] String desc;^[METHOD] emit_type [TYPE] void [PARAMETER] int opcode Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String desc  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^548^^^^^547^555^[ADD] String desc;^[METHOD] emit_type [TYPE] void [PARAMETER] int opcode Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String desc  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils .NEWARRAY ( type )   )  {^549^^^^^547^555^[REPLACE] if  ( TypeUtils.isArray ( type )  )  {^[METHOD] emit_type [TYPE] void [PARAMETER] int opcode Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String desc  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^desc =  null.getInternalName (  ) ;^552^^^^^547^555^[REPLACE] desc = type.getInternalName (  ) ;^[METHOD] emit_type [TYPE] void [PARAMETER] int opcode Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String desc  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^desc =  null.getDescriptor (  ) ;^550^^^^^547^555^[REPLACE] desc = type.getDescriptor (  ) ;^[METHOD] emit_type [TYPE] void [PARAMETER] int opcode Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String desc  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitJumpInsn ( null )  ;^554^^^^^547^555^[REPLACE] mv.visitTypeInsn ( opcode, desc ) ;^[METHOD] emit_type [TYPE] void [PARAMETER] int opcode Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String desc  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( opcode ) ;^558^^^^^557^560^[REPLACE] push ( index ) ;^[METHOD] aaload [TYPE] void [PARAMETER] int index [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^558^^^^^557^560^[ADD] push ( index ) ;^[METHOD] aaload [TYPE] void [PARAMETER] int index [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^559^^^^^557^560^[REPLACE] aaload (  ) ;^[METHOD] aaload [TYPE] void [PARAMETER] int index [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void aaload (  )  { mv.visitIntInsn ( Constants.AALOAD ) ; }^562^^^^^^^[REPLACE] public void aaload (  )  { mv.visitInsn ( Constants.AALOAD ) ; }^[METHOD] aaload [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^562^563^564^^^^^[ADD] public void aaload (  )  { mv.visitInsn ( Constants.AALOAD ) ; } public void aastore (  )  { mv.visitInsn ( Constants.AASTORE ) ; } public void athrow (  )  { mv.visitInsn ( Constants.ATHROW ) ; }^[METHOD] aaload [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void aastore (  )  { mv.visitIntInsn ( Constants.AASTORE ) ; }^563^^^^^^^[REPLACE] public void aastore (  )  { mv.visitInsn ( Constants.AASTORE ) ; }^[METHOD] aastore [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^public void athrow (  )  { mv.visitIntInsn ( Constants.ATHROW ) ; }^564^^^^^^^[REPLACE] public void athrow (  )  { mv.visitInsn ( Constants.ATHROW ) ; }^[METHOD] athrow [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^return  new Block ( this )  ;^567^^^^^566^568^[REPLACE] return new Label (  ) ;^[METHOD] make_label [TYPE] Label [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getReturnType (  ) ;^571^^^^^570^572^[REPLACE] return make_local ( Constants.TYPE_OBJECT ) ;^[METHOD] make_local [TYPE] Local [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^return new Local ( newLocal ( type.getSort (  )  ) , type ) ;^575^^^^^574^576^[REPLACE] return new Local ( newLocal ( type.getSize (  )  ) , type ) ;^[METHOD] make_local [TYPE] Local [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^checkcast ( ce.getClassInfo (  )  ) ;^579^^^^^578^580^[REPLACE] checkcast ( ce.getClassType (  )  ) ;^[METHOD] checkcast_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^checkcast ( ce .getClassInfo (  )   ) ;^579^^^^^578^580^[REPLACE] checkcast ( ce.getClassType (  )  ) ;^[METHOD] checkcast_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( !type.getOpcode ( Constants.TYPE_OBJECT )  )  {^583^^^^^582^586^[REPLACE] if  ( !type.equals ( Constants.TYPE_OBJECT )  )  {^[METHOD] checkcast [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^584^^^^^582^586^[REPLACE] emit_type ( Constants.CHECKCAST, type ) ;^[METHOD] checkcast [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^584^^^^^582^586^[ADD] emit_type ( Constants.CHECKCAST, type ) ;^[METHOD] checkcast [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_field ( Constants.PUTFIELD, ce.getSuperType (  ) , name, type ) ;^589^^^^^588^590^[REPLACE] emit_type ( Constants.INSTANCEOF, type ) ;^[METHOD] instance_of [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^instance_of ( ce.getClassInfo (  )  ) ;^593^^^^^592^594^[REPLACE] instance_of ( ce.getClassType (  )  ) ;^[METHOD] instance_of_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^593^^^^^592^594^[ADD] instance_of ( ce.getClassType (  )  ) ;^[METHOD] instance_of_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^instance_of ( ce .getClassInfo (  )   ) ;^593^^^^^592^594^[REPLACE] instance_of ( ce.getClassType (  )  ) ;^[METHOD] instance_of_this [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 1; i < keys.length; i++ )  { if  ( keys[i] < keys[i - 1] )^597^^^^^596^604^[REPLACE] float density;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys.length (  )  == 0 )  {^598^^^^^596^604^[REPLACE] if  ( keys.length == 0 )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^density =  ( float ) keys.length %  0.5  /  ( keys[keys.length %  0.5  - 1] - keys[0] + 1 ) ;^601^^^^^596^604^[REPLACE] density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^density = 0 >> 0;^599^^^^^596^604^[REPLACE] density = 0;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^density = 4;^599^^^^^596^604^[REPLACE] density = 0;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^599^^^^^596^604^[ADD] density = 0;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^density =  ( float ) keys.length (  )  /  ( keys[keys.length (  )  - 0 ] - keys[0] + 0  ) ;^601^^^^^596^604^[REPLACE] density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[ADD]^^601^^^^^596^604^[ADD] density =  ( float ) keys.length /  ( keys[keys.length - 1] - keys[0] + 1 ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^process_switch ( keys, callback, density  !=  0.5f ) ;^603^^^^^596^604^[REPLACE] process_switch ( keys, callback, density >= 0.5f ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  float density  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  localOffset  mode  numArgs  op  opcode  pos  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( isSorted ( keys )  ) throw new IllegalArgumentException  (" ")  ;^607^608^^^^606^657^[REPLACE] if  ( !isSorted ( keys )  ) throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^608^^^^^606^657^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^608^^^^^606^657^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^608^^^^^606^657^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label end = make_label (  ) ;^609^^^^^606^657^[REPLACE] Label def = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label def = make_label (  ) ;^610^^^^^606^657^[REPLACE] Label end = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys.length - 3 > 0 )  {^613^^^^^606^657^[REPLACE] if  ( keys.length > 0 )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( value == 0d || value == 1d )  {^619^^^^^606^657^[REPLACE] if  ( useTable )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 - 1; i  != min; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i] - min] = make_label (  ) ; ;^636^^^^^619^643^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  == min; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^mark ( def ) ;^640^^^^^619^643^[REPLACE] mark ( labels[i] ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^640^641^^^^619^643^[ADD] mark ( labels[i] ) ; callback.processCase ( keys[i], end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback .processDefault (  )  ;^641^^^^^619^643^[REPLACE] callback.processCase ( keys[i], end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^641^^^^^619^643^[ADD] callback.processCase ( keys[i], end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label[] labels = new Label[range];^634^^^^^619^643^[REPLACE] Label[] labels = new Label[len];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 4; i < len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 >>> 2; i < len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( label  ==  def )  {^628^^^^^606^657^[REPLACE] if  ( label != def )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^mark ( label ) ;callback.processCase ( i + min, end ) ;^628^629^630^631^^606^657^[ADD] if  ( label != def )  { mark ( label ) ; callback.processCase ( i + min, end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^mark ( def ) ;^629^^^^^606^657^[REPLACE] mark ( label ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^629^^^^^606^657^[ADD] mark ( label ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase (intOp + min, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  ==  len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i] -pos] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  != min; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^626^627^628^629^630^606^657^[ADD] for  ( int i = 0; i < range; i++ )  { Label label = labels[i]; if  ( label != def )  { mark ( label ) ; callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^630^^^^^606^657^[ADD] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label nonNull = make_label (  ) ;^627^^^^^606^657^[REPLACE] Label label = labels[i];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[i] = make_label (  ) ; ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^623^^^^^606^657^[ADD] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label[] labels = new Label[len];^620^^^^^606^657^[REPLACE] Label[] labels = new Label[range];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^620^621^^^^606^657^[ADD] Label[] labels = new Label[range]; Arrays.fill ( labels, def ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 - 2; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase ( i +intOp, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^622^623^624^^^606^657^[ADD] for  ( int i = 0; i < len; i++ )  { labels[keys[i] - min] = make_label (  ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  >=  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 2; i  !=  range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processDefault ( i  ||  min, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  <= min; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i] - min] = make_label (  ) ; ;^636^^^^^606^657^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  !=  len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^mark ( def ) ;^640^^^^^606^657^[REPLACE] mark ( labels[i] ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_interface ( type, sig ) ;^641^^^^^606^657^[REPLACE] callback.processCase ( keys[i], end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  &  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^636^^^^^606^657^[ADD] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[len - 1];^614^^^^^606^657^[REPLACE] int len = keys.length;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[0 / 1];^615^^^^^606^657^[REPLACE] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[len -range];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int range =range + 1;^617^^^^^606^657^[REPLACE] int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^617^^^^^606^657^[ADD] int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^Arrays.fill ( labels, def ) ;^620^621^^^^606^657^[ADD] Label[] labels = new Label[range]; Arrays.fill ( labels, def ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label[] labels = new Label[range];^634^^^^^606^657^[REPLACE] Label[] labels = new Label[len];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 1; i < len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^639^640^641^642^^606^657^[ADD] for  ( int i = 0; i < len; i++ )  { mark ( labels[i] ) ; callback.processCase ( keys[i], end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^619^620^621^622^623^606^657^[ADD] if  ( useTable )  { Label[] labels = new Label[range]; Arrays.fill ( labels, def ) ; for  ( int i = 0; i < len; i++ )  { labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  >=  len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^635^636^637^^^619^643^[ADD] for  ( int i = 0; i < len; i++ )  { labels[i] = make_label (  ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 * 1; i  >  len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^636^^^^^619^643^[ADD] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 / 0; i < len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 4; i < len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  <=  len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  !=  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  > min; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase ( intOp + range, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^627^^^^^606^657^[ADD] Label label = labels[i];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 1; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 << 4; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  >= range; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  <=  opcode; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  <=  len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^635^636^637^^^606^657^[ADD] for  ( int i = 0; i < len; i++ )  { labels[i] = make_label (  ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  >=  len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^int len = keys.length;int min = keys[0];int max = keys[len - 1];^612^613^614^615^616^606^657^[ADD] try { if  ( keys.length > 0 )  { int len = keys.length; int min = keys[0]; int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys.length /  0.5  > 0 )  {^613^^^^^606^657^[REPLACE] if  ( keys.length > 0 )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  >  len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  ==  len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 1; i < len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^629^630^^^^606^657^[ADD] mark ( label ) ; callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  !=  len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  !=  range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^628^629^630^631^^606^657^[ADD] if  ( label != def )  { mark ( label ) ; callback.processCase ( i + min, end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^callback.processCase ( i + min, end ) ;^629^630^^^^606^657^[ADD] mark ( label ) ; callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processDefault ( intOp + range, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  ||  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 % 4; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 / 1; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( label  ==  label )  {^628^^^^^606^657^[REPLACE] if  ( label != def )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REMOVE]^push ( 1 ) ;^629^^^^^606^657^[REMOVE] ^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase ( i  >  min, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  (minnt i = 0; i  <=  len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  <  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  ==  range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 % 2; i  > min; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 >>> 3; i  >  len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback .processDefault (  )  ;^641^^^^^606^657^[REPLACE] callback.processCase ( keys[i], end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[4];^615^^^^^606^657^[REPLACE] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^615^^^^^606^657^[ADD] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[range -range];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int range =range + 1 - 1;^617^^^^^606^657^[REPLACE] int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 4; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  ==  len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  >=  len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^640^^^^^619^643^[ADD] mark ( labels[i] ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0L; i < len; i++ )  {^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback .processDefault (  )  ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REMOVE]^checkcast ( t ) ;^630^^^^^606^657^[REMOVE] ^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( minnt i = 2; i  >  range; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  <=  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  &&  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0L; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 - 1; i  >=  len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  (minnt i = 2; i  !=  range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase ( i  ^  min, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i  !=  len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^callback.processCase ( keys[i], end ) ;^640^641^^^^606^657^[ADD] mark ( labels[i] ) ; callback.processCase ( keys[i], end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^614^^^^^606^657^[ADD] int len = keys.length;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[0 << 0];^615^^^^^606^657^[REPLACE] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[len  ^  1L];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0L; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0L; i < len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[len  <=  1];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^616^617^^^^606^657^[ADD] int max = keys[len - 1]; int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 1; i < len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^651^^^^^606^657^[REPLACE] throw e;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^653^^^^^606^657^[REPLACE] throw e;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^655^^^^^606^657^[REPLACE] throw new CodeGenerationException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys[i]  ==  keys[i - 1] ) return false;^661^662^^^^659^665^[REPLACE] if  ( keys[i] < keys[i - 1] ) return false;^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^return false;^661^662^663^^^659^665^[ADD] if  ( keys[i] < keys[i - 1] ) return false; }^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^return true;^662^^^^^659^665^[REPLACE] return false;^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 ; i < keys.length + 2; i++ )  {^660^^^^^659^665^[REPLACE] for  ( int i = 1; i < keys.length; i++ )  {^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^660^661^662^663^^659^665^[ADD] for  ( int i = 1; i < keys.length; i++ )  { if  ( keys[i] < keys[i - 1] ) return false; }^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys[i]  >=  keys[i - 1] ) return false;^661^662^^^^659^665^[REPLACE] if  ( keys[i] < keys[i - 1] ) return false;^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 ; i < keys.length; i++ )  {^660^^^^^659^665^[REPLACE] for  ( int i = 1; i < keys.length; i++ )  {^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^return false;^664^^^^^659^665^[REPLACE] return true;^[METHOD] isSorted [TYPE] boolean [PARAMETER] int[] keys [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitJumpInsn ( label ) ;^668^^^^^667^669^[REPLACE] mv.visitLabel ( label ) ;^[METHOD] mark [TYPE] void [PARAMETER] Label label [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label def = make_label (  ) ;^672^^^^^671^675^[REPLACE] Label label = make_label (  ) ;^[METHOD] mark [TYPE] Label [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitJumpInsn ( label ) ;^673^^^^^671^675^[REPLACE] mv.visitLabel ( label ) ;^[METHOD] mark [TYPE] Label [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^673^^^^^671^675^[ADD] mv.visitLabel ( label ) ;^[METHOD] mark [TYPE] Label [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^return new Label (  ) ;^674^^^^^671^675^[REPLACE] return label;^[METHOD] mark [TYPE] Label [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( value ? 4 : 0 ) ;^678^^^^^677^679^[REPLACE] push ( value ? 1 : 0 ) ;^[METHOD] push [TYPE] void [PARAMETER] boolean value [CLASS] CodeEmitter State   [TYPE]  boolean false  true  value  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 2 ) ;^685^^^^^684^687^[REPLACE] push ( 1 ) ;^[METHOD] not [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REMOVE]^checkcast ( t ) ;^685^^^^^684^687^[REMOVE] ^[METHOD] not [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_type ( Constants.CHECKCAST, type ) ;^686^^^^^684^687^[REPLACE] math ( XOR, Type.INT_TYPE ) ;^[METHOD] not [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( ce.getClassType (  )  ) ;^690^^^^^689^695^[REPLACE] new_instance ( type ) ;^[METHOD] throw_exception [TYPE] void [PARAMETER] Type type String msg [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String msg  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^691^^^^^689^695^[REPLACE] dup (  ) ;^[METHOD] throw_exception [TYPE] void [PARAMETER] Type type String msg [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String msg  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^692^^^^^689^695^[REPLACE] push ( msg ) ;^[METHOD] throw_exception [TYPE] void [PARAMETER] Type type String msg [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String msg  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( type, CSTRUCT_NULL ) ;^693^^^^^689^695^[REPLACE] invoke_constructor ( type, CSTRUCT_STRING ) ;^[METHOD] throw_exception [TYPE] void [PARAMETER] Type type String msg [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String msg  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig.getDescriptor (  )  ) ;^694^^^^^689^695^[REPLACE] athrow (  ) ;^[METHOD] throw_exception [TYPE] void [PARAMETER] Type type String msg [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  String msg  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isPrimitive (boxed )  )  {^705^^^^^704^724^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^705^706^707^708^709^704^724^[ADD] if  ( TypeUtils.isPrimitive ( type )  )  { if  ( type == Type.VOID_TYPE )  { aconst_null (  ) ; } else { Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (boxed  !=  Type.VOID_TYPE )  {^706^^^^^704^724^[REPLACE] if  ( type == Type.VOID_TYPE )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type .getSort (  )    !=  2 )  {^711^^^^^704^724^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^711^712^713^714^715^704^724^[ADD] if  ( type.getSize (  )  == 2 )  {  dup_x2 (  ) ; dup_x2 (  ) ; pop (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x2 (  ) ;^718^^^^^704^724^[REPLACE] dup_x1 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^719^^^^^704^724^[REPLACE] swap (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup_x1 (  ) ;^713^^^^^704^724^[REPLACE] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup_x1 (  ) ;^714^^^^^704^724^[REPLACE] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop2 (  ) ;^715^^^^^704^724^[REPLACE] pop (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type boxed = TypeUtils.getBoxedType ( boxed ) ;^709^^^^^704^724^[REPLACE] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^707^^^^^704^724^[REPLACE] aconst_null (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   &&  4 )  {^711^^^^^704^724^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^719^^^^^704^724^[ADD] swap (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type boxed = TypeUtils .ICONST ( count )  ;^709^^^^^704^724^[REPLACE] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type  ||  Type.VOID_TYPE )  {^706^^^^^704^724^[REPLACE] if  ( type == Type.VOID_TYPE )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   &&  3 )  {^711^^^^^704^724^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^pop (  ) ;^714^715^^^^704^724^[ADD] dup_x2 (  ) ; pop (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type boxed = TypeUtils.isPrimitive ( type ) ;^709^^^^^704^724^[REPLACE] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   &&  5 )  {^711^^^^^704^724^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REMOVE]^sig.getDescriptor (  )  ) ;^715^^^^^704^724^[REMOVE] ^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type type = classInfo.getType (  ) ;^734^^^^^733^768^[REPLACE] Type t = Constants.TYPE_NUMBER;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Signature sig = this;^735^^^^^733^768^[REPLACE] Signature sig = null;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^t  = null ;^740^^^^^733^768^[REPLACE] t = Constants.TYPE_CHARACTER;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE; ;^741^^^^^733^768^[REPLACE] sig = CHAR_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^t  =  t ;^744^^^^^733^768^[REPLACE] t = Constants.TYPE_BOOLEAN;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE; ;^745^^^^^733^768^[REPLACE] sig = BOOLEAN_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^break;^745^746^^^^733^768^[ADD] sig = BOOLEAN_VALUE; break;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = BOOLEAN_VALUE; ;^748^^^^^733^768^[REPLACE] sig = DOUBLE_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = INT_VALUE; ;^751^^^^^733^768^[REPLACE] sig = FLOAT_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE; ;^754^^^^^733^768^[REPLACE] sig = LONG_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE; ;^759^^^^^733^768^[REPLACE] sig = INT_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^return label;^738^^^^^733^768^[REPLACE] return;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( LONG_VALUE != null )  {^762^^^^^733^768^[REPLACE] if  ( sig == null )  {^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^checkcast ( type ) ;^765^^^^^762^767^[REPLACE] checkcast ( t ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_virtual ( t, LONG_VALUE ) ;^766^^^^^762^767^[REPLACE] invoke_virtual ( t, sig ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^763^^^^^733^768^[REPLACE] checkcast ( type ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^return state.sig.getReturnType (  ) ;^780^^^^^775^789^[REPLACE] push ( state.argumentTypes.length ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^781^^^^^775^789^[REPLACE] newarray (  ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^781^^^^^775^789^[ADD] newarray (  ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i < state.argumentTypes.length %  2; i++ )  {^782^^^^^775^789^[REPLACE] for  ( int i = 0; i < state.argumentTypes.length; i++ )  {^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^782^783^784^785^786^775^789^[ADD] for  ( int i = 0; i < state.argumentTypes.length; i++ )  { dup (  ) ; push ( i ) ; load_arg ( i ) ; box ( state.argumentTypes[i] ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^783^^^^^775^789^[REPLACE] dup (  ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( min ) ;^784^^^^^775^789^[REPLACE] push ( i ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^load_arg ( min ) ;^785^^^^^775^789^[REPLACE] load_arg ( i ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^emit_invoke ( Constants.INVOKESPECIAL, type, sig ) ;^786^^^^^775^789^[REPLACE] box ( state.argumentTypes[i] ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig.getDescriptor (  )  ) ;^787^^^^^775^789^[REPLACE] aastore (  ) ;^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 ; i < state.argumentTypes.length; i++ )  {^782^^^^^775^789^[REPLACE] for  ( int i = 0; i < state.argumentTypes.length; i++ )  {^[METHOD] create_arg_array [TYPE] void [PARAMETER] [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isArray ( type )  )  {^796^^^^^795^815^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^796^797^798^799^800^795^815^[ADD] if  ( TypeUtils.isPrimitive ( type )  )  { switch  ( type.getSort (  )  )  { case Type.DOUBLE: push ( 0d ) ; break;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^813^^^^^795^815^[REPLACE] aconst_null (  ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REMOVE]^push ( 1 ) ;^813^^^^^795^815^[REMOVE] ^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^switch  ( type.getSize (  )  )  {^797^^^^^795^815^[REPLACE] switch  ( type.getSort (  )  )  {^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0f ) ;^799^^^^^795^815^[REPLACE] push ( 0d ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0 ) ;^802^^^^^795^815^[REPLACE] push ( 0L ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0d ) ;^805^^^^^795^815^[REPLACE] push ( 0f ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^808^^^^^795^815^[REPLACE] aconst_null (  ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^808^^^^^795^815^[ADD] aconst_null (  ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0 << 4 ) ;^810^^^^^795^815^[REPLACE] push ( 0 ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isArray ( type )  )  {^822^^^^^821^838^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 ) ;^836^^^^^821^838^[REPLACE] checkcast ( type ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^836^^^^^821^838^[ADD] checkcast ( type ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type  ==  Type.VOID_TYPE )  {^823^^^^^821^838^[REPLACE] if  ( type != Type.VOID_TYPE )  {^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0; i < len; i++ )  { labels[i] = make_label (  ) ;^824^^^^^821^838^[REPLACE] Label nonNull = make_label (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label def = make_label (  ) ;^825^^^^^821^838^[REPLACE] Label end = make_label (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^Label end = make_label (  ) ;^824^825^^^^821^838^[ADD] Label nonNull = make_label (  ) ; Label end = make_label (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^dup (  ) ;^825^826^^^^821^838^[ADD] Label end = make_label (  ) ; dup (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^825^826^^^^821^838^[ADD] Label end = make_label (  ) ; dup (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isAbstract ( state.access )  )  {^841^^^^^840^844^[REPLACE] if  ( !TypeUtils.isAbstract ( state.access )  )  {^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^841^842^843^^^840^844^[ADD] if  ( !TypeUtils.isAbstract ( state.access )  )  { mv.visitMaxs ( 0, 0 ) ; }^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitMaxs ( 0 - 2, 0 - 2 ) ;^842^^^^^840^844^[REPLACE] mv.visitMaxs ( 0, 0 ) ;^[METHOD] visitMaxs [TYPE] void [PARAMETER] int maxStack int maxLocals [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^ClassInfo classInfo = method.getModifiers (  ) ;^847^^^^^846^859^[REPLACE] ClassInfo classInfo = method.getClassInfo (  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type type = classInfo.getModifiers (  ) ;^848^^^^^846^859^[REPLACE] Type type = classInfo.getType (  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Signature sig = method .getModifiers (  )  ;^849^^^^^846^859^[REPLACE] Signature sig = method.getSignature (  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( sig .getReturnType (  )  .equals ( Constants.CONSTRUCTOR_NAME )  )  {^850^^^^^846^859^[REPLACE] if  ( sig.getName (  ) .equals ( Constants.CONSTRUCTOR_NAME )  )  {^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^852^^^^^846^859^[REPLACE] } else if  ( TypeUtils.isInterface ( classInfo.getModifiers (  )  )  )  {^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( TypeUtils.isStatic ( method .getType (  )   )  )  {^854^^^^^846^859^[REPLACE] } else if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  {^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^}   invoke_virtual ( virtualType, sig ) ;^854^855^856^857^858^846^859^[ADD] else if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  { invoke_static ( type, sig ) ; } else { invoke_virtual ( virtualType, sig ) ; }^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_virtual ( type, sig ) ;^857^^^^^846^859^[REPLACE] invoke_virtual ( virtualType, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_static ( type, LONG_VALUE ) ;^855^^^^^846^859^[REPLACE] invoke_static ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_interface ( virtualType, sig ) ;^853^^^^^846^859^[REPLACE] invoke_interface ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^853^^^^^846^859^[ADD] invoke_interface ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  {^854^^^^^846^859^[REPLACE] } else if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  {^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^}   invoke_static ( type, sig ) ;invoke_virtual ( virtualType, sig ) ;^854^855^856^857^858^846^859^[ADD] else if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  { invoke_static ( type, sig ) ; } else { invoke_virtual ( virtualType, sig ) ; }^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_virtual ( virtualType, LONG_VALUE ) ;^857^^^^^846^859^[REPLACE] invoke_virtual ( virtualType, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^857^^^^^846^859^[ADD] invoke_virtual ( virtualType, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_constructor ( type, LONG_VALUE ) ;^851^^^^^846^859^[REPLACE] invoke_constructor ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^851^^^^^846^859^[ADD] invoke_constructor ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( TypeUtils.isInterface ( classInfo .getType (  )   )  )  {^852^^^^^846^859^[REPLACE] } else if  ( TypeUtils.isInterface ( classInfo.getModifiers (  )  )  )  {^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^}   invoke_interface ( type, sig ) ;invoke_static ( type, sig ) ;^852^853^854^855^^846^859^[ADD] else if  ( TypeUtils.isInterface ( classInfo.getModifiers (  )  )  )  { invoke_interface ( type, sig ) ; } else if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  { invoke_static ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( TypeUtils.isInterface ( classInfo.getModifiers (  )  )  )  {^854^^^^^846^859^[REPLACE] } else if  ( TypeUtils.isStatic ( method.getModifiers (  )  )  )  {^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_interface ( type, LONG_VALUE ) ;^853^^^^^846^859^[REPLACE] invoke_interface ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_static ( virtualType, sig ) ;^855^^^^^846^859^[REPLACE] invoke_static ( type, sig ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method Type virtualType [CLASS] CodeEmitter State   [TYPE]  Type type  virtualType  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke ( method, method.getClassInfo (  ) .newLocal (  )  ) ;^862^^^^^861^863^[REPLACE] invoke ( method, method.getClassInfo (  ) .getType (  )  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke ( method, method.getClassInfo (  )  .getIndex (  )   ) ;^862^^^^^861^863^[REPLACE] invoke ( method, method.getClassInfo (  ) .getType (  )  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke ( method, method .getClassType (  )  .getType (  )  ) ;^862^^^^^861^863^[REPLACE] invoke ( method, method.getClassInfo (  ) .getType (  )  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^862^^^^^861^863^[ADD] invoke ( method, method.getClassInfo (  ) .getType (  )  ) ;^[METHOD] invoke [TYPE] void [PARAMETER] MethodInfo method [CLASS] CodeEmitter State   [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  MethodInfo method  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  maxLocals  maxStack  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.classInfo =  null;^76^^^^^75^82^[REPLACE] this.classInfo = classInfo;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[ADD]^^76^^^^^75^82^[ADD] this.classInfo = classInfo;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.access =  localOffset;^77^^^^^75^82^[REPLACE] this.access = access;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[ADD]^^77^^^^^75^82^[ADD] this.access = access;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.sig =  null;^78^^^^^75^82^[REPLACE] this.sig = sig;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^this.exceptionTypes =  argumentTypes;^79^^^^^75^82^[REPLACE] this.exceptionTypes = exceptionTypes;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^localOffset = TypeUtils.isStatic ( access )  ? 3 : 1;^80^^^^^75^82^[REPLACE] localOffset = TypeUtils.isStatic ( access )  ? 0 : 1;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^argumentTypes =  null.getArgumentTypes (  ) ;^81^^^^^75^82^[REPLACE] argumentTypes = sig.getArgumentTypes (  ) ;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[ADD]^^81^^^^^75^82^[ADD] argumentTypes = sig.getArgumentTypes (  ) ;^[METHOD] <init> [TYPE] Type[]) [PARAMETER] ClassInfo classInfo int access Signature sig Type[] exceptionTypes [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return null;^85^^^^^84^86^[REPLACE] return classInfo;^[METHOD] getClassInfo [TYPE] ClassInfo [PARAMETER] [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return null;^89^^^^^88^90^[REPLACE] return access;^[METHOD] getModifiers [TYPE] int [PARAMETER] [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return null;^93^^^^^92^94^[REPLACE] return sig;^[METHOD] getSignature [TYPE] Signature [PARAMETER] [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return null;^97^^^^^96^98^[REPLACE] return exceptionTypes;^[METHOD] getExceptionTypes [TYPE] Type[] [PARAMETER] [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return false;^102^^^^^100^103^[REPLACE] return null;^[METHOD] getAttribute [TYPE] Attribute [PARAMETER] [CLASS] State   [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  boolean false  true  [TYPE]  int access  localOffset  [TYPE]  Signature sig  [TYPE]  ClassInfo classInfo 
