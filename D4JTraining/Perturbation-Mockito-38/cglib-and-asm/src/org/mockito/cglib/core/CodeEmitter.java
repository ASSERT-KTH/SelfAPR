[REPLACE]^private  final Signature BOOLEAN_VALUE = TypeUtils.parseSignature ( "boolean booleanValue (  ) " ) ;^27^28^^^^27^28^[REPLACE] private static final Signature BOOLEAN_VALUE = TypeUtils.parseSignature ( "boolean booleanValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature CHAR_VALUE ;^29^30^^^^29^30^[REPLACE] private static final Signature CHAR_VALUE = TypeUtils.parseSignature ( "char charValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature LONG_VALUE  = null ;^31^32^^^^31^32^[REPLACE] private static final Signature LONG_VALUE = TypeUtils.parseSignature ( "long longValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature DOUBLE_VALUE ;^33^34^^^^33^34^[REPLACE] private static final Signature DOUBLE_VALUE = TypeUtils.parseSignature ( "double doubleValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature FLOAT_VALUE ;^35^36^^^^35^36^[REPLACE] private static final Signature FLOAT_VALUE = TypeUtils.parseSignature ( "float floatValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature INT_VALUE  = null ;^37^38^^^^37^38^[REPLACE] private static final Signature INT_VALUE = TypeUtils.parseSignature ( "int intValue (  ) " ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static  Signature CSTRUCT_NULL = TypeUtils.parseConstructor ( "" ) ;^39^40^^^^39^40^[REPLACE] private static final Signature CSTRUCT_NULL = TypeUtils.parseConstructor ( "" ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final Signature CSTRUCT_STRING  = null ;^41^42^^^^41^42^[REPLACE] private static final Signature CSTRUCT_STRING = TypeUtils.parseConstructor ( "String" ) ;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int ADD  = null ;^44^^^^^^^[REPLACE] public static final int ADD = Constants.IADD;^ [CLASS] CodeEmitter State  
[REPLACE]^public  final  short  MUL = Constants.IMUL;^45^^^^^^^[REPLACE] public static final int MUL = Constants.IMUL;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int XOR  = null ;^46^^^^^^^[REPLACE] public static final int XOR = Constants.IXOR;^ [CLASS] CodeEmitter State  
[REPLACE]^public static  int USHR = Constants.IUSHR;^47^^^^^^^[REPLACE] public static final int USHR = Constants.IUSHR;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int SUB  = null ;^48^^^^^^^[REPLACE] public static final int SUB = Constants.ISUB;^ [CLASS] CodeEmitter State  
[REPLACE]^public static  int DIV = Constants.IDIV;^49^^^^^^^[REPLACE] public static final int DIV = Constants.IDIV;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int NEG  = null ;^50^^^^^^^[REPLACE] public static final int NEG = Constants.INEG;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int REM ;^51^^^^^^^[REPLACE] public static final int REM = Constants.IREM;^ [CLASS] CodeEmitter State  
[REPLACE]^public static  int AND = Constants.IAND;^52^^^^^^^[REPLACE] public static final int AND = Constants.IAND;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final  long  OR = Constants.IOR;^53^^^^^^^[REPLACE] public static final int OR = Constants.IOR;^ [CLASS] CodeEmitter State  
[REPLACE]^private static final int GT = Constants.IFGT;^55^^^^^^^[REPLACE] public static final int GT = Constants.IFGT;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int LT ;^56^^^^^^^[REPLACE] public static final int LT = Constants.IFLT;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int GE ;^57^^^^^^^[REPLACE] public static final int GE = Constants.IFGE;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int LE ;^58^^^^^^^[REPLACE] public static final int LE = Constants.IFLE;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int NE ;^59^^^^^^^[REPLACE] public static final int NE = Constants.IFNE;^ [CLASS] CodeEmitter State  
[REPLACE]^public static final int EQ ;^60^^^^^^^[REPLACE] public static final int EQ = Constants.IFEQ;^ [CLASS] CodeEmitter State  
[REPLACE]^long  localOffset;^72^^^^^^^[REPLACE] int localOffset;^ [CLASS] CodeEmitter State  
[REPLACE]^int intOp = -1 + 1;^169^^^^^168^209^[REPLACE] int intOp = -1;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^int jumpmode = localOffset;^170^^^^^168^209^[REPLACE] int jumpmode = mode;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^jumpmode = GT  ;^172^^^^^168^209^[REPLACE] case GE: jumpmode = LT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^173^^^^^168^209^[ADD] case LE: jumpmode = GT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^intOp = Constants.IF_ICMPNE  ;^198^^^^^168^209^[REPLACE] case EQ: intOp = Constants.IF_ICMPEQ; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^intOp = Constants.IF_ICMPLT  ;^199^^^^^168^209^[REPLACE] case NE: intOp = Constants.IF_ICMPNE; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^intOp = Constants.IF_ICMPNE  ;^201^^^^^168^209^[REPLACE] case LT: intOp = Constants.IF_ICMPLT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^intOp = Constants.IF_ICMPNE  ;^203^^^^^168^209^[REPLACE] case GT: intOp = Constants.IF_ICMPGT; break;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return;  ;^190^^^^^168^209^[REPLACE] return;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return;  ;^193^^^^^168^209^[REPLACE] return;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^return;  ;^206^^^^^168^209^[REPLACE] return;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^throw new IllegalStateException ( "no 'this' pointer within static method" )  ;^195^^^^^168^209^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if_jump ( mode, label ) ;^208^^^^^168^209^[REPLACE] if_jump ( jumpmode, label ) ;^[METHOD] if_cmp [TYPE] void [PARAMETER] Type type int mode Label label [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label label  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   &&  1 )  {^223^^^^^222^239^[REPLACE] if  ( type.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  type.getSize  (    )   == 2  )   {  ;^231^^^^^223^238^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  type.getSize  (    )   == 2  )   {  ;^224^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^227^^^^^224^229^[REPLACE] dup_x2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop2 (  )  ;^228^^^^^224^229^[REPLACE] pop (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^225^^^^^222^239^[REPLACE] swap (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( prev.getSize (  )   &&  1 * 0 )  {^224^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (   1 )  {^231^^^^^222^239^[REPLACE] if  ( prev.getSize (  )  == 1 )  {^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^dup2_x1 (  ) ;pop2 (  ) ;dup2_x2 (  ) ;^231^232^233^234^235^222^239^[ADD] if  ( prev.getSize (  )  == 1 )  { dup2_x1 (  ) ; pop2 (  ) ; } else { dup2_x2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^235^^^^^231^237^[REPLACE] dup2_x2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[ADD]^^235^236^^^^231^237^[ADD] dup2_x2 (  ) ; pop2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop (  )  ;^236^^^^^231^237^[REPLACE] pop2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup_x1 (  )  ;^232^^^^^222^239^[REPLACE] dup2_x1 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop (  )  ;^233^^^^^222^239^[REPLACE] pop2 (  ) ;^[METHOD] swap [TYPE] void [PARAMETER] Type prev Type type [CLASS] CodeEmitter State   [TYPE]  Type prev  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ==  to )  {^253^^^^^252^297^[REPLACE] if  ( from != to )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^253^254^255^256^^252^297^[ADD] if  ( from != to )  { if  ( from == Type.DOUBLE_TYPE )  { if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.DOUBLE_TYPE )  {^254^^^^^252^297^[REPLACE] if  ( from == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.FLOAT_TYPE )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^282^283^284^285^^272^295^[ADD] if  ( to == Type.BYTE_TYPE )  { mv.visitInsn ( Constants.I2B ) ; } else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^272^295^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.DOUBLE_TYPE  )   {  ;^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( ! ( type.equals ( Constants.TYPE_OBJECT )  )  )  {     emit_type ( Constants.CHECKCAST, type ) ; }^292^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2S ) ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^291^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^292^293^294^^^272^295^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2F ) ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^290^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^293^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2L ) ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2D ) ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^287^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ) {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^272^295^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}^292^293^294^^^272^295^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2C ) ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^285^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ) {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^272^295^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^287^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^272^295^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^293^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2B ) ;^283^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^283^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^284^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^289^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ) {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^272^295^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^291^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  ||  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.L2D ) ;mv.visitInsn ( Constants.L2F ) ;^273^274^275^276^^252^297^[ADD] if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.L2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^cast_numeric ( Type.INT_TYPE, from ) ;^279^^^^^275^280^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^274^^^^^252^297^[ADD] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.L2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^275^276^277^278^279^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ; } else { mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^278^^^^^275^280^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.L2F ) ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.L2D ) ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.L2I ) ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^278^^^^^275^280^[ADD] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^279^^^^^275^280^[ADD] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.I2B ) ;mv.visitInsn ( Constants.I2C ) ;^282^283^284^285^^252^297^[ADD] if  ( to == Type.BYTE_TYPE )  { mv.visitInsn ( Constants.I2B ) ; } else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^290^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2S ) ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2L ) ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}^292^293^294^^^252^297^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^287^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2S ) ;^292^293^294^^^252^297^[ADD] else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^291^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( ! ( type.equals ( Constants.TYPE_OBJECT )  )  )  {     emit_type ( Constants.CHECKCAST, type ) ; }^292^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  || from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;mv.visitInsn ( Constants.I2S ) ;^290^291^292^293^294^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ; } else if  ( to == Type.SHORT_TYPE )  { mv.visitInsn ( Constants.I2S ) ; }^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.DOUBLE_TYPE  )   {  ;^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2D ) ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2F ) ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^289^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ) {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2B ) ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^252^297^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^252^297^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^289^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (  from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^293^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ) {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^285^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^293^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  ||  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^269^270^^^^266^271^[ADD] mv.visitInsn ( Constants.F2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^cast_numeric ( Type.INT_TYPE, from ) ;^270^^^^^266^271^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^270^^^^^266^271^[ADD] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.F2L ) ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^267^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.F2D ) ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^265^^^^^252^297^[ADD] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.F2I ) ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^269^^^^^266^271^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^267^^^^^252^297^[ADD] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (  from )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^289^^^^^272^295^[ADD] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (  from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  || from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^283^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^272^295^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^288^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ||  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^279^^^^^275^280^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  ) {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^273^274^275^276^^252^297^[ADD] if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.L2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^278^279^^^^275^280^[ADD] mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^sig.getArgumentTypes (  )  ;^279^^^^^275^280^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2C ) ;mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^252^297^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ) {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^286^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ) {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  != from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^291^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  !=  Type.FLOAT_TYPE )  {^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.D2F ) ;mv.visitInsn ( Constants.D2L ) ;^255^256^257^258^^252^297^[ADD] if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.D2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^260^^^^^257^262^[REPLACE] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^cast_numeric ( Type.INT_TYPE, from ) ;^261^^^^^257^262^[REPLACE] cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.D2F ) ;^256^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.D2I ) ;^260^^^^^257^262^[REPLACE] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^260^^^^^257^262^[ADD] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.D2L ) ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  type == Type.VOID_TYPE  )   {  ;^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^255^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.D2L ) ;mv.visitInsn ( Constants.D2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^257^258^259^260^261^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ; } else { mv.visitInsn ( Constants.D2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^sig.getArgumentTypes (  )  ;^261^^^^^257^262^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^256^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^256^^^^^252^297^[ADD] mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.L2D ) ;mv.visitInsn ( Constants.L2F ) ;^272^273^274^275^276^252^297^[ADD] else if  ( from == Type.LONG_TYPE )  { if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.L2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  != from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^285^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (   Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  != from )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.L2F ) ;mv.visitInsn ( Constants.L2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^275^276^277^278^279^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.L2F ) ; } else { mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (from  !=  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^283^^^^^252^297^[ADD] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^284^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  != from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ) {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^269^^^^^266^271^[ADD] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^265^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.F2L ) ;mv.visitInsn ( Constants.F2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^266^267^268^269^270^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.F2L ) ; } else { mv.visitInsn ( Constants.F2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (to  !=  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  && from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^272^295^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ) {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  !=  Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  ) {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^276^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^274^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (   Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (  from )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  !=  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ) {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitIntInsn ( Constants.I2C ) ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^288^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (to  !=  Type.DOUBLE_TYPE )  {^254^^^^^252^297^[REPLACE] if  ( from == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.FLOAT_TYPE )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (to  !=  Type.LONG_TYPE )  {^272^^^^^252^297^[REPLACE] } else if  ( from == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.BYTE_TYPE )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2C ) ;mv.visitInsn ( Constants.I2D ) ;^284^285^286^287^^272^295^[ADD] else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ; } else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (  from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.DOUBLE_TYPE )  {^286^^^^^272^295^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^278^^^^^275^280^[REPLACE] mv.visitInsn ( Constants.L2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ) {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^282^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  ) {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (  from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^285^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^285^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ) {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  ||  Type.LONG_TYPE )  {^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^sig.getArgumentTypes (  )  ;^270^^^^^266^271^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^267^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if   (  to == Type.SHORT_TYPE  )   {  ;^266^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^265^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.F2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  else {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^291^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  || from )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  != from )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( i <  ( -1 )  )  {     mv.visitLdcInsn ( new Integer ( i )  ) ; }else     if  ( i <= 5 )  {         mv.visitInsn ( ICONST ( i )  ) ;     }else         if  ( i <=  ( MAX_VALUE )  )  {             mv.visitIntInsn ( Constants.BIPUSH, i ) ;         }else             if  ( i <=  ( MAX_VALUE )  )  {                 mv.visitIntInsn ( Constants.SIPUSH, i ) ;             }else {                 mv.visitLdcInsn ( new Integer ( i )  ) ;             }^286^^^^^272^295^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^293^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  &&  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^274^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.L2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^276^^^^^252^297^[ADD] mv.visitInsn ( Constants.L2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  !=  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^283^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2B ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2L ) ;^288^289^290^291^^252^297^[ADD] else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ; } else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^291^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  ) {^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.D2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^257^258^259^260^261^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.D2L ) ; } else { mv.visitInsn ( Constants.D2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^260^^^^^257^262^[REPLACE] mv.visitInsn ( Constants.D2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  ||  Type.FLOAT_TYPE )  {^255^^^^^252^297^[REPLACE] if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( false )  ;^256^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.LONG_TYPE )  {^257^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^cast_numeric ( Type.INT_TYPE, to ) ;^260^261^^^^257^262^[ADD] mv.visitInsn ( Constants.D2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^258^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.D2L ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  || to )  {^263^^^^^252^297^[REPLACE] } else if  ( from == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (   Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  !=  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  ) {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (   Type.FLOAT_TYPE )  {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^289^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  && from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  !=  Type.DOUBLE_TYPE )  {^273^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  != from )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  &&  Type.BYTE_TYPE )  {^282^^^^^252^297^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^^282^283^284^285^^252^297^[ADD] if  ( to == Type.BYTE_TYPE )  { mv.visitInsn ( Constants.I2B ) ; } else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ) {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  !=  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^mv.visitInsn ( Constants.AASTORE )  ;^287^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  && from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  ||  Type.LONG_TYPE )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 1 )  ;^293^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2S ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  !=  Type.CHAR_TYPE )  {^284^^^^^252^297^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( to  && from )  {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.I2F ) ;^286^287^288^289^^252^297^[ADD] else if  ( to == Type.DOUBLE_TYPE )  { mv.visitInsn ( Constants.I2D ) ; } else if  ( to == Type.FLOAT_TYPE )  { mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.FLOAT_TYPE )  {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^290^^^^^252^297^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( 0 )  ;^289^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2F ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  (  from )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( null )  ;^269^^^^^266^271^[REPLACE] mv.visitInsn ( Constants.F2I ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^}   mv.visitInsn ( Constants.F2I ) ;cast_numeric ( Type.INT_TYPE, to ) ;^266^267^268^269^270^252^297^[ADD] else if  ( to == Type.LONG_TYPE )  { mv.visitInsn ( Constants.F2L ) ; } else { mv.visitInsn ( Constants.F2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( to  !=  Type.DOUBLE_TYPE )  {^264^^^^^252^297^[REPLACE] if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  ( to ==  ( Type.FLOAT_TYPE )  )  {     mv.visitInsn ( Constants.L2F ) ; }else {     mv.visitInsn ( Constants.L2I ) ;     cast_numeric ( Type.INT_TYPE, to ) ; }^266^^^^^252^297^[REMOVE] ^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( from  && from )  {^282^^^^^272^295^[REPLACE] if  ( to == Type.BYTE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^mv.visitInsn ( Constants.I2B ) ;mv.visitInsn ( Constants.I2C ) ;^282^283^284^285^^272^295^[ADD] if  ( to == Type.BYTE_TYPE )  { mv.visitInsn ( Constants.I2B ) ; } else if  ( to == Type.CHAR_TYPE )  { mv.visitInsn ( Constants.I2C ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  &&  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  || from )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  (from  &&  Type.CHAR_TYPE )  {^284^^^^^272^295^[REPLACE] } else if  ( to == Type.CHAR_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( true )  ;^287^^^^^272^295^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^288^^^^^272^295^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.LONG_TYPE )  {^290^^^^^272^295^[REPLACE] } else if  ( to == Type.LONG_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^}  if  ( from  != from )  {^292^^^^^272^295^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ||  Type.FLOAT_TYPE )  {^275^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[ADD]^cast_numeric ( Type.INT_TYPE, to ) ;^278^279^^^^275^280^[ADD] mv.visitInsn ( Constants.L2I ) ; cast_numeric ( Type.INT_TYPE, to ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( to  ) {^288^^^^^252^297^[REPLACE] } else if  ( to == Type.FLOAT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  (from  &&  Type.SHORT_TYPE )  {^292^^^^^252^297^[REPLACE] } else if  ( to == Type.SHORT_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^} else if  ( from  &&  Type.DOUBLE_TYPE )  {^286^^^^^252^297^[REPLACE] } else if  ( to == Type.DOUBLE_TYPE )  {^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv .visitLdcInsn ( this )  ;^287^^^^^252^297^[REPLACE] mv.visitInsn ( Constants.I2D ) ;^[METHOD] cast_numeric [TYPE] void [PARAMETER] Type from Type to [CLASS] CodeEmitter State   [TYPE]  Type from  to  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  intOp  jumpmode  localOffset  mode  op  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  value == 0d || value == 1d  )   {  ;^607^608^^^^606^657^[REPLACE] if  ( !isSorted ( keys )  ) throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^608^^^^^606^657^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^throw new IllegalStateException ( "no 'this' pointer within static method" )  ;^608^^^^^606^657^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label nonNull = make_label (  )  ;^609^^^^^606^657^[REPLACE] Label def = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label nonNull = make_label (  )  ;^610^^^^^606^657^[REPLACE] Label end = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys.length *  0.5  > 0 )  {^613^^^^^606^657^[REPLACE] if  ( keys.length > 0 )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  value == 0d || value == 1d  )   {  ;^619^^^^^606^657^[REPLACE] if  ( useTable )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REMOVE]^if  (  ( keys.length )  > 0 )  {     int len = keys.length;     int min = keys[0];     int max = keys[ ( len - 1 ) ];     int range =  ( max - min )  + 1;     if  ( useTable )  {         Label[] labels = new Label[range];         fill ( labels, def ) ;         for  ( int i = 0; i < len; i++ )  {             labels[ (  ( keys[i] )  - min ) ] = make_label (  ) ;         }         mv.visitTableSwitchInsn ( min, max, def, labels ) ;         for  ( int i = 0; i < range; i++ )  {             Label label = labels[i];             if  ( label != def )  {                 mark ( label ) ;                 callback.processCase (  ( i + min ) , end ) ;             }         }     }else {         Label[] labels = new Label[len];         for  ( int i = 0; i < len; i++ )  {             labels[i] = make_label (  ) ;         }         mv.visitLookupSwitchInsn ( def, keys, labels ) ;         for  ( int i = 0; i < len; i++ )  {             mark ( labels[i] ) ;             callback.processCase ( keys[i], end ) ;         }     } }^619^^^^^606^657^[REMOVE] ^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^636^^^^^619^643^[ADD] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label[] labels = new Label[range]  ;^634^^^^^619^643^[REPLACE] Label[] labels = new Label[len];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^639^640^641^642^^619^643^[ADD] for  ( int i = 0; i < len; i++ )  { mark ( labels[i] ) ; callback.processCase ( keys[i], end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( label  ==  def )  {^628^^^^^606^657^[REPLACE] if  ( label != def )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^mark ( label ) ;callback.processCase ( i + min, end ) ;^628^629^630^631^^606^657^[ADD] if  ( label != def )  { mark ( label ) ; callback.processCase ( i + min, end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^make_label (  )  ;^629^^^^^606^657^[REPLACE] mark ( label ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^629^^^^^606^657^[ADD] mark ( label ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase ( keys[i], end )  ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i]  min] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^620^^^^^606^657^[ADD] Label[] labels = new Label[range];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int i = 1  ;^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label nonNull = make_label (  )  ;^627^^^^^606^657^[REPLACE] Label label = labels[i];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^mark ( def ) ;^629^^^^^606^657^[REPLACE] mark ( label ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processDefault ( i  min, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[i] ;^636^^^^^606^657^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int amount = 0  ;^614^^^^^606^657^[REPLACE] int len = keys.length;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[2];^615^^^^^606^657^[REPLACE] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[range  1 / 1];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int range = max - min  1;^617^^^^^606^657^[REPLACE] int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label[] labels = new Label[len]  ;^620^^^^^606^657^[REPLACE] Label[] labels = new Label[range];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0L; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int i = 1  ;^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^634^^^^^606^657^[ADD] Label[] labels = new Label[len];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 4; i < len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int i = 1  ;^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[i] ;^636^^^^^619^643^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^634^^^^^619^643^[ADD] Label[] labels = new Label[len];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int i = 1  ;^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback.processCase ( i  min, end ) ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[keys[i] pos] = make_label (  ) ;^623^^^^^606^657^[REPLACE] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 2; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^int len = keys.length;int min = keys[0];int max = keys[len - 1];^612^613^614^615^616^606^657^[ADD] try { if  ( keys.length > 0 )  { int len = keys.length; int min = keys[0]; int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( keys.length + 4 > 0 )  {^613^^^^^606^657^[REPLACE] if  ( keys.length > 0 )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[i]  =  labels[i] ;^636^^^^^619^643^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0L; i < len; i++ )  {^635^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int i = 1  ;^639^^^^^619^643^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REMOVE]^make_label (  )  ;^629^^^^^606^657^[REMOVE] ^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^623^^^^^606^657^[ADD] labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^Arrays.fill ( labels, def ) ;^620^621^^^^606^657^[ADD] Label[] labels = new Label[range]; Arrays.fill ( labels, def ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 << 0; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 1; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( label  ==  label )  {^628^^^^^606^657^[REPLACE] if  ( label != def )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[i]  =  labels[i] ;^636^^^^^606^657^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[range  1];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int range = max - range range;^617^^^^^606^657^[REPLACE] int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 / 0; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^626^627^628^629^630^606^657^[ADD] for  ( int i = 0; i < range; i++ )  { Label label = labels[i]; if  ( label != def )  { mark ( label ) ; callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label[] labels = new Label[range]  ;^634^^^^^606^657^[REPLACE] Label[] labels = new Label[len];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 / 2; i < len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 4; i < len; i++ )  {^639^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^Label[] labels = new Label[range];Arrays.fill ( labels, def ) ;^619^620^621^622^623^606^657^[ADD] if  ( useTable )  { Label[] labels = new Label[range]; Arrays.fill ( labels, def ) ; for  ( int i = 0; i < len; i++ )  { labels[keys[i] - min] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^628^629^630^631^^606^657^[ADD] if  ( label != def )  { mark ( label ) ; callback.processCase ( i + min, end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 / 4; i < range; i++ )  {^626^^^^^606^657^[REPLACE] for  ( int i = 0; i < range; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^callback .processDefault (  )  ;^630^^^^^606^657^[REPLACE] callback.processCase ( i + min, end ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[0L];^615^^^^^606^657^[REPLACE] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^617^^^^^606^657^[ADD] int range = max - min + 1;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 3; i < len; i++ )  {^622^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 2; i < len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^639^640^641^642^^606^657^[ADD] for  ( int i = 0; i < len; i++ )  { mark ( labels[i] ) ; callback.processCase ( keys[i], end ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^labels[i]  = null ;^636^^^^^606^657^[REPLACE] labels[i] = make_label (  ) ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^int min = keys[0];^614^615^^^^606^657^[ADD] int len = keys.length; int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int min = keys[0 >> 3];^615^^^^^606^657^[REPLACE] int min = keys[0];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^int max = keys[len  1];^616^^^^^606^657^[REPLACE] int max = keys[len - 1];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^622^623^624^^^606^657^[ADD] for  ( int i = 0; i < len; i++ )  { labels[keys[i] - min] = make_label (  ) ; }^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^627^^^^^606^657^[ADD] Label label = labels[i];^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^for  ( int i = 0 << 2; i < len; i++ )  {^635^^^^^606^657^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^651^^^^^606^657^[REPLACE] throw e;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^653^^^^^606^657^[REPLACE] throw e;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^return ;^655^^^^^606^657^[REPLACE] throw new CodeGenerationException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[ADD]^^654^655^^^^606^657^[ADD] catch  ( Exception e )  { throw new CodeGenerationException  (" ")  ;^[METHOD] process_switch [TYPE] void [PARAMETER] int[] keys ProcessSwitchCallback callback boolean useTable [CLASS] CodeEmitter State   [TYPE]  Label[] labels  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label def  end  label  [TYPE]  Error e  [TYPE]  int[] keys  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  Exception e  [TYPE]  boolean false  true  useTable  [TYPE]  RuntimeException e  [TYPE]  ProcessSwitchCallback callback  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( TypeUtils.isPrimitive ( boxed )  )  {^705^^^^^704^724^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  to == Type.FLOAT_TYPE  )   {  ;^706^^^^^704^724^[REPLACE] if  ( type == Type.VOID_TYPE )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( boxed.getSize (  )   !=  2 )  {^711^^^^^706^722^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^711^712^713^714^715^706^722^[ADD] if  ( type.getSize (  )  == 2 )  {  dup_x2 (  ) ; dup_x2 (  ) ; pop (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^718^^^^^711^720^[REPLACE] dup_x1 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^719^^^^^711^720^[REPLACE] swap (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^713^^^^^706^722^[REPLACE] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^dup_x2 (  ) ;^713^714^^^^706^722^[ADD] dup_x2 (  ) ; dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^714^^^^^706^722^[REPLACE] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop2 (  )  ;^715^^^^^706^722^[REPLACE] pop (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type boxed = TypeUtils.isPrimitive ( boxed ) ;^709^^^^^706^722^[REPLACE] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^707^^^^^704^724^[REPLACE] aconst_null (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   ||  2 - 0 )  {^711^^^^^704^724^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^719^^^^^711^720^[ADD] swap (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^713^^^^^704^724^[REPLACE] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^dup2_x1 (  )  ;^714^^^^^704^724^[REPLACE] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^pop2 (  )  ;^715^^^^^704^724^[REPLACE] pop (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^709^^^^^704^724^[ADD] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type  != boxed )  {^706^^^^^704^724^[REPLACE] if  ( type == Type.VOID_TYPE )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^aconst_null (  ) ;Type boxed = TypeUtils.getBoxedType ( type ) ;new_instance ( boxed ) ;^706^707^708^709^710^704^724^[ADD] if  ( type == Type.VOID_TYPE )  { aconst_null (  ) ; } else { Type boxed = TypeUtils.getBoxedType ( type ) ; new_instance ( boxed ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   ||  2 )  {^711^^^^^706^722^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REMOVE]^dup2_x1 (  )  ;^713^^^^^706^722^[REMOVE] ^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type boxed = TypeUtils.getBoxedType ( boxed ) ;^709^^^^^706^722^[REPLACE] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type.getSize (  )   &&  5 )  {^711^^^^^704^724^[REPLACE] if  ( type.getSize (  )  == 2 )  {^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^714^^^^^704^724^[ADD] dup_x2 (  ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Type boxed = TypeUtils.getBoxedType ( boxed ) ;^709^^^^^704^724^[REPLACE] Type boxed = TypeUtils.getBoxedType ( type ) ;^[METHOD] box [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type boxed  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^int amount = 0  ;^734^^^^^733^768^[REPLACE] Type t = Constants.TYPE_NUMBER;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Signature sig = method.getSignature (  )  ;^735^^^^^733^768^[REPLACE] Signature sig = null;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^740^^^^^733^768^[ADD] t = Constants.TYPE_CHARACTER;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE  ;^741^^^^^733^768^[REPLACE] sig = CHAR_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^t  = null ;^744^^^^^733^768^[REPLACE] t = Constants.TYPE_BOOLEAN;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE  ;^745^^^^^733^768^[REPLACE] sig = BOOLEAN_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^748^^^^^733^768^[ADD] sig = DOUBLE_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = DOUBLE_VALUE  ;^751^^^^^733^768^[REPLACE] sig = FLOAT_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^sig = FLOAT_VALUE  ;^754^^^^^733^768^[REPLACE] sig = LONG_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^759^^^^^733^768^[ADD] sig = INT_VALUE;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^return;  ;^738^^^^^733^768^[REPLACE] return;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( sig !=LONG_VALUE )  {^762^^^^^733^768^[REPLACE] if  ( sig == null )  {^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^checkcast ( type ) ;^765^^^^^762^767^[REPLACE] checkcast ( t ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^765^^^^^762^767^[ADD] checkcast ( t ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^invoke_virtual ( virtualType, sig )  ;^766^^^^^762^767^[REPLACE] invoke_virtual ( t, sig ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^checkcast ( t ) ;^763^^^^^733^768^[REPLACE] checkcast ( type ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^763^^^^^733^768^[ADD] checkcast ( type ) ;^[METHOD] unbox [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type t  type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  TypeUtils.isArray  (  type  )    )   {  ;^796^^^^^795^815^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^796^797^798^799^800^795^815^[ADD] if  ( TypeUtils.isPrimitive ( type )  )  { switch  ( type.getSort (  )  )  { case Type.DOUBLE: push ( 0d ) ; break;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^813^^^^^796^814^[REPLACE] aconst_null (  ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^switch  ( type .getSize (  )   )  {^797^^^^^795^815^[REPLACE] switch  ( type.getSort (  )  )  {^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 1 )  ;^799^^^^^795^815^[REPLACE] push ( 0d ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0 ) ;^802^^^^^795^815^[REPLACE] push ( 0L ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^break;^802^803^^^^795^815^[ADD] push ( 0L ) ; break;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0 )  ;^805^^^^^795^815^[REPLACE] push ( 0f ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^mv.visitInsn ( Constants.AASTORE )  ;^808^^^^^795^815^[REPLACE] aconst_null (  ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^push ( 0L ) ;^810^^^^^795^815^[REPLACE] push ( 0 ) ;^[METHOD] zero_or_null [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if   (  TypeUtils.isArray  (  type  )    )   {  ;^822^^^^^821^838^[REPLACE] if  ( TypeUtils.isPrimitive ( type )  )  {^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^822^823^824^825^826^821^838^[ADD] if  ( TypeUtils.isPrimitive ( type )  )  { if  ( type != Type.VOID_TYPE )  { Label nonNull = make_label (  ) ; Label end = make_label (  ) ; dup (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^checkcast ( t )  ;^836^^^^^822^837^[REPLACE] checkcast ( type ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^836^^^^^822^837^[ADD] checkcast ( type ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^if  ( type  ==  Type.VOID_TYPE )  {^823^^^^^821^838^[REPLACE] if  ( type != Type.VOID_TYPE )  {^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^823^824^825^826^827^821^838^[ADD] if  ( type != Type.VOID_TYPE )  { Label nonNull = make_label (  ) ; Label end = make_label (  ) ; dup (  ) ; ifnonnull ( nonNull ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label label = labels[i]  ;^824^^^^^821^838^[REPLACE] Label nonNull = make_label (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[REPLACE]^Label nonNull = make_label (  )  ;^825^^^^^821^838^[REPLACE] Label end = make_label (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
[ADD]^^825^^^^^821^838^[ADD] Label end = make_label (  ) ;^[METHOD] unbox_or_zero [TYPE] void [PARAMETER] Type type [CLASS] CodeEmitter State   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  State state  [TYPE]  Signature BOOLEAN_VALUE  CHAR_VALUE  CSTRUCT_NULL  CSTRUCT_STRING  DOUBLE_VALUE  FLOAT_VALUE  INT_VALUE  LONG_VALUE  sig  [TYPE]  ClassEmitter ce  [TYPE]  Type[] argumentTypes  exceptionTypes  [TYPE]  Label end  nonNull  [TYPE]  int ADD  AND  DIV  EQ  GE  GT  LE  LT  MUL  NE  NEG  OR  REM  SUB  USHR  XOR  access  amount  count  fromArg  i  index  intOp  jumpmode  len  localOffset  max  min  mode  numArgs  op  opcode  pos  range  [TYPE]  ClassInfo classInfo 
