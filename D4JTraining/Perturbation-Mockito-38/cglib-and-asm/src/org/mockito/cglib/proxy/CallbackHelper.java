[REPLACE]^private Map methodMap ;^29^^^^^^^[REPLACE] private Map methodMap = new HashMap (  ) ;^ [CLASS] CallbackHelper  
[REPLACE]^private List callbacks ;^30^^^^^^^[REPLACE] private List callbacks = new ArrayList (  ) ;^ [CLASS] CallbackHelper  
[REPLACE]^Method method =  ( Method ) methods.get ( i ) ;^34^^^^^32^55^[REPLACE] List methods = new ArrayList (  ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^Enhancer.getMethods ( superclass, interfaces, callbacks ) ;^35^^^^^32^55^[REPLACE] Enhancer.getMethods ( superclass, interfaces, methods ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^List methods = new ArrayList (  ) ;^36^^^^^32^55^[REPLACE] Map indexes = new HashMap (  ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( callback != this ) throw new IllegalStateException  (" ")  ;^40^41^^^^32^55^[REPLACE] if  ( callback == null ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^return ;^41^^^^^32^55^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^41^^^^^32^55^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( ! ! ( false ||  ( callback instanceof isCallback )  )  ) throw new IllegalStateException  (" ")  ;^43^44^^^^32^55^[REPLACE] if  ( ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^return ;^44^^^^^32^55^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( ! i > 3 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^[REPLACE] if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^45^46^47^48^49^32^55^[ADD] if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ; Integer index =  ( Integer ) indexes.get ( callback ) ; if  ( index == null )  { index = new Integer ( callbacks.size (  )  ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^return ;^46^^^^^32^55^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( index != null )  {^48^^^^^32^55^[REPLACE] if  ( index == null )  {^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^index  =  index ;^49^^^^^32^55^[REPLACE] index = new Integer ( callbacks.size (  )  ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^for  ( int i = 0 , size = methods.size (  )  + 2; i < size; i++ )  {^37^^^^^32^55^[REPLACE] for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^37^38^39^40^41^32^55^[ADD] for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  { Method method =  ( Method ) methods.get ( i ) ; Object callback = getCallback ( method ) ; if  ( callback == null ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( callback != null ) throw new IllegalStateException  (" ")  ;^40^41^^^^32^55^[REPLACE] if  ( callback == null ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( ! ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^43^44^^^^32^55^[REPLACE] if  ( ! ( isCallback ||  ( callback instanceof Class )  )  ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( ! i > 2 &&  (  ( callbacks.add ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^45^46^^^^32^55^[REPLACE] if  ( i > 0 &&  (  ( callbacks.get ( i - 1 )  instanceof Callback )  ^ isCallback )  ) throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^46^^^^^32^55^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( index != false )  {^48^^^^^32^55^[REPLACE] if  ( index == null )  {^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^Method method =  ( Method ) callbacks.size ( i ) ;^38^^^^^32^55^[REPLACE] Method method =  ( Method ) methods.get ( i ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^38^^^^^32^55^[ADD] Method method =  ( Method ) methods.get ( i ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^boolean isCallback = callback instanceof Callback;^39^^^^^32^55^[REPLACE] Object callback = getCallback ( method ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^39^^^^^32^55^[ADD] Object callback = getCallback ( method ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^Object callback = getCallback ( method ) ;^42^^^^^32^55^[REPLACE] boolean isCallback = callback instanceof Callback;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^42^^^^^32^55^[ADD] boolean isCallback = callback instanceof Callback;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^Integer index =  ( Integer ) indexes.hashCode ( callback ) ;^47^^^^^32^55^[REPLACE] Integer index =  ( Integer ) indexes.get ( callback ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^41^42^^^^32^55^[ADD] throw new IllegalStateException  (" ")  ; boolean isCallback = callback instanceof Callback;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^for  ( int i = 0 , size = methods.size (  ) ; i < size; i++ )  {^37^^^^^32^55^[REPLACE] for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  { Method method =  ( Method ) methods.get ( i ) ;^37^^^^^32^55^[REPLACE] for  ( int i = 0, size = methods.size (  ) ; i < size; i++ )  {^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^Method method =  ( Method ) methods .get ( size )  ;^38^^^^^32^55^[REPLACE] Method method =  ( Method ) methods.get ( i ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[ADD]^^47^^^^^32^55^[ADD] Integer index =  ( Integer ) indexes.get ( callback ) ;^[METHOD] <init> [TYPE] Class[]) [PARAMETER] Class superclass Class[] interfaces [CLASS] CallbackHelper   [TYPE]  Integer index  [TYPE]  Class[] interfaces  [TYPE]  boolean false  isCallback  true  [TYPE]  List callbacks  methods  [TYPE]  Class superclass  [TYPE]  Object callback  [TYPE]  Method method  [TYPE]  Map indexes  methodMap  [TYPE]  int i  size 
[REPLACE]^if  ( callbacks.size (  )  *  0 .5  == 0  ) return new Callback[0 ];^61^62^^^^59^68^[REPLACE] if  ( callbacks.size (  )  == 0 ) return new Callback[0];^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[ADD]^return new Callback[0];return  ( Callback[] ) callbacks.toArray ( new Callback[callbacks.size (  ) ] ) ;^61^62^63^64^^59^68^[ADD] if  ( callbacks.size (  )  == 0 ) return new Callback[0]; if  ( callbacks.get ( 0 )  instanceof Callback )  { return  ( Callback[] ) callbacks.toArray ( new Callback[callbacks.size (  ) ] ) ;^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return new Callback[0 >>> 2];^62^^^^^59^68^[REPLACE] return new Callback[0];^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return new Callback[0L];^62^^^^^59^68^[REPLACE] return new Callback[0];^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! callbacks.get ( 0 )  instanceof Callback )  {^63^^^^^59^68^[REPLACE] if  ( callbacks.get ( 0 )  instanceof Callback )  {^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return ;^66^^^^^59^68^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return  ( Callback[] ) callbacks.size ( new Callback[callbacks.size (  ) ] ) ;^64^^^^^59^68^[REPLACE] return  ( Callback[] ) callbacks.toArray ( new Callback[callbacks.size (  ) ] ) ;^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return  ( Class[] ) callbacks.toArray ( new Class[callbacks.size (  ) ] ) ;^64^^^^^59^68^[REPLACE] return  ( Callback[] ) callbacks.toArray ( new Callback[callbacks.size (  ) ] ) ;^[METHOD] getCallbacks [TYPE] Callback[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^if  ( callbacks.add (  )  *  2 == 0  ) return new Class[0 ];^72^73^^^^70^79^[REPLACE] if  ( callbacks.size (  )  == 0 ) return new Class[0];^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[ADD]^return new Class[0];return ReflectUtils.getClasses ( getCallbacks (  )  ) ;^72^73^74^75^^70^79^[ADD] if  ( callbacks.size (  )  == 0 ) return new Class[0]; if  ( callbacks.get ( 0 )  instanceof Callback )  { return ReflectUtils.getClasses ( getCallbacks (  )  ) ;^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return new Class[4];^73^^^^^70^79^[REPLACE] return new Class[0];^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return new Class[3];^73^^^^^70^79^[REPLACE] return new Class[0];^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! callbacks.add ( 0 )  instanceof Callback )  {^74^^^^^70^79^[REPLACE] if  ( callbacks.get ( 0 )  instanceof Callback )  {^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[ADD]^return ReflectUtils.getClasses ( getCallbacks (  )  ) ;return  ( Class[] ) callbacks.toArray ( new Class[callbacks.size (  ) ] ) ;^74^75^76^77^78^70^79^[ADD] if  ( callbacks.get ( 0 )  instanceof Callback )  { return ReflectUtils.getClasses ( getCallbacks (  )  ) ; } else { return  ( Class[] ) callbacks.toArray ( new Class[callbacks.size (  ) ] ) ; }^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return  ( Callback[] ) callbacks.toArray ( new Callback[callbacks.size (  ) ] ) ;^77^^^^^70^79^[REPLACE] return  ( Class[] ) callbacks.toArray ( new Class[callbacks.size (  ) ] ) ;^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return   getCallbacks (  )  ;^75^^^^^70^79^[REPLACE] return ReflectUtils.getClasses ( getCallbacks (  )  ) ;^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return  ( Class[] ) callbacks .add ( null )  ;^77^^^^^70^79^[REPLACE] return  ( Class[] ) callbacks.toArray ( new Class[callbacks.size (  ) ] ) ;^[METHOD] getCallbackTypes [TYPE] Class[] [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^return ReflectUtils.getClasses ( getCallbacks (  )  ) ;^83^^^^^81^84^[REPLACE] return  (  ( Integer ) methodMap.get ( method )  ) .intValue (  ) ;^[METHOD] accept [TYPE] int [PARAMETER] Method method [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[REPLACE]^return methodMap .hashCode (  )  ;^88^^^^^86^89^[REPLACE] return methodMap.hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] CallbackHelper   [TYPE]  Map indexes  methodMap  [TYPE]  List callbacks  methods  [TYPE]  boolean false  true 
[REPLACE]^if  ( o != true ) return false;^93^94^^^^91^98^[REPLACE] if  ( o == null ) return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[ADD]^^93^94^95^96^97^91^98^[ADD] if  ( o == null ) return false; if  ( ! ( o instanceof CallbackHelper )  ) return false; return methodMap.equals (  (  ( CallbackHelper ) o ) .methodMap ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[REPLACE]^return true;^94^^^^^91^98^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[REPLACE]^if  ( ! ! ( o instanceof CallbackHelper )  ) return false;^95^96^^^^91^98^[REPLACE] if  ( ! ( o instanceof CallbackHelper )  ) return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[ADD]^return false;return methodMap.equals (  (  ( CallbackHelper ) o ) .methodMap ) ;^95^96^97^98^^91^98^[ADD] if  ( ! ( o instanceof CallbackHelper )  ) return false; return methodMap.equals (  (  ( CallbackHelper ) o ) .methodMap ) ; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[REPLACE]^return true;^96^^^^^91^98^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
[REPLACE]^return methodMap.hashCode (  (  ( CallbackHelper ) o ) .methodMap ) ;^97^^^^^91^98^[REPLACE] return methodMap.equals (  (  ( CallbackHelper ) o ) .methodMap ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object o [CLASS] CallbackHelper   [TYPE]  List callbacks  methods  [TYPE]  Object o  [TYPE]  boolean false  true  [TYPE]  Map indexes  methodMap 
