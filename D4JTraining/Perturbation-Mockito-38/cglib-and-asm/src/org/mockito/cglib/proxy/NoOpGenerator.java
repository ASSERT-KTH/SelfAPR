[REPLACE]^private static final NoOpGenerator INSTANCE = new NoOpGenerator (  ) ;^26^^^^^^^[REPLACE] public static final NoOpGenerator INSTANCE = new NoOpGenerator (  ) ;^ [CLASS] NoOpGenerator  
[REPLACE]^if  ( TypeUtils.isProtected ( context.getOriginalModifiers ( method )  )  || TypeUtils.isPublic ( method.getModifiers (  )  )  )  {^31^32^^^^28^41^[REPLACE] if  ( TypeUtils.isProtected ( context.getOriginalModifiers ( method )  )  && TypeUtils.isPublic ( method.getModifiers (  )  )  )  {^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[REPLACE]^for  ( Iterator it = methods.iterator (  ) ; it.hasNext (  ) ; )  { MethodInfo method =  ( MethodInfo ) it.next (  ) ;^33^^^^^28^41^[REPLACE] CodeEmitter e = EmitUtils.begin_method ( ce, method ) ;^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[ADD]^^29^30^31^32^33^28^41^[ADD] for  ( Iterator it = methods.iterator (  ) ; it.hasNext (  ) ; )  { MethodInfo method =  ( MethodInfo ) it.next (  ) ; if  ( TypeUtils.isProtected ( context.getOriginalModifiers ( method )  )  && TypeUtils.isPublic ( method.getModifiers (  )  )  )  { CodeEmitter e = EmitUtils.begin_method ( ce, method ) ;^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[REPLACE]^if  (  TypeUtils.isPublic ( method.getModifiers (  )  )  )  {^31^32^^^^28^41^[REPLACE] if  ( TypeUtils.isProtected ( context.getOriginalModifiers ( method )  )  && TypeUtils.isPublic ( method.getModifiers (  )  )  )  {^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[ADD]^^31^32^33^34^35^28^41^[ADD] if  ( TypeUtils.isProtected ( context.getOriginalModifiers ( method )  )  && TypeUtils.isPublic ( method.getModifiers (  )  )  )  { CodeEmitter e = EmitUtils.begin_method ( ce, method ) ; e.load_this (  ) ; e.load_args (  ) ;^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[ADD]^^33^34^^^^28^41^[ADD] CodeEmitter e = EmitUtils.begin_method ( ce, method ) ; e.load_this (  ) ;^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[REPLACE]^MethodInfo method =  ( MethodInfo ) it.hasNext (  ) ;^30^^^^^28^41^[REPLACE] MethodInfo method =  ( MethodInfo ) it.next (  ) ;^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[REPLACE]^for  ( Iterator it = methods.iterator (  ) ; it.hasNext (  ) ; )  { MethodInfo method =  ( MethodInfo ) it.next (  ) ;^29^^^^^28^41^[REPLACE] for  ( Iterator it = methods.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
[ADD]^^33^^^^^28^41^[ADD] CodeEmitter e = EmitUtils.begin_method ( ce, method ) ;^[METHOD] generate [TYPE] void [PARAMETER] ClassEmitter ce Context context List methods [CLASS] NoOpGenerator   [TYPE]  Context context  [TYPE]  CodeEmitter e  [TYPE]  boolean false  true  [TYPE]  NoOpGenerator INSTANCE  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  List methods  [TYPE]  MethodInfo method 
