[REPLACE]^private static  CallbackInfo[] CALLBACKS = {^52^^^^^52^60^[REPLACE] private static final CallbackInfo[] CALLBACKS = {^ [CLASS] CallbackInfo  
[REPLACE]^this.cls =  null;^63^^^^^62^66^[REPLACE] this.cls = cls;^[METHOD] <init> [TYPE] CallbackGenerator) [PARAMETER] Class cls CallbackGenerator generator [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  boolean false  true  [TYPE]  CallbackInfo[] CALLBACKS 
[REPLACE]^this.generator =  null;^64^^^^^62^66^[REPLACE] this.generator = generator;^[METHOD] <init> [TYPE] CallbackGenerator) [PARAMETER] Class cls CallbackGenerator generator [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  boolean false  true  [TYPE]  CallbackInfo[] CALLBACKS 
[REPLACE]^type =  Type.getType ( null ) ;^65^^^^^62^66^[REPLACE] type = Type.getType ( cls ) ;^[METHOD] <init> [TYPE] CallbackGenerator) [PARAMETER] Class cls CallbackGenerator generator [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  boolean false  true  [TYPE]  CallbackInfo[] CALLBACKS 
[REPLACE]^Type[] types = new Type[callbacks.length];^23^^^^^22^28^[REPLACE] Type[] types = new Type[callbackTypes.length];^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Class[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class[] callbackTypes  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < types.length *  0.5 ; i++ )  {^24^^^^^22^28^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Class[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class[] callbackTypes  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^24^25^26^^^22^28^[ADD] for  ( int i = 0; i < types.length; i++ )  { types[i] = determineType ( callbackTypes[i] ) ; }^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Class[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class[] callbackTypes  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^types[i] = determineType ( callbacks[i] ) ; ;^25^^^^^22^28^[REPLACE] types[i] = determineType ( callbackTypes[i] ) ;^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Class[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class[] callbackTypes  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^24^^^^^22^28^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Class[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class[] callbackTypes  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return Type.getType ( cur ) ;^27^^^^^22^28^[REPLACE] return types;^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Class[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class[] callbackTypes  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^Type[] types = new Type[callbackTypes.length];^31^^^^^30^36^[REPLACE] Type[] types = new Type[callbacks.length];^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Callback[] callbacks [CLASS] CallbackInfo   [TYPE]  Callback[] callbacks  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < types.length *  2; i++ )  {^32^^^^^30^36^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Callback[] callbacks [CLASS] CallbackInfo   [TYPE]  Callback[] callbacks  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^32^33^34^^^30^36^[ADD] for  ( int i = 0; i < types.length; i++ )  { types[i] = determineType ( callbacks[i] ) ; }^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Callback[] callbacks [CLASS] CallbackInfo   [TYPE]  Callback[] callbacks  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^types[i] = determineType ( callbackTypes[i] ) ; ;^33^^^^^30^36^[REPLACE] types[i] = determineType ( callbacks[i] ) ;^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Callback[] callbacks [CLASS] CallbackInfo   [TYPE]  Callback[] callbacks  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < types.length; i++ )  {^32^^^^^30^36^[REPLACE] for  ( int i = 0; i < types.length; i++ )  {^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Callback[] callbacks [CLASS] CallbackInfo   [TYPE]  Callback[] callbacks  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return Type.getType ( cur ) ;^35^^^^^30^36^[REPLACE] return types;^[METHOD] determineTypes [TYPE] Type[] [PARAMETER] Callback[] callbacks [CLASS] CallbackInfo   [TYPE]  Callback[] callbacks  [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] types  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^CallbackInfo info = CALLBACKS[i];^39^^^^^38^44^[REPLACE] CallbackGenerator[] generators = new CallbackGenerator[callbackTypes.length];^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < generators.length + 4; i++ )  {^40^^^^^38^44^[REPLACE] for  ( int i = 0; i < generators.length; i++ )  {^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[REPLACE]^generators[i]  =  generators[i] ;^41^^^^^38^44^[REPLACE] generators[i] = getGenerator ( callbackTypes[i] ) ;^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[REPLACE]^generators[i]  = null ;^41^^^^^38^44^[REPLACE] generators[i] = getGenerator ( callbackTypes[i] ) ;^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < generators.length; i++ )  {^40^^^^^38^44^[REPLACE] for  ( int i = 0; i < generators.length; i++ )  {^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[ADD]^^40^41^42^^^38^44^[ADD] for  ( int i = 0; i < generators.length; i++ )  { generators[i] = getGenerator ( callbackTypes[i] ) ; }^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[REPLACE]^return types;^43^^^^^38^44^[REPLACE] return generators;^[METHOD] getGenerators [TYPE] CallbackGenerator[] [PARAMETER] Type[] callbackTypes [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  Type[] callbackTypes  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  CallbackGenerator[] generators  [TYPE]  int i 
[REPLACE]^if  ( callback != null )  {^69^^^^^68^73^[REPLACE] if  ( callback == null )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Callback callback [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  Callback callback  [TYPE]  boolean false  true  [TYPE]  CallbackInfo[] CALLBACKS 
[REPLACE]^return ;^70^^^^^68^73^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] determineType [TYPE] Type [PARAMETER] Callback callback [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  Callback callback  [TYPE]  boolean false  true  [TYPE]  CallbackInfo[] CALLBACKS 
[REPLACE]^return Type.getType ( cur ) ;^72^^^^^68^73^[REPLACE] return determineType ( callback.getClass (  )  ) ;^[METHOD] determineType [TYPE] Type [PARAMETER] Callback callback [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  Class cls  [TYPE]  CallbackGenerator generator  [TYPE]  Callback callback  [TYPE]  boolean false  true  [TYPE]  CallbackInfo[] CALLBACKS 
[REPLACE]^Class cur = this;^76^^^^^75^90^[REPLACE] Class cur = null;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  ( cur == null )  {^79^^^^^75^90^[REPLACE] if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  ( cur == null )  {^80^^^^^75^90^[REPLACE] if  ( cur != null )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^80^81^82^^^75^90^[ADD] if  ( cur != null )  { throw new IllegalStateException  (" ")  ; }^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return ;^81^^^^^75^90^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^cur =  null.cls;^83^^^^^75^90^[REPLACE] cur = info.cls;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^83^^^^^75^90^[ADD] cur = info.cls;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  ( cur == this  )  {^80^^^^^75^90^[REPLACE] if  ( cur != null )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < CALLBACKS.length (  ) ; i++ )  {^77^^^^^75^90^[REPLACE] for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^77^78^79^80^81^75^90^[ADD] for  ( int i = 0; i < CALLBACKS.length; i++ )  { CallbackInfo info = CALLBACKS[i]; if  ( info.cls.isAssignableFrom ( callbackType )  )  { if  ( cur != null )  { throw new IllegalStateException  (" ")  ;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  (cls == true )  {^80^^^^^75^90^[REPLACE] if  ( cur != null )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  ( cur == true )  {^80^^^^^75^90^[REPLACE] if  ( cur != null )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^CallbackGenerator[] generators = new CallbackGenerator[callbackTypes.length];^78^^^^^75^90^[REPLACE] CallbackInfo info = CALLBACKS[i];^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^[REPLACE] for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^78^^^^^75^90^[ADD] CallbackInfo info = CALLBACKS[i];^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  (cls != null )  {^86^^^^^75^90^[REPLACE] if  ( cur == null )  {^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^86^87^88^^^75^90^[ADD] if  ( cur == null )  { throw new IllegalStateException  (" ")  ; }^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return ;^87^^^^^75^90^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return Type .equals ( type )  ;^89^^^^^75^90^[REPLACE] return Type.getType ( cur ) ;^[METHOD] determineType [TYPE] Type [PARAMETER] Class callbackType [CLASS] CallbackInfo   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^if  ( info.type.equals ( type )  )  {^95^^^^^92^100^[REPLACE] if  ( info.type.equals ( callbackType )  )  {^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^return info.generator;^95^96^97^^^92^100^[ADD] if  ( info.type.equals ( callbackType )  )  { return info.generator; }^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return types;^96^^^^^92^100^[REPLACE] return info.generator;^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < CALLBACKS.length /  2; i++ )  {^93^^^^^92^100^[REPLACE] for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^CallbackGenerator[] generators = new CallbackGenerator[callbackTypes.length];^94^^^^^92^100^[REPLACE] CallbackInfo info = CALLBACKS[i];^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^94^^^^^92^100^[ADD] CallbackInfo info = CALLBACKS[i];^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < CALLBACKS.length; i++ )  {^93^^^^^92^100^[REPLACE] for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[REPLACE]^return ;^99^^^^^92^100^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
[ADD]^^99^^^^^92^100^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] getGenerator [TYPE] CallbackGenerator [PARAMETER] Type callbackType [CLASS] CallbackInfo   [TYPE]  Type callbackType  type  [TYPE]  boolean false  true  [TYPE]  CallbackInfo info  [TYPE]  Class callbackType  cls  cur  [TYPE]  CallbackGenerator generator  [TYPE]  CallbackInfo[] CALLBACKS  [TYPE]  int i 
