[REPLACE]^private static final Source SOURCE ;^35^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( InterfaceMaker.class.getName (  )  ) ;^ [CLASS] InterfaceMaker  
[REPLACE]^private Map signatures ;^36^^^^^^^[REPLACE] private Map signatures = new HashMap (  ) ;^ [CLASS] InterfaceMaker  
[REPLACE]^add ( m ) ;^44^^^^^43^45^[REPLACE] super ( SOURCE ) ;^[METHOD] <init> [TYPE] InterfaceMaker() [PARAMETER] [CLASS] InterfaceMaker   [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  boolean false  true 
[ADD]^^44^^^^^43^45^[ADD] super ( SOURCE ) ;^[METHOD] <init> [TYPE] InterfaceMaker() [PARAMETER] [CLASS] InterfaceMaker   [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  boolean false  true 
[REPLACE]^Signature sig =  ( Signature ) it.next (  ) ;^53^^^^^52^54^[REPLACE] signatures.put ( sig, exceptions ) ;^[METHOD] add [TYPE] void [PARAMETER] Signature sig Type[] exceptions [CLASS] InterfaceMaker   [TYPE]  Type[] exceptions  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  Signature sig 
[ADD]^^53^^^^^52^54^[ADD] signatures.put ( sig, exceptions ) ;^[METHOD] add [TYPE] void [PARAMETER] Signature sig Type[] exceptions [CLASS] InterfaceMaker   [TYPE]  Type[] exceptions  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  Signature sig 
[REPLACE]^add ( ReflectUtils.getExceptionTypes ( method ) , ReflectUtils.getExceptionTypes ( method )  ) ;^62^63^^^^61^64^[REPLACE] add ( ReflectUtils.getSignature ( method ) , ReflectUtils.getExceptionTypes ( method )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Method method [CLASS] InterfaceMaker   [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[ADD]^^62^63^^^^61^64^[ADD] add ( ReflectUtils.getSignature ( method ) , ReflectUtils.getExceptionTypes ( method )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Method method [CLASS] InterfaceMaker   [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^ReflectUtils .getSignature ( method )   ) ;^63^^^^^61^64^[REPLACE] ReflectUtils.getExceptionTypes ( method )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Method method [CLASS] InterfaceMaker   [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[ADD]^^63^^^^^61^64^[ADD] ReflectUtils.getExceptionTypes ( method )  ) ;^[METHOD] add [TYPE] void [PARAMETER] Method method [CLASS] InterfaceMaker   [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^Method[] methods = clazz .getName (  )  ;^73^^^^^72^80^[REPLACE] Method[] methods = clazz.getMethods (  ) ;^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[REPLACE]^if  ( m.getDeclaringClass (  ) .getName (  ) .equals ( "java.lang.Object" )  )  {^76^^^^^72^80^[REPLACE] if  ( !m.getDeclaringClass (  ) .getName (  ) .equals ( "java.lang.Object" )  )  {^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[REPLACE]^ce.end_class (  ) ;^77^^^^^72^80^[REPLACE] add ( m ) ;^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < methods.length /  0.5 ; i++ )  {^74^^^^^72^80^[REPLACE] for  ( int i = 0; i < methods.length; i++ )  {^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[ADD]^^76^77^78^^^72^80^[ADD] if  ( !m.getDeclaringClass (  ) .getName (  ) .equals ( "java.lang.Object" )  )  { add ( m ) ; }^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[REPLACE]^Method[] methods = clazz.getMethods (  ) ;^75^^^^^72^80^[REPLACE] Method m = methods[i];^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < methods.length; i++ )  {^74^^^^^72^80^[REPLACE] for  ( int i = 0; i < methods.length; i++ )  {^[METHOD] add [TYPE] void [PARAMETER] Class clazz [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Class clazz  [TYPE]  Method m  [TYPE]  Method[] methods  [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  int i 
[REPLACE]^setUseCache ( true ) ;^86^^^^^85^88^[REPLACE] setUseCache ( false ) ;^[METHOD] create [TYPE] Class [PARAMETER] [CLASS] InterfaceMaker   [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  boolean false  true 
[REPLACE]^return  ( Class ) super.getClassName ( this ) ;^87^^^^^85^88^[REPLACE] return  ( Class ) super.create ( this ) ;^[METHOD] create [TYPE] Class [PARAMETER] [CLASS] InterfaceMaker   [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  boolean false  true 
[REPLACE]^return this;^91^^^^^90^92^[REPLACE] return null;^[METHOD] getDefaultClassLoader [TYPE] ClassLoader [PARAMETER] [CLASS] InterfaceMaker   [TYPE]  Map signatures  [TYPE]  Source SOURCE  [TYPE]  boolean false  true 
[REPLACE]^return null;^95^^^^^94^96^[REPLACE] return type;^[METHOD] firstInstance [TYPE] Object [PARAMETER] Class type [CLASS] InterfaceMaker   [TYPE]  Class type  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^return ;^99^^^^^98^100^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] nextInstance [TYPE] Object [PARAMETER] Object instance [CLASS] InterfaceMaker   [TYPE]  Object instance  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[ADD]^^99^^^^^98^100^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] nextInstance [TYPE] Object [PARAMETER] Object instance [CLASS] InterfaceMaker   [TYPE]  Object instance  [TYPE]  boolean false  true  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^Signature sig =  ( Signature ) it.next (  ) ;^103^^^^^102^118^[REPLACE] ClassEmitter ce = new ClassEmitter ( v ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC &false, getClassName (  ) , null,^104^105^106^107^^102^118^[REPLACE] ce.begin_class ( Constants.V1_2, Constants.ACC_PUBLIC | Constants.ACC_INTERFACE, getClassName (  ) , null,^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^for  ( int i = 0; i < methods.length; i++ )  {^110^^^^^102^118^[REPLACE] for  ( Iterator it = signatures.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[ADD]^^110^111^112^113^114^102^118^[ADD] for  ( Iterator it = signatures.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  { Signature sig =  ( Signature ) it.next (  ) ; Type[] exceptions =  ( Type[] ) signatures.get ( sig ) ; ce.begin_method ( Constants.ACC_PUBLIC | Constants.ACC_ABSTRACT, sig,^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^Signature sig =  ( Signature ) it.hasNext (  ) ;^111^^^^^102^118^[REPLACE] Signature sig =  ( Signature ) it.next (  ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^Type[] exceptions =  ( Type[] ) signatures.keySet ( sig ) ;^112^^^^^102^118^[REPLACE] Type[] exceptions =  ( Type[] ) signatures.get ( sig ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^for  ( Iterator it = signatures .get ( this )  .iterator (  ) ; it.hasNext (  ) ; )  {^110^^^^^102^118^[REPLACE] for  ( Iterator it = signatures.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^Type[] exceptions =  ( Type[] ) signatures .put ( null , this )  ;^112^^^^^102^118^[REPLACE] Type[] exceptions =  ( Type[] ) signatures.get ( sig ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
[REPLACE]^add ( m ) ;^117^^^^^102^118^[REPLACE] ce.end_class (  ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] InterfaceMaker   [TYPE]  boolean false  true  [TYPE]  Signature sig  [TYPE]  ClassEmitter ce  [TYPE]  Iterator it  [TYPE]  Type[] exceptions  [TYPE]  ClassVisitor v  [TYPE]  Map signatures  [TYPE]  Source SOURCE 
