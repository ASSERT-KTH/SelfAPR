[REPLACE]^private static final MixinKey KEY_FACTORY  = null ;^36^37^^^^36^37^[REPLACE] private static final MixinKey KEY_FACTORY = ( MixinKey ) KeyFactory.create ( MixinKey.class, KeyFactory.CLASS_BY_NAME ) ;^ [CLASS] Mixin Generator Route  
[REPLACE]^private static final Map ROUTE_CACHE  = null ;^38^^^^^^^[REPLACE] private static final Map ROUTE_CACHE = Collections.synchronizedMap ( new HashMap (  )  ) ;^ [CLASS] Mixin Generator Route  
[REPLACE]^public static  int STYLE_INTERFACES = 0;^40^^^^^^^[REPLACE] public static final int STYLE_INTERFACES = 0;^ [CLASS] Mixin Generator Route  
[REPLACE]^public static  int STYLE_BEANS = 1 - 0;^41^^^^^^^[REPLACE] public static final int STYLE_BEANS = 1;^ [CLASS] Mixin Generator Route  
[REPLACE]^public static final int STYLE_EVERYTHING  = null ;^42^^^^^^^[REPLACE] public static final int STYLE_EVERYTHING = 2;^ [CLASS] Mixin Generator Route  
[REPLACE]^private static  Source SOURCE = new Source ( Mixin.class.getName (  )  ) ;^96^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( Mixin.class.getName (  )  ) ;^ [CLASS] Mixin Generator Route  
[REPLACE]^private int style  = null ;^100^^^^^^^[REPLACE] private int style = STYLE_INTERFACES;^ [CLASS] Mixin Generator Route  
[ADD]^^214^^^^^213^236^[ADD] Map map = new HashMap (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class[] temp = getClasses ( delegates )  ;^215^^^^^213^236^[REPLACE] ArrayList collect = new ArrayList (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^if  ( !map.get ( iface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^map.put ( delegate, new Integer ( i )  ) ;^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( int i = 0 ; i < delegates.length; i++ )  {^216^^^^^213^236^[REPLACE] for  ( int i = 0; i < delegates.length; i++ )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^217^218^^^^213^236^[ADD] Class delegate = delegates[i].getClass (  ) ; collect.clear (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( Iterator it = collect.clear (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class iface =  ( Class ) it.hasNext (  ) ;^221^^^^^213^236^[REPLACE] Class iface =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^classes =  new Class[ROUTE_CACHE.size (  ) ];^227^^^^^213^236^[REPLACE] classes = new Class[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^route =  new int[ROUTE_CACHE.size (  ) ];^228^^^^^213^236^[REPLACE] route = new int[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^int index = 3;^229^^^^^213^236^[REPLACE] int index = 0;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^classes[index]  =  classes[index] ;^232^^^^^213^236^[REPLACE] classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^route[index]  =  route[index] ;^233^^^^^213^236^[REPLACE] route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( Iterator it = ROUTE_CACHE.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^[REPLACE] for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class key =  ( Class ) it.hasNext (  ) ;^231^^^^^213^236^[REPLACE] Class key =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^if  ( classes != null && delegates == null )  {^133^^^^^132^166^[REPLACE] if  ( classes == null && delegates == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException ( "Specified classes are incompatible with delegates" )  ;^134^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^134^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes != null )  {^138^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^Route r = route ( delegates ) ;classes = r.classes;route = r.route;^138^139^140^141^142^132^166^[ADD] if  ( classes == null )  { Route r = route ( delegates ) ; classes = r.classes; route = r.route; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^classes =  null.classes;^140^^^^^132^166^[REPLACE] classes = r.classes;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^route =  null.nulloute;^141^^^^^132^166^[REPLACE] route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Generator gen = new Generator (  )  ;^139^^^^^132^166^[REPLACE] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( interfaces != null )  {^147^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( delegates == null )  {^150^^^^^147^161^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^Class[] temp = ReflectUtils.getClasses ( delegates ) ;^150^151^152^153^154^147^161^[ADD] if  ( delegates != null )  { Class[] temp = ReflectUtils.getClasses ( delegates ) ; if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length - 1 != temp.length - 1 )  {^152^^^^^147^161^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^152^153^154^^^147^161^[ADD] if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^147^161^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Object key = create ( delegates )  ;^151^^^^^147^161^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^153^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^157^^^^^147^161^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^classes  =  classes ;^148^^^^^132^166^[REPLACE] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  (beans == null )  {^150^^^^^132^166^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^150^151^152^153^154^132^166^[ADD] if  ( delegates != null )  { Class[] temp = ReflectUtils.getClasses ( delegates ) ; if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length - 3 != temp.length - 3 )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^153^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^132^166^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^157^^^^^132^166^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Object key = create ( delegates )  ;^151^^^^^132^166^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^155^156^157^158^^132^166^[ADD] for  ( int i = 0; i < classes.length; i++ )  { if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length %  2 != temp.length %  2 )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^152^153^154^^^132^166^[ADD] if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^156^157^158^^^132^166^[ADD] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException ( "Specified classes are incompatible with delegates" )  ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^139^^^^^132^166^[ADD] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^151^^^^^132^166^[ADD] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils.getNames ( classes ) ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REMOVE]^createBean ( null, beans )  ;^163^^^^^132^166^[REMOVE] ^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return classes[0].getClassLoader  (    )  ;  ;^165^^^^^132^166^[REPLACE] return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^private static final Source SOURCE ;^96^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( Mixin.class.getName (  )  ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Generator   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^private int style  = null ;^100^^^^^^^[REPLACE] private int style = STYLE_INTERFACES;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Generator   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^if  ( classes != null &&true )  {^133^^^^^132^166^[REPLACE] if  ( classes == null && delegates == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^133^134^135^^^132^166^[ADD] if  ( classes == null && delegates == null )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^134^^^^^132^166^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException ( "Specified classes are incompatible with delegates" )  ;^134^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes != null )  {^138^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^this.classes = classes  ;^140^^^^^132^166^[REPLACE] classes = r.classes;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^route =  null.nulloute;^141^^^^^132^166^[REPLACE] route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^139^^^^^132^166^[ADD] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes != null )  {^147^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( delegates == null )  {^150^^^^^147^161^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length - 1 != temp.length - 1 )  {^152^^^^^147^161^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^147^161^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getNames ( delegates ) ;^151^^^^^147^161^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException (  (  (  (  (  (  ( "Specified class " +  ( classes[i] )  )  + " is incompatible with delegate class " )  +  ( temp[i] )  )  + "  ( index " )  + i )  + " ) " )  )  ;^153^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException ( "Specified classes are incompatible with delegates" )  ;^157^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^classes ;^148^^^^^132^166^[REPLACE] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( delegates == null )  {^150^^^^^132^166^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length (  )  != temp.length (  )  )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^153^^^^^132^166^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^132^166^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getNames ( delegates ) ;^151^^^^^132^166^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^155^156^157^158^^132^166^[ADD] for  ( int i = 0; i < classes.length; i++ )  { if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException (  (  (  (  (  (  ( "Specified class " +  ( classes[i] )  )  + " is incompatible with delegate class " )  +  ( temp[i] )  )  + "  ( index " )  + i )  + " ) " )  )  ;^153^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length + 4 != temp.length + 4 )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^152^153^154^^^132^166^[ADD] if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalStateException ( "Specified classes are incompatible with delegates" )  ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^140^141^^^^132^166^[ADD] classes = r.classes; route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^classes  =  classes ;^148^^^^^132^166^[REPLACE] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^int i = 0  ;^139^^^^^132^166^[REPLACE] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils .getNames ( temp )  ;^151^^^^^132^166^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return ;^153^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils.getNames ( classes ) ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ] .getClassLoader (  )   ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^getNames ( classes )  ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return  ( Mixin ) super .create (  )   ) ;^165^^^^^132^166^[REPLACE] return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^214^^^^^213^236^[ADD] Map map = new HashMap (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^int i = 0  ;^215^^^^^213^236^[REPLACE] ArrayList collect = new ArrayList (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^if  ( map.containsKey ( iface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^map.put ( iface, new Integer ( i )  ) ;^222^223^224^^^213^236^[ADD] if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0 ; i < delegates.length; i++ )  {^216^^^^^213^236^[REPLACE] for  ( int i = 0; i < delegates.length; i++ )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^int i = 0  ;^217^^^^^213^236^[REPLACE] Class delegate = delegates[i].getClass (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Iterator it = map.keySet (  ) .iterator (  )  ;^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^221^222^223^224^^213^236^[ADD] Class iface =  ( Class ) it.next (  ) ; if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^classes =  new Class[null.size (  ) ];^227^^^^^213^236^[REPLACE] classes = new Class[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^228^^^^^213^236^[ADD] route = new int[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^229^^^^^213^236^[ADD] int index = 0;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^classes[index]  = null ;^232^^^^^213^236^[REPLACE] classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^route[index] ;^233^^^^^213^236^[REPLACE] route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Iterator it = collect.iterator (  )  ;^230^^^^^213^236^[REPLACE] for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Class iface =  (  ( Class )   ( it.next (  )  )  )  ;^231^^^^^213^236^[REPLACE] Class key =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
