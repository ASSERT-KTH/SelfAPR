[REPLACE]^private static final MixinKey KEY_FACTORY ;^36^37^^^^36^37^[REPLACE] private static final MixinKey KEY_FACTORY = ( MixinKey ) KeyFactory.create ( MixinKey.class, KeyFactory.CLASS_BY_NAME ) ;^ [CLASS] Mixin Generator Route  
[REPLACE]^private static  Map ROUTE_CACHE = Collections.synchronizedMap ( new HashMap (  )  ) ;^38^^^^^^^[REPLACE] private static final Map ROUTE_CACHE = Collections.synchronizedMap ( new HashMap (  )  ) ;^ [CLASS] Mixin Generator Route  
[REPLACE]^public static final int STYLE_INTERFACES  = null ;^40^^^^^^^[REPLACE] public static final int STYLE_INTERFACES = 0;^ [CLASS] Mixin Generator Route  
[REPLACE]^public static final int STYLE_BEANS = 0;^41^^^^^^^[REPLACE] public static final int STYLE_BEANS = 1;^ [CLASS] Mixin Generator Route  
[REPLACE]^public static final  short  STYLE_EVERYTHING = 2;^42^^^^^^^[REPLACE] public static final int STYLE_EVERYTHING = 2;^ [CLASS] Mixin Generator Route  
[REPLACE]^private static final Source SOURCE  = null ;^96^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( Mixin.class.getName (  )  ) ;^ [CLASS] Mixin Generator Route  
[REPLACE]^private int style ;^100^^^^^^^[REPLACE] private int style = STYLE_INTERFACES;^ [CLASS] Mixin Generator Route  
[REPLACE]^gen.setClassLoader ( loader ) ;^105^^^^^104^106^[REPLACE] super ( SOURCE ) ;^[METHOD] <init> [TYPE] Mixin$Generator() [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^105^^^^^104^106^[ADD] super ( SOURCE ) ;^[METHOD] <init> [TYPE] Mixin$Generator() [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class key =  ( Class ) it.next (  ) ;^214^^^^^213^236^[REPLACE] Map map = new HashMap (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Map map = new HashMap (  ) ;^215^^^^^213^236^[REPLACE] ArrayList collect = new ArrayList (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^if  ( !map.get ( iface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^222^223^224^^^213^236^[ADD] if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^map .get ( this )  ;^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^223^224^^^^213^236^[ADD] map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( int i = 0; i < delegates.length - 4; i++ )  {^216^^^^^213^236^[REPLACE] for  ( int i = 0; i < delegates.length; i++ )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^if  ( !map.containsKey ( delegate )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^map .get ( null )  ;^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( int i = 0; i < delegates.length; i++ )  {^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^if  ( map.containsKey ( iface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^map.put ( delegate, new Integer ( i )  ) ;^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class iface =  ( Class ) it.hasNext (  ) ;^221^^^^^213^236^[REPLACE] Class iface =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class delegate = delegates[i].clone (  ) ;^217^^^^^213^236^[REPLACE] Class delegate = delegates[i].getClass (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( Iterator it = collect.clear (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class iface =  ( Class ) it .hasNext (  )  ;^221^^^^^213^236^[REPLACE] Class iface =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^221^222^223^224^^213^236^[ADD] Class iface =  ( Class ) it.next (  ) ; if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( Iterator indext = collect.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^if  ( !map.containsKey ( indexface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( int i = 0 ; i < delegates.length; i++ )  {^216^^^^^213^236^[REPLACE] for  ( int i = 0; i < delegates.length; i++ )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^220^221^222^223^224^213^236^[ADD] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  { Class iface =  ( Class ) it.next (  ) ; if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^classes =  new Class[ROUTE_CACHE.size (  ) ];^227^^^^^213^236^[REPLACE] classes = new Class[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^route =  new int[ROUTE_CACHE.size (  ) ];^228^^^^^213^236^[REPLACE] route = new int[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^228^^^^^213^236^[ADD] route = new int[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^int index = 4;^229^^^^^213^236^[REPLACE] int index = 0;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( Iterator it = map.size (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^[REPLACE] for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^classes[index]  =  classes[index] ;^232^^^^^213^236^[REPLACE] classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^route[index] =  (  ( Integer ) map.get ( key )  ) . long Value (  ) ;^233^^^^^213^236^[REPLACE] route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Class key =  ( Class ) it .hasNext (  )  ;^231^^^^^213^236^[REPLACE] Class key =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^classes[index]  = null ;^232^^^^^213^236^[REPLACE] classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^route[index] =  (  ( Integer ) map.get ( key )  ) . short Value (  ) ;^233^^^^^213^236^[REPLACE] route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^for  ( Iterator it = ROUTE_CACHE.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^230^^^^^213^236^[REPLACE] for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[ADD]^^231^232^^^^213^236^[ADD] Class key =  ( Class ) it.next (  ) ; classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates 
[REPLACE]^Map map = new HashMap (  ) ;^57^^^^^56^60^[REPLACE] Generator gen = new Generator (  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^gen.setClasses ( delegates ) ;^58^^^^^56^60^[REPLACE] gen.setDelegates ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[ADD]^return gen.create (  ) ;^58^59^^^^56^60^[ADD] gen.setDelegates ( delegates ) ; return gen.create (  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^return gen.Generator (  ) ;^59^^^^^56^60^[REPLACE] return gen.create (  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^Map map = new HashMap (  ) ;^69^^^^^68^73^[REPLACE] Generator gen = new Generator (  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Class[] interfaces Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^gen.setDelegates ( interfaces ) ;^70^^^^^68^73^[REPLACE] gen.setClasses ( interfaces ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Class[] interfaces Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^gen.setClasses ( delegates ) ;^71^^^^^68^73^[REPLACE] gen.setDelegates ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Class[] interfaces Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^return gen.Generator (  ) ;^72^^^^^68^73^[REPLACE] return gen.create (  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] Class[] interfaces Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  Generator gen 
[REPLACE]^return createBean ( true, beans ) ;^78^^^^^76^80^[REPLACE] return createBean ( null, beans ) ;^[METHOD] createBean [TYPE] Mixin [PARAMETER] Object[] beans [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^Map map = new HashMap (  ) ;^88^^^^^87^93^[REPLACE] Generator gen = new Generator (  ) ;^[METHOD] createBean [TYPE] Mixin [PARAMETER] ClassLoader loader Object[] beans [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ClassLoader loader  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Generator gen 
[REPLACE]^gen.nextInstance ( STYLE_BEANS ) ;^89^^^^^87^93^[REPLACE] gen.setStyle ( STYLE_BEANS ) ;^[METHOD] createBean [TYPE] Mixin [PARAMETER] ClassLoader loader Object[] beans [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ClassLoader loader  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Generator gen 
[REPLACE]^gen.setClasses ( beans ) ;^90^^^^^87^93^[REPLACE] gen.setDelegates ( beans ) ;^[METHOD] createBean [TYPE] Mixin [PARAMETER] ClassLoader loader Object[] beans [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ClassLoader loader  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Generator gen 
[REPLACE]^gen.setNamePrefix ( loader ) ;^91^^^^^87^93^[REPLACE] gen.setClassLoader ( loader ) ;^[METHOD] createBean [TYPE] Mixin [PARAMETER] ClassLoader loader Object[] beans [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ClassLoader loader  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Generator gen 
[REPLACE]^return gen.Generator (  ) ;^92^^^^^87^93^[REPLACE] return gen.create (  ) ;^[METHOD] createBean [TYPE] Mixin [PARAMETER] ClassLoader loader Object[] beans [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  ClassLoader loader  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Generator gen 
[REPLACE]^return classes[4].getName (  ) ;^109^^^^^108^110^[REPLACE] return classes[0].getClassLoader (  ) ;^[METHOD] getDefaultClassLoader [TYPE] ClassLoader [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^this.style =  STYLE_INTERFACES;^117^^^^^112^122^[REPLACE] this.style = style;^[METHOD] setStyle [TYPE] void [PARAMETER] int style [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^return ;^120^^^^^112^122^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setStyle [TYPE] void [PARAMETER] int style [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^this.classes =  interfaces;^125^^^^^124^126^[REPLACE] this.classes = classes;^[METHOD] setClasses [TYPE] void [PARAMETER] Class[] classes [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^this.delegates =  beans;^129^^^^^128^130^[REPLACE] this.delegates = delegates;^[METHOD] setDelegates [TYPE] void [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^if  (  delegates == null )  {^133^^^^^132^166^[REPLACE] if  ( classes == null && delegates == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^134^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^134^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes != true )  {^138^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^classes =  null.classes;^140^^^^^132^166^[REPLACE] classes = r.classes;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^route =  null.nulloute;^141^^^^^132^166^[REPLACE] route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^141^^^^^132^166^[ADD] route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getClasses ( delegates ) ;^139^^^^^132^166^[REPLACE] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes != null )  {^147^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( delegates == null )  {^150^^^^^147^161^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length *  0.5  != temp.length *  0.5  )  {^152^^^^^147^161^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^153^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^147^161^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^156^157^158^^^147^161^[ADD] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^157^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^157^^^^^147^161^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0; i < classes.length *  2; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getNames ( delegates ) ;^151^^^^^147^161^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^157^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length + 1 != interfaces.length + 1 )  {^152^^^^^147^161^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^152^153^154^^^147^161^[ADD] if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^153^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^153^^^^^147^161^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length + 1; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils .getNames ( interfaces )  ;^151^^^^^147^161^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^classes  = null ;^148^^^^^132^166^[REPLACE] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( beans == null )  {^150^^^^^132^166^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^Class[] temp = ReflectUtils.getClasses ( delegates ) ;^150^151^152^153^154^132^166^[ADD] if  ( delegates != null )  { Class[] temp = ReflectUtils.getClasses ( delegates ) ; if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length /  0.5  != temp.length /  0.5  )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^153^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^132^166^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0; i < classes.length /  2; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^157^^^^^132^166^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getNames ( delegates ) ;^151^^^^^132^166^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^155^156^157^158^^132^166^[ADD] for  ( int i = 0; i < classes.length; i++ )  { if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^153^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^if  ( classes.length %  0.5  != interfaces.length %  0.5  )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^for  ( indexnt i = 0; i < classes.length *  2; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^route = r.route;^140^141^^^^132^166^[ADD] classes = r.classes; route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^139^^^^^132^166^[ADD] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[ADD]^^151^^^^^132^166^[ADD] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils .addAllInterfaces ( 0 , true )  ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils.getNames ( classes ) ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[  classes   ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils .getClasses ( delegates )  , route )  ) ;^165^^^^^132^166^[REPLACE] return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route r 
[REPLACE]^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^171^^^^^168^180^[REPLACE] new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  ClassVisitor v  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^174^^^^^168^180^[REPLACE] new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  ClassVisitor v  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^177^^^^^168^180^[REPLACE] new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  ClassVisitor v  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^return  (  ( Mixin ) ReflectUtils .newInstance ( style , 1 , route )   )^183^^^^^182^184^[REPLACE] return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[METHOD] firstInstance [TYPE] Object [PARAMETER] Class type [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Class type  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^return gen.create (  ) ;^187^^^^^186^188^[REPLACE] return  (  ( Mixin ) instance ) .newInstance ( delegates ) ;^[METHOD] nextInstance [TYPE] Object [PARAMETER] Object instance [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object instance  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^return  ( Class[] ) route ( beans ) .classes.clone (  ) ;^192^^^^^191^193^[REPLACE] return  ( Class[] ) route ( delegates ) .classes.clone (  ) ;^[METHOD] getClasses [TYPE] Class[] [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates 
[REPLACE]^Object key = ClassesKey.create ( beans ) ;^200^^^^^199^206^[REPLACE] Object key = ClassesKey.create ( delegates ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[ADD]^^200^201^^^^199^206^[ADD] Object key = ClassesKey.create ( delegates ) ; Route route =  ( Route ) ROUTE_CACHE.get ( key ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^Route route =  ( Route ) ROUTE_CACHE .put ( true , null )  ;^201^^^^^199^206^[REPLACE] Route route =  ( Route ) ROUTE_CACHE.get ( key ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^if  ( route != true )  {^202^^^^^199^206^[REPLACE] if  ( route == null )  {^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^ROUTE_CACHE.put ( key, route =  new Route ( beans )  ) ;^203^^^^^199^206^[REPLACE] ROUTE_CACHE.put ( key, route = new Route ( delegates )  ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^ROUTE_CACHE.put ( key, route =  new Route ( null )  ) ;^203^^^^^199^206^[REPLACE] ROUTE_CACHE.put ( key, route = new Route ( delegates )  ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^return gen.create (  ) ;^205^^^^^199^206^[REPLACE] return route;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Mixin Generator Route   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^private  final Source SOURCE = new Source ( Mixin.class.getName (  )  ) ;^96^^^^^^^[REPLACE] private static final Source SOURCE = new Source ( Mixin.class.getName (  )  ) ;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Generator   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^private int style  = null ;^100^^^^^^^[REPLACE] private int style = STYLE_INTERFACES;^[METHOD] route [TYPE] Mixin$Route [PARAMETER] Object[] delegates [CLASS] Generator   [TYPE]  Class[] classes  interfaces  temp  [TYPE]  boolean false  true  [TYPE]  MixinKey KEY_FACTORY  [TYPE]  int[] route  [TYPE]  Object key  [TYPE]  Map ROUTE_CACHE  map  [TYPE]  int STYLE_BEANS  STYLE_EVERYTHING  STYLE_INTERFACES  i  index  style  [TYPE]  Source SOURCE  [TYPE]  Object[] beans  delegates  [TYPE]  Route route 
[REPLACE]^Route r = route ( delegates ) ;^105^^^^^104^106^[REPLACE] super ( SOURCE ) ;^[METHOD] <init> [TYPE] Mixin$Generator() [PARAMETER] [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[REPLACE]^return classes[0 % 3].getName (  ) ;^109^^^^^108^110^[REPLACE] return classes[0].getClassLoader (  ) ;^[METHOD] getDefaultClassLoader [TYPE] ClassLoader [PARAMETER] [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[REPLACE]^this.style =  null;^117^^^^^112^122^[REPLACE] this.style = style;^[METHOD] setStyle [TYPE] void [PARAMETER] int style [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[ADD]^break;^117^118^^^^112^122^[ADD] this.style = style; break;^[METHOD] setStyle [TYPE] void [PARAMETER] int style [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[REPLACE]^return ;^120^^^^^112^122^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] setStyle [TYPE] void [PARAMETER] int style [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[REPLACE]^this.classes =  null;^125^^^^^124^126^[REPLACE] this.classes = classes;^[METHOD] setClasses [TYPE] void [PARAMETER] Class[] classes [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[REPLACE]^this.delegates =  null;^129^^^^^128^130^[REPLACE] this.delegates = delegates;^[METHOD] setDelegates [TYPE] void [PARAMETER] Object[] delegates [CLASS] Generator   [TYPE]  int[] route  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int style 
[REPLACE]^if  ( classes != null && delegates == null )  {^133^^^^^132^166^[REPLACE] if  ( classes == null && delegates == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^134^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^134^^^^^132^166^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes != false )  {^138^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^Route r = route ( delegates ) ;classes = r.classes;route = r.route;^138^139^140^141^142^132^166^[ADD] if  ( classes == null )  { Route r = route ( delegates ) ; classes = r.classes; route = r.route; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^classes =  null.classes;^140^^^^^132^166^[REPLACE] classes = r.classes;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^140^141^^^^132^166^[ADD] classes = r.classes; route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^route =  null.nulloute;^141^^^^^132^166^[REPLACE] route = r.route;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getClasses ( delegates ) ;^139^^^^^132^166^[REPLACE] Route r = route ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes != null )  {^147^^^^^132^166^[REPLACE] if  ( classes == null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( delegates == null )  {^150^^^^^147^161^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length - 2 != temp.length - 2 )  {^152^^^^^147^161^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^152^153^154^^^147^161^[ADD] if  ( classes.length != temp.length )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return ;^153^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^153^^^^^147^161^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^147^161^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^157^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0; i < classes.length + 5; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^156^157^158^^^147^161^[ADD] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^157^^^^^147^161^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getNames ( delegates ) ;^151^^^^^147^161^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^151^^^^^147^161^[ADD] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^153^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length *  0.5  != temp.length *  0.5  )  {^152^^^^^147^161^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0; i < classes.length /  0.5 ; i++ )  {^155^^^^^147^161^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^155^156^157^158^^147^161^[ADD] for  ( int i = 0; i < classes.length; i++ )  { if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return ;^157^^^^^147^161^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils .getNames ( temp )  ;^151^^^^^147^161^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^classes  =  classes ;^148^^^^^132^166^[REPLACE] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^148^^^^^132^166^[ADD] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( delegates == null )  {^150^^^^^132^166^[REPLACE] if  ( delegates != null )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length - 4 != temp.length - 4 )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^153^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes[i].isAssignableFrom ( temp[i] )  )  {^156^^^^^132^166^[REPLACE] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0; i < classes.length *  0.5 ; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^156^157^158^^^132^166^[ADD] if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils.getNames ( delegates ) ;^151^^^^^132^166^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^151^^^^^132^166^[ADD] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return ;^157^^^^^132^166^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^if  ( classes.length - 2 != temp.length - 2 )  {^152^^^^^132^166^[REPLACE] if  ( classes.length != temp.length )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^for  ( int i = 0 ; i < classes.length - 5; i++ )  {^155^^^^^132^166^[REPLACE] for  ( int i = 0; i < classes.length; i++ )  {^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^classes ;^148^^^^^132^166^[REPLACE] classes = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^Class[] temp = ReflectUtils .getNames ( temp )  ;^151^^^^^132^166^[REPLACE] Class[] temp = ReflectUtils.getClasses ( delegates ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[ADD]^^155^156^157^158^^132^166^[ADD] for  ( int i = 0; i < classes.length; i++ )  { if  ( !classes[i].isAssignableFrom ( temp[i] )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils .getNames ( temp )  ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils .getNames ( classes )  ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^setNamePrefix ( classes[ReflectUtils.getNames ( classes ) ].getName (  )  ) ;^163^^^^^132^166^[REPLACE] setNamePrefix ( classes[ReflectUtils.findPackageProtected ( classes ) ].getName (  )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getClasses (  classes  ) , route )  ) ;^165^^^^^132^166^[REPLACE] return  ( Mixin ) super.create ( KEY_FACTORY.newInstance ( style, ReflectUtils.getNames (  classes  ) , route )  ) ;^[METHOD] create [TYPE] Mixin [PARAMETER] [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style  [TYPE]  Route r 
[REPLACE]^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^171^^^^^168^180^[REPLACE] new MixinEmitter ( v, getClassName (  ) , classes, route ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  ClassVisitor v  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style 
[REPLACE]^new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^174^^^^^168^180^[REPLACE] new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  ClassVisitor v  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style 
[REPLACE]^new MixinBeanEmitter ( v, getClassName (  ) , classes ) ;^177^^^^^168^180^[REPLACE] new MixinEverythingEmitter ( v, getClassName (  ) , classes ) ;^[METHOD] generateClass [TYPE] void [PARAMETER] ClassVisitor v [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  ClassVisitor v  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style 
[REPLACE]^return  (  ( Mixin ) ReflectUtils .newInstance ( style , null , route )   )^183^^^^^182^184^[REPLACE] return  (  ( Mixin ) ReflectUtils.newInstance ( type )  ) .newInstance ( delegates ) ;^[METHOD] firstInstance [TYPE] Object [PARAMETER] Class type [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Class type  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style 
[REPLACE]^return  (  ( Mixin ) instance )  .newInstance ( style , false , route )  ;^187^^^^^186^188^[REPLACE] return  (  ( Mixin ) instance ) .newInstance ( delegates ) ;^[METHOD] nextInstance [TYPE] Object [PARAMETER] Object instance [CLASS] Generator   [TYPE]  Class[] classes  temp  [TYPE]  boolean false  true  [TYPE]  int[] route  [TYPE]  Object instance  [TYPE]  Source SOURCE  [TYPE]  Object[] delegates  [TYPE]  int i  style 
[REPLACE]^Class delegate = delegates[i].getClass (  ) ;^214^^^^^213^236^[REPLACE] Map map = new HashMap (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Map map = new HashMap (  ) ;^215^^^^^213^236^[REPLACE] ArrayList collect = new ArrayList (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^if  ( !map.containsKey ( delegate )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^map.put ( iface, new Integer ( i )  ) ;^222^223^224^^^213^236^[ADD] if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^map.put ( indexface, new Integer ( i )  ) ;^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0 ; i < delegates.length (  ) ; i++ )  {^216^^^^^213^236^[REPLACE] for  ( int i = 0; i < delegates.length; i++ )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^map.put ( delegate, new Integer ( i )  ) ;^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( Iterator indext = collect.iterator (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^if  ( !map.get ( indexface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^if  ( ! ( map.containsKey ( iface )  )  )   { map.put ( iface, new Integer ( i )  ) ; }^223^^^^^213^236^[REPLACE] map.put ( iface, new Integer ( i )  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Class iface =  ( Class ) it.hasNext (  ) ;^221^^^^^213^236^[REPLACE] Class iface =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Map map = new HashMap (  ) ;^217^^^^^213^236^[REPLACE] Class delegate = delegates[i].getClass (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( Iterator it = collect.clear (  ) ; it.hasNext (  ) ; )  {^220^^^^^213^236^[REPLACE] for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^if  ( !map.containsKey ( indexface )  )  {^222^^^^^213^236^[REPLACE] if  ( !map.containsKey ( iface )  )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0 ; i < delegates.length; i++ )  {^216^^^^^213^236^[REPLACE] for  ( int i = 0; i < delegates.length; i++ )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^217^^^^^213^236^[ADD] Class delegate = delegates[i].getClass (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Class key =  ( Class ) it.next (  ) ;^221^^^^^213^236^[REPLACE] Class iface =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^221^222^223^224^^213^236^[ADD] Class iface =  ( Class ) it.next (  ) ; if  ( !map.containsKey ( iface )  )  { map.put ( iface, new Integer ( i )  ) ; }^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^classes =  new Class[null.size (  ) ];^227^^^^^213^236^[REPLACE] classes = new Class[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^route =  new int[null.size (  ) ];^228^^^^^213^236^[REPLACE] route = new int[map.size (  ) ];^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^228^229^^^^213^236^[ADD] route = new int[map.size (  ) ]; int index = 0;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^int index = 1;^229^^^^^213^236^[REPLACE] int index = 0;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( int i = 0; i < delegates.length; i++ )  {^230^^^^^213^236^[REPLACE] for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^classes[index] ;^232^^^^^213^236^[REPLACE] classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^route[index]  =  route[index] ;^233^^^^^213^236^[REPLACE] route[index] =  (  ( Integer ) map.get ( key )  ) .intValue (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Class key =  ( Class ) it.hasNext (  ) ;^231^^^^^213^236^[REPLACE] Class key =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^classes[index]  =  classes[index] ;^232^^^^^213^236^[REPLACE] classes[index] = key;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^for  ( Iterator it = collect.iterator (  ) ; it.hasNext (  ) ; )  { Class iface =  ( Class ) it.next (  ) ;^230^^^^^213^236^[REPLACE] for  ( Iterator it = map.keySet (  ) .iterator (  ) ; it.hasNext (  ) ; )  {^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[REPLACE]^Class iface =  ( Class ) it.next (  ) ;^231^^^^^213^236^[REPLACE] Class key =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
[ADD]^^231^^^^^213^236^[ADD] Class key =  ( Class ) it.next (  ) ;^[METHOD] <init> [TYPE] Object[]) [PARAMETER] Object[] delegates [CLASS] Route   [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  ArrayList collect  [TYPE]  Iterator it  [TYPE]  int[] route  [TYPE]  Class delegate  iface  key  [TYPE]  Map map  [TYPE]  Object[] delegates  [TYPE]  int i  index 
