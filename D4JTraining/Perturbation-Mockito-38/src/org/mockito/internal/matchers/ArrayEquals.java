[ADD]^^19^^^^^18^42^[ADD] Object wanted = getWanted (  ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^if  (  actual == null )  {^20^^^^^18^42^[REPLACE] if  ( wanted == null || actual == null )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof boolean[] && actual instanceof boolean[] )  {^22^^^^^18^42^[REPLACE] } else if  ( wanted instanceof boolean[] && actual instanceof boolean[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( boolean[] )  wanted,  ( boolean[] )  actual ) ;return Arrays.equals (  ( byte[] )  wanted,  ( byte[] )  actual ) ;^22^23^24^25^^18^42^[ADD] else if  ( wanted instanceof boolean[] && actual instanceof boolean[] )  { return Arrays.equals (  ( boolean[] )  wanted,  ( boolean[] )  actual ) ; } else if  ( wanted instanceof byte[] && actual instanceof byte[] )  { return Arrays.equals (  ( byte[] )  wanted,  ( byte[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^24^^^^^18^42^[REPLACE] } else if  ( wanted instanceof byte[] && actual instanceof byte[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REMOVE]^if  (  ( wanted instanceof boolean[] )  &&  ( actual instanceof boolean[] )  )  {     return equals (  (  ( boolean[] )   ( wanted )  ) ,  (  ( boolean[] )   ( actual )  )  ) ; }else     if  (  ( wanted instanceof byte[] )  &&  ( actual instanceof byte[] )  )  {         return equals (  (  ( byte[] )   ( wanted )  ) ,  (  ( byte[] )   ( actual )  )  ) ;     }else         if  (  ( wanted instanceof char[] )  &&  ( actual instanceof char[] )  )  {             return equals (  (  ( char[] )   ( wanted )  ) ,  (  ( char[] )   ( actual )  )  ) ;         }else             if  (  ( wanted instanceof double[] )  &&  ( actual instanceof double[] )  )  {                 return equals (  (  ( double[] )   ( wanted )  ) ,  (  ( double[] )   ( actual )  )  ) ;             }else                 if  (  ( wanted instanceof float[] )  &&  ( actual instanceof float[] )  )  {                     return equals (  (  ( float[] )   ( wanted )  ) ,  (  ( float[] )   ( actual )  )  ) ;                 }else                     if  (  ( wanted instanceof int[] )  &&  ( actual instanceof int[] )  )  {                         return equals (  (  ( int[] )   ( wanted )  ) ,  (  ( int[] )   ( actual )  )  ) ;                     }else                         if  (  ( wanted instanceof long[] )  &&  ( actual instanceof long[] )  )  {                             return equals (  (  ( long[] )   ( wanted )  ) ,  (  ( long[] )   ( actual )  )  ) ;                         }else                             if  (  ( wanted instanceof short[] )  &&  ( actual instanceof short[] )  )  {                                 return equals (  (  ( short[] )   ( wanted )  ) ,  (  ( short[] )   ( actual )  )  ) ;                             }else                                 if  (  ( wanted instanceof Object[] )  &&  ( actual instanceof Object[] )  )  {                                     return equals (  (  ( Object[] )   ( wanted )  ) ,  (  ( Object[] )   ( actual )  )  ) ;                                 }^24^^^^^18^42^[REMOVE] ^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof long[] && actual instanceof long[] )  {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REMOVE]^if  (  ( wanted instanceof Object[] )  &&  ( actual instanceof Object[] )  )  {     return equals (  (  ( Object[] )   ( wanted )  ) ,  (  ( Object[] )   ( actual )  )  ) ; }^36^^^^^18^42^[REMOVE] ^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof Object[] ) {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}^38^39^40^^^18^42^[ADD] else if  ( wanted instanceof Object[] && actual instanceof Object[] )  { return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ; }^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , null )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , this )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof short[] && actual instanceof short[] )  {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof Object[] && actual instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , null )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^34^35^36^37^^18^42^[ADD] else if  ( wanted instanceof long[] && actual instanceof long[] )  { return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ; } else if  ( wanted instanceof short[] && actual instanceof short[] )  { return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , null )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof short[] ) {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^36^37^38^39^40^18^42^[ADD] else if  ( wanted instanceof short[] && actual instanceof short[] )  { return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ; } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  { return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ; }^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof Object[] && actual instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , false )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^32^33^34^35^^18^42^[ADD] else if  ( wanted instanceof int[] && actual instanceof int[] )  { return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ; } else if  ( wanted instanceof long[] && actual instanceof long[] )  { return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^36^37^38^39^40^18^42^[ADD] else if  ( wanted instanceof short[] && actual instanceof short[] )  { return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ; } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  { return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ; }^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  actual instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 1 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , null )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^38^39^40^^^18^42^[ADD] else if  ( wanted instanceof Object[] && actual instanceof Object[] )  { return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ; }^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , null )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , null )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , 1 )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^34^35^36^37^^18^42^[ADD] else if  ( wanted instanceof long[] && actual instanceof long[] )  { return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ; } else if  ( wanted instanceof short[] && actual instanceof short[] )  { return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof short[] && actual instanceof short[] )  {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! actual instanceof Object[] ) {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , this )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , this )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , this )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , true )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REMOVE]^if  (  ( wanted instanceof boolean[] )  &&  ( actual instanceof boolean[] )  )  {     return equals (  (  ( boolean[] )   ( wanted )  ) ,  (  ( boolean[] )   ( actual )  )  ) ; }else     if  (  ( wanted instanceof byte[] )  &&  ( actual instanceof byte[] )  )  {         return equals (  (  ( byte[] )   ( wanted )  ) ,  (  ( byte[] )   ( actual )  )  ) ;     }else         if  (  ( wanted instanceof char[] )  &&  ( actual instanceof char[] )  )  {             return equals (  (  ( char[] )   ( wanted )  ) ,  (  ( char[] )   ( actual )  )  ) ;         }else             if  (  ( wanted instanceof double[] )  &&  ( actual instanceof double[] )  )  {                 return equals (  (  ( double[] )   ( wanted )  ) ,  (  ( double[] )   ( actual )  )  ) ;             }else                 if  (  ( wanted instanceof float[] )  &&  ( actual instanceof float[] )  )  {                     return equals (  (  ( float[] )   ( wanted )  ) ,  (  ( float[] )   ( actual )  )  ) ;                 }else                     if  (  ( wanted instanceof int[] )  &&  ( actual instanceof int[] )  )  {                         return equals (  (  ( int[] )   ( wanted )  ) ,  (  ( int[] )   ( actual )  )  ) ;                     }else                         if  (  ( wanted instanceof long[] )  &&  ( actual instanceof long[] )  )  {                             return equals (  (  ( long[] )   ( wanted )  ) ,  (  ( long[] )   ( actual )  )  ) ;                         }else                             if  (  ( wanted instanceof short[] )  &&  ( actual instanceof short[] )  )  {                                 return equals (  (  ( short[] )   ( wanted )  ) ,  (  ( short[] )   ( actual )  )  ) ;                             }else                                 if  (  ( wanted instanceof Object[] )  &&  ( actual instanceof Object[] )  )  {                                     return equals (  (  ( Object[] )   ( wanted )  ) ,  (  ( Object[] )   ( actual )  )  ) ;                                 }^30^^^^^18^42^[REMOVE] ^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof int[] && wanted instanceof int[] )  {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 1 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , null )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof Object[] ) {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , this )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! actual instanceof int[] && actual instanceof int[] )  {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , true )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , this )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , true )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , true )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , this )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , null )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 0 )   actual ) ;^27^^^^^18^42^[REPLACE] return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof double[] ) {^28^^^^^18^42^[REPLACE] } else if  ( wanted instanceof double[] && actual instanceof double[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof int[] && actual instanceof int[] )  {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , this )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 1 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , false )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , 1 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , null )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , 1 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , false )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , null )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^32^33^34^35^^18^42^[ADD] else if  ( wanted instanceof int[] && actual instanceof int[] )  { return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ; } else if  ( wanted instanceof long[] && actual instanceof long[] )  { return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , null )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , false )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , this )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , true )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , false )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , this )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof float[] && actual instanceof float[] )  {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof Object[] && wanted instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , this )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  (  actual instanceof short[] )  {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 0 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , false )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  wanted instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , null )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  actual instanceof long[] )  {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , false )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , null )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^27^^^^^18^42^[REPLACE] return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , this )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^25^^^^^18^42^[REPLACE] return Arrays.equals (  ( byte[] )  wanted,  ( byte[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof char[] && actual instanceof char[] )  {^26^^^^^18^42^[REPLACE] } else if  ( wanted instanceof char[] && actual instanceof char[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^26^27^28^29^^18^42^[ADD] else if  ( wanted instanceof char[] && actual instanceof char[] )  { return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ; } else if  ( wanted instanceof double[] && actual instanceof double[] )  { return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof double[] && actual instanceof double[] )  {^28^^^^^18^42^[REPLACE] } else if  ( wanted instanceof double[] && actual instanceof double[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof float[] && actual instanceof float[] )  {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , false )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , null )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof long[] && actual instanceof long[] )  {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , true )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , null )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , 0 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  (  actual instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 1 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , this )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof float[] ) {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof int[] && actual instanceof int[] )  {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , false )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , this )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , false )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof int[] ) {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , null )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , null )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , this )   actual ) ;^27^^^^^18^42^[REPLACE] return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof long[] ) {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , null )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , this )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , null )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! actual instanceof short[] ) {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , 0 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , this )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  (  actual instanceof long[] )  {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof Object[] && wanted instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , true )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , this )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! actual instanceof float[] && actual instanceof float[] )  {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , this )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof short[] ) {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 0 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , true )   actual ) ;^25^^^^^18^42^[REPLACE] return Arrays.equals (  ( byte[] )  wanted,  ( byte[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , true )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays.equals  (    (  Object[]  )   wanted,   (  Object[]  )   actual  )  ;  ;^23^^^^^18^42^[REPLACE] return Arrays.equals (  ( boolean[] )  wanted,  ( boolean[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof byte[] && actual instanceof byte[] )  {^24^^^^^18^42^[REPLACE] } else if  ( wanted instanceof byte[] && actual instanceof byte[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^28^29^30^31^^18^42^[ADD] else if  ( wanted instanceof double[] && actual instanceof double[] )  { return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ; } else if  ( wanted instanceof float[] && actual instanceof float[] )  { return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^30^31^32^33^^18^42^[ADD] else if  ( wanted instanceof float[] && actual instanceof float[] )  { return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ; } else if  ( wanted instanceof int[] && actual instanceof int[] )  { return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof long[] ) {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , 0 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , this )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  actual instanceof int[] )  {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , true )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! actual instanceof short[] ) {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , false )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^28^29^30^31^^18^42^[ADD] else if  ( wanted instanceof double[] && actual instanceof double[] )  { return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ; } else if  ( wanted instanceof float[] && actual instanceof float[] )  { return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , this )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , 0 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 0 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 0 )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^27^^^^^18^42^[REPLACE] return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 1 )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , true )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^28^^^^^18^42^[REPLACE] } else if  ( wanted instanceof double[] && actual instanceof double[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , true )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , false )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , 0 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , false )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! actual instanceof Object[] && actual instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^30^31^32^33^^18^42^[ADD] else if  ( wanted instanceof float[] && actual instanceof float[] )  { return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ; } else if  ( wanted instanceof int[] && actual instanceof int[] )  { return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 1 )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , true )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , null )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , 1 )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^28^^^^^18^42^[REPLACE] } else if  ( wanted instanceof double[] && actual instanceof double[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , 1 )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , 1 )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , true )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , this )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  actual instanceof float[] )  {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! actual instanceof long[] ) {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , 0 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , this )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return super.matches  (  actual  )  ;  ;^21^^^^^18^42^[REPLACE] return super.matches ( actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^22^^^^^18^42^[REPLACE] } else if  ( wanted instanceof boolean[] && actual instanceof boolean[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  else {^26^^^^^18^42^[REPLACE] } else if  ( wanted instanceof char[] && actual instanceof char[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REMOVE]^if  (  ( wanted instanceof boolean[] )  &&  ( actual instanceof boolean[] )  )  {     return equals (  (  ( boolean[] )   ( wanted )  ) ,  (  ( boolean[] )   ( actual )  )  ) ; }else     if  (  ( wanted instanceof byte[] )  &&  ( actual instanceof byte[] )  )  {         return equals (  (  ( byte[] )   ( wanted )  ) ,  (  ( byte[] )   ( actual )  )  ) ;     }else         if  (  ( wanted instanceof char[] )  &&  ( actual instanceof char[] )  )  {             return equals (  (  ( char[] )   ( wanted )  ) ,  (  ( char[] )   ( actual )  )  ) ;         }else             if  (  ( wanted instanceof double[] )  &&  ( actual instanceof double[] )  )  {                 return equals (  (  ( double[] )   ( wanted )  ) ,  (  ( double[] )   ( actual )  )  ) ;             }else                 if  (  ( wanted instanceof float[] )  &&  ( actual instanceof float[] )  )  {                     return equals (  (  ( float[] )   ( wanted )  ) ,  (  ( float[] )   ( actual )  )  ) ;                 }else                     if  (  ( wanted instanceof int[] )  &&  ( actual instanceof int[] )  )  {                         return equals (  (  ( int[] )   ( wanted )  ) ,  (  ( int[] )   ( actual )  )  ) ;                     }else                         if  (  ( wanted instanceof long[] )  &&  ( actual instanceof long[] )  )  {                             return equals (  (  ( long[] )   ( wanted )  ) ,  (  ( long[] )   ( actual )  )  ) ;                         }else                             if  (  ( wanted instanceof short[] )  &&  ( actual instanceof short[] )  )  {                                 return equals (  (  ( short[] )   ( wanted )  ) ,  (  ( short[] )   ( actual )  )  ) ;                             }else                                 if  (  ( wanted instanceof Object[] )  &&  ( actual instanceof Object[] )  )  {                                     return equals (  (  ( Object[] )   ( wanted )  ) ,  (  ( Object[] )   ( actual )  )  ) ;                                 }^28^^^^^18^42^[REMOVE] ^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  wanted instanceof float[] )  {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! actual instanceof Object[] && actual instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , null )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  (  actual instanceof int[] )  {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , true )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , true )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , false )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , null )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , this )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , 1 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  (  wanted instanceof Object[] )  {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof float[] ) {^30^^^^^18^42^[REPLACE] } else if  ( wanted instanceof float[] && actual instanceof float[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! actual instanceof long[] && actual instanceof long[] )  {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , 1 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , 0 )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , true )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  (  actual instanceof short[] )  {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , true )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , false )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , null )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 1 )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , null )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , this )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , null )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , 0 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , true )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( null , true )   actual ) ;^33^^^^^18^42^[REPLACE] return Arrays.equals (  ( int[] )  wanted,  ( int[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , 1 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof short[] && wanted instanceof short[] )  {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[ADD]^}   return Arrays.equals (  ( byte[] )  wanted,  ( byte[] )  actual ) ;return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^24^25^26^27^^18^42^[ADD] else if  ( wanted instanceof byte[] && actual instanceof byte[] )  { return Arrays.equals (  ( byte[] )  wanted,  ( byte[] )  actual ) ; } else if  ( wanted instanceof char[] && actual instanceof char[] )  { return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof long[] && wanted instanceof long[] )  {^34^^^^^18^42^[REPLACE] } else if  ( wanted instanceof long[] && actual instanceof long[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 0 , true )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 0 )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! wanted instanceof double[] && actual instanceof double[] )  {^28^^^^^18^42^[REPLACE] } else if  ( wanted instanceof double[] && actual instanceof double[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , 1 )   actual ) ;^31^^^^^18^42^[REPLACE] return Arrays.equals (  ( float[] )  wanted,  ( float[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if  ( ! actual instanceof Object[] ) {^38^^^^^18^42^[REPLACE] } else if  ( wanted instanceof Object[] && actual instanceof Object[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , 0 )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^} else if   (  wanted instanceof byte[] && actual instanceof byte[]  )   {  ;^26^^^^^18^42^[REPLACE] } else if  ( wanted instanceof char[] && actual instanceof char[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof short[] && wanted instanceof short[] )  {^36^^^^^18^42^[REPLACE] } else if  ( wanted instanceof short[] && actual instanceof short[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^}  if  ( ! wanted instanceof int[] ) {^32^^^^^18^42^[REPLACE] } else if  ( wanted instanceof int[] && actual instanceof int[] )  {^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( 1 , true )   actual ) ;^39^^^^^18^42^[REPLACE] return Arrays.equals (  ( Object[] )  wanted,  ( Object[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , true )   actual ) ;^35^^^^^18^42^[REPLACE] return Arrays.equals (  ( long[] )  wanted,  ( long[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( true , false )   actual ) ;^37^^^^^18^42^[REPLACE] return Arrays.equals (  ( short[] )  wanted,  ( short[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( this , this )   actual ) ;^27^^^^^18^42^[REPLACE] return Arrays.equals (  ( char[] )  wanted,  ( char[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return Arrays .equals ( false , 0 )   actual ) ;^29^^^^^18^42^[REPLACE] return Arrays.equals (  ( double[] )  wanted,  ( double[] )  actual ) ;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
[REPLACE]^return true;^41^^^^^18^42^[REPLACE] return false;^[METHOD] matches [TYPE] boolean [PARAMETER] Object actual [CLASS] ArrayEquals   [TYPE]  boolean false  true  [TYPE]  Object actual  wanted 
