[REPLACE]^this.wanted =  null;^129^^^^^128^130^[REPLACE] this.wanted = wanted;^[METHOD] <init> [TYPE] InvocationMatcher) [PARAMETER] InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  boolean false  true 
[REPLACE]^return ListUtil.filter ( unverified, new RemoveNotMatching ( wanted )  ) ;^17^^^^^16^18^[REPLACE] return ListUtil.filter ( invocations, new RemoveNotMatching ( wanted )  ) ;^[METHOD] findInvocations [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true 
[REPLACE]^List<Invocation> unverified = removeVerifiedInOrder ( null ) ;^21^^^^^20^23^[REPLACE] List<Invocation> unverified = removeVerifiedInOrder ( invocations ) ;^[METHOD] findAllMatchingUnverifiedChunks [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true 
[REPLACE]^return ListUtil.filter ( unverified,  new RemoveUnverifiedInOrder (  )   ) ;^22^^^^^20^23^[REPLACE] return ListUtil.filter ( unverified, new RemoveNotMatching ( wanted )  ) ;^[METHOD] findAllMatchingUnverifiedChunks [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true 
[REPLACE]^List<Invocation> unverified = removeVerifiedInOrder ( false ) ;^41^^^^^40^49^[REPLACE] List<Invocation> unverified = removeVerifiedInOrder ( invocations ) ;^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[ADD]^^41^42^^44^45^40^49^[ADD] List<Invocation> unverified = removeVerifiedInOrder ( invocations ) ; List<Invocation> firstChunk = getFirstMatchingChunk ( wanted, unverified ) ; if  ( wantedCount != firstChunk.size (  )  )  { return this.findAllMatchingUnverifiedChunks ( invocations, wanted ) ;^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[REPLACE]^List<Invocation> firstChunk = getFirstMatchingChunk ( wanted, false ) ;^42^^^^^40^49^[REPLACE] List<Invocation> firstChunk = getFirstMatchingChunk ( wanted, unverified ) ;^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[REPLACE]^if  ( wantedCount != firstChunk .isEmpty (  )   + 2 )  {^44^^^^^40^49^[REPLACE] if  ( wantedCount != firstChunk.size (  )  )  {^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[REPLACE]^return firstSimilar;^47^^^^^40^49^[REPLACE] return firstChunk;^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[REPLACE]^return this.findInvocations ( invocations, wanted ) ;^45^^^^^40^49^[REPLACE] return this.findAllMatchingUnverifiedChunks ( invocations, wanted ) ;^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[REPLACE]^return false;^47^^^^^40^49^[REPLACE] return firstChunk;^[METHOD] findMatchingChunk [TYPE] List [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  invocations  unverified  [TYPE]  boolean false  true  [TYPE]  int wantedCount 
[REPLACE]^List<Invocation> unverified = new LinkedList<Invocation> (  ) ;^52^^^^^51^61^[REPLACE] List<Invocation> firstChunk = new LinkedList<Invocation> (  ) ;^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^if  ( wanted.hasSameMethod ( invocation )  )  {^54^^^^^51^61^[REPLACE] if  ( wanted.matches ( invocation )  )  {^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^}  if  ( !firstChunk.add (  )  )  {^56^^^^^51^61^[REPLACE] } else if  ( !firstChunk.isEmpty (  )  )  {^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^if  ( !wanted.hasSimilarMethod ( invocation )  )  { continue;^55^^^^^51^61^[REPLACE] firstChunk.add ( invocation ) ;^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^}  else {^56^^^^^51^61^[REPLACE] } else if  ( !firstChunk.isEmpty (  )  )  {^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[ADD]^}   break;^56^57^58^^^51^61^[ADD] else if  ( !firstChunk.isEmpty (  )  )  { break; }^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^List<Invocation> firstChunk = getFirstMatchingChunk ( wanted, unverified ) ;^53^^^^^51^61^[REPLACE] for  ( Invocation invocation : unverified )  {^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^return this;^60^^^^^51^61^[REPLACE] return firstChunk;^[METHOD] getFirstMatchingChunk [TYPE] List [PARAMETER] InvocationMatcher wanted Invocation> unverified [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List firstChunk  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation invocation 
[REPLACE]^Invocation firstSimilar = this;^64^^^^^63^78^[REPLACE] Invocation firstSimilar = null;^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^if  ( !wanted .hasSameMethod ( invocation )   )  {^66^^^^^63^78^[REPLACE] if  ( !wanted.hasSimilarMethod ( invocation )  )  {^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[ADD]^^66^67^68^^^63^78^[ADD] if  ( !wanted.hasSimilarMethod ( invocation )  )  { continue; }^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^if  (invocation != null )  {^69^^^^^63^78^[REPLACE] if  ( firstSimilar == null )  {^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^firstSimilar =  null;^70^^^^^63^78^[REPLACE] firstSimilar = invocation;^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^if  ( wanted .hasSimilarMethod ( invocation )   )  {^72^^^^^63^78^[REPLACE] if  ( wanted.hasSameMethod ( invocation )  )  {^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^return firstSimilar;^73^^^^^63^78^[REPLACE] return invocation;^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^List<Invocation> unverified = new LinkedList<Invocation> (  ) ;^65^^^^^63^78^[REPLACE] for  ( Invocation invocation : invocations )  {^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^return invocation;^77^^^^^63^78^[REPLACE] return firstSimilar;^[METHOD] findSimilarInvocation [TYPE] Invocation [PARAMETER] Invocation> invocations InvocationMatcher wanted [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation firstSimilar  invocation 
[REPLACE]^return findFirstUnverified ( invocations, false ) ;^81^^^^^80^82^[REPLACE] return findFirstUnverified ( invocations, null ) ;^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true 
[REPLACE]^if  ( i.isVerified (  )  && mockIsValid )  {^87^^^^^84^92^[REPLACE] if  ( !i.isVerified (  )  && mockIsValid )  {^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[ADD]^^87^88^89^^^84^92^[ADD] if  ( !i.isVerified (  )  && mockIsValid )  { return i; }^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[REPLACE]^return firstSimilar;^88^^^^^84^92^[REPLACE] return i;^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[REPLACE]^List<Invocation> unverified = new LinkedList<Invocation> (  ) ;^85^^^^^84^92^[REPLACE] for  ( Invocation i : invocations )  {^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[ADD]^^85^86^87^88^89^84^92^[ADD] for  ( Invocation i : invocations )  { boolean mockIsValid = mock == null || mock == i.getMock (  ) ; if  ( !i.isVerified (  )  && mockIsValid )  { return i; }^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[REPLACE]^boolean mockIsValid = mock == false  ==  mock == i.getMock (  ) ;^86^^^^^84^92^[REPLACE] boolean mockIsValid = mock == null || mock == i.getMock (  ) ;^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[REPLACE]^return true;^91^^^^^84^92^[REPLACE] return null;^[METHOD] findFirstUnverified [TYPE] Invocation [PARAMETER] Invocation> invocations Object mock [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  Object mock  [TYPE]  boolean false  mockIsValid  true  [TYPE]  Invocation i 
[REPLACE]^if  ( wanted.matches ( invocation )  )  {^95^^^^^94^101^[REPLACE] if  ( invocations.isEmpty (  )  )  {^[METHOD] getLastLocation [TYPE] Location [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation last 
[REPLACE]^return last.getMock (  ) ;^99^^^^^94^101^[REPLACE] return last.getLocation (  ) ;^[METHOD] getLastLocation [TYPE] Location [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation last 
[REPLACE]^Invocation last = invocations.get ( invocations.length (  )  - 1 ) ;^98^^^^^94^101^[REPLACE] Invocation last = invocations.get ( invocations.size (  )  - 1 ) ;^[METHOD] getLastLocation [TYPE] Location [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation last 
[REPLACE]^return this;^96^^^^^94^101^[REPLACE] return null;^[METHOD] getLastLocation [TYPE] Location [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation last 
[REPLACE]^Invocation last = invocations.get ( invocations.size (  )  *  2 - 0  ) ;^98^^^^^94^101^[REPLACE] Invocation last = invocations.get ( invocations.size (  )  - 1 ) ;^[METHOD] getLastLocation [TYPE] Location [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  Invocation last 
[REPLACE]^LinkedList<Invocation> verifiedOnly = ListUtil.filter ( true, new RemoveUnverifiedInOrder (  )  ) ;^104^^^^^103^111^[REPLACE] LinkedList<Invocation> verifiedOnly = ListUtil.filter ( invocations, new RemoveUnverifiedInOrder (  )  ) ;^[METHOD] findPreviousVerifiedInOrder [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  LinkedList verifiedOnly 
[ADD]^^104^105^106^107^^103^111^[ADD] LinkedList<Invocation> verifiedOnly = ListUtil.filter ( invocations, new RemoveUnverifiedInOrder (  )  ) ;  if  ( verifiedOnly.isEmpty (  )  )  { return null;^[METHOD] findPreviousVerifiedInOrder [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  LinkedList verifiedOnly 
[REPLACE]^if  ( this.isEmpty (  )  )  {^106^^^^^103^111^[REPLACE] if  ( verifiedOnly.isEmpty (  )  )  {^[METHOD] findPreviousVerifiedInOrder [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  LinkedList verifiedOnly 
[REPLACE]^return verifiedOnly .LinkedList (  )  ;^109^^^^^103^111^[REPLACE] return verifiedOnly.getLast (  ) ;^[METHOD] findPreviousVerifiedInOrder [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  LinkedList verifiedOnly 
[REPLACE]^return this;^107^^^^^103^111^[REPLACE] return null;^[METHOD] findPreviousVerifiedInOrder [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  LinkedList verifiedOnly 
[REPLACE]^return null .LinkedList (  )  ;^109^^^^^103^111^[REPLACE] return verifiedOnly.getLast (  ) ;^[METHOD] findPreviousVerifiedInOrder [TYPE] Invocation [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  [TYPE]  boolean false  true  [TYPE]  LinkedList verifiedOnly 
[REPLACE]^List<Invocation> firstChunk = getFirstMatchingChunk ( wanted, unverified ) ;^114^^^^^113^123^[REPLACE] List<Invocation> unverified = new LinkedList<Invocation> (  ) ;^[METHOD] removeVerifiedInOrder [TYPE] List [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation i 
[REPLACE]^if  ( wanted.matches ( invocation )  )  {^116^^^^^113^123^[REPLACE] if  ( i.isVerifiedInOrder (  )  )  {^[METHOD] removeVerifiedInOrder [TYPE] List [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation i 
[REPLACE]^unverified .get (  )  ;^117^^^^^113^123^[REPLACE] unverified.clear (  ) ;^[METHOD] removeVerifiedInOrder [TYPE] List [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation i 
[REPLACE]^List<Invocation> unverified = new LinkedList<Invocation> (  ) ;^115^^^^^113^123^[REPLACE] for  ( Invocation i : invocations )  {^[METHOD] removeVerifiedInOrder [TYPE] List [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation i 
[ADD]^^115^116^117^118^119^113^123^[ADD] for  ( Invocation i : invocations )  { if  ( i.isVerifiedInOrder (  )  )  { unverified.clear (  ) ; } else { unverified.add ( i ) ;^[METHOD] removeVerifiedInOrder [TYPE] List [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation i 
[REPLACE]^return null;^122^^^^^113^123^[REPLACE] return unverified;^[METHOD] removeVerifiedInOrder [TYPE] List [PARAMETER] Invocation> invocations [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  InvocationMatcher wanted  [TYPE]  List invocations  unverified  [TYPE]  boolean false  true  [TYPE]  Invocation i 
[REPLACE]^return firstSimilar;^133^^^^^132^134^[REPLACE] return !wanted.matches ( invocation ) ;^[METHOD] isOut [TYPE] boolean [PARAMETER] Invocation invocation [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher wanted  [TYPE]  boolean false  true 
[REPLACE]^return !invocation .isVerified (  )  ;^139^^^^^138^140^[REPLACE] return !invocation.isVerifiedInOrder (  ) ;^[METHOD] isOut [TYPE] boolean [PARAMETER] Invocation invocation [CLASS] InvocationsFinder RemoveNotMatching RemoveUnverifiedInOrder   [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher wanted  [TYPE]  boolean false  true 
[REPLACE]^this.wanted =  null;^129^^^^^128^130^[REPLACE] this.wanted = wanted;^[METHOD] <init> [TYPE] InvocationMatcher) [PARAMETER] InvocationMatcher wanted [CLASS] RemoveNotMatching   [TYPE]  InvocationMatcher wanted  [TYPE]  boolean false  true 
