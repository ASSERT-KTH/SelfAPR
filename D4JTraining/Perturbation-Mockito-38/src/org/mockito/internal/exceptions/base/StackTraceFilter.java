[REPLACE]^int i = 0  ;^29^^^^^27^54^[REPLACE] List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^int firstBad = -1  ;^31^^^^^27^54^[REPLACE] int lastBad = -1;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^32^^^^^27^54^[ADD] int firstBad = -1;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( !this.isBad ( null .subList ( lastBad , i )   )  )  {^34^^^^^27^54^[REPLACE] if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  (lastBad  &&  -1 )  {^38^^^^^27^54^[REPLACE] if  ( firstBad == -1 )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^lastBad = i  ;^39^^^^^27^54^[REPLACE] firstBad = i;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^firstBad = i  ;^37^^^^^27^54^[REPLACE] lastBad = i;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^for  ( int i = 0 ; i < unfilteredStackTrace.size (  ) ; i++ )  {^33^^^^^27^54^[REPLACE] for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^int i = 0  ;^43^^^^^27^54^[REPLACE] List<StackTraceElement> top;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( keepTop ) {^44^^^^^27^54^[REPLACE] if  ( keepTop && firstBad != -1 )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^top = unfilteredStackTrace.subList ( 0, firstBad ) ;top = new LinkedList<StackTraceElement> (  ) ;^44^45^46^47^48^27^54^[ADD] if  ( keepTop && firstBad != -1 )  { top = unfilteredStackTrace.subList ( 0, firstBad ) ; } else { top = new LinkedList<StackTraceElement> (  ) ; }^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^top =  new StackTraceElement> ( top )  ;^47^^^^^44^48^[REPLACE] top = new LinkedList<StackTraceElement> (  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^45^^^^^27^54^[ADD] top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^top = unfilteredStackTrace.subList ( 2, firstBad ) ;^45^^^^^27^54^[REPLACE] top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^top =  new StackTraceElement> ( top )  ;^47^^^^^27^54^[REPLACE] top = new LinkedList<StackTraceElement> (  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( firstBad + 0 , unfilteredStackTrace.size (  )  *  2 ) ;^50^^^^^27^54^[REPLACE] List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( null ) ;^51^^^^^27^54^[REPLACE] List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^filtered.get ( bottom ) ;^52^^^^^27^54^[REPLACE] filtered.addAll ( bottom ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^52^^^^^27^54^[ADD] filtered.addAll ( bottom ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^return null.toArray ( new StackTraceElement[]{} ) ;^53^^^^^27^54^[REPLACE] return filtered.toArray ( new StackTraceElement[]{} ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
