[REPLACE]^boolean fromMockObject = e.getClassName (  ) .startsWith ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^15^^^^^14^20^[REPLACE] boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^[METHOD] isBad [TYPE] boolean [PARAMETER] StackTraceElement e [CLASS] StackTraceFilter   [TYPE]  boolean false  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  true  [TYPE]  StackTraceElement e 
[REPLACE]^boolean fromOrgMockito = e.getClassName (  ) .contains ( "org.mockito." ) ;^16^^^^^14^20^[REPLACE] boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[METHOD] isBad [TYPE] boolean [PARAMETER] StackTraceElement e [CLASS] StackTraceFilter   [TYPE]  boolean false  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  true  [TYPE]  StackTraceElement e 
[REPLACE]^boolean isRunner = e.getClassName (  ) .contains ( "org.mockito.runners." ) ;^17^^^^^14^20^[REPLACE] boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[METHOD] isBad [TYPE] boolean [PARAMETER] StackTraceElement e [CLASS] StackTraceFilter   [TYPE]  boolean false  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  true  [TYPE]  StackTraceElement e 
[REPLACE]^boolean isInternalRunner = e.getClassName (  ) .contains ( "org.mockito.internal.runners." ) ;^18^^^^^14^20^[REPLACE] boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[METHOD] isBad [TYPE] boolean [PARAMETER] StackTraceElement e [CLASS] StackTraceFilter   [TYPE]  boolean false  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  true  [TYPE]  StackTraceElement e 
[ADD]^^18^19^^^^14^20^[ADD] boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ; return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[METHOD] isBad [TYPE] boolean [PARAMETER] StackTraceElement e [CLASS] StackTraceFilter   [TYPE]  boolean false  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  true  [TYPE]  StackTraceElement e 
[REPLACE]^return  ( fromMockObject || fromOrgMockito )  ;^19^^^^^14^20^[REPLACE] return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[METHOD] isBad [TYPE] boolean [PARAMETER] StackTraceElement e [CLASS] StackTraceFilter   [TYPE]  boolean false  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  true  [TYPE]  StackTraceElement e 
[REPLACE]^List<StackTraceElement> unfilteredStackTrace =   target   ;^29^^^^^27^54^[REPLACE] List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^29^^^^^27^54^[ADD] List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^int lastBad = -1 - 3;^31^^^^^27^54^[REPLACE] int lastBad = -1;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^int firstBad = -4;^32^^^^^27^54^[REPLACE] int firstBad = -1;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( !this.isBad ( false.toArray ( i )  )  )  {^34^^^^^27^54^[REPLACE] if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^continue;^34^35^36^^^27^54^[ADD] if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  { continue; }^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( firstBad  &&  -1 )  {^38^^^^^27^54^[REPLACE] if  ( firstBad == -1 )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^lastBad = i; ;^39^^^^^27^54^[REPLACE] firstBad = i;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^for  ( int i = 0 ; i < unfilteredStackTrace.size (  )  - 3; i++ )  {^33^^^^^27^54^[REPLACE] for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( !this.isBad ( unfilteredStackTrace.toArray ( firstBad )  )  )  {^34^^^^^27^54^[REPLACE] if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( firstBad  && lastBad )  {^38^^^^^27^54^[REPLACE] if  ( firstBad == -1 )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^firstBad = i; ;^37^^^^^27^54^[REPLACE] lastBad = i;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^37^^^^^27^54^[ADD] lastBad = i;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^39^^^^^27^54^[ADD] firstBad = i;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^for  ( int i = 0 ; i < unfilteredStackTrace.size (  ) ; i++ )  {^33^^^^^27^54^[REPLACE] for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^43^^^^^27^54^[REPLACE] List<StackTraceElement> top;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^if  ( keepTop ) {^44^^^^^27^54^[REPLACE] if  ( keepTop && firstBad != -1 )  {^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^top =  new StackTraceElement> ( top )  ;^47^^^^^44^48^[REPLACE] top = new LinkedList<StackTraceElement> (  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^top = unfilteredStackTrace.subList ( 0L, firstBad ) ;^45^^^^^27^54^[REPLACE] top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^top =  new StackTraceElement> ( top )  ;^47^^^^^27^54^[REPLACE] top = new LinkedList<StackTraceElement> (  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( firstBad + 0 , unfilteredStackTrace.size (  )  %  2 ) ;^50^^^^^27^54^[REPLACE] List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[ADD]^^50^^^^^27^54^[ADD] List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( false ) ;^51^^^^^27^54^[REPLACE] List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^filtered.addAll ( this ) ;^52^^^^^27^54^[REPLACE] filtered.addAll ( bottom ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
[REPLACE]^return null .addAll ( 1 )  ;^53^^^^^27^54^[REPLACE] return filtered.toArray ( new StackTraceElement[]{} ) ;^[METHOD] filter [TYPE] StackTraceElement[] [PARAMETER] StackTraceElement[] target boolean keepTop [CLASS] StackTraceFilter   [TYPE]  boolean false  keepTop  true  [TYPE]  StackTraceElement[] target  [TYPE]  List bottom  filtered  top  unfilteredStackTrace  [TYPE]  int firstBad  i  lastBad 
