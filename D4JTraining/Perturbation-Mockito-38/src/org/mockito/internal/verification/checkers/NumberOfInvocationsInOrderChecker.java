[REPLACE]^private  InvocationsFinder finder;^19^^^^^^^[REPLACE] private final InvocationsFinder finder;^ [CLASS] NumberOfInvocationsInOrderChecker  
[REPLACE]^List<Invocation> chunk = finder.findMatchingChunk ( invocations, wanted, actualCount ) ;^31^^^^^30^46^[REPLACE] List<Invocation> chunk = finder.findMatchingChunk ( invocations, wanted, wantedCount ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^33^^^^^30^46^[ADD] int actualCount = chunk.size (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^if  ( wantedCount  ==  actualCount )  {^35^^^^^30^46^[REPLACE] if  ( wantedCount > actualCount )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REMOVE]^if  ( wantedCount < actualCount )  {     Location firstUndesired = chunk.get ( wantedCount ) .getLocation (  ) ;     reporter.tooManyActualInvocationsInOrder ( wantedCount, actualCount, wanted, firstUndesired ) ; }^35^^^^^30^46^[REMOVE] ^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^} else if  ( wantedCount  ==  actualCount )  {^38^^^^^30^46^[REPLACE] } else if  ( wantedCount < actualCount )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^}   reporter.tooManyActualInvocationsInOrder ( wantedCount, actualCount, wanted, firstUndesired ) ;^38^39^40^41^^30^46^[ADD] else if  ( wantedCount < actualCount )  { Location firstUndesired = chunk.get ( wantedCount ) .getLocation (  ) ; reporter.tooManyActualInvocationsInOrder ( wantedCount, actualCount, wanted, firstUndesired ) ; }^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location firstUndesired = chunk.get ( actualCount ) .getLocation (  ) ;^39^^^^^30^46^[REPLACE] Location firstUndesired = chunk.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^39^^^^^30^46^[ADD] Location firstUndesired = chunk.get ( wantedCount ) .getLocation (  ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^Location lastInvocation = finder .InvocationsFinder (  )  ;^36^^^^^30^46^[REPLACE] Location lastInvocation = finder.getLastLocation ( chunk ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^if   (  wantedCount > actualCount  )   {  ;^38^^^^^30^46^[REPLACE] } else if  ( wantedCount < actualCount )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^reporter.tooLittleActualInvocationsInOrder ( new Discrepancy ( wantedCount, actualCount ) , wanted, lastInvocation ) ;^36^37^^^^30^46^[ADD] Location lastInvocation = finder.getLastLocation ( chunk ) ; reporter.tooLittleActualInvocationsInOrder ( new Discrepancy ( wantedCount, actualCount ) , wanted, lastInvocation ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^39^40^^^^30^46^[ADD] Location firstUndesired = chunk.get ( wantedCount ) .getLocation (  ) ; reporter.tooManyActualInvocationsInOrder ( wantedCount, actualCount, wanted, firstUndesired ) ;^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[REPLACE]^for  ( Invocation i : 1 )  {^43^^^^^30^46^[REPLACE] for  ( Invocation i : chunk )  {^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^44^45^^^^30^46^[ADD] i.markVerifiedInOrder (  ) ; }^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
[ADD]^^43^44^45^^^30^46^[ADD] for  ( Invocation i : chunk )  { i.markVerifiedInOrder (  ) ; }^[METHOD] check [TYPE] void [PARAMETER] Invocation> invocations InvocationMatcher wanted int wantedCount [CLASS] NumberOfInvocationsInOrderChecker   [TYPE]  boolean false  true  [TYPE]  Invocation i  [TYPE]  InvocationsFinder finder  [TYPE]  Reporter reporter  [TYPE]  InvocationMatcher wanted  [TYPE]  List chunk  invocations  [TYPE]  int actualCount  wantedCount  [TYPE]  Location firstUndesired  lastInvocation 
