[REPLACE]^private  LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher> (  ) ;^20^^^^^^^[REPLACE] private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher> (  ) ;^ [CLASS] MockitoStubber  
[REPLACE]^private  MockingProgress mockingProgress;^21^^^^^^^[REPLACE] private final MockingProgress mockingProgress;^ [CLASS] MockitoStubber  
[REPLACE]^private final List<Answer> answersForStubbing  = null ;^22^^^^^^^[REPLACE] private final List<Answer> answersForStubbing = new ArrayList<Answer> (  ) ;^ [CLASS] MockitoStubber  
[REPLACE]^this.mockingProgress =  null;^27^^^^^26^28^[REPLACE] this.mockingProgress = mockingProgress;^[METHOD] <init> [TYPE] MockingProgress) [PARAMETER] MockingProgress mockingProgress [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^invocationForStubbing = invocation; ;^31^^^^^30^32^[REPLACE] this.invocationForStubbing = invocation;^[METHOD] setInvocationForPotentialStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[ADD]^^31^^^^^30^32^[ADD] this.invocationForStubbing = invocation;^[METHOD] setInvocationForPotentialStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^addAnswer ( answer, true ) ;^35^^^^^34^36^[REPLACE] addAnswer ( answer, false ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  Answer answer  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^addAnswer ( answer, false ) ;^39^^^^^38^40^[REPLACE] addAnswer ( answer, true ) ;^[METHOD] addConsecutiveAnswer [TYPE] void [PARAMETER] Answer answer [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  Answer answer  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^for  ( StubbedInvocationMatcher s : stubbed )  { if  ( s.matches ( invocation )  )  {^43^^^^^42^53^[REPLACE] Invocation invocation = invocationForStubbing.getInvocation (  ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^return findAnswerFor ( invocation ) .answer ( invocation ) ;^44^^^^^42^53^[REPLACE] mockingProgress.stubbingCompleted ( invocation ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[ADD]^AnswersValidator answersValidator = new AnswersValidator (  ) ;^44^45^^^^42^53^[ADD] mockingProgress.stubbingCompleted ( invocation ) ; AnswersValidator answersValidator = new AnswersValidator (  ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^for  ( StubbedInvocationMatcher s : stubbed )  { if  ( s.matches ( invocation )  )  {^45^^^^^42^53^[REPLACE] AnswersValidator answersValidator = new AnswersValidator (  ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[ADD]^^45^^^^^42^53^[ADD] AnswersValidator answersValidator = new AnswersValidator (  ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^answersValidator .AnswersValidator (  )  ;^46^^^^^42^53^[REPLACE] answersValidator.validate ( answer, invocation ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^if  ( s.matches ( invocation )  )  {^48^^^^^42^53^[REPLACE] if  ( isConsecutive )  {^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[ADD]^^48^49^50^51^52^42^53^[ADD] if  ( isConsecutive )  { stubbed.getFirst (  ) .addAnswer ( answer ) ; } else { stubbed.addFirst ( new StubbedInvocationMatcher ( invocationForStubbing, answer )  ) ; }^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^stubbed .getFirst (  )  ;^51^^^^^42^53^[REPLACE] stubbed.addFirst ( new StubbedInvocationMatcher ( invocationForStubbing, answer )  ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[ADD]^^51^^^^^42^53^[ADD] stubbed.addFirst ( new StubbedInvocationMatcher ( invocationForStubbing, answer )  ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^stubbed.getFirst (  )  .addAnswer ( answer , isConsecutive )  ;^49^^^^^42^53^[REPLACE] stubbed.getFirst (  ) .addAnswer ( answer ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^return findAnswerFor ( invocation ) .answer ( invocation ) ;^49^^^^^42^53^[REPLACE] stubbed.getFirst (  ) .addAnswer ( answer ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[ADD]^^49^^^^^42^53^[ADD] stubbed.getFirst (  ) .addAnswer ( answer ) ;^[METHOD] addAnswer [TYPE] void [PARAMETER] Answer answer boolean isConsecutive [CLASS] MockitoStubber   [TYPE]  Answer answer  [TYPE]  boolean false  isConsecutive  true  [TYPE]  Invocation invocation  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  AnswersValidator answersValidator 
[REPLACE]^return findAnswerFor ( invocation ) .addAnswer ( invocation ) ;^56^^^^^55^57^[REPLACE] return findAnswerFor ( invocation ) .answer ( invocation ) ;^[METHOD] answerTo [TYPE] Object [PARAMETER] Invocation invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  Invocation invocation  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^if  ( isConsecutive )  {^61^^^^^59^67^[REPLACE] if  ( s.matches ( invocation )  )  {^[METHOD] findAnswerFor [TYPE] Answer [PARAMETER] Invocation invocation [CLASS] MockitoStubber   [TYPE]  boolean false  true  [TYPE]  Invocation invocation  [TYPE]  StubbedInvocationMatcher s  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^return null;^62^^^^^59^67^[REPLACE] return s;^[METHOD] findAnswerFor [TYPE] Answer [PARAMETER] Invocation invocation [CLASS] MockitoStubber   [TYPE]  boolean false  true  [TYPE]  Invocation invocation  [TYPE]  StubbedInvocationMatcher s  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^for  ( StubbedInvocationMatcher s : stubbed )  { if  ( s.matches ( invocation )  )  {^60^^^^^59^67^[REPLACE] for  ( StubbedInvocationMatcher s : stubbed )  {^[METHOD] findAnswerFor [TYPE] Answer [PARAMETER] Invocation invocation [CLASS] MockitoStubber   [TYPE]  boolean false  true  [TYPE]  Invocation invocation  [TYPE]  StubbedInvocationMatcher s  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^return false;^66^^^^^59^67^[REPLACE] return null;^[METHOD] findAnswerFor [TYPE] Answer [PARAMETER] Invocation invocation [CLASS] MockitoStubber   [TYPE]  boolean false  true  [TYPE]  Invocation invocation  [TYPE]  StubbedInvocationMatcher s  [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answersForStubbing  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^answersForStubbing.addAll ( answer ) ;^70^^^^^69^71^[REPLACE] answersForStubbing.add ( answer ) ;^[METHOD] addAnswerForVoidMethod [TYPE] void [PARAMETER] Answer answer [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  Answer answer  [TYPE]  List answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^answersForStubbing.addAll ( true ) ;^74^^^^^73^75^[REPLACE] answersForStubbing.addAll ( answers ) ;^[METHOD] setAnswersForStubbing [TYPE] void [PARAMETER] Answer> answers [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^return !answersForStubbing.get (  ) ;^78^^^^^77^79^[REPLACE] return !answersForStubbing.isEmpty (  ) ;^[METHOD] hasAnswersForStubbing [TYPE] boolean [PARAMETER] [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
[REPLACE]^this.invocationForStubbing = invocation; ;^82^^^^^81^88^[REPLACE] invocationForStubbing = invocation;^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^return !answersForStubbing.isEmpty (  ) ;^83^^^^^81^88^[REPLACE] assert hasAnswersForStubbing (  ) ;^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < answersForStubbing.size (  )  + 1; i++ )  {^84^^^^^81^88^[REPLACE] for  ( int i = 0; i < answersForStubbing.size (  ) ; i++ )  {^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^addAnswer ( answersForStubbing.get ( i ) , i  ==  0 ) ;^85^^^^^81^88^[REPLACE] addAnswer ( answersForStubbing.get ( i ) , i != 0 ) ;^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^addAnswer ( answersForStubbing.addAll ( i ) , i != 0 ) ;^85^^^^^81^88^[REPLACE] addAnswer ( answersForStubbing.get ( i ) , i != 0 ) ;^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < answersForStubbing.size (  ) ; i++ )  {^84^^^^^81^88^[REPLACE] for  ( int i = 0; i < answersForStubbing.size (  ) ; i++ )  {^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[ADD]^^84^85^86^^^81^88^[ADD] for  ( int i = 0; i < answersForStubbing.size (  ) ; i++ )  { addAnswer ( answersForStubbing.get ( i ) , i != 0 ) ; }^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^answersForStubbing.size (  ) ;^87^^^^^81^88^[REPLACE] answersForStubbing.clear (  ) ;^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REMOVE]^answersValidator.validate ( answer, invocation ) ;^87^^^^^81^88^[REMOVE] ^[METHOD] setMethodForStubbing [TYPE] void [PARAMETER] InvocationMatcher invocation [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed  [TYPE]  int i 
[REPLACE]^return "invocationForStubbing: "  ||  invocationForStubbing;^92^^^^^91^93^[REPLACE] return "invocationForStubbing: " + invocationForStubbing;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] MockitoStubber   [TYPE]  InvocationMatcher invocation  invocationForStubbing  [TYPE]  List answers  answersForStubbing  [TYPE]  boolean false  true  [TYPE]  MockingProgress mockingProgress  [TYPE]  LinkedList stubbed 
