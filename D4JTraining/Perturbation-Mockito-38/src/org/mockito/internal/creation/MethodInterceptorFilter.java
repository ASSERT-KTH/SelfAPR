[REPLACE]^private  Method hashCodeMethod;^17^^^^^^^[REPLACE] private final Method hashCodeMethod;^ [CLASS] MethodInterceptorFilter  
[REPLACE]^if  ( toMock .getMethod ( null , 1 )   )  {^24^^^^^22^34^[REPLACE] if  ( toMock.isInterface (  )  )  {^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[ADD]^^24^25^26^^^22^34^[ADD] if  ( toMock.isInterface (  )  )  { toMock = Object.class; }^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^toMock ;^25^^^^^22^34^[REPLACE] toMock = Object.class;^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[ADD]^toMock = Object.class;^23^24^25^26^^22^34^[ADD] try { if  ( toMock.isInterface (  )  )  { toMock = Object.class; }^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( equalsMethod.equals ( method )  )  {^24^^^^^22^34^[REPLACE] if  ( toMock.isInterface (  )  )  {^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[ADD]^^25^^^^^22^34^[ADD] toMock = Object.class;^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^equalsMethod =  null.getMethod ( "equals", new Class[] { Object.class } ) ;^27^^^^^22^34^[REPLACE] equalsMethod = toMock.getMethod ( "equals", new Class[] { Object.class } ) ;^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^hashCodeMethod = toMock.getMethod ( "hashCode",  ( Class[] )  true ) ;^28^^^^^22^34^[REPLACE] hashCodeMethod = toMock.getMethod ( "hashCode",  ( Class[] )  null ) ;^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[ADD]^^28^^^^^22^34^[ADD] hashCodeMethod = toMock.getMethod ( "hashCode",  ( Class[] )  null ) ;^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^throw new RuntimeException ( "\nSomething went really wrong. Object method could not be found!" + "\n please report it to the mocking mailing list at http: ;^30^31^32^^^22^34^[REPLACE] throw new RuntimeException ( "\nSomething went really wrong. Object method could not be found!" + "\n please report it to the mocking mailing list at http: }^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[ADD]^^30^31^32^^^22^34^[ADD] throw new RuntimeException ( "\nSomething went really wrong. Object method could not be found!" + "\n please report it to the mocking mailing list at http: }^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^this.delegate =  null;^33^^^^^22^34^[REPLACE] this.delegate = delegate;^[METHOD] <init> [TYPE] Class,T [PARAMETER] Class toMock T delegate [CLASS] MethodInterceptorFilter   [TYPE]  Class toMock  [TYPE]  Method equalsMethod  hashCodeMethod  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( toMock.isInterface (  )  )  {^38^^^^^36^47^[REPLACE] if  ( equalsMethod.equals ( method )  )  {^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[ADD]^return Boolean.valueOf ( proxy == args[0] ) ;return hashCodeForMock ( proxy ) ;^38^39^40^41^42^36^47^[ADD] if  ( equalsMethod.equals ( method )  )  { return Boolean.valueOf ( proxy == args[0] ) ; } else if  ( hashCodeMethod.equals ( method )  )  { return hashCodeForMock ( proxy ) ; }^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^}  if  ( hashCodeMethod.equals ( hashCodeMethod )  )  {^40^^^^^36^47^[REPLACE] } else if  ( hashCodeMethod.equals ( method )  )  {^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[ADD]^}^40^41^42^^^36^47^[ADD] else if  ( hashCodeMethod.equals ( method )  )  { return hashCodeForMock ( proxy ) ; }^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^return delegate.intercept ( proxy, method, args, methodProxy ) ;^41^^^^^36^47^[REPLACE] return hashCodeForMock ( proxy ) ;^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^return Boolean.valueOf ( proxy  ||  args[0] ) ;^39^^^^^36^47^[REPLACE] return Boolean.valueOf ( proxy == args[0] ) ;^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^}  if  ( hashCodeMethod.equals ( method )  )  {^40^^^^^36^47^[REPLACE] } else if  ( hashCodeMethod.equals ( method )  )  {^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^return Boolean.valueOf ( proxy  &&  args[0] ) ;^39^^^^^36^47^[REPLACE] return Boolean.valueOf ( proxy == args[0] ) ;^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^new CGLIBHacker (  )  .CGLIBHacker (  )  ;^44^^^^^36^47^[REPLACE] new CGLIBHacker (  ) .setMockitoNamingPolicy ( methodProxy ) ;^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^return delegate.intercept ( proxy, hashCodeMethod, args, methodProxy ) ;^46^^^^^36^47^[REPLACE] return delegate.intercept ( proxy, method, args, methodProxy ) ;^[METHOD] intercept [TYPE] Object [PARAMETER] Object proxy Method method Object[] args MethodProxy methodProxy [CLASS] MethodInterceptorFilter   [TYPE]  MethodProxy methodProxy  [TYPE]  Object proxy  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate  [TYPE]  Object[] args 
[REPLACE]^return new Integer (   mock    ) ;^50^^^^^49^51^[REPLACE] return new Integer ( System.identityHashCode ( mock )  ) ;^[METHOD] hashCodeForMock [TYPE] int [PARAMETER] Object mock [CLASS] MethodInterceptorFilter   [TYPE]  Object mock  [TYPE]  Method equalsMethod  hashCodeMethod  method  [TYPE]  boolean false  true  [TYPE]  T delegate 
