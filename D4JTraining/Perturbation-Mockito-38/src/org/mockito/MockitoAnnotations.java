[REPLACE]^if  ( testClass != null )  {^81^^^^^80^90^[REPLACE] if  ( testClass == null )  {^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[ADD]^^81^82^83^^^80^90^[ADD] if  ( testClass == null )  { throw new MockitoException  (" ")  ; }^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[REPLACE]^return ;^82^^^^^80^90^[REPLACE] throw new MockitoException  (" ")  ;^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[REPLACE]^Field[] fields = clazz.getDeclaredFields (  ) ;^85^^^^^80^90^[REPLACE] Class<?> clazz = testClass.getClass (  ) ;^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[REPLACE]^while  ( clazz  ==  Object.class )  {^86^^^^^80^90^[REPLACE] while  ( clazz != Object.class )  {^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[REPLACE]^clazz =  null.getSuperclass (  ) ;^88^^^^^80^90^[REPLACE] clazz = clazz.getSuperclass (  ) ;^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[ADD]^^88^^^^^80^90^[ADD] clazz = clazz.getSuperclass (  ) ;^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[REPLACE]^clazz =  this.getSuperclass (  ) ;^88^^^^^80^90^[REPLACE] clazz = clazz.getSuperclass (  ) ;^[METHOD] initMocks [TYPE] void [PARAMETER] Object testClass [CLASS] MockitoAnnotations   [TYPE]  boolean false  true  [TYPE]  Object testClass  [TYPE]  Class clazz 
[REPLACE]^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^93^^^^^92^111^[REPLACE] AnnotationEngine annotationEngine = new GlobalConfiguration (  ) .getAnnotationEngine (  ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^Field[] fields = null.getDeclaredFields (  ) ;^94^^^^^92^111^[REPLACE] Field[] fields = clazz.getDeclaredFields (  ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( mock ==testClass )  {^98^^^^^92^111^[REPLACE] if  ( mock != null )  {^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[ADD]^field.set ( testClass, mock ) ;^101^102^103^104^105^92^111^[ADD] try { field.set ( testClass, mock ) ; } catch  ( IllegalAccessException e )  { throw new MockitoException  (" ")  ; } finally {^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^field.set ( testClass, testClass ) ;^102^^^^^92^111^[REPLACE] field.set ( testClass, mock ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^boolean wasAccessible = field.getAnnotations (  ) ;^99^^^^^92^111^[REPLACE] boolean wasAccessible = field.isAccessible (  ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^return ;^104^^^^^92^111^[REPLACE] throw new MockitoException  (" ")  ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^field.setAccessible ( true ) ;^102^^^^^92^111^[REPLACE] field.set ( testClass, mock ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^Field[] fields = clazz.getDeclaredFields (  ) ;^95^^^^^92^111^[REPLACE] for  ( Field field : fields )  {^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[ADD]^^95^96^97^98^99^92^111^[ADD] for  ( Field field : fields )  { for ( Annotation annotation : field.getAnnotations (  )  )  { Object mock = annotationEngine.createMockFor ( annotation, field ) ; if  ( mock != null )  { boolean wasAccessible = field.isAccessible (  ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^AnnotationEngine annotationEngine = new GlobalConfiguration (  ) .getAnnotationEngine (  ) ;^96^^^^^92^111^[REPLACE] for ( Annotation annotation : field.getAnnotations (  )  )  {^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[REPLACE]^AnnotationEngine annotationEngine = new GlobalConfiguration (  ) .getAnnotationEngine (  ) ;^97^^^^^92^111^[REPLACE] Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
[ADD]^^97^^^^^92^111^[ADD] Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[METHOD] scan [TYPE] void [PARAMETER] Object testClass Class<?> clazz [CLASS] MockitoAnnotations   [TYPE]  Field field  [TYPE]  boolean false  true  wasAccessible  [TYPE]  AnnotationEngine annotationEngine  [TYPE]  Object mock  testClass  [TYPE]  Class clazz  [TYPE]  Field[] fields  [TYPE]  Annotation annotation  [TYPE]  IllegalAccessException e 
