[REPLACE]^private  Charset charset;^41^^^^^^^[REPLACE] private final Charset charset;^ [CLASS] NioZipEncoding  
[ADD]^^70^^^^^69^110^[ADD] CharsetEncoder enc = this.charset.newEncoder (  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^enc .onUnmappableCharacter ( this )  ;^72^^^^^69^110^[REPLACE] enc.onMalformedInput ( CodingErrorAction.REPORT ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^enc .onMalformedInput ( this )  ;^73^^^^^69^110^[REPLACE] enc.onUnmappableCharacter ( CodingErrorAction.REPORT ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^CharsetEncoder enc = newEncoder (  )  ;^75^^^^^69^110^[REPLACE] CharBuffer cb = CharBuffer.wrap ( name ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^ByteBuffer out = ByteBuffer.allocate ( name.length (  )  %  0.5 +  ( name.length (  )  %  0.5  + 1 )  / 2 ) ;^76^77^^^^69^110^[REPLACE] ByteBuffer out = ByteBuffer.allocate ( name.length (  ) +  ( name.length (  )  + 1 )  / 2 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^if  ( res.isUnmappable (  )  && res.isMalformed (  )  )  {^82^^^^^69^110^[REPLACE] if  ( res.isUnmappable (  )  || res.isMalformed (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^82^83^^^^69^110^[ADD] if  ( res.isUnmappable (  )  || res.isMalformed (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^}  if  ( res.isOverflow (  )  )  {^95^^^^^69^110^[REPLACE] } else if  ( res.isOverflow (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^}  else {^99^^^^^69^110^[REPLACE] } else if  ( res.isUnderflow (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^enc.canEncode ( out ) ;^101^^^^^69^110^[REPLACE] enc.flush ( out ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out, 4 ) ;^97^^^^^69^110^[REPLACE] out = ZipEncodingHelper.growBuffer ( out, 0 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^} else if  ( res .isOverflow (  )   )  {^99^^^^^69^110^[REPLACE] } else if  ( res.isUnderflow (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^}   enc.flush ( out ) ;break;^99^100^101^102^^69^110^[ADD] else if  ( res.isUnderflow (  )  )  {  enc.flush ( out ) ; break;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^enc .onUnmappableCharacter ( this )  ;^101^^^^^69^110^[REPLACE] enc.flush ( out ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^101^102^^^^69^110^[ADD] enc.flush ( out ) ; break;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^97^^^^^69^110^[ADD] out = ZipEncodingHelper.growBuffer ( out, 0 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^if  ( res.size (  )  * 6 > out.remaining (  )  )  {^86^^^^^69^110^[REPLACE] if  ( res.length (  )  * 6 > out.remaining (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^86^87^88^89^^69^110^[ADD] if  ( res.length (  )  * 6 > out.remaining (  )  )  { out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  * 6 ) ; }^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^87^88^^^^69^110^[ADD] out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  * 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.size (  )  * 6 ) ;^87^88^^^^69^110^[REPLACE] out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  * 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^91^92^93^^^69^110^[ADD] for  ( int i=0; i<res.length (  ) ; ++i )  { ZipEncodingHelper.appendSurrogate ( out,cb.get (  )  ) ; }^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^if  ( res.length (  )  /  2 * 6 > out.remaining (  )  )  {^86^^^^^69^110^[REPLACE] if  ( res.length (  )  * 6 > out.remaining (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REMOVE]^if  ( res.isOverflow (  )  )  {     out = growBuffer ( out, 0 ) ; }else     if  ( res.isUnderflow (  )  )  {         enc.flush ( out ) ;         break;     }^86^^^^^69^110^[REMOVE] ^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  *  2 * 6 ) ;^87^88^^^^69^110^[REPLACE] out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  * 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^}  else {^95^^^^^69^110^[REPLACE] } else if  ( res.isOverflow (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^}   out = ZipEncodingHelper.growBuffer ( out, 0 ) ;^95^96^97^^^69^110^[ADD] else if  ( res.isOverflow (  )  )  {  out = ZipEncodingHelper.growBuffer ( out, 0 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^}  if  ( res .isOverflow (  )   )  {^99^^^^^69^110^[REPLACE] } else if  ( res.isUnderflow (  )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  /  0.5  * 6 ) ;^87^88^^^^69^110^[REPLACE] out = ZipEncodingHelper.growBuffer ( out, out.position (  ) + res.length (  )  * 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[ADD]^^80^^^^^69^110^[ADD] CoderResult res = enc.encode ( cb, out,true ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^for  ( int i=0 ; i<res.length (  ) ; ++i )  {^91^^^^^69^110^[REPLACE] for  ( int i=0; i<res.length (  ) ; ++i )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out .position (  )  ;^107^^^^^69^110^[REPLACE] out.limit ( out.position (  )  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out.limit ( out.remaining (  )  ) ;^107^^^^^69^110^[REPLACE] out.limit ( out.position (  )  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^out.remaining (  ) ;^108^^^^^69^110^[REPLACE] out.rewind (  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
[REPLACE]^return out;  ;^109^^^^^69^110^[REPLACE] return out;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] NioZipEncoding   [TYPE]  boolean false  true  [TYPE]  CharBuffer cb  [TYPE]  Charset charset  [TYPE]  String name  [TYPE]  CharsetEncoder enc  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  CoderResult res 
