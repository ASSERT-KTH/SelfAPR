[REPLACE]^private  CRC crc = new CRC (  ) ;^59^^^^^^^[REPLACE] private final CRC crc = new CRC (  ) ;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  short  nInUse;^61^^^^^^^[REPLACE] private int nInUse;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private int currentChar = -4;^65^^^^^^^[REPLACE] private int currentChar = -1;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int EOF ;^67^^^^^^^[REPLACE] private static final int EOF = 0;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int START_BLOCK_STATE  = null ;^68^^^^^^^[REPLACE] private static final int START_BLOCK_STATE = 1;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int RAND_PART_A_STATE  = null ;^69^^^^^^^[REPLACE] private static final int RAND_PART_A_STATE = 2;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int RAND_PART_B_STATE ;^70^^^^^^^[REPLACE] private static final int RAND_PART_B_STATE = 3;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  final int RAND_PART_C_STATE = 3;^71^^^^^^^[REPLACE] private static final int RAND_PART_C_STATE = 4;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int NO_RAND_PART_A_STATE  = null ;^72^^^^^^^[REPLACE] private static final int NO_RAND_PART_A_STATE = 5;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static final int NO_RAND_PART_B_STATE ;^73^^^^^^^[REPLACE] private static final int NO_RAND_PART_B_STATE = 6;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private static  int NO_RAND_PART_C_STATE = 7;^74^^^^^^^[REPLACE] private static final int NO_RAND_PART_C_STATE = 7;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private int currentState  = null ;^76^^^^^^^[REPLACE] private int currentState = START_BLOCK_STATE;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  short  storedBlockCRC, storedCombinedCRC;^78^^^^^^^[REPLACE] private int storedBlockCRC, storedCombinedCRC;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  long  su_ch2;^84^^^^^^^[REPLACE] private int su_ch2;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  short  su_i2;^86^^^^^^^[REPLACE] private int su_i2;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  long  su_rNToGo;^88^^^^^^^[REPLACE] private int su_rNToGo;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private  short  su_tPos;^90^^^^^^^[REPLACE] private int su_tPos;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^private String su_z;^91^^^^^^^[REPLACE] private char su_z;^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final boolean[] inUse  = null ;^913^^^^^^^[REPLACE] final boolean[] inUse = new boolean[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^byte[] seqToUnseq = new byte[256];^915^^^^^^^[REPLACE] final byte[] seqToUnseq = new byte[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final byte[] selector ;^916^^^^^^^[REPLACE] final byte[] selector = new byte[MAX_SELECTORS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final byte[] selectorMtf  = null ;^917^^^^^^^[REPLACE] final byte[] selectorMtf = new byte[MAX_SELECTORS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^int[] unzftab = new int[188];^923^^^^^^^[REPLACE] final int[] unzftab = new int[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[][] limit  = null ;^925^^^^^^^[REPLACE] final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[][] base  = null ;^926^^^^^^^[REPLACE] final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];^927^^^^^^^[REPLACE] final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[] minLens  = null ;^928^^^^^^^[REPLACE] final int[] minLens = new int[N_GROUPS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final int[] cftab ;^930^^^^^^^[REPLACE] final int[] cftab = new int[257];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^char[] getAndMoveToFrontDecode_yy = new char[256];^931^^^^^^^[REPLACE] final char[] getAndMoveToFrontDecode_yy = new char[256];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final char[][] temp_charArray2d  = null ;^932^^^^^^^[REPLACE] final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^final byte[] recvDecodingTables_pos  = null ;^934^^^^^^^[REPLACE] final byte[] recvDecodingTables_pos = new byte[N_GROUPS];^ [CLASS] BZip2CompressorInputStream Data  
[REPLACE]^if  ( offs  >=  0 )  {^141^^^^^140^162^[REPLACE] if  ( offs < 0 )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^142^^^^^140^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^142^^^^^140^162^[ADD] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( storedCombinedCRC  !=  0 )  {^144^^^^^140^162^[REPLACE] if  ( len < 0 )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^145^^^^^140^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( offs + len > dest.length %  2 )  {^147^^^^^140^162^[REPLACE] if  ( offs + len > dest.length )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IndexOutOfBoundsException (  (  ( "offs ( " + offs )  + " )  < 0." )  )  ;^148^149^^^^140^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^148^149^^^^140^162^[REPLACE] throw new IndexOutOfBoundsException  (" ")   + len ( " + len + " )  > dest.length ( " + dest.length + " ) ." ) ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.in != this  )  {^151^^^^^140^162^[REPLACE] if  ( this.in == null )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^152^^^^^140^162^[REPLACE] throw new IOException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^152^^^^^140^162^[ADD] throw new IOException  (" ")  ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int hi = su_rTPos  su_rNToGo;^155^^^^^140^162^[REPLACE] final int hi = offs + len;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int destOffs = storedBlockCRC;^156^^^^^140^162^[REPLACE] int destOffs = offs;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  (  long  b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^157^^^^^140^162^[REPLACE] for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^dest[destOffs++] =   ( byte )  b;^158^^^^^140^162^[REPLACE] dest[destOffs++] =  ( byte )  b;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^157^^^^^140^162^[REPLACE] for  ( int b;  ( destOffs < hi )  &&  (  ( b = read0 (  )  )  >= 0 ) ; )  {^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return  ( destOffs - offs ) ;^161^^^^^140^162^[REPLACE] return  ( destOffs == offs )  ? -1 :  ( destOffs - offs ) ;^[METHOD] read [TYPE] int [PARAMETER] final byte[] dest final int offs final int len [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^179^^^^^178^215^[REPLACE] final int retChar = this.currentChar;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return -1L;^183^^^^^178^215^[REPLACE] return -1;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^186^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^189^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^200^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^211^^^^^178^215^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return retChar;  ;^214^^^^^178^215^[REPLACE] return retChar;^[METHOD] read0 [TYPE] int [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( null != in )  {^218^^^^^217^238^[REPLACE] if  ( null == in )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^219^^^^^217^238^[REPLACE] throw new IOException  (" ")  ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^219^^^^^217^238^[ADD] throw new IOException  (" ")  ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (storedCombinedCRC (  )   &&  0 )  {^221^^^^^217^238^[REPLACE] if  ( in.available (  )  == 0 )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REMOVE]^if  ( lastShadow >= limitLast )  {     throw new IOException ( "block overrun" ) ; }^221^^^^^217^238^[REMOVE] ^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^222^^^^^217^238^[REPLACE] throw new IOException  (" ")  ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^checkMagicChar ( 'Z', "second" )  ;^224^^^^^217^238^[REPLACE] checkMagicChar ( 'B', "first" ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^checkMagicChar ( 'B', "first" )  ;^225^^^^^217^238^[REPLACE] checkMagicChar ( 'Z', "second" ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^checkMagicChar ( 'B', "first" )  ;^226^^^^^217^238^[REPLACE] checkMagicChar ( 'h', "third" ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REMOVE]^checkMagicChar ( 'B', "first" )  ;^226^^^^^217^238^[REMOVE] ^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int blockSize = this.in.close (  ) ;^228^^^^^217^238^[REPLACE] int blockSize = this.in.read (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( blockSize < '1' )  ) {^229^^^^^217^238^[REPLACE] if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  {^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^229^230^231^232^^217^238^[ADD] if  (  ( blockSize < '1' )  ||  ( blockSize > '9' )  )  { throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ; }^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException (  (  (  (  (  (  ( "Stream is not BZip2 formatted: expected '" + expected )  + "' as " )  + position )  + " byte but got '" )  +  (  ( char )   ( magic )  )  )  + "'" )  )  ;^230^231^^^^217^238^[REPLACE] throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^230^231^^^^217^238^[REPLACE] throw new IOException ( "Stream is not BZip2 formatted: illegal " + "blocksize " +  ( char )  blockSize ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockSize100k = blockSize  '0';^234^^^^^217^238^[REPLACE] this.blockSize100k = blockSize - '0';^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^endBlock (  )  ;^236^^^^^217^238^[REPLACE] initBlock (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[ADD]^^236^^^^^217^238^[ADD] initBlock (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^endBlock (  )  ;^237^^^^^217^238^[REPLACE] setupBlock (  ) ;^[METHOD] init [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic5 = bsGetUByte (  )  ;^251^^^^^250^288^[REPLACE] char magic0 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  )  ;^252^^^^^250^288^[REPLACE] char magic1 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  )  ;^253^^^^^250^288^[REPLACE] char magic2 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^254^255^^^^250^288^[ADD] char magic3 = bsGetUByte (  ) ; char magic4 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  )  ;^255^^^^^250^288^[REPLACE] char magic4 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^char magic0 = bsGetUByte (  )  ;^256^^^^^250^288^[REPLACE] char magic5 = bsGetUByte (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( magic0 == 0x17 || magic1 == 0x72 || magic2 == 0x45 || magic3 == 0x38 || magic4 == 0x50 || magic5 == 0x90 )  {^258^259^^^^250^288^[REPLACE] if  ( magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45 && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90 )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^} else if  ( magic0 != 0x31 && magic1 != 0x41 && magic2 != 0x59 && magic3 != 0x26 &&^261^262^263^264^^250^288^[REPLACE] } else if  ( magic0 != 0x31 || magic1 != 0x41 || magic2 != 0x59 || magic3 != 0x26 ||^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  this.in != null  )   {  ;^278^^^^^261^287^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = START_BLOCK_STATE  ;^279^^^^^261^287^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedCombinedCRC = bsGetInt (  )  ;^271^^^^^261^287^[REPLACE] this.storedBlockCRC = bsGetInt (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR (su_rTPos )   || su_rTPos;^272^^^^^261^287^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^286^^^^^261^287^[REPLACE] this.currentState = START_BLOCK_STATE;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^268^^^^^261^287^[REPLACE] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^269^^^^^261^287^[REPLACE] throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  this.in != null  )   {  ;^278^^^^^250^288^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = START_BLOCK_STATE  ;^279^^^^^250^288^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^268^269^^^^250^288^[ADD] this.currentState = EOF; throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.storedCombinedCRC = bsGetInt (  )  ;^271^^^^^250^288^[REPLACE] this.storedBlockCRC = bsGetInt (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR ( 2 )   &&  2;^272^^^^^250^288^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^279^^^^^250^288^[REPLACE] this.data = new Data ( this.blockSize100k ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^286^^^^^250^288^[REPLACE] this.currentState = START_BLOCK_STATE;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^269^^^^^250^288^[REPLACE] throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^setupNoRandPartC (  )  ;^260^^^^^258^287^[REPLACE] complete (  ) ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.data != false )  {^278^^^^^261^287^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^278^279^280^^^261^287^[ADD] if  ( this.data == null )  { this.data = new Data ( this.blockSize100k ) ; }^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^271^272^^^^261^287^[ADD] this.storedBlockCRC = bsGetInt (  ) ; this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.blockRandomised = bsR ( 2 )   &&  2;^272^^^^^261^287^[REPLACE] this.blockRandomised = bsR ( 1 )  == 1;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^286^^^^^261^287^[ADD] this.currentState = START_BLOCK_STATE;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^269^^^^^261^287^[REPLACE] throw new IOException  (" ")  ;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (data != this )  {^278^^^^^250^288^[REPLACE] if  ( this.data == null )  {^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^268^^^^^250^288^[REPLACE] this.currentState = EOF;^[METHOD] initBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedBlockCRC ;^291^^^^^290^307^[REPLACE] this.computedBlockCRC = this.crc.getFinalCRC (  ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  this.storedCombinedCRC != this.computedCombinedCRC  )   {  ;^294^^^^^290^307^[REPLACE] if  ( this.storedBlockCRC != this.computedBlockCRC )  {^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC =  (storedBlockCRC ) &  ( this.storedCombinedCRC >>> 31 ) ;^297^298^^^^290^307^[REPLACE] this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC ^= this.computedBlockCRC  ;^299^^^^^290^307^[REPLACE] this.computedCombinedCRC ^= this.storedBlockCRC;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^301^^^^^290^307^[REPLACE] throw new IOException  (" ")  ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^297^298^^^^290^307^[ADD] this.computedCombinedCRC =  ( this.storedCombinedCRC << 1 ) |  ( this.storedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "unexpected end of stream" )  ;^301^^^^^290^307^[REPLACE] throw new IOException  (" ")  ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC =  ( this.computedCombinedCRC << 1L ) &  ( this.computedCombinedCRC >>> 31L ) ;^304^305^^^^290^307^[REPLACE] this.computedCombinedCRC =  ( this.computedCombinedCRC << 1 ) |  ( this.computedCombinedCRC >>> 31 ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.computedCombinedCRC ^= this.storedBlockCRC  ;^306^^^^^290^307^[REPLACE] this.computedCombinedCRC ^= this.computedBlockCRC;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsLive  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int bsBuffShadow = this.bsBuff  ;^334^^^^^333^355^[REPLACE] int bsLiveShadow = this.bsLive;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int bsLiveShadow = this.bsLive  ;^335^^^^^333^355^[REPLACE] int bsBuffShadow = this.bsBuff;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( bsLiveShadow  > origPtr )  {^337^^^^^333^355^[REPLACE] if  ( bsLiveShadow < n )  {^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  !=  0 )  {^342^^^^^333^355^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^343^^^^^333^355^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( storedBlockCRC )  & su_count;^346^^^^^333^355^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 + 4;^347^^^^^333^355^[REPLACE] bsLiveShadow += 8;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsBuff =  nInUse;^350^^^^^333^355^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^338^^^^^333^355^[ADD] final InputStream inShadow = this.in;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int thech = inShadow .read ( selector , i , origPtr )  ;^340^^^^^333^355^[REPLACE] int thech = inShadow.read (  ) ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  >  0 )  {^342^^^^^333^355^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^343^^^^^333^355^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (offs )  & thech;^346^^^^^333^355^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 5;^347^^^^^333^355^[REPLACE] bsLiveShadow += 8;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsBuff =  thech;^350^^^^^333^355^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^InputStream inShadow = this.in  ;^338^^^^^333^355^[REPLACE] final InputStream inShadow = this.in;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.read (  )  ;^340^^^^^333^355^[REPLACE] int thech = inShadow.read (  ) ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow  n;^353^^^^^333^355^[REPLACE] this.bsLive = bsLiveShadow - n;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return false ;^354^^^^^333^355^[REPLACE] return  ( bsBuffShadow >>  ( bsLiveShadow - n )  )  &  (  ( 1 << n )  - 1 ) ;^[METHOD] bsR [TYPE] int [PARAMETER] final int n [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int bsBuffShadow = this.bsBuff  ;^358^^^^^357^375^[REPLACE] int bsLiveShadow = this.bsLive;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int bsLiveShadow = this.bsLive  ;^359^^^^^357^375^[REPLACE] int bsBuffShadow = this.bsBuff;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  bsLiveShadow < n  )   {  ;^361^^^^^357^375^[REPLACE] if  ( bsLiveShadow < 1 )  {^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (su_count  >=  0 )  {^364^^^^^357^375^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^364^365^366^^^357^375^[ADD] if  ( thech < 0 )  { throw new IOException  (" ")  ; }^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^365^^^^^357^375^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &offs;^368^^^^^357^375^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^369^^^^^357^375^[ADD] bsLiveShadow += 8;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^370^^^^^357^375^[ADD] this.bsBuff = bsBuffShadow;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int thech = inShadow.read (  )  ;^362^^^^^357^375^[REPLACE] int thech = this.in.read (  ) ;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^365^^^^^357^375^[REPLACE] throw new IOException  (" ")  ;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  ==  0 )  {^364^^^^^357^375^[REPLACE] if  ( thech < 0 )  {^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^368^369^^^^357^375^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive =nInUseShadow  1;^373^^^^^357^375^[REPLACE] this.bsLive = bsLiveShadow - 1;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )   ;^374^^^^^357^375^[REPLACE] return  (  ( bsBuffShadow >>  ( bsLiveShadow - 1 )  )  & 1 )  != 0;^[METHOD] bsGetBit [TYPE] boolean [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] cftab  minLens  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  last  len  magic  n  nInUse  nInUseShadow  offs  origPtr  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  [TYPE]  char[] getAndMoveToFrontDecode_yy  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( length + 1[j] == i )  {^393^^^^^390^424^[REPLACE] if  ( length[j] == i )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^perm[pp++] = j;^393^394^395^^^390^424^[ADD] if  ( length[j] == i )  { perm[pp++] = j; }^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^perm[pp++] =  j;^394^^^^^390^424^[REPLACE] perm[pp++] = j;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = vec, pp = 0; i <= maxLen; i++ )  {^391^^^^^390^424^[REPLACE] for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = minLen, pp = 2; i <= maxLen; i++ )  {^391^^^^^390^424^[REPLACE] for  ( int i = minLen, pp = 0; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 3; j < alphaSize; j++ )  {^392^^^^^390^424^[REPLACE] for  ( int j = 0; j < alphaSize; j++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^400^^^^^390^424^[ADD] base[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^limit[i] = 3;^401^^^^^390^424^[REPLACE] limit[i] = 0;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^399^^^^^390^424^[REPLACE] for  ( int i = MAX_CODE_LEN; --i > 0; )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int pp = 0  ;^404^^^^^390^424^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^b +=  minLens[i];^409^^^^^390^424^[REPLACE] b += base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] = 0  ;^410^^^^^390^424^[REPLACE] base[i] = b;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^408^409^410^411^^390^424^[ADD] for  ( int i = 1, b = base[0]; i < MAX_CODE_LEN; i++ )  { b += base[i]; base[i] = b; }^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^415^416^^^^390^424^[ADD] vec += nb - b; b = nb;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^b =  su_rNToGo;^416^^^^^390^424^[REPLACE] b = nb;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^limit[i] = vec  1;^417^^^^^390^424^[REPLACE] limit[i] = vec - 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^vec <<= 4;^418^^^^^390^424^[REPLACE] vec <<= 1;^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = su_rNToGo, vec = 0, b = base[i]; i <= maxLen; i++ )  {^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = minLen, vec = 1, b = base[i]; i <= maxLen; i++ )  {^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int b = base[0]  ;^413^^^^^390^424^[REPLACE] for  ( int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int nb = base[i  1];^414^^^^^390^424^[REPLACE] final int nb = base[i + 1];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^base[i] =  (  ( limit[i  0] + 0 )  << 0 )   base[i];^422^^^^^390^424^[REPLACE] base[i] =  (  ( limit[i - 1] + 1 )  << 1 )  - base[i];^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = vec  1; i <= maxLen; i )  {^421^^^^^390^424^[REPLACE] for  ( int i = minLen + 1; i <= maxLen; i++ )  {^[METHOD] hbCreateDecodeTables [TYPE] void [PARAMETER] final int[] limit final int[] base final int[] perm final char[] length final int minLen final int maxLen final int alphaSize [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] temp_charArray2d  [TYPE]  Data data  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  i  j  last  len  magic  maxLen  minLen  n  nInUse  nInUseShadow  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  thech  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  length  [TYPE]  byte[] dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^427^^^^^426^505^[REPLACE] final Data dataShadow = this.data;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^428^^^^^426^505^[ADD] final boolean[] inUse = dataShadow.inUse;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] pos = data.recvDecodingTables_pos;^429^^^^^426^505^[REPLACE] final byte[] pos = dataShadow.recvDecodingTables_pos;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] seqToUnseq = dataShadow.seqToUnseq  ;^430^^^^^426^505^[REPLACE] final byte[] selector = dataShadow.selector;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] seqToUnseq = dataShadow.seqToUnseq  ;^431^^^^^426^505^[REPLACE] final byte[] selectorMtf = dataShadow.selectorMtf;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int inUse16 = 0 + 3;^433^^^^^426^505^[REPLACE] int inUse16 = 0;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  inShadow != null  )   {  ;^437^^^^^426^505^[REPLACE] if  ( bsGetBit (  )  )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse16 |= 1  <=  i;^438^^^^^426^505^[REPLACE] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^438^^^^^426^505^[ADD] inUse16 |= 1 << i;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^436^437^438^439^^426^505^[ADD] for  ( int i = 0; i < 16; i++ )  { if  ( bsGetBit (  )  )  { inUse16 |= 1 << i; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^443^^^^^426^505^[ADD] inUse[i] = false;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^442^443^444^^^426^505^[ADD] for  ( int i = 256; --i >= 0; )  { inUse[i] = false; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( inUse16 &  ( 1 << i )  )   == vec )  {^447^^^^^426^505^[REPLACE] if  (  ( inUse16 &  ( 1 << i )  )  != 0 )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  inShadow != null  )   {  ;^450^^^^^426^505^[REPLACE] if  ( bsGetBit (  )  )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^451^^^^^426^505^[ADD] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^inUse[i16  j] = true;^451^^^^^426^505^[REPLACE] inUse[i16 + j] = true;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int i16 = i  >=  0;^448^^^^^426^505^[REPLACE] final int i16 = i << 4;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0 / 4; j < 16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 3; i < 16; i++ )  {^446^^^^^426^505^[REPLACE] for  ( int i = 0; i < 16; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^448^^^^^426^505^[ADD] final int i16 = i << 4;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = 0 / 0; j < 16; j++ )  {^449^^^^^426^505^[REPLACE] for  ( int j = 0; j < 16; j++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^setupNoRandPartC (  )  ;^457^^^^^426^505^[REPLACE] makeMaps (  ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^458^^^^^426^505^[ADD] final int alphaSize = this.nInUse + 2;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^final int nSelectors = bsR ( 15 ) ;^461^462^^^^426^505^[ADD] final int nGroups = bsR ( 3 ) ; final int nSelectors = bsR ( 15 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^462^^^^^426^505^[ADD] final int nSelectors = bsR ( 15 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^selectorMtf[i]  =  selectorMtf[i] ;^469^^^^^426^505^[REPLACE] selectorMtf[i] =  ( byte )  j;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^464^465^466^467^468^426^505^[ADD] for  ( int i = 0; i < nSelectors; i++ )  { int j = 0; while  ( bsGetBit (  )  )  { j++; }^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int j = 3;^465^^^^^426^505^[REPLACE] int j = 0;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^474^^^^^426^505^[ADD] pos[v] =  ( byte )  v;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int v = su_tPos; --v >= 0; )  {^473^^^^^426^505^[REPLACE] for  ( int v = nGroups; --v >= 0; )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^pos[v] = pos[v  1];^482^^^^^426^505^[REPLACE] pos[v] = pos[v - 1];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^485^^^^^426^505^[ADD] pos[0] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^selector[i] ;^486^^^^^426^505^[REPLACE] selector[i] = tmp;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 4; i < nSelectors; i++ )  {^477^^^^^426^505^[REPLACE] for  ( int i = 0; i < nSelectors; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int v = seqToUnseq[i] | 0xff;^478^^^^^426^505^[REPLACE] int v = selectorMtf[i] & 0xff;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^479^^^^^426^505^[REPLACE] final byte tmp = pos[v];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[][] len = data.temp_charArray2d;^489^^^^^426^505^[REPLACE] final char[][] len = dataShadow.temp_charArray2d;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^curr += bsGetBit (  )  ? -4 : 4;^497^^^^^426^505^[REPLACE] curr += bsGetBit (  )  ? -1 : 1;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^len_t[i] =  ( String )  curr;^499^^^^^426^505^[REPLACE] len_t[i] =  ( char )  curr;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int t = 4; t < nGroups; t++ )  {^492^^^^^426^505^[REPLACE] for  ( int t = 0; t < nGroups; t++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int curr = bsR ( 0 ) ;^493^^^^^426^505^[REPLACE] int curr = bsR ( 5 ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] temp_charArray2d_t = len[t];^494^^^^^426^505^[REPLACE] final char[] len_t = len[t];^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 2; i < alphaSize; i++ )  {^495^^^^^426^505^[REPLACE] for  ( int i = 0; i < alphaSize; i++ )  {^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^createHuffmanDecodingTables ( alphaSize, su_count ) ;^504^^^^^426^505^[REPLACE] createHuffmanDecodingTables ( alphaSize, nGroups ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^504^^^^^426^505^[ADD] createHuffmanDecodingTables ( alphaSize, nGroups ) ;^[METHOD] recvDecodingTables [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte tmp  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^512^513^^^^511^536^[ADD] final Data dataShadow = this.data; final char[][] len = dataShadow.temp_charArray2d;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[][] len = data.temp_charArray2d;^513^^^^^511^536^[REPLACE] final char[][] len = dataShadow.temp_charArray2d;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] minLens = data.minLens;^514^^^^^511^536^[REPLACE] final int[] minLens = dataShadow.minLens;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^515^^^^^511^536^[ADD] final int[][] limit = dataShadow.limit;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] base = data.base;^516^^^^^511^536^[REPLACE] final int[][] base = dataShadow.base;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] base = dataShadow.base  ;^517^^^^^511^536^[REPLACE] final int[][] perm = dataShadow.perm;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lent  ==  maxLen )  {^525^^^^^511^536^[REPLACE] if  ( lent > maxLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^526^^^^^511^536^[ADD] maxLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  lent > maxLen  )   {  ;^528^^^^^511^536^[REPLACE] if  ( lent < minLen )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^528^529^530^^^511^536^[ADD] if  ( lent < minLen )  { minLen = lent; }^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^maxLen = lent  ;^529^^^^^511^536^[REPLACE] minLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^minLen = lent  ;^526^^^^^511^536^[REPLACE] maxLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^529^^^^^511^536^[ADD] minLen = lent;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^minLens[t]  =  minLens[t] ;^534^^^^^511^536^[REPLACE] minLens[t] = minLen;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int t = 1; t < nGroups; t++ )  {^519^^^^^511^536^[REPLACE] for  ( int t = 0; t < nGroups; t++ )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int minLen = 6;^520^^^^^511^536^[REPLACE] int minLen = 32;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^int maxLen = 3;^521^^^^^511^536^[REPLACE] int maxLen = 0;^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] temp_charArray2d_t = len[t];^522^^^^^511^536^[REPLACE] final char[] len_t = len[t];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = thech; --i >= 0; )  {^523^^^^^511^536^[REPLACE] for  ( int i = alphaSize; --i >= 0; )  {^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[REPLACE]^final char lent = length[i];^524^^^^^511^536^[REPLACE] final char lent = len_t[i];^[METHOD] createHuffmanDecodingTables [TYPE] void [PARAMETER] final int alphaSize final int nGroups [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  cftab  limit  minLens  perm  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  hi  i  i16  inUse16  j  last  len  magic  maxLen  minLen  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  offs  origPtr  pp  retChar  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  [TYPE]  boolean[] inUse 
[ADD]^^539^^^^^538^725^[ADD] this.origPtr = bsR ( 24 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^setupNoRandPartC (  )  ;^540^^^^^538^725^[REPLACE] recvDecodingTables (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^final Data dataShadow = this.data;^542^543^^^^538^725^[ADD] final InputStream inShadow = this.in; final Data dataShadow = this.data;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^543^^^^^538^725^[REPLACE] final Data dataShadow = this.data;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] ll8 = data.ll8;^544^^^^^538^725^[REPLACE] final byte[] ll8 = dataShadow.ll8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^545^546^^^^538^725^[ADD] final int[] unzftab = dataShadow.unzftab; final byte[] selector = dataShadow.selector;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selector = data.selector;^546^^^^^538^725^[REPLACE] final byte[] selector = dataShadow.selector;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] seqToUnseq = seqToUnseq  ;^547^^^^^538^725^[REPLACE] final byte[] seqToUnseq = dataShadow.seqToUnseq;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] yy = data.getAndMoveToFrontDecode_yy;^548^^^^^538^725^[REPLACE] final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^549^^^^^538^725^[REPLACE] final int[] minLens = dataShadow.minLens;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] limit = data.limit;^550^^^^^538^725^[REPLACE] final int[][] limit = dataShadow.limit;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^551^^^^^538^725^[ADD] final int[][] base = dataShadow.base;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = data.perm;^552^^^^^538^725^[REPLACE] final int[][] perm = dataShadow.perm;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int limitLast = retChar  blockSize100k;^553^^^^^538^725^[REPLACE] final int limitLast = this.blockSize100k * 100000;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[i] ;^561^^^^^538^725^[REPLACE] yy[i] =  ( char )  i;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^562^^^^^538^725^[ADD] unzftab[i] = 0;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 256 * 0; --i >= 0; )  {^560^^^^^538^725^[REPLACE] for  ( int i = 256; --i >= 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int groupNo = 1;^565^^^^^538^725^[REPLACE] int groupNo = 0;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^566^567^^^^538^725^[ADD] int groupPos = G_SIZE - 1; final int eob = this.nInUse + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int eob = this.nInUse  1;^567^^^^^538^725^[REPLACE] final int eob = this.nInUse + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int nextSym = getAndMoveToFrontDecode3 ( 3 ) ;^568^^^^^538^725^[REPLACE] int nextSym = getAndMoveToFrontDecode0 ( 0 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^569^^^^^538^725^[ADD] int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^570^571^^^^538^725^[ADD] int bsLiveShadow = this.bsLive; int lastShadow = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int lastShadow = -3;^571^^^^^538^725^[REPLACE] int lastShadow = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^572^573^^^^538^725^[ADD] int zt = selector[groupNo] & 0xff; int[] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^573^^^^^538^725^[ADD] int[] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^574^^^^^538^725^[REPLACE] int[] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[] perm_zvec = perm[zt];^575^^^^^538^725^[REPLACE] int[] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int minLens_zvec = minLens[zt];^576^^^^^538^725^[REPLACE] int minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (  ( nextSym == RUNA )  &&  ( nextSym == RUNB )  )  {^579^^^^^538^725^[REPLACE] if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^int s = -1;^579^580^^582^^538^725^[ADD] if  (  ( nextSym == RUNA )  ||  ( nextSym == RUNB )  )  { int s = -1; for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++lastShadow  ==  limitLast )  {^651^^^^^579^719^[REPLACE] if  ( ++lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^651^652^653^^^579^719^[ADD] if  ( ++lastShadow >= limitLast )  { throw new IOException  (" ")  ; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^652^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  nextSym == RUNA  )   {  ;^664^^^^^579^719^[REPLACE] if  ( nextSym <= 16 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^664^665^666^667^^579^719^[ADD] if  ( nextSym <= 16 )  { for  ( int j = nextSym - 1; j > 0; )  { yy[j] = yy[--j]; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( getAndMoveToFrontDecode_yy, 2, yy, 1,storedBlockCRC  1 ) ;^669^^^^^664^670^[REPLACE] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^666^^^^^579^719^[ADD] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = zt  1; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  ) {^674^^^^^579^719^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos =false  1;^675^^^^^579^719^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^676^677^^^^579^719^[ADD] zt = selector[++groupNo] & 0xff; base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^base_zt =  null[zt];^677^^^^^579^719^[REPLACE] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^limit_zt =  null[zt];^678^^^^^579^719^[REPLACE] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^perm_zt =  null[zt];^679^^^^^579^719^[REPLACE] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^680^^^^^579^719^[ADD] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  >  0 )  {^691^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^696^^^^^691^697^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^692^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 4;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  ==  0 )  {^707^^^^^579^719^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^707^708^709^710^^579^719^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^712^^^^^707^713^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( storedBlockCRC )  & zvec;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn  ;^709^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^657^^^^^579^719^[ADD] ll8[lastShadow] = seqToUnseq[tmp];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[j] =  getAndMoveToFrontDecode_yy[--j];^666^^^^^579^719^[REPLACE] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^672^^^^^579^719^[ADD] yy[0] = tmp;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^zt = selector[++groupNo] & 0xff;^675^676^^^^579^719^[ADD] groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zt = selector[++groupNo] | 0xff;^676^^^^^579^719^[REPLACE] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  perm[zt];^680^^^^^579^719^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 5;^693^^^^^579^719^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8  ;^701^^^^^579^719^[REPLACE] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (su_tPos )  & thech;^708^^^^^579^719^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^709^^^^^579^719^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^716^^^^^579^719^[ADD] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec zt];^718^^^^^579^719^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char tmp = yy[nextSym  1 * 3];^655^^^^^579^719^[REPLACE] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym  1; j > 0; )  {^665^^^^^579^719^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^685^^^^^579^719^[ADD] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int thech = inShadow.read (  )  ;^690^^^^^579^719^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 1 << zn )  - 1 ) ;^699^700^^^^579^719^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^706^^^^^579^719^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^652^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^696^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^712^^^^^579^719^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (su_tPos  ||  RUNA )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  nextSym == RUNA  )   {  ;^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^}   s += n << 1;break;^585^586^587^588^589^538^725^[ADD] else if  ( nextSym == RUNB )  { s += n << 1; } else { break; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^586^^^^^538^725^[ADD] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  >  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s +=  zn;^584^^^^^538^725^[REPLACE] s += n;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  else {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  >  0;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  !=  0 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  1;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zt = selector[++groupNo] | 0xff;^593^^^^^538^725^[REPLACE] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^base_zt =  null[zt];^594^^^^^538^725^[REPLACE] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^limit_zt =  null[zt];^595^^^^^538^725^[REPLACE] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^perm_zt =  null[zt];^596^^^^^538^725^[REPLACE] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  perm[zt];^597^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;bsLiveShadow += 8;continue;^608^609^610^611^^538^725^[ADD] if  ( thech >= 0 )  { bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^613^^^^^608^614^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 % 0;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  == zvec )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^629^630^^^^624^631^[REPLACE] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  & thech;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn  ;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( su_rTPos  >  limitLast )  {^647^^^^^538^725^[REPLACE] if  ( lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^647^648^649^^^538^725^[ADD] if  ( lastShadow >= limitLast )  { throw new IOException  (" ")  ; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^648^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^vec <<= 1  ;^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  !=  1;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^592^593^^^^538^725^[ADD] groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens[t] = minLen  ;^597^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^609^^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^610^^^^^538^725^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8  ;^618^^^^^538^725^[REPLACE] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^625^626^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 6;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^634^635^^^^538^725^[ADD] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  base_zt[zn]];^637^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^unzftab[ch | 0xff] += s + 1;^641^^^^^538^725^[REPLACE] unzftab[ch & 0xff] += s + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^644^^^^^538^725^[ADD] ll8[++lastShadow] = ch;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int n = 1  ;^580^^^^^538^725^[REPLACE] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int n = 2; true; n <<= 2 )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^602^^^^^538^725^[ADD] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^607^^^^^538^725^[ADD] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 2 << zn )  - 2 ) ;^616^617^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.close (  ) ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^640^641^^^^538^725^[ADD] final byte ch = seqToUnseq[yy[0]]; unzftab[ch & 0xff] += s + 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^613^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^629^630^^^^538^725^[REPLACE] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^648^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( znextSym  !=  RUNA )  {^583^^^^^538^725^[REPLACE] if  ( nextSym == RUNA )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^} else if  ( nextSym  &&  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  (zt  !=  RUNB )  {^585^^^^^538^725^[REPLACE] } else if  ( nextSym == RUNB )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^s += n  > zn;^586^^^^^538^725^[REPLACE] s += n << 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  && su_ch2 )  {^591^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^groupPos = G_SIZE - 1;zt = selector[++groupNo] & 0xff;base_zt = base[zt];limit_zt = limit[zt];^591^592^593^594^595^538^725^[ADD] if  ( groupPos == 0 )  { groupPos = G_SIZE - 1; zt = selector[++groupNo] & 0xff; base_zt = base[zt]; limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  inUse16;^592^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^595^596^^^^538^725^[ADD] limit_zt = limit[zt]; perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^596^597^^^^538^725^[ADD] perm_zt = perm[zt]; minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( zvec  <=  0 )  {^608^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 2 )  & thech;^609^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^610^611^^^^538^725^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  > zvec )  {^624^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^629^630^^^^624^631^[ADD] throw new IOException ( "unexpected end of stream" ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 )  &su_chPrev;^625^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 0;^626^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( lastShadow  <  limitLast )  {^647^^^^^538^725^[REPLACE] if  ( lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^648^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++lastShadow  >  limitLast )  {^651^^^^^538^725^[REPLACE] if  ( ++lastShadow >= limitLast )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^651^652^653^^^538^725^[ADD] if  ( ++lastShadow >= limitLast )  { throw new IOException  (" ")  ; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^652^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( storedBlockCRC  >=  inUse16 )  {^664^^^^^538^725^[REPLACE] if  ( nextSym <= 16 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^664^665^666^667^^538^725^[ADD] if  ( nextSym <= 16 )  { for  ( int j = nextSym - 1; j > 0; )  { yy[j] = yy[--j]; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( yy, 1, yy, 1, nextSym  1 ) ;^669^^^^^664^670^[REPLACE] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^669^^^^^664^670^[ADD] System.arraycopy ( yy, 0, yy, 1, nextSym - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^yy[j] =  getAndMoveToFrontDecode_yy[--j];^666^^^^^538^725^[REPLACE] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^665^666^667^^^538^725^[ADD] for  ( int j = nextSym - 1; j > 0; )  { yy[j] = yy[--j]; }^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( groupPos  !=  0 )  {^674^^^^^538^725^[REPLACE] if  ( groupPos == 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^groupPos = G_SIZE  2;^675^^^^^538^725^[REPLACE] groupPos = G_SIZE - 1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zt = selector[++groupNo] | 0xff;^676^^^^^538^725^[REPLACE] zt = selector[++groupNo] & 0xff;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^base_zt =  null[zt];^677^^^^^538^725^[REPLACE] base_zt = base[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^limit_zt =  null[zt];^678^^^^^538^725^[REPLACE] limit_zt = limit[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^minLens_zt = minLens[zt];^679^680^^^^538^725^[ADD] perm_zt = perm[zt]; minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^minLens_zt =  perm[zt];^680^^^^^538^725^[REPLACE] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  <  0 )  {^691^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^696^^^^^691^697^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  (storedBlockCRC )  & thech;^692^^^^^538^725^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn  ;^693^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( thech  <=  0 )  {^707^^^^^538^725^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^708^^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow -= zn  ;^709^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int n = 4; true; n <<= 4 )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^597^^^^^538^725^[ADD] minLens_zt = minLens[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^609^610^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 >> 0;^610^^^^^538^725^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  (zvec ) &  (  ( bsBuffShadow >> bsLiveShadow )  & 0 ) ;^634^635^^^^538^725^[REPLACE] zvec =  ( zvec << 1 ) |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^637^^^^^538^725^[ADD] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^ll8[++lastShadow] =  ch;^644^^^^^538^725^[REPLACE] ll8[++lastShadow] = ch;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^657^^^^^538^725^[ADD] ll8[lastShadow] = seqToUnseq[tmp];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^666^^^^^538^725^[ADD] yy[j] = yy[--j];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^672^^^^^538^725^[ADD] yy[0] = tmp;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^perm_zt =  null[zt];^679^^^^^538^725^[REPLACE] perm_zt = perm[zt];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^692^693^^^^538^725^[ADD] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech; bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8  ;^701^^^^^538^725^[REPLACE] bsLiveShadow -= zn;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^709^^^^^538^725^[ADD] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^716^^^^^538^725^[ADD] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^nextSym = perm_zt[zvec  base_zt[zn]];^718^^^^^538^725^[REPLACE] nextSym = perm_zt[zvec - base_zt[zn]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^580^^^^^538^725^[ADD] int s = -1;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int n = 3; true; n <<= 3 )  {^582^^^^^538^725^[REPLACE] for  ( int n = 1; true; n <<= 1 )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int i = minLen + 1  ;^602^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^616^617^^^^538^725^[ADD] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = inShadow.close (  ) ;^623^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^640^^^^^538^725^[ADD] final byte ch = seqToUnseq[yy[0]];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char tmp = yy[nextSym storedBlockCRC];^655^^^^^538^725^[REPLACE] final char tmp = yy[nextSym - 1];^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int j = nextSym  1; j > 0; )  {^665^^^^^538^725^[REPLACE] for  ( int j = nextSym - 1; j > 0; )  {^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int i = minLen + 1  ;^685^^^^^538^725^[REPLACE] int zn = minLens_zt;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^690^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) |  (  ( 1 << zn )  - 1 ) ;^699^700^^^^538^725^[REPLACE] int zvec =  ( bsBuffShadow >>  ( bsLiveShadow - zn )  ) &  (  ( 1 << zn )  - 1 ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^706^^^^^538^725^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^613^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^652^^^^^538^725^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^696^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^712^^^^^538^725^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.last =  s;^722^^^^^538^725^[REPLACE] this.last = lastShadow;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow - n  ;^723^^^^^538^725^[REPLACE] this.bsLive = bsLiveShadow;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsLive = bsLiveShadow  ;^724^^^^^538^725^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] getAndMoveToFrontDecode [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  byte ch  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^InputStream inShadow = this.in  ;^728^^^^^727^758^[REPLACE] final InputStream inShadow = this.in;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^729^^^^^727^758^[REPLACE] final Data dataShadow = this.data;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^730^731^^^^727^758^[ADD] final int zt = dataShadow.selector[groupNo] & 0xff; final int[] limit_zt = dataShadow.limit[zt];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] limit_zvec = dataShadow.limit[zt];^731^^^^^727^758^[REPLACE] final int[] limit_zt = dataShadow.limit[zt];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int zn = data.minLens[zt];^732^^^^^727^758^[REPLACE] int zn = dataShadow.minLens[zt];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int curr = bsR ( 5 )  ;^733^^^^^727^758^[REPLACE] int zvec = bsR ( zn ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^734^735^^^^727^758^[ADD] int bsLiveShadow = this.bsLive; int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^735^^^^^727^758^[ADD] int bsBuffShadow = this.bsBuff;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (zvec  <  0 )  {^742^^^^^727^758^[REPLACE] if  ( thech >= 0 )  {^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^747^^^^^742^748^[ADD] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 8 >>> 1 )  &su_tPos;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^744^745^^^^727^758^[ADD] bsLiveShadow += 8; continue;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsBuffShadow =  ( bsBuffShadow << 3 )  & thech;^743^^^^^727^758^[REPLACE] bsBuffShadow =  ( bsBuffShadow << 8 )  | thech;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^bsLiveShadow += 8 - 3;^744^^^^^727^758^[REPLACE] bsLiveShadow += 8;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^zvec =  ( zvec )  &  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^751^^^^^727^758^[REPLACE] zvec =  ( zvec << 1 )  |  (  ( bsBuffShadow >> bsLiveShadow )  & 1 ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int thech = in.read (  ) ;^740^^^^^727^758^[REPLACE] final int thech = inShadow.read (  ) ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^747^^^^^727^758^[REPLACE] throw new IOException  (" ")  ;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.bsBuff = bsBuffShadow;^754^755^^^^727^758^[ADD] this.bsLive = bsLiveShadow; this.bsBuff = bsBuffShadow;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.bsBuff =  offs;^755^^^^^727^758^[REPLACE] this.bsBuff = bsBuffShadow;^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return dataShadow.perm[zt][zvec zt];^757^^^^^727^758^[REPLACE] return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];^[METHOD] getAndMoveToFrontDecode0 [TYPE] int [PARAMETER] final int groupNo [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.data !=dataShadow )  {^761^^^^^760^796^[REPLACE] if  ( this.data == null )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^761^762^763^^^760^796^[ADD] if  ( this.data == null )  { return; }^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return;  ;^762^^^^^760^796^[REPLACE] return;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm = dataShadow.perm  ;^765^^^^^760^796^[REPLACE] final int[] cftab = this.data.cftab;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] tt = this.data.initTT ( this.last su_rTPos ) ;^766^^^^^760^796^[REPLACE] final int[] tt = this.data.initTT ( this.last + 1 ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] ll8 = dataShadow.ll8  ;^767^^^^^760^796^[REPLACE] final byte[] ll8 = this.data.ll8;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^cftab[2] = 2;^768^^^^^760^796^[REPLACE] cftab[0] = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^System.arraycopy ( this.data.unzftab, 0L, unzftab, 1, 256 ) ;^769^^^^^760^796^[REPLACE] System.arraycopy ( this.data.unzftab, 0, cftab, 1, 256 ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^c +=  unzftab[i];^772^^^^^760^796^[REPLACE] c += cftab[i];^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^cftab[0] = 0  ;^773^^^^^760^796^[REPLACE] cftab[i] = c;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^for  ( int i = 2, c = cftab[0]; i <= 256; i++ )  {^771^^^^^760^796^[REPLACE] for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^771^772^773^774^^760^796^[ADD] for  ( int i = 1, c = cftab[0]; i <= 256; i++ )  { c += cftab[i]; cftab[i] = c; }^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^tt[cftab[ll8[i] | 0xff]++] = i;^777^^^^^760^796^[REPLACE] tt[cftab[ll8[i] & 0xff]++] = i;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int pp = 0  ;^776^^^^^760^796^[REPLACE] for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[] ttShadow = this.tt  ;^776^^^^^760^796^[REPLACE] for  ( int i = 0, lastShadow = this.last; i <= lastShadow; i++ )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (   ( this.origPtr >= tt.length - 4 )  )  {^780^^^^^760^796^[REPLACE] if  (  ( this.origPtr < 0 )  ||  ( this.origPtr >= tt.length )  )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^throw new IOException ( "BZip2 CRC error" )  ;^781^^^^^760^796^[REPLACE] throw new IOException  (" ")  ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^return ;^781^^^^^760^796^[REPLACE] throw new IOException  (" ")  ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos =  unzftab[this.origPtr];^784^^^^^760^796^[REPLACE] this.su_tPos = tt[this.origPtr];^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_i2 = 0;^785^786^^^^760^796^[ADD] this.su_count = 0; this.su_i2 = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 3;^786^^^^^760^796^[REPLACE] this.su_i2 = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  inShadow != null  )   {  ;^789^^^^^760^796^[REPLACE] if  ( this.blockRandomised )  {^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^setupNoRandPartC (  )  ;^794^^^^^789^795^[REPLACE] setupNoRandPartA (  ) ;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_rTPos = 0;^790^791^^^^760^796^[ADD] this.su_rNToGo = 0; this.su_rTPos = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 3;^791^^^^^760^796^[REPLACE] this.su_rTPos = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0  ;^790^^^^^760^796^[REPLACE] this.su_rNToGo = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 4;^791^^^^^760^796^[REPLACE] this.su_rTPos = 0;^[METHOD] setupBlock [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_i2  !=  this.last )  {^799^^^^^798^821^[REPLACE] if  ( this.su_i2 <= this.last )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_chPrev = this.su_ch2;int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;this.su_tPos = this.data.tt[this.su_tPos];^799^800^801^802^^798^821^[ADD] if  ( this.su_i2 <= this.last )  { this.su_chPrev = this.su_ch2; int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff; this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^setupBlock (  )  ;^817^^^^^799^820^[REPLACE] endBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^817^818^^^^799^820^[ADD] endBlock (  ) ; initBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^endBlock (  )  ;^818^^^^^799^820^[REPLACE] initBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^endBlock (  )  ;^819^^^^^799^820^[REPLACE] setupBlock (  ) ;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  || n )  {^803^^^^^798^821^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;this.su_rTPos = 0;^803^804^805^806^807^798^821^[ADD] if  ( this.su_rNToGo == 0 )  { this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1; if  ( ++this.su_rTPos == 512 )  { this.su_rTPos = 0; }^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  !=  512 )  {^805^^^^^798^821^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^806^^^^^798^821^[ADD] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  1 >>> 2;^804^^^^^798^821^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 2;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  !=  427 )  {^805^^^^^798^821^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0  ;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentChar = this.su_ch2  ;^800^^^^^798^821^[REPLACE] this.su_chPrev = this.su_ch2;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  =  this.su_tPos ;^802^^^^^798^821^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  1;^804^^^^^798^821^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 1;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^su_ch2Shadow ^=  (  ( this.su_rNToGo )  == 1 )  ? 1 : 0  ;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2  =  1 ;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow  ;^813^^^^^798^821^[REPLACE] this.currentChar = su_ch2Shadow;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^814^^^^^798^821^[REPLACE] this.currentState = RAND_PART_B_STATE;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^801^^^^^798^821^[ADD] int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  ||  0 )  {^803^^^^^798^821^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  &&  249 )  {^805^^^^^798^821^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  1L;^804^^^^^798^821^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0L;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 >> 2;^806^^^^^798^821^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_chPrev  = null ;^800^^^^^798^821^[REPLACE] this.su_chPrev = this.su_ch2;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  = null ;^802^^^^^798^821^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2  =  0;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo  !=  4 )  ? 4 : 0;^811^^^^^798^821^[REPLACE] this.su_ch2 = su_ch2Shadow ^=  ( this.su_rNToGo == 1 )  ? 1 : 0;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int su_ch2Shadow = this.data.ll8[this.su_tPos] | 0xff;^801^^^^^798^821^[REPLACE] int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[METHOD] setupRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_i2  <  this.last )  {^824^^^^^823^839^[REPLACE] if  ( this.su_i2 <= this.last )  {^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^834^^^^^824^838^[REPLACE] this.currentState = NO_RAND_PART_A_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_chPrev  = null ;^825^^^^^823^839^[REPLACE] this.su_chPrev = this.su_ch2;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentChar = su_ch2Shadow  ;^827^^^^^823^839^[REPLACE] this.su_ch2 = su_ch2Shadow;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^828^^^^^823^839^[ADD] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_ch2 = su_ch2Shadow  ;^830^^^^^823^839^[REPLACE] this.currentChar = su_ch2Shadow;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = START_BLOCK_STATE  ;^831^^^^^823^839^[REPLACE] this.currentState = NO_RAND_PART_B_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^826^^^^^823^839^[ADD] int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_chPrev ;^825^^^^^823^839^[REPLACE] this.su_chPrev = this.su_ch2;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  =  this.su_tPos ;^828^^^^^823^839^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^830^831^^^^823^839^[ADD] this.currentChar = su_ch2Shadow; this.currentState = NO_RAND_PART_B_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^834^^^^^823^839^[REPLACE] this.currentState = NO_RAND_PART_A_STATE;^[METHOD] setupNoRandPartA [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  (offs  ==  this.su_chPrev )  {^842^^^^^841^867^[REPLACE] if  ( this.su_ch2 != this.su_chPrev )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( ++this.su_count  !=  4 )  {^846^^^^^841^867^[REPLACE] } else if  ( ++this.su_count >= 4 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^864^865^^^^846^866^[ADD] this.currentState = RAND_PART_A_STATE; setupRandPartA (  ) ;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  this.su_rNToGo == 1  )   {  ;^849^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;this.su_rTPos = 0;^849^850^851^852^853^841^867^[ADD] if  ( this.su_rNToGo == 0 )  { this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1; if  ( ++this.su_rTPos == 512 )  { this.su_rTPos = 0; }^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  ||  3 )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 * 1;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^850^^^^^841^867^[ADD] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0L;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  ||  512 )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^this.su_rTPos = 0;^851^852^853^^^841^867^[ADD] if  ( ++this.su_rTPos == 512 )  { this.su_rTPos = 0; }^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 4;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  this.su_rNToGo == 0  )   {  ;^859^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 1 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0  ;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^847^^^^^841^867^[ADD] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^848^^^^^841^867^[ADD] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^852^^^^^841^867^[ADD] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 2;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^858^^^^^841^867^[REPLACE] this.currentState = RAND_PART_C_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 0;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  !=  0 )  {^849^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 0 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^849^850^851^852^853^841^867^[ADD] if  ( this.su_rNToGo == 0 )  { this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1; if  ( ++this.su_rTPos == 512 )  { this.su_rTPos = 0; }^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^851^852^853^^^841^867^[ADD] if  ( ++this.su_rTPos == 512 )  { this.su_rTPos = 0; }^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 3;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 - 4;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( this.su_rNToGo  !=  1 )  {^859^^^^^841^867^[REPLACE] if  ( this.su_rNToGo == 1 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 1L;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^847^848^^^^841^867^[ADD] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ; this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_tPos  = null ;^848^^^^^841^867^[REPLACE] this.su_tPos = this.data.tt[this.su_tPos];^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos]  1 * 1;^850^^^^^841^867^[REPLACE] this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 1;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 1 * 3;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^864^^^^^841^867^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^843^844^^^^841^867^[ADD] this.currentState = RAND_PART_A_STATE; this.su_count = 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^844^^^^^841^867^[ADD] this.su_count = 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^}  if  ( ++this.su_count  >  4 )  {^846^^^^^841^867^[REPLACE] } else if  ( ++this.su_count >= 4 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^}   this.su_tPos = this.data.tt[this.su_tPos];this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^846^847^848^849^850^841^867^[ADD] else if  ( ++this.su_count >= 4 )  { this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ; this.su_tPos = this.data.tt[this.su_tPos]; if  ( this.su_rNToGo == 0 )  { this.su_rNToGo = BZip2Constants.rNums[this.su_rTPos] - 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^864^^^^^846^866^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if  ( ++this.su_rTPos  !=  512 )  {^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^if   (  this.su_rNToGo == 1  )   {  ;^851^^^^^841^867^[REPLACE] if  ( ++this.su_rTPos == 512 )  {^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0  ;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^860^^^^^841^867^[ADD] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_j2 = 1;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_rTPos = 0 - 3;^852^^^^^841^867^[REPLACE] this.su_rTPos = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^859^860^861^^^841^867^[ADD] if  ( this.su_rNToGo == 1 )  { this.su_z ^= 1; }^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z ^= 1 / 4;^860^^^^^841^867^[REPLACE] this.su_z ^= 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.currentState = NO_RAND_PART_B_STATE  ;^843^^^^^841^867^[REPLACE] this.currentState = RAND_PART_A_STATE;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_count = 1L;^844^^^^^841^867^[REPLACE] this.su_count = 1;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] | 0xff ) ;^847^^^^^841^867^[REPLACE] this.su_z =  ( char )   ( this.data.ll8[this.su_tPos] & 0xff ) ;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^this.su_i2 = 0  ;^857^^^^^841^867^[REPLACE] this.su_j2 = 0;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[ADD]^^864^865^^^^841^867^[ADD] this.currentState = RAND_PART_A_STATE; setupRandPartA (  ) ;^[METHOD] setupRandPartB [TYPE] void [PARAMETER] [CLASS] BZip2CompressorInputStream Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final boolean[] inUse ;^913^^^^^^^[REPLACE] final boolean[] inUse = new boolean[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] seqToUnseq ;^915^^^^^^^[REPLACE] final byte[] seqToUnseq = new byte[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selector ;^916^^^^^^^[REPLACE] final byte[] selector = new byte[MAX_SELECTORS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] selectorMtf ;^917^^^^^^^[REPLACE] final byte[] selectorMtf = new byte[MAX_SELECTORS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] unzftab ;^923^^^^^^^[REPLACE] final int[] unzftab = new int[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] limit  = null ;^925^^^^^^^[REPLACE] final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];^926^^^^^^^[REPLACE] final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[][] perm ;^927^^^^^^^[REPLACE] final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final int[] minLens ;^928^^^^^^^[REPLACE] final int[] minLens = new int[N_GROUPS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^int[] cftab = new int[257 % 2];^930^^^^^^^[REPLACE] final int[] cftab = new int[257];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char[] getAndMoveToFrontDecode_yy = new char[9];^931^^^^^^^[REPLACE] final char[] getAndMoveToFrontDecode_yy = new char[256];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final char[][] temp_charArray2d ;^932^^^^^^^[REPLACE] final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
[REPLACE]^final byte[] recvDecodingTables_pos  = null ;^934^^^^^^^[REPLACE] final byte[] recvDecodingTables_pos = new byte[N_GROUPS];^[METHOD] initTT [TYPE] int[] [PARAMETER] int length [CLASS] Data   [TYPE]  int[][] base  limit  perm  [TYPE]  InputStream in  inShadow  [TYPE]  char[][] len  temp_charArray2d  [TYPE]  Data data  dataShadow  [TYPE]  int[] base  base_zt  cftab  limit  limit_zt  minLens  perm  perm_zt  tt  ttShadow  unzftab  [TYPE]  int EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  alphaSize  b  blockSize  blockSize100k  bsBuff  bsBuffShadow  bsLive  bsLiveShadow  c  computedBlockCRC  computedCombinedCRC  curr  currentChar  currentState  destOffs  eob  groupNo  groupPos  hi  i  i16  inUse16  j  last  lastShadow  len  length  limitLast  magic  maxLen  minLen  minLens_zt  n  nGroups  nInUse  nInUseShadow  nSelectors  nb  nextSym  offs  origPtr  pp  retChar  s  storedBlockCRC  storedCombinedCRC  su_ch2  su_ch2Shadow  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  t  thech  v  vec  zn  zt  zvec  [TYPE]  char[] getAndMoveToFrontDecode_yy  len_t  length  yy  [TYPE]  byte[] dest  ll8  pos  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  [TYPE]  boolean blockRandomised  false  true  [TYPE]  CRC crc  [TYPE]  char expected  lent  magic0  magic1  magic2  magic3  magic4  magic5  su_z  tmp  [TYPE]  boolean[] inUse 
