[REPLACE]^if   (  archiverName == null || out == null  )   {  ;^59^^^^^58^75^[REPLACE] if  ( archiverName == null || in == null )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^return ;^60^^^^^58^75^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^^60^^^^^58^75^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^63^^^^^58^75^[REPLACE] if  ( "ar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^65^^^^^58^75^[REPLACE] } else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^}   return new TarArchiveInputStream ( in ) ;^65^66^67^68^^58^75^[ADD] else if  ( "zip".equalsIgnoreCase ( archiverName )  )  { return new ZipArchiveInputStream ( in ) ; } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  { return new TarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^if   (  "ar".equalsIgnoreCase  (  archiverName  )    )   {  ;^67^^^^^58^75^[REPLACE] } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^}  else {^69^^^^^58^75^[REPLACE] } else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^}   return new CpioArchiveInputStream ( in ) ;^69^70^71^72^73^58^75^[ADD] else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveInputStream ( in ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^}  else {^71^^^^^58^75^[REPLACE] } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^72^^^^^58^75^[REPLACE] return new CpioArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^return  new ZipArchiveOutputStream ( out )  ;^70^^^^^58^75^[REPLACE] return new JarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^}  if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^58^75^[REPLACE] } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^}^71^72^73^^^58^75^[ADD] else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^68^^^^^58^75^[REPLACE] return new TarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^69^^^^^58^75^[REPLACE] } else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^}   return new JarArchiveInputStream ( in ) ;return new CpioArchiveInputStream ( in ) ;^69^70^71^72^73^58^75^[ADD] else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveInputStream ( in ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^71^^^^^58^75^[REPLACE] } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^66^^^^^58^75^[REPLACE] return new ZipArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^}  else {^67^^^^^58^75^[REPLACE] } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^}  if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^69^^^^^58^75^[REPLACE] } else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^}   return new CpioArchiveInputStream ( in ) ;^71^72^73^^^58^75^[ADD] else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^64^^^^^58^75^[REPLACE] return new ArArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^}   return new TarArchiveInputStream ( in ) ;return new JarArchiveInputStream ( in ) ;^67^68^69^70^^58^75^[ADD] else if  ( "tar".equalsIgnoreCase ( archiverName )  )  { return new TarArchiveInputStream ( in ) ; } else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^}  if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^67^^^^^58^75^[REPLACE] } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[ADD]^^74^^^^^58^75^[ADD] throw new ArchiveException  (" ")  ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] String archiverName InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  String archiverName 
[REPLACE]^if  ( archiverName != null || out == null )  {^89^^^^^88^106^[REPLACE] if  ( archiverName == null || out == null )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^throw new IllegalArgumentException ( "Archivername must not be null." )  ;^90^91^^^^88^106^[REPLACE] throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[ADD]^^90^91^^^^88^106^[ADD] throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^94^^^^^88^106^[REPLACE] if  ( "ar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^96^^^^^88^106^[REPLACE] } else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^}  if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^98^^^^^88^106^[REPLACE] } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^}  if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^100^^^^^88^106^[REPLACE] } else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^}  if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^88^106^[REPLACE] } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^103^^^^^88^106^[REPLACE] return new CpioArchiveOutputStream ( out ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^101^^^^^88^106^[REPLACE] return new JarArchiveOutputStream ( out ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^} else if   (  "tar".equalsIgnoreCase  (  archiverName  )    )   {  ;^102^^^^^88^106^[REPLACE] } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[ADD]^}   return new CpioArchiveOutputStream ( out ) ;^102^103^104^^^88^106^[ADD] else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^99^^^^^88^106^[REPLACE] return new TarArchiveOutputStream ( out ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^97^^^^^88^106^[REPLACE] return new ZipArchiveOutputStream ( out ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^}  else {^98^^^^^88^106^[REPLACE] } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^}  else {^100^^^^^88^106^[REPLACE] } else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[ADD]^}   return new JarArchiveOutputStream ( out ) ;return new CpioArchiveOutputStream ( out ) ;^100^101^102^103^104^88^106^[ADD] else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveOutputStream ( out ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^}  else {^102^^^^^88^106^[REPLACE] } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[ADD]^}^102^103^104^^^88^106^[ADD] else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^95^^^^^88^106^[REPLACE] return new ArArchiveOutputStream ( out ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[ADD]^}   return new TarArchiveOutputStream ( out ) ;^96^97^98^99^^88^106^[ADD] else if  ( "zip".equalsIgnoreCase ( archiverName )  )  { return new ZipArchiveOutputStream ( out ) ; } else if  ( "tar".equalsIgnoreCase ( archiverName )  )  { return new TarArchiveOutputStream ( out ) ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[ADD]^}   return new CpioArchiveOutputStream ( out ) ;^100^101^102^103^104^88^106^[ADD] else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveOutputStream ( out ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^return ;^105^^^^^88^106^[REPLACE] throw new ArchiveException  (" ")  ;^[METHOD] createArchiveOutputStream [TYPE] ArchiveOutputStream [PARAMETER] String archiverName OutputStream out [CLASS] ArchiveStreamFactory   [TYPE]  boolean false  true  [TYPE]  OutputStream out  [TYPE]  String archiverName 
[REPLACE]^if  ( in != this )  {^119^^^^^118^153^[REPLACE] if  ( in == null )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return ;^120^^^^^118^153^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^if  ( !in.mark (  )  )  {^123^^^^^118^153^[REPLACE] if  ( !in.markSupported (  )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^throw new IllegalArgumentException ( "Archivername must not be null." )  ;^124^^^^^118^153^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^^127^^^^^118^153^[ADD] final byte[] signature = new byte[12];^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^in.read ( signature.length ) ;^128^^^^^118^153^[REPLACE] in.mark ( signature.length ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if   (  CpioArchiveInputStream.matches  (  signature, signatureLength  )    )   {  ;^132^^^^^118^153^[REPLACE] if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if   (  CpioArchiveInputStream.matches  (  signature, signatureLength  )    )   {  ;^134^135^^^^118^153^[REPLACE] } else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( TarArchiveInputStream  .ZipArchiveInputStream ( in )   )  {^137^138^^^^118^153^[REPLACE] } else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if   (  CpioArchiveInputStream.matches  (  signature, signatureLength  )    )   {  ;^140^^^^^118^153^[REPLACE] } else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if   (  TarArchiveInputStream .matches  (  signature, signatureLength  )    )   {  ;^142^143^^^^118^153^[REPLACE] } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^144^^^^^142^145^[REPLACE] return new CpioArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^144^^^^^118^153^[REPLACE] return new CpioArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^141^^^^^118^153^[REPLACE] return new ArArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  else {^142^143^^^^118^153^[REPLACE] } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^139^^^^^137^145^[REPLACE] return new TarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( ArArchiveInputStream .ZipArchiveInputStream ( in )   )  {^140^^^^^118^153^[REPLACE] } else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^142^143^^^^118^153^[REPLACE] } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^139^^^^^118^153^[REPLACE] return new TarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new ZipArchiveOutputStream ( out )  ;^136^^^^^134^145^[REPLACE] return new JarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if   (  CpioArchiveInputStream.matches  (  signature, signatureLength  )    )   {  ;^137^138^^^^118^153^[REPLACE] } else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^}   return new ArArchiveInputStream ( in ) ;return new CpioArchiveInputStream ( in ) ;^140^141^142^143^144^118^153^[ADD] else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  { return new ArArchiveInputStream ( in ) ; } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^}   return new CpioArchiveInputStream ( in ) ;^142^143^144^145^^118^153^[ADD] else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ; }^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  else {^140^^^^^118^153^[REPLACE] } else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new ZipArchiveOutputStream ( out )  ;^136^^^^^118^153^[REPLACE] return new JarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return  new JarArchiveInputStream ( in )  ;^133^^^^^118^153^[REPLACE] return new ZipArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  else {^134^135^^^^118^153^[REPLACE] } else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if  ( TarArchiveInputStream  .ZipArchiveInputStream ( in )   )  {^137^138^^^^118^153^[REPLACE] } else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^}   return new TarArchiveInputStream ( in ) ;return new ArArchiveInputStream ( in ) ;^137^138^139^140^141^118^153^[ADD] else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  { return new TarArchiveInputStream ( in ) ; } else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  { return new ArArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( CpioArchiveInputStream .ZipArchiveInputStream ( in )   )  {^142^143^^^^118^153^[REPLACE] } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^int signatureLength = in.read ( signature ) ;in.reset (  ) ;return new ZipArchiveInputStream ( in ) ;^129^130^131^132^133^118^153^[ADD] try { int signatureLength = in.read ( signature ) ; in.reset (  ) ; if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  { return new ZipArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^return new ZipArchiveInputStream ( in ) ;return new JarArchiveInputStream ( in ) ;^132^133^134^135^136^118^153^[ADD] if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  { return new ZipArchiveInputStream ( in ) ; } else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  { return new JarArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^134^135^^^^118^153^[REPLACE] } else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^}   return new JarArchiveInputStream ( in ) ;^134^135^136^137^^118^153^[ADD] else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  { return new JarArchiveInputStream ( in ) ; } else if  ( TarArchiveInputStream^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if  ( ArArchiveInputStream .ZipArchiveInputStream ( in )   )  {^140^^^^^118^153^[REPLACE] } else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^137^138^^^^118^153^[REPLACE] } else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^140^^^^^118^153^[REPLACE] } else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^}   return new CpioArchiveInputStream ( in ) ;^140^141^142^143^144^118^153^[ADD] else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  { return new ArArchiveInputStream ( in ) ; } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^} else if  ( CpioArchiveInputStream .ZipArchiveInputStream ( in )   )  {^142^143^^^^118^153^[REPLACE] } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^}  else {^137^138^^^^118^153^[REPLACE] } else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^^130^^^^^118^153^[ADD] int signatureLength = in.read ( signature ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^int signatureLength = in.mark ( signature ) ;^130^^^^^118^153^[REPLACE] int signatureLength = in.read ( signature ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[REPLACE]^return ;^147^148^^^^118^153^[REPLACE] throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
[ADD]^^151^152^^^^118^153^[ADD] throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^[METHOD] createArchiveInputStream [TYPE] ArchiveInputStream [PARAMETER] InputStream in [CLASS] ArchiveStreamFactory   [TYPE]  byte[] signature  [TYPE]  boolean false  true  [TYPE]  InputStream in  [TYPE]  IOException e  [TYPE]  int signatureLength 
