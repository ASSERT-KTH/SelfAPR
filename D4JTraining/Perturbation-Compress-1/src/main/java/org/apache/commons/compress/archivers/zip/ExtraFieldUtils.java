[REPLACE]^private static final int WORD = 5;^33^^^^^^^[REPLACE] private static final int WORD = 4;^ [CLASS] ExtraFieldUtils  
[REPLACE]^private static  Map implementations;^38^^^^^^^[REPLACE] private static final Map implementations;^ [CLASS] ExtraFieldUtils  
[REPLACE]^int start = 0  ;^109^^^^^108^137^[REPLACE] List v = new ArrayList (  ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^110^^^^^108^137^[ADD] int start = 0;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^if  ( start + WORD + length + 4 > data.length + 4 )  {^114^^^^^108^137^[REPLACE] if  ( start + WORD + length > data.length )  {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^114^115^116^117^^108^137^[ADD] if  ( start + WORD + length > data.length )  { throw new ZipException ( "data starting at " + start + " is in unknown format" ) ; }^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^return ;^115^116^^^^108^137^[REPLACE] throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^if   (  start + WORD + length > data.length  )   {  ;^120^^^^^108^137^[REPLACE] if  ( local )  {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromCentralDirectoryData ( data, start + WORD, length + 2 ) ;^123^124^^^^120^125^[REPLACE] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^123^124^^^^120^125^[ADD] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromLocalFileData ( data, start + WORD, length - 3 ) ;^121^^^^^108^137^[REPLACE] ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^ZipExtraField ze = createExtraField ( headerId ) ;ze.parseFromLocalFileData ( data, start + WORD, length ) ;^118^119^120^121^122^108^137^[ADD] try { ZipExtraField ze = createExtraField ( headerId ) ; if  ( local )  { ze.parseFromLocalFileData ( data, start + WORD, length ) ; } else {^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^ze.parseFromLocalFileData ( data, start + WORD, length ) ;length ) ;^120^121^122^123^124^108^137^[ADD] if  ( local )  { ze.parseFromLocalFileData ( data, start + WORD, length ) ; } else { ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze.parseFromCentralDirectoryData ( data, length + WORD, length *  2 ) ;^123^124^^^^120^125^[REPLACE] ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ze .parseFromCentralDirectoryData ( data , WORD , length )  ;^121^^^^^108^137^[REPLACE] ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ZipExtraField ze =  (  ( ZipExtraField )   ( c.newInstance (  )  )  )  ;^119^^^^^108^137^[REPLACE] ZipExtraField ze = createExtraField ( headerId ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^start +=  ( length /  0.5  + WORD ) ;^132^^^^^108^137^[REPLACE] start +=  ( length + WORD ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ZipExtraField ze =  (  ( ZipExtraField )   ( c.newInstance (  )  )  )  ;^112^^^^^108^137^[REPLACE] ZipShort headerId = new ZipShort ( data, start ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^int length - 2 =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^113^^^^^108^137^[REPLACE] int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^128^^^^^108^137^[ADD] throw new ZipException  (" ")  ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^throw new ZipException ( ie.getMessage (  )  )  ;^130^^^^^108^137^[REPLACE] throw new ZipException  (" ")  ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^ZipExtraField ze =  (  ( ZipExtraField )   ( c.newInstance (  )  )  )  ;^135^^^^^108^137^[REPLACE] ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[REPLACE]^return  ( ZipExtraField[] )  v.size ( result ) ;^136^^^^^108^137^[REPLACE] return  ( ZipExtraField[] )  v.toArray ( result ) ;^[METHOD] parse [TYPE] ZipExtraField[] [PARAMETER] byte[] data boolean local [CLASS] ExtraFieldUtils   [TYPE]  byte[] data  [TYPE]  ZipExtraField ze  [TYPE]  ZipShort headerId  [TYPE]  boolean false  local  true  [TYPE]  ZipExtraField[] result  [TYPE]  List v  [TYPE]  Map implementations  [TYPE]  int WORD  length  start  [TYPE]  InstantiationException ie  [TYPE]  IllegalAccessException iae 
[ADD]^^145^^^^^144^161^[ADD] int sum = WORD * data.length;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^sum += data[i].getCentralDirectoryLength (  ) .getValue (  )  ;^147^^^^^144^161^[REPLACE] sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^146^^^^^144^161^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int start = 0  ;^149^^^^^144^161^[REPLACE] byte[] result = new byte[sum];^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^150^^^^^144^161^[ADD] int start = 0;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^start += length +  ( WORD )  ;^158^^^^^144^161^[REPLACE] start +=  ( local.length + WORD ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^151^^^^^144^161^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^156^^^^^144^161^[ADD] byte[] local = data[i].getLocalFileDataData (  ) ;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^return local;^160^^^^^144^161^[REPLACE] return result;^[METHOD] mergeLocalFileDataData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int sum = WORD * data.length + 2;^169^^^^^168^185^[REPLACE] int sum = WORD * data.length;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^sum += data[i].getLocalFileDataLength (  ) .getValue (  )  ;^171^^^^^168^185^[REPLACE] sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^170^^^^^168^185^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int start = 0  ;^173^^^^^168^185^[REPLACE] byte[] result = new byte[sum];^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^int start = 3;^174^^^^^168^185^[REPLACE] int start = 0;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[ADD]^^182^^^^^168^185^[ADD] start +=  ( local.length + WORD ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^for  ( int i = 0 ; i < data.length; i++ )  {^175^^^^^168^185^[REPLACE] for  ( int i = 0; i < data.length; i++ )  {^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^byte[] local = data[i].getLocalFileDataData (  )  ;^180^^^^^168^185^[REPLACE] byte[] local = data[i].getCentralDirectoryData (  ) ;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
[REPLACE]^return result;  ;^184^^^^^168^185^[REPLACE] return result;^[METHOD] mergeCentralDirectoryData [TYPE] byte[] [PARAMETER] ZipExtraField[] data [CLASS] ExtraFieldUtils   [TYPE]  byte[] local  result  [TYPE]  boolean false  true  [TYPE]  Map implementations  [TYPE]  ZipExtraField[] data  [TYPE]  int WORD  i  length  start  sum 
