[REPLACE]^private final char unicode;^53^^^^^^^[REPLACE] public final char unicode;^ [CLASS] Simple8BitZipEncoding Simple8BitChar  
[REPLACE]^public final  long  code;^54^^^^^^^[REPLACE] public final byte code;^ [CLASS] Simple8BitZipEncoding Simple8BitChar  
[REPLACE]^int i2 = 2;^167^^^^^164^198^[REPLACE] int i0 = 0;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r =  (  ( Simple8BitChar )   ( get ( i0 )  )  )  ;^168^^^^^164^198^[REPLACE] int i1 = this.reverseMapping.size (  ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if   (  r.unicode != c  )   {  ;^176^^^^^164^198^[REPLACE] if  ( m.unicode == c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return r;  ;^177^^^^^164^198^[REPLACE] return m;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( m.unicode  !=  c )  {^180^^^^^164^198^[REPLACE] if  ( m.unicode < c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^i0 = i + 1;i1 = i;^180^181^182^183^184^164^198^[ADD] if  ( m.unicode < c )  { i0 = i + 1; } else { i1 = i; }^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i1 =  i0;^183^^^^^180^184^[REPLACE] i1 = i;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i0 = i  1;^181^^^^^164^198^[REPLACE] i0 = i + 1;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^i1 =  i0;^183^^^^^164^198^[REPLACE] i1 = i;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^172^^^^^164^198^[ADD] int i = i0 +  ( i1 - i0 )  / 2;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r =  (  ( Simple8BitChar )   ( get ( i0 )  )  )  ;^174^^^^^164^198^[REPLACE] Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( i1 >= this.reverseMapping.length (  )  )  {^187^^^^^164^198^[REPLACE] if  ( i0 >= this.reverseMapping.size (  )  )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[ADD]^^187^188^189^^^164^198^[ADD] if  ( i0 >= this.reverseMapping.size (  )  )  { return null; }^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return false;^188^^^^^164^198^[REPLACE] return null;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return this;^188^^^^^164^198^[REPLACE] return null;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.size ( i1 ) ;^191^^^^^164^198^[REPLACE] Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^if  ( r.unicode  ==  c )  {^193^^^^^164^198^[REPLACE] if  ( r.unicode != c )  {^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return this;^194^^^^^164^198^[REPLACE] return null;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^return r;  ;^197^^^^^164^198^[REPLACE] return r;^[METHOD] encodeHighChar [TYPE] Simple8BitZipEncoding$Simple8BitChar [PARAMETER] char c [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  Simple8BitChar m  r  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  i0  i1  [TYPE]  char[] highChars 
[REPLACE]^ByteBuffer out = ByteBuffer.allocate ( name.charAt (  )  + 5+ 6 +  ( name.length (  )  + 5 + 1 )  / 2 ) ;^223^224^^^^222^243^[REPLACE] ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  (i (  )   !=  6L )  {^230^^^^^222^243^[REPLACE] if  ( out.remaining (  )  < 6 )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^230^231^232^^^222^243^[ADD] if  ( out.remaining (  )  < 6 )  { out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ; }^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   6 ) ;^231^^^^^222^243^[REPLACE] out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^if  ( this.pushEncodedChar ( out,c )  )  {^234^^^^^222^243^[REPLACE] if  ( !this.pushEncodedChar ( out,c )  )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^ZipEncodingHelper .growBuffer ( out , i )  ;^236^^^^^222^243^[REPLACE] ZipEncodingHelper.appendSurrogate ( out,c ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^for  ( int i=0 ;i<name.length (  ) ;++i )  {^226^^^^^222^243^[REPLACE] for  ( int i=0;i<name.length (  ) ;++i )  {^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^char c = name.String ( i ) ;^228^^^^^222^243^[REPLACE] char c = name.charAt ( i ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^size (  )  ;^240^^^^^222^243^[REPLACE] out.limit ( out.position (  )  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[ADD]^out.rewind (  ) ;^240^241^^^^222^243^[ADD] out.limit ( out.position (  )  ) ; out.rewind (  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out.limit ( out.remaining (  )  ) ;^240^^^^^222^243^[REPLACE] out.limit ( out.position (  )  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^out.remaining (  ) ;^241^^^^^222^243^[REPLACE] out.rewind (  ) ;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^return out;  ;^242^^^^^222^243^[REPLACE] return out;^[METHOD] encode [TYPE] ByteBuffer [PARAMETER] String name [CLASS] Simple8BitZipEncoding Simple8BitChar   [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  String name  [TYPE]  ByteBuffer out  [TYPE]  int i  [TYPE]  char[] highChars 
[REPLACE]^public  char unicode;^53^^^^^^^[REPLACE] public final char unicode;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
[REPLACE]^public final  short  code;^54^^^^^^^[REPLACE] public final byte code;^[METHOD] decode [TYPE] String [PARAMETER] byte[] data [CLASS] Simple8BitChar   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  byte b  code  [TYPE]  char c  unicode  [TYPE]  List reverseMapping  [TYPE]  int i  [TYPE]  char[] highChars  ret 
