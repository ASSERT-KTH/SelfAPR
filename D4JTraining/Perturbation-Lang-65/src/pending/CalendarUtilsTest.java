[REPLACE]^DateFormat parser  = null ;^34^^^^^^^[REPLACE] DateFormat parser = null;^ [CLASS] CalendarUtilsTest  
[REPLACE]^Date date1  = null ;^35^^^^^^^[REPLACE] Date date1 = null;^ [CLASS] CalendarUtilsTest  
[REPLACE]^Date date2  = null ;^36^^^^^^^[REPLACE] Date date2 = null;^ [CLASS] CalendarUtilsTest  
[REPLACE]^assertEquals ( .trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^72^73^74^^^71^114^[REPLACE] assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^74^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^75^76^77^^^71^114^[REPLACE] assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^77^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^77^^^^^71^114^[ADD] CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^78^79^80^^^71^114^[REPLACE] assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, DATE )  ;^80^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^81^82^83^^^71^114^[REPLACE] assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^83^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^83^^^^^71^114^[REMOVE] ^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils .round ( date2 )   ) ;^84^85^86^^^71^114^[REPLACE] assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^84^85^86^^^71^114^[ADD] assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, DATE )  ;^86^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .round ( date2 )   ) ;^89^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^90^91^92^^^71^114^[REPLACE] assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, MINUTE )  ;^92^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^95^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^96^97^98^^^71^114^[REPLACE] assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^97^98^^^^71^114^[ADD] parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^98^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .round ( date1 )   ) ;^101^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^101^^^^^71^114^[ADD] CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^102^103^104^^^71^114^[REPLACE] assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^104^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils .round ( date1 )   ) ;^105^106^107^^^71^114^[REPLACE] assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^107^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^108^109^110^^^71^114^[REPLACE] assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .round ( date1 )   ) ;^110^^^^^71^114^[REPLACE] CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^110^^^^^71^114^[ADD] CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^111^112^113^^^71^114^[REPLACE] assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^111^112^113^^^71^114^[ADD] assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^112^113^^^^71^114^[ADD] parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, DATE )  ;^113^^^^^71^114^[REPLACE] CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[METHOD] testRound [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^120^121^122^^^119^163^[REPLACE] assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^120^121^122^^^119^163^[ADD] assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^122^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils .trunc ( date1 )   ) ;^123^124^125^^^119^163^[REPLACE] assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^125^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^126^127^128^^^119^163^[REPLACE] assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^128^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^128^^^^^119^163^[ADD] CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^129^130^131^^^119^163^[REPLACE] assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^131^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^132^133^134^^^119^163^[ADD] assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ;^134^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils .trunc ( date1 )   ) ;^135^136^137^^^119^163^[REPLACE] assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.trunc ( date2, MONTH )  ;^137^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^138^139^140^^^119^163^[REPLACE] assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, DATE )  ;^140^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils .trunc ( date1 )   ) ;^141^142^143^^^119^163^[REPLACE] assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^143^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^143^^^^^119^163^[ADD] CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^144^145^146^^^119^163^[REPLACE] assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^145^146^^^^119^163^[ADD] parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^146^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^146^^^^^119^163^[REMOVE] ^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^147^148^149^^^119^163^[REPLACE] assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils .trunc ( date1 )   ) ;^149^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^149^^^^^119^163^[ADD] CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^150^151^152^^^119^163^[REPLACE] assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^152^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^155^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( .round second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^156^157^158^^^119^163^[REPLACE] assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^158^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils .trunc ( date1 )   ) ;^159^160^161^^^119^163^[REPLACE] assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[ADD]^^160^161^^^^119^163^[ADD] parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^161^^^^^119^163^[REPLACE] CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[METHOD] testTrunc [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  boolean false  true 
[REPLACE]^Calendar now = false;^176^^^^^169^223^[REPLACE] Calendar now = null;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  =  now ;^178^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MINUTE, -2 ) ;^179^^^^^169^223^[REPLACE] now.add ( Calendar.MINUTE, -1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^179^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^169^223^[REPLACE] assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "1 minute ago" ) , 50 ) ;^181^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^182^183^^^^169^223^[ADD] now = Calendar.getInstance (  ) ; now.add ( Calendar.MINUTE, -8 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MINUTE, -1 ) ;^183^^^^^169^223^[REPLACE] now.add ( Calendar.MINUTE, -8 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^184^185^^^^169^223^[ADD] assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "8 minutes ago" ) , 50 ) ;^185^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^185^^^^^169^223^[ADD] now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  =  now ;^187^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, -1 * 2 ) ;^188^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, -1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "yesterday" ) , 50 ) ;^190^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^192^193^^^^169^223^[ADD] now = Calendar.getInstance (  ) ; now.add ( Calendar.DATE, 1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( MINUTE,  ( -1 )  )  ;^193^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, 1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^193^^^^^169^223^[ADD] now.add ( Calendar.DATE, 1 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^169^223^[REPLACE] assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now, CalendarUtils.round ( "tomorrow" ) , 50 ) ;^195^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^195^^^^^169^223^[ADD] now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now  =  now ;^197^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^if   (  monday.get  (  Calendar.DATE  )   == 1  )   {  ;^199^^^^^169^223^[REPLACE] if  ( now.get ( Calendar.DATE )  == 1 )  {^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, 1  now.setTime ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^[REPLACE] now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^203^^^^^199^204^[ADD] now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^( now.get ( DATE )  )  ;^203^^^^^199^204^[REPLACE] now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.DATE, -7 * 4 ) ;^201^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, -7 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^201^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^CalendarUtils.parse ( "tomorrow" )  ;^206^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now ;^208^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( MINUTE,  ( -1 )  )  ;^209^^^^^169^223^[REPLACE] now.add ( Calendar.DATE, -7 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^169^223^[REPLACE] assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^CalendarUtils.parse ( "tomorrow" )  ;^211^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[ADD]^^211^^^^^169^223^[ADD] now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now ;^213^^^^^169^223^[REPLACE] now = Calendar.getInstance (  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^if  ( now.get ( Calendar.MONTH )   !=  0 )  {^215^^^^^169^223^[REPLACE] if  ( now.get ( Calendar.MONTH )  == 0 )  {^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^if  (  ( now.get ( DATE )  )  == 1 )  {     now.add ( DATE,  ( -7 )  ) ; }else {     now.add ( DATE,  ( 1 -  ( now.get ( DAY_OF_WEEK )  )  )  ) ; }^215^^^^^169^223^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MONTH, 0  now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^[REPLACE] now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( MINUTE,  ( -1 )  )  ;^219^^^^^215^220^[REPLACE] now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^219^^^^^215^220^[REMOVE] ^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^now.add ( Calendar.MONTH, -12 / 2 ) ;^217^^^^^169^223^[REPLACE] now.add ( Calendar.MONTH, -12 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^assertEquals ( .round last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^169^223^[REPLACE] assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^CalendarUtils.parse ( "tomorrow" )  ;^222^^^^^169^223^[REPLACE] now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[METHOD] testParse [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar now 
[REPLACE]^Calendar calStart = getInstance (  )  ;^229^^^^^228^251^[REPLACE] Calendar now = Calendar.getInstance (  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar today = CalendarUtils.trunc ( today, Calendar.DATE ) ;^230^^^^^228^251^[REPLACE] Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar centered = CalendarUtils.trunc ( now, DATE )  ;^231^^^^^228^251^[REPLACE] Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^sunday.add ( Calendar.DATE, 0  sunday.setTime ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^[REPLACE] sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^sunday.add ( Calendar.DATE, 1 - today.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^[REPLACE] sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^233^^^^^228^251^[ADD] Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^if  ( monday.get ( Calendar.DATE )   !=  4 )  {^234^^^^^228^251^[REPLACE] if  ( monday.get ( Calendar.DATE )  == 1 )  {^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^234^235^236^237^238^228^251^[ADD] if  ( monday.get ( Calendar.DATE )  == 1 )  {  monday.add ( Calendar.DATE, -6 ) ; } else { monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^monday.add ( Calendar.DATE, 2  monday .getTime (  )   ) ;^238^^^^^234^239^[REPLACE] monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^238^^^^^234^239^[REMOVE] ^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^monday.add ( Calendar.DATE, 2 - sunday.setTime ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^234^239^[REPLACE] monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^monday.add ( Calendar.DATE, -6 + 2 ) ;^236^^^^^228^251^[REPLACE] monday.add ( Calendar.DATE, -6 ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Calendar sunday = CalendarUtils.trunc ( now, DATE )  ;^240^^^^^228^251^[REPLACE] Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^centered.add ( Calendar.DATE, -4 ) ;^241^^^^^228^251^[REPLACE] centered.add ( Calendar.DATE, -3 ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Iterator it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^[REPLACE] Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^CalendarUtilsTest.assertWeekIterator ( it, centered )  ;^244^^^^^228^251^[REPLACE] assertWeekIterator ( it, sunday ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[ADD]^^244^^^^^228^251^[ADD] assertWeekIterator ( it, sunday ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY )  ;^245^^^^^228^251^[REPLACE] it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^CalendarUtilsTest.assertWeekIterator ( it, centered )  ;^246^^^^^228^251^[REPLACE] assertWeekIterator ( it, monday ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^246^^^^^228^251^[REMOVE] ^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY )  ;^247^^^^^228^251^[REPLACE] it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^CalendarUtilsTest.assertWeekIterator ( it, centered )  ;^248^^^^^228^251^[REPLACE] assertWeekIterator ( it, today ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY )  ;^249^^^^^228^251^[REPLACE] it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^CalendarUtilsTest.assertWeekIterator ( it, start, end )  ;^250^^^^^228^251^[REPLACE] assertWeekIterator ( it, centered ) ;^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REMOVE]^CalendarUtils.round ( date1, DATE )  ;^250^^^^^228^251^[REMOVE] ^[METHOD] testWeekIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser  [TYPE]  Calendar centered  monday  now  sunday  today 
[REPLACE]^Iterator it = CalendarUtils .getCalendarIterator ( null )  ;^257^^^^^256^276^[REPLACE] Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY )  ;^262^^^^^256^276^[REPLACE] it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY )  ;^267^^^^^256^276^[REPLACE] it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY )  ;^272^^^^^256^276^[REPLACE] it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[METHOD] testMonthIterator [TYPE] void [PARAMETER] [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  [TYPE]  DateFormat parser 
[REPLACE]^Calendar calStart = getInstance (  )  ;^307^^^^^306^327^[REPLACE] Calendar cal =  ( Calendar )  it.next (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^CalendarUtilsTest.assertWeekIterator ( it, start, end )  ;^308^^^^^306^327^[REPLACE] assertEquals ( "", start, cal, 0 ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^Calendar now = null  ;^309^^^^^306^327^[REPLACE] Calendar last = null;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^int count = 3;^310^^^^^306^327^[REPLACE] int count = 1;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[ADD]^^315^^^^^306^327^[ADD] last = cal;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^cal =   ( Calendar )  null.next (  ) ;^316^^^^^306^327^[REPLACE] cal =  ( Calendar )  it.next (  ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^if  ( count % 7L  ==  0 )  {^323^^^^^306^327^[REPLACE] if  ( count % 7 != 0 )  {^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^return ;^324^^^^^306^327^[REPLACE] throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
[REPLACE]^CalendarUtilsTest.assertEquals ( "", start, cal, 0 )  ;^326^^^^^306^327^[REPLACE] assertEquals ( "", end, cal, 0 ) ;^[METHOD] assertWeekIterator [TYPE] void [PARAMETER] Iterator it Calendar start Calendar end [CLASS] CalendarUtilsTest   [TYPE]  Iterator it  [TYPE]  boolean false  true  [TYPE]  Date date1  date2  end  start  [TYPE]  int count  [TYPE]  DateFormat parser  [TYPE]  Calendar cal  end  last  start 
