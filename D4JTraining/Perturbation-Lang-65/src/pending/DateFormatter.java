[REPLACE]^if  ( value !=value )  {^45^^^^^44^155^[REPLACE] if  ( dateStr == null )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return ;^46^^^^^44^155^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^46^^^^^44^155^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^DateFormat[] dateFormats = new DateFormat[0];^49^^^^^44^155^[REPLACE] DateFormatSymbols symbols = new DateFormatSymbols ( Locale.ENGLISH ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^49^^^^^44^155^[ADD] DateFormatSymbols symbols = new DateFormatSymbols ( Locale.ENGLISH ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^DateFormat[] dateFormats = new DateFormat[0 / 1];^51^^^^^44^155^[REPLACE] DateFormat[] dateFormats = new DateFormat[0];^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^String value = value.toLowerCase (  ) .trim (  ) ;^54^^^^^44^155^[REPLACE] String value = dateStr.toLowerCase (  ) .trim (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^Calendar cal = Calendar.getInstance (  ) ;^57^^^^^44^155^[REPLACE] Calendar now = Calendar.getInstance (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^57^^^^^44^155^[ADD] Calendar now = Calendar.getInstance (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^58^^^^^44^155^[REPLACE] if  ( value.endsWith ( " ago" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^58^59^^61^^44^155^[ADD] if  ( value.endsWith ( " ago" )  )  {  value = value.substring ( 0, value.length (  )  - 4 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^101^^^^^44^155^[REPLACE] } else if  ( value.startsWith ( "last " )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.endsWith ( "yesterday" )  )  {^135^^^^^44^155^[REPLACE] } else if  ( value.equals ( "yesterday" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.DATE, -1 ) ;return now;now.add ( Calendar.DATE, 1 ) ;^135^136^137^138^139^44^155^[ADD] else if  ( value.equals ( "yesterday" )  )  { now.add ( Calendar.DATE, -1 ) ; return now; } else if  ( value.equals ( "tomorrow" )  )  { now.add ( Calendar.DATE, 1 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( value .equalsIgnoreCase ( value )   )  {^138^^^^^44^155^[REPLACE] } else if  ( value.equals ( "tomorrow" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return cal;^140^^^^^44^155^[REPLACE] return now;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return cal;^137^^^^^44^155^[REPLACE] return now;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.equals ( "tomorrow" )  )  {^138^^^^^44^155^[REPLACE] } else if  ( value.equals ( "tomorrow" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.DATE, 1 ) ;return now;^138^139^140^141^^44^155^[ADD] else if  ( value.equals ( "tomorrow" )  )  { now.add ( Calendar.DATE, 1 ) ; return now; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^108^^^^^44^155^[REPLACE] if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  (val  !=  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^daysAgo += 7;^111^112^113^^^44^155^[ADD] if  ( daysAgo <= 0 )  { daysAgo += 7; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 1;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 5;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return cal;^115^^^^^44^155^[REPLACE] return now;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.setTime ( Calendar.DAY_OF_WEEK )  -val;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  !=  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 2;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^120^^^^^44^155^[REPLACE] if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^120^121^122^123^124^44^155^[ADD] if  ( value.equalsIgnoreCase ( strings[i] )  )  {  int monthsAgo = now.get ( Calendar.MONTH )  - i; if  ( monthsAgo <= 0 )  { monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( monthsAgo  !=  0 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^monthsAgo += 12;^123^124^125^^^44^155^[ADD] if  ( monthsAgo <= 0 )  { monthsAgo += 12; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 >>> 2;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 / 1;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return cal;^127^^^^^44^155^[REPLACE] return now;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )  -monthsAgo;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( val  >=  1 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^123^124^125^^^44^155^[ADD] if  ( monthsAgo <= 0 )  { monthsAgo += 12; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12L;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( value.endsWith ( "week" )  )  {^130^^^^^44^155^[REPLACE] if  ( value.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^130^131^132^133^^44^155^[ADD] if  ( value.equals ( "week" )  )  { now.add ( Calendar.DATE, -7 ) ; return now; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return cal;^132^^^^^44^155^[REPLACE] return now;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length /  0.5 ; i++ )  {^107^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( val  !=  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 3;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 - 4;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^111^112^113^^^44^155^[ADD] if  ( daysAgo <= 0 )  { daysAgo += 7; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 - 0;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   ==  i;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length - 1; i++ )  {^119^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^119^120^^122^^44^155^[ADD] for  ( int i = 0; i < strings.length; i++ )  { if  ( value.equalsIgnoreCase ( strings[i] )  )  { int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^if  ( value.equals ( "yesterday" )  )  {     now.add ( DATE,  ( -1 )  ) ;     return now; }else     if  ( value.equals ( "tomorrow" )  )  {         now.add ( DATE, 1 ) ;         return now;     }^120^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( monthsAgo  >=  0 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 5;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 - 2;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )   <  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 2;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )   ||  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 1 ) ;^104^^^^^44^155^[REPLACE] value = value.substring ( 5 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 % 0;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^strings =  null.getMonths (  ) ;^118^^^^^44^155^[REPLACE] strings = symbols.getMonths (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 0;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^String[] strings = symbols.getMonths (  ) ;^106^^^^^44^155^[REPLACE] String[] strings = symbols.getWeekdays (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0 ; i < strings.length; i++ )  {^107^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.setTime ( Calendar.DAY_OF_WEEK )   ^  i;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^110^^^^^44^155^[ADD] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0 ; i < strings.length; i++ )  {^119^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )   >  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return ;^134^^^^^44^155^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^134^^^^^44^155^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^108^109^110^111^112^44^155^[ADD] if  ( value.equalsIgnoreCase ( strings[i] )  )  {  int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i; if  ( daysAgo <= 0 )  { daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  <  0 % 3 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 0;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   >=  i;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( val  <  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 - 3;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( monthsAgo  <  0 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 + 3;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^124^^^^^44^155^[ADD] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( monthsAgo  > val )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 3;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^135^^^^^44^155^[REPLACE] } else if  ( value.equals ( "yesterday" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^138^^^^^44^155^[REPLACE] } else if  ( value.equals ( "tomorrow" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^if  ( value.equals ( "yesterday" )  )  {     now.add ( DATE,  ( -1 )  ) ;     return now; }else     if  ( value.equals ( "tomorrow" )  )  {         now.add ( DATE, 1 ) ;         return now;     }^138^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length %  2; i++ )  {^107^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^107^108^^110^^44^155^[ADD] for  ( int i = 0; i < strings.length; i++ )  { if  ( value.equalsIgnoreCase ( strings[i] )  )  { int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( val  ==  0L )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 + 1;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^112^^^^^44^155^[ADD] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  -val;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  !=  4 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   <=  i;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length - 4; i++ )  {^119^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 10;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 6 ) ;^104^^^^^44^155^[REPLACE] value = value.substring ( 5 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 >> 2;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 * 0;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^106^^^^^44^155^[ADD] String[] strings = symbols.getWeekdays (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.setTime ( Calendar.MONTH )   ||  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( start  != val )  {^65^^^^^44^155^[REPLACE] if  ( start < 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return ;^66^^^^^44^155^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^66^^^^^44^155^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( dateStr.equals ( "a" )  && value.equals ( "an" )  )  {^72^^^^^44^155^[REPLACE] if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^val =  Integer.parseInt ( dateStr ) ;^75^^^^^72^76^[REPLACE] val = Integer.parseInt ( value ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^75^^^^^72^76^[ADD] val = Integer.parseInt ( value ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^val = 4;^73^^^^^44^155^[REPLACE] val = 1;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  (  unit.equals ( "millisecond" )  )  {^79^^^^^44^155^[REPLACE] if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^81^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^83^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "days" )  && unit.equals ( "day" )  )  {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "weeks" )  && unit.equals ( "week" )  )  {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "fortnights" )  ) {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}^91^92^93^94^^44^155^[ADD] else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  { now.add ( Calendar.DATE, -val * 14 ) ; } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  { now.add ( Calendar.MONTH, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "months" )  ) {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^if  ( value.equals ( "yesterday" )  )  {     now.add ( DATE,  ( -1 )  ) ;     return now; }else     if  ( value.equals ( "tomorrow" )  )  {         now.add ( DATE, 1 ) ;         return now;     }^93^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return ;^98^^^^^95^99^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.YEAR, -start ) ;^96^^^^^44^155^[REPLACE] now.add ( Calendar.YEAR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return ;^98^^^^^44^155^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^94^^^^^44^155^[REPLACE] now.add ( Calendar.MONTH, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val ) ;^96^^^^^44^155^[REPLACE] now.add ( Calendar.YEAR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^98^^^^^44^155^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^98^^^^^95^99^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val ) ;^94^^^^^44^155^[REPLACE] now.add ( Calendar.MONTH, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^96^^^^^44^155^[REPLACE] now.add ( Calendar.YEAR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^96^^^^^44^155^[ADD] now.add ( Calendar.YEAR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.MONTH, -start ) ;^94^^^^^44^155^[REPLACE] now.add ( Calendar.MONTH, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.YEAR, -val ) ;^93^94^95^96^^44^155^[ADD] else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  { now.add ( Calendar.MONTH, -val ) ; } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.MONTH, -val ) ;^88^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^88^^^^^44^155^[ADD] now.add ( Calendar.DATE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  (  unit.equals ( "week" )  )  {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  (  unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^now.add ( Calendar.DATE, -val ) ;^92^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.YEAR, -val ) ;^95^96^97^98^99^44^155^[ADD] else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ; } else { throw new IllegalArgumentException  (" ")  ; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "fortnights" )  ) {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}^95^96^97^98^99^44^155^[ADD] else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ; } else { throw new IllegalArgumentException  (" ")  ; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start *val ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ;^96^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.HOUR, -start ) ;^86^^^^^44^155^[REPLACE] now.add ( Calendar.HOUR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^now.add ( Calendar.DATE, -val ) ;^86^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^87^88^89^90^^44^155^[ADD] else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  { now.add ( Calendar.DATE, -val ) ; } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  { now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "weeks" )  ) {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  (  unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "months" )  ) {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 3 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14L ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^94^^^^^44^155^[ADD] now.add ( Calendar.MONTH, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.equals ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^88^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "weeks" )  ) {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, val * 14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  ^  7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.equals ( "fortnights" )  ) {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, val * 0 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val ) ;^84^^^^^44^155^[REPLACE] now.add ( Calendar.MINUTE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "hours" )  ) {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( value )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val *val ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^92^^^^^44^155^[ADD] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( value )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start *start ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "months" )  ) {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "week" )  )  {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}^89^90^91^92^^44^155^[ADD] else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  { now.add ( Calendar.DATE, -val * 7 ) ; } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  { now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 - 4 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,start * 7 >> 4 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( dateStr )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^86^^^^^44^155^[REPLACE] now.add ( Calendar.HOUR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^86^^^^^44^155^[ADD] now.add ( Calendar.HOUR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "days" )  ) {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "weeks" )  && unit.equals ( "week" )  )  {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,start * 14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^now.add ( Calendar.DATE, -val ) ;^90^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( value )   && unit^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.YEAR, -val ) ;^93^94^95^96^^44^155^[ADD] else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  { now.add ( Calendar.MONTH, -val ) ; } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start ) ;^88^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.DATE, -val * 7 ) ;^89^90^91^92^^44^155^[ADD] else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  { now.add ( Calendar.DATE, -val * 7 ) ; } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  { now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  ^  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  ==  7 / 4 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( dateStr )   && unit^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.SECOND, -start ) ;^82^^^^^44^155^[REPLACE] now.add ( Calendar.SECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "minutes" )  && unit.equals ( "minute" )  )  {^83^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( dateStr )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 3 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  ^  14 * 0 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  else {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  (  unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val *start ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  >=  7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^if  (  ( unit.equals ( "years" )  )  ||  ( unit.equals ( "year" )  )  )  {     now.add ( YEAR,  ( -val )  ) ; }else {     throw new IllegalArgumentException ( "We do not understand that many units ago" ) ; }^91^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val ) ;^86^^^^^44^155^[REPLACE] now.add ( Calendar.HOUR, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val *val ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^now.add ( Calendar.DATE, -val ) ;^94^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, start * 7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.MINUTE, -start ) ;^84^^^^^44^155^[REPLACE] now.add ( Calendar.MINUTE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^84^^^^^44^155^[ADD] now.add ( Calendar.MINUTE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -val ) ;^85^86^87^88^^44^155^[ADD] else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  { now.add ( Calendar.HOUR, -val ) ; } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  { now.add ( Calendar.DATE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 7L ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, val * 12 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "weeks" )  && unit.equals ( "week" )  )  {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^90^^^^^44^155^[ADD] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  <  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "days" )  ) {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( unit )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "fortnights" )  ) {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  >=  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^80^^^^^44^155^[REPLACE] now.add ( Calendar.MILLISECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "second" )  )  {^81^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^if  (  ( unit.equals ( "milliseconds" )  )  ||  ( unit.equals ( "millisecond" )  )  )  {     now.add ( MILLISECOND,  ( -val )  ) ; }else     if  (  ( unit.equals ( "seconds" )  )  ||  ( unit.equals ( "second" )  )  )  {         now.add ( SECOND,  ( -val )  ) ;     }else         if  (  ( unit.equals ( "minutes" )  )  ||  ( unit.equals ( "minute" )  )  )  {             now.add ( MINUTE,  ( -val )  ) ;         }else             if  (  ( unit.equals ( "hours" )  )  ||  ( unit.equals ( "hour" )  )  )  {                 now.add ( HOUR,  ( -val )  ) ;             }else                 if  (  ( unit.equals ( "days" )  )  ||  ( unit.equals ( "day" )  )  )  {                     now.add ( DATE,  ( -val )  ) ;                 }else                     if  (  ( unit.equals ( "weeks" )  )  ||  ( unit.equals ( "week" )  )  )  {                         now.add ( DATE,  (  ( -val )  * 7 )  ) ;                     }else                         if  (  ( unit.equals ( "fortnights" )  )  ||  ( unit.equals ( "fortnight" )  )  )  {                             now.add ( DATE,  (  ( -val )  * 14 )  ) ;                         }else                             if  (  ( unit.equals ( "months" )  )  ||  ( unit.equals ( "month" )  )  )  {                                 now.add ( MONTH,  ( -val )  ) ;                             }else                                 if  (  ( unit.equals ( "years" )  )  ||  ( unit.equals ( "year" )  )  )  {                                     now.add ( YEAR,  ( -val )  ) ;                                 }else {                                     throw new IllegalArgumentException ( "We do not understand that many units ago" ) ;                                 }^83^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "hours" )  ) {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 7 >> 2 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "days" )  && unit.equals ( "day" )  )  {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^if  (  ( unit.equals ( "milliseconds" )  )  ||  ( unit.equals ( "millisecond" )  )  )  {     now.add ( MILLISECOND,  ( -val )  ) ; }else     if  (  ( unit.equals ( "seconds" )  )  ||  ( unit.equals ( "second" )  )  )  {         now.add ( SECOND,  ( -val )  ) ;     }else         if  (  ( unit.equals ( "minutes" )  )  ||  ( unit.equals ( "minute" )  )  )  {             now.add ( MINUTE,  ( -val )  ) ;         }else             if  (  ( unit.equals ( "hours" )  )  ||  ( unit.equals ( "hour" )  )  )  {                 now.add ( HOUR,  ( -val )  ) ;             }else                 if  (  ( unit.equals ( "days" )  )  ||  ( unit.equals ( "day" )  )  )  {                     now.add ( DATE,  ( -val )  ) ;                 }else                     if  (  ( unit.equals ( "weeks" )  )  ||  ( unit.equals ( "week" )  )  )  {                         now.add ( DATE,  (  ( -val )  * 7 )  ) ;                     }else                         if  (  ( unit.equals ( "fortnights" )  )  ||  ( unit.equals ( "fortnight" )  )  )  {                             now.add ( DATE,  (  ( -val )  * 14 )  ) ;                         }else                             if  (  ( unit.equals ( "months" )  )  ||  ( unit.equals ( "month" )  )  )  {                                 now.add ( MONTH,  ( -val )  ) ;                             }else                                 if  (  ( unit.equals ( "years" )  )  ||  ( unit.equals ( "year" )  )  )  {                                     now.add ( YEAR,  ( -val )  ) ;                                 }else {                                     throw new IllegalArgumentException ( "We do not understand that many units ago" ) ;                                 }^87^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, val * 4 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 4 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  (  unit.equals ( "hour" )  )  {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  (  unit.equals ( "day" )  )  {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "weeks" )  ) {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.equals ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,start * 7L ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( unit )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.MONTH, -val ) ;^82^^^^^44^155^[REPLACE] now.add ( Calendar.SECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( value )   && unit^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, start * 14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( value )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,start * 9 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( unit )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  &  0 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "months" )  ) {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^now.add ( Calendar.DATE, -val ) ;^84^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 << 2 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val *start ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "weeks" )  && unit.equals ( "week" )  )  {^89^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,start * 2 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 0, value.length (  )  + 3 - 4 ) ;^61^^^^^44^155^[REPLACE] value = value.substring ( 0, value.length (  )  - 4 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 0 % 3, start ) ;^69^^^^^44^155^[REPLACE] value = value.substring ( 0, start ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^val = 1L;^73^^^^^44^155^[REPLACE] val = 1;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^val =  Integer.parseInt ( dateStr ) ;^75^^^^^44^155^[REPLACE] val = Integer.parseInt ( value ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^75^^^^^44^155^[ADD] val = Integer.parseInt ( value ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return cal;^100^^^^^44^155^[REPLACE] return now;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int start = dateStr.indexOf ( " " ) ;^64^^^^^44^155^[REPLACE] int start = value.indexOf ( " " ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^String unit = value.trim ( start  ^  1 ) ;^68^^^^^44^155^[REPLACE] String unit = value.substring ( start + 1 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int val = 0L;^71^^^^^44^155^[REPLACE] int val = 0;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( start  >  0 )  {^65^^^^^44^155^[REPLACE] if  ( start < 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( value.endsWith ( "a" )  && value.equals ( "an" )  )  {^72^^^^^44^155^[REPLACE] if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( unit.endsWith ( "milliseconds" )  ) {^79^^^^^44^155^[REPLACE] if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^79^80^81^82^^44^155^[ADD] if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  { now.add ( Calendar.MILLISECOND, -val ) ; } else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  { now.add ( Calendar.SECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "hour" )  )  {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.equals ( "days" )  ) {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  >=  5 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( dateStr )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  ==  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  <  7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( dateStr )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, val * 14L ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr .equalsIgnoreCase ( dateStr )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start  &  11 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now .getInstance (  )  ;^84^^^^^44^155^[REPLACE] now.add ( Calendar.MINUTE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.endsWith ( "hours" )  ) {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 - 2 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( value )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  &  1 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  &&  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.endsWith ( "years" )  ) {^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( unit )   && unit^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 2 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( unit )   && unit^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.equals ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^82^^^^^44^155^[ADD] now.add ( Calendar.SECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "fortnights" )  ) {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  <=  7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  ||  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( value )   && unit^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 - 0 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 - 3 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  |  7 << 0 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.equals ( "days" )  ) {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,start * 7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  !=  14 >> 4 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 0 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 2 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.SECOND, -val ) ;^80^^^^^44^155^[REPLACE] now.add ( Calendar.MILLISECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^80^^^^^44^155^[ADD] now.add ( Calendar.MILLISECOND, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^81^82^83^84^^44^155^[ADD] else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  { now.add ( Calendar.SECOND, -val ) ; } else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  { now.add ( Calendar.MINUTE, -val ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  &&  6 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  &  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  (  unit.equals ( "day" )  )  {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 1 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit.equals ( "hours" )  && unit.equals ( "hour" )  )  {^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  |  14 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REMOVE]^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  { now.add ( Calendar.DATE, -val ) ;^88^^^^^44^155^[REMOVE] ^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -val  !=  0 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   now.add ( Calendar.DATE, -val * 7 ) ;^87^88^89^90^^44^155^[ADD] else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  { now.add ( Calendar.DATE, -val ) ; } else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  { now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr.endsWith ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 14 % 2 ) ;^92^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 14 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( unit .equalsIgnoreCase ( dateStr )   && unit^83^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.equals ( "fortnights" )  ) {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start  !=  7 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr.endsWith ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit .equalsIgnoreCase ( dateStr )   && unit^85^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start  <=  0 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( dateStr .equalsIgnoreCase ( value )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE,val * 1 ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^} else if  ( unit.endsWith ( "days" )  ) {^87^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( dateStr .equalsIgnoreCase ( value )   && unit^95^^^^^44^155^[REPLACE] } else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^now.add ( Calendar.DATE, -start *val ) ;^90^^^^^44^155^[REPLACE] now.add ( Calendar.DATE, -val * 7 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( value.startsWith ( "last " )  )  {^101^^^^^44^155^[REPLACE] } else if  ( value.startsWith ( "last " )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   value = value.substring ( 5 ) ;^101^102^^104^^44^155^[ADD] else if  ( value.startsWith ( "last " )  )  {  value = value.substring ( 5 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( value.equals ( "tomorrow" )  )  {^138^^^^^44^155^[REPLACE] } else if  ( value.equals ( "tomorrow" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^}   return now;^138^139^140^141^^44^155^[ADD] else if  ( value.equals ( "tomorrow" )  )  { now.add ( Calendar.DATE, 1 ) ; return now; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( val  ==  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 9;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 * 1;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 1;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )   &  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( val  ==  0 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 13;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( value .equalsIgnoreCase ( value )   )  {^130^^^^^44^155^[REPLACE] if  ( value.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length + 4; i++ )  {^107^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  <  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7L;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0 ; i < strings.length - 2; i++ )  {^119^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( value.indexOf ( strings[i] )  )  {^120^^^^^44^155^[REPLACE] if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 + 2;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now .setTime ( datetime )    <  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^122^^^^^44^155^[ADD] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( monthsAgo  >  0 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 / 0;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 4;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 5 << 1 ) ;^104^^^^^44^155^[REPLACE] value = value.substring ( 5 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   &  i;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )   >=  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  >=  0 )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^daysAgo += 7 << 2;^112^^^^^44^155^[REPLACE] daysAgo += 7;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  (val  ==  0 + 3 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 + 0;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 6;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.get ( Calendar.MONTH )   !=  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 >> 1;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( dateStr.equals ( "week" )  )  {^130^^^^^44^155^[REPLACE] if  ( value.equals ( "week" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^now.add ( Calendar.DATE, -7 ) ;return now;^130^131^132^133^^44^155^[ADD] if  ( value.equals ( "week" )  )  { now.add ( Calendar.DATE, -7 ) ; return now; }^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^}  if  ( value.endsWith ( "tomorrow" )  )  {^138^^^^^44^155^[REPLACE] } else if  ( value.equals ( "tomorrow" )  )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length *  2; i++ )  {^107^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  >= val )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  ( daysAgo  != val )  {^111^^^^^44^155^[REPLACE] if  ( daysAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int daysAgo = now .setTime ( datetime )    &&  i;^110^^^^^44^155^[REPLACE] int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < strings.length /  2; i++ )  {^119^^^^^44^155^[REPLACE] for  ( int i = 0; i < strings.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^if  (val  <  3 )  {^123^^^^^44^155^[REPLACE] if  ( monthsAgo <= 0 )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^monthsAgo += 12 + 4;^124^^^^^44^155^[REPLACE] monthsAgo += 12;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 0 , value.length (  )  + 4 - 4 ) ;^61^^^^^44^155^[REPLACE] value = value.substring ( 0, value.length (  )  - 4 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 5 ) ; ;^69^^^^^44^155^[REPLACE] value = value.substring ( 0, start ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^value = value.substring ( 5 * 2 ) ;^104^^^^^44^155^[REPLACE] value = value.substring ( 5 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^String unit = dateStr.substring (val + 3 ) ;^68^^^^^44^155^[REPLACE] String unit = value.substring ( start + 1 ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int val = 0 / 3;^71^^^^^44^155^[REPLACE] int val = 0;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^71^^^^^44^155^[ADD] int val = 0;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^int monthsAgo = now.setTime ( Calendar.MONTH )   ^  i;^122^^^^^44^155^[REPLACE] int monthsAgo = now.get ( Calendar.MONTH )  - i;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0; i < dateFormats.length + 2; i++ )  {^143^^^^^44^155^[REPLACE] for  ( int i = 0; i < dateFormats.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^Date datetime = dateFormats[i].parse ( dateStr ) ;Calendar cal = Calendar.getInstance (  ) ;cal.setTime ( datetime ) ;return cal;^144^145^146^147^148^44^155^[ADD] try { Date datetime = dateFormats[i].parse ( dateStr ) ; Calendar cal = Calendar.getInstance (  ) ; cal.setTime ( datetime ) ; return cal;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return now;^148^^^^^44^155^[REPLACE] return cal;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^Date datetime = dateFormats[i].parse ( value ) ;^145^^^^^44^155^[REPLACE] Date datetime = dateFormats[i].parse ( dateStr ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^145^146^^^^44^155^[ADD] Date datetime = dateFormats[i].parse ( dateStr ) ; Calendar cal = Calendar.getInstance (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^Calendar now = Calendar.getInstance (  ) ;^146^^^^^44^155^[REPLACE] Calendar cal = Calendar.getInstance (  ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^Calendar cal = Calendar.getInstance (  ) ;^145^^^^^44^155^[REPLACE] Date datetime = dateFormats[i].parse ( dateStr ) ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^for  ( int i = 0 ; i < dateFormats.length; i++ )  {^143^^^^^44^155^[REPLACE] for  ( int i = 0; i < dateFormats.length; i++ )  {^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[REPLACE]^return ;^154^^^^^44^155^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
[ADD]^^154^^^^^44^155^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] parseCVS [TYPE] Calendar [PARAMETER] String dateStr [CLASS] DateFormatter   [TYPE]  boolean false  true  [TYPE]  Calendar cal  now  [TYPE]  DateFormatSymbols symbols  [TYPE]  String dateStr  unit  value  [TYPE]  String[] strings  [TYPE]  ParseException pe  [TYPE]  DateFormat[] dateFormats  [TYPE]  int daysAgo  i  monthsAgo  start  val  [TYPE]  Date datetime 
