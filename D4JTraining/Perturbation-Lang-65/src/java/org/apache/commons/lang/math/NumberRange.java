[REPLACE]^private static final long serialVersionUID ;^31^^^^^^^[REPLACE] private static final long serialVersionUID = 71849363892710L;^ [CLASS] NumberRange  
[REPLACE]^private  Number min;^36^^^^^^^[REPLACE] private final Number min;^ [CLASS] NumberRange  
[REPLACE]^private transient  long  hashCode = 0;^45^^^^^^^[REPLACE] private transient int hashCode = 0;^ [CLASS] NumberRange  
[REPLACE]^private transient String toString ;^49^^^^^^^[REPLACE] private transient String toString = null;^ [CLASS] NumberRange  
[REPLACE]^if   (  number == null  )   {  ;^61^^^^^60^76^[REPLACE] if  ( num == null )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[ADD]^^61^62^63^^^60^76^[ADD] if  ( num == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^62^^^^^60^76^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[ADD]^^62^^^^^60^76^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^if  ( ! num instanceof Comparable == true )  {^64^^^^^60^76^[REPLACE] if  ( num instanceof Comparable == false )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[ADD]^^64^65^66^^^60^76^[ADD] if  ( num instanceof Comparable == false )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^return ;^65^^^^^60^76^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^if  ( ! num instanceof Double &&  (  ( Double )  num ) .isNaN (  )  )  {^67^^^^^60^76^[REPLACE] if  ( num instanceof Double &&  (  ( Double )  num ) .isNaN (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^68^^^^^60^76^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^if  ( ! num instanceof Float &&  (  ( Float )  num ) .isNaN (  )  )  {^70^^^^^60^76^[REPLACE] if  ( num instanceof Float &&  (  ( Float )  num ) .isNaN (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[ADD]^^70^71^72^^^60^76^[ADD] if  ( num instanceof Float &&  (  ( Float )  num ) .isNaN (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^71^^^^^60^76^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[ADD]^^74^75^^^^60^76^[ADD] this.min = num; this.max = num;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^this.max = num2  ;^75^^^^^60^76^[REPLACE] this.max = num;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  [TYPE]  long serialVersionUID  [TYPE]  int hashCode 
[REPLACE]^if  ( num1 != null || num2 == null )  {^97^^^^^96^127^[REPLACE] if  ( num1 == null || num2 == null )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^97^98^99^^^96^127^[ADD] if  ( num1 == null || num2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^98^^^^^96^127^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  ( num1.equals (  )   ==  num2.getClass (  )  )  {^100^^^^^96^127^[REPLACE] if  ( num1.getClass (  )  != num2.getClass (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^101^^^^^96^127^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  ( ! num1 instanceof Comparable == false )  {^103^^^^^96^127^[REPLACE] if  ( num1 instanceof Comparable == false )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^104^^^^^96^127^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  ( ! num1 instanceof Double )  {^106^^^^^96^127^[REPLACE] if  ( num1 instanceof Double )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^106^107^108^109^^96^127^[ADD] if  ( num1 instanceof Double )  { if  (  (  ( Double )  num1 ) .isNaN (  )  ||  (  ( Double )  num2 ) .isNaN (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^}  else {^110^^^^^96^127^[REPLACE] } else if  ( num1 instanceof Float )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if   (    (    (  Double  )   num1  )  .isNaN  (    )   ||   (    (  Double  )   num2  )  .isNaN  (    )    )   {  ;^111^^^^^96^127^[REPLACE] if  (  (  ( Float )  num1 ) .isNaN (  )  ||  (  ( Float )  num2 ) .isNaN (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^111^112^113^^^96^127^[ADD] if  (  (  ( Float )  num1 ) .isNaN (  )  ||  (  ( Float )  num2 ) .isNaN (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^112^^^^^96^127^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^112^^^^^96^127^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  (   (  ( Float )  num2 ) .isNaN (  )  )  {^111^^^^^96^127^[REPLACE] if  (  (  ( Float )  num1 ) .isNaN (  )  ||  (  ( Float )  num2 ) .isNaN (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^return ;^112^^^^^96^127^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  (  (  ( Double )  num1 ) .isNaN (  )  ) {^107^^^^^96^127^[REPLACE] if  (  (  ( Double )  num1 ) .isNaN (  )  ||  (  ( Double )  num2 ) .isNaN (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^108^^^^^96^127^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^throw new IllegalArgumentException ( "The number must implement Comparable" )  ;^108^^^^^96^127^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^}  if  ( ! num1 instanceof Float )  {^110^^^^^96^127^[REPLACE] } else if  ( num1 instanceof Float )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  (  (  ( Float )  num1 ) .isNaN (  )  ) {^111^^^^^96^127^[REPLACE] if  (  (  ( Float )  num1 ) .isNaN (  )  ||  (  ( Float )  num2 ) .isNaN (  )  )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^return ;^108^^^^^96^127^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^int compareMin =  (  ( Comparable )   ( min )  ) .compareTo ( number )  ;^116^^^^^96^127^[REPLACE] int compare =  (  ( Comparable )  num1 ) .compareTo ( num2 ) ;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^if  ( compare  ||  0 - 3 )  {^117^^^^^96^127^[REPLACE] if  ( compare == 0 )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^}  else {^120^^^^^96^127^[REPLACE] } else if  ( compare > 0 )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num2  ;^124^^^^^120^126^[REPLACE] this.min = num1;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num1  ;^125^^^^^120^126^[REPLACE] this.max = num2;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num2  ;^121^^^^^96^127^[REPLACE] this.min = num2;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num2  ;^122^^^^^96^127^[REPLACE] this.max = num1;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^124^^^^^96^127^[ADD] this.min = num1;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num1  ;^125^^^^^96^127^[REPLACE] this.max = num2;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num2  ;^118^^^^^96^127^[REPLACE] this.min = num1;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num2  ;^119^^^^^96^127^[REPLACE] this.max = num1;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^} else if  ( compare  <=  0 )  {^120^^^^^96^127^[REPLACE] } else if  ( compare > 0 )  {^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^125^^^^^120^126^[ADD] this.max = num2;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[REPLACE]^this.max = num2  ;^124^^^^^96^127^[REPLACE] this.min = num1;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
[ADD]^^125^^^^^96^127^[ADD] this.max = num2;^[METHOD] <init> [TYPE] Number) [PARAMETER] Number num1 Number num2 [CLASS] NumberRange   [TYPE]  String toString  [TYPE]  boolean false  true  [TYPE]  Number max  min  num  num1  num2  [TYPE]  long serialVersionUID  [TYPE]  int compare  hashCode 
