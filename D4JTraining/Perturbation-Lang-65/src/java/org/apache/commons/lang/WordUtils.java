[REPLACE]^str = str.toLowerCase (  ) ;^44^^^^^43^45^[REPLACE] super (  ) ;^[METHOD] <init> [TYPE] WordUtils() [PARAMETER] [CLASS] WordUtils   [TYPE]  boolean false  true 
[ADD]^^44^^^^^43^45^[ADD] super (  ) ;^[METHOD] <init> [TYPE] WordUtils() [PARAMETER] [CLASS] WordUtils   [TYPE]  boolean false  true 
[REPLACE]^return wrap ( str, wrapLength, false, false ) ;^142^^^^^141^143^[REPLACE] return wrap ( str, wrapLength, null, false ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int wrapLength 
[REPLACE]^if  ( str != true )  {^164^^^^^163^216^[REPLACE] if  ( str == null )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^return null;^164^165^166^^^163^216^[ADD] if  ( str == null )  { return null; }^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^return this;^165^^^^^163^216^[REPLACE] return null;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^return false;^165^^^^^163^216^[REPLACE] return null;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  (str != null )  {^167^^^^^163^216^[REPLACE] if  ( newLineStr == null )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^newLineStr = SystemUtils.LINE_SEPARATOR;^167^168^169^^^163^216^[ADD] if  ( newLineStr == null )  { newLineStr = SystemUtils.LINE_SEPARATOR; }^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^newLineStr  = null ;^168^^^^^163^216^[REPLACE] newLineStr = SystemUtils.LINE_SEPARATOR;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^168^^^^^163^216^[ADD] newLineStr = SystemUtils.LINE_SEPARATOR;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^newLineStr ;^168^^^^^163^216^[REPLACE] newLineStr = SystemUtils.LINE_SEPARATOR;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( wrapLength  ==  0 )  {^170^^^^^163^216^[REPLACE] if  ( wrapLength < 1 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^wrapLength = 2;^171^^^^^163^216^[REPLACE] wrapLength = 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^wrapLength = 1L;^171^^^^^163^216^[REPLACE] wrapLength = 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^171^^^^^163^216^[ADD] wrapLength = 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^int inputLineLength = str.toLowerCase (  ) ;^173^^^^^163^216^[REPLACE] int inputLineLength = str.length (  ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^int offset = 3;^174^^^^^163^216^[REPLACE] int offset = 0;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^StringBuffer wrappedLine = new StringBuffer (wrapLength + 32 ) ;^175^^^^^163^216^[REPLACE] StringBuffer wrappedLine = new StringBuffer ( inputLineLength + 32 ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^while  (  ( inputLineLength - offset )   < spaceToWrapAt )  {^177^^^^^163^216^[REPLACE] while  (  ( inputLineLength - offset )  > wrapLength )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( str.charAt ( offset )   || false )  {^178^^^^^163^216^[REPLACE] if  ( str.charAt ( offset )  == ' ' )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  !=  offset )  {^184^^^^^163^216^[REPLACE] if  ( spaceToWrapAt >= offset )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( isDelimiter ( ch, delimiters )  )  {^192^^^^^184^209^[REPLACE] if  ( wrapLongWords )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( wrapLength  ==  0 )  {^200^^^^^184^209^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^wrappedLine.append ( str.substring ( offset, spaceToWrapAt )  ) ;wrappedLine.append ( newLineStr ) ;offset = spaceToWrapAt + 1;^200^201^202^203^^184^209^[ADD] if  ( spaceToWrapAt >= 0 )  { wrappedLine.append ( str.substring ( offset, spaceToWrapAt )  ) ; wrappedLine.append ( newLineStr ) ; offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =  wrapLength;^206^^^^^184^209^[REPLACE] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = spaceToWrapAt  ||  1;^203^^^^^184^209^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ', wrapLength +spaceToWrapAt ) ;^199^^^^^184^209^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = spaceToWrapAt +wrapLength;^203^^^^^184^209^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^203^^^^^184^209^[ADD] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^206^^^^^184^209^[ADD] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset +=  spaceToWrapAt;^196^^^^^184^209^[REPLACE] offset += wrapLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  !=  3 )  {^200^^^^^184^209^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =  null;^206^^^^^184^209^[REPLACE] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ',spaceToWrapAt + offset ) ;^199^^^^^184^209^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^199^^^^^184^209^[ADD] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =wrapLength + 0;^203^^^^^184^209^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = spaceToWrapAt +wrapLength;^188^^^^^163^216^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^188^^^^^163^216^[ADD] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( isDelimiter ( ch, delimiters )  )  {^192^^^^^163^216^[REPLACE] if  ( wrapLongWords )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( wrapLength  !=  0 )  {^200^^^^^192^208^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =  wrapLength;^206^^^^^192^208^[REPLACE] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = spaceToWrapAt  ^  1;^203^^^^^192^208^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ', spaceToWrapAt + wrapLength ) ;^199^^^^^192^208^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =wrapLength + 1;^203^^^^^192^208^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^203^^^^^192^208^[ADD] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset +=  spaceToWrapAt;^196^^^^^163^216^[REPLACE] offset += wrapLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^196^^^^^163^216^[ADD] offset += wrapLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  >  0 )  {^200^^^^^163^216^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =  wrapLength;^206^^^^^200^207^[REPLACE] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =wrapLength + 1;^203^^^^^163^216^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^203^^^^^163^216^[ADD] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =wrapLength + 1;^188^^^^^163^216^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ', wrapLength +spaceToWrapAt ) ;^199^^^^^163^216^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = spaceToWrapAt +wrapLength;^203^^^^^163^216^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =  null;^206^^^^^163^216^[REPLACE] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^int spaceToWrapAt = newLineStr.lastIndexOf ( ' ',spaceToWrapAt + offset ) ;^182^^^^^163^216^[REPLACE] int spaceToWrapAt = str.lastIndexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( str.substring ( wrapLength )   &&  ' ' )  {^178^^^^^163^216^[REPLACE] if  ( str.charAt ( offset )  == ' ' )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  ==  wrapLength )  {^184^^^^^163^216^[REPLACE] if  ( spaceToWrapAt >= offset )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^184^185^186^187^188^163^216^[ADD] if  ( spaceToWrapAt >= offset )  {  wrappedLine.append ( str.substring ( offset, spaceToWrapAt )  ) ; wrappedLine.append ( newLineStr ) ; offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  >  0 )  {^200^^^^^184^209^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =wrapLength + 1 - 3;^203^^^^^184^209^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ', wrapLength  <=  offset ) ;^199^^^^^184^209^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = wrapLength + 1;^203^^^^^184^209^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  ==  0 )  {^200^^^^^184^209^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^196^^^^^184^209^[ADD] offset += wrapLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ', wrapLength  ||  offset ) ;^199^^^^^184^209^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =wrapLength + 1;^203^^^^^184^209^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^if  ( spaceToWrapAt  !=  4 )  {^200^^^^^192^208^[REPLACE] if  ( spaceToWrapAt >= 0 )  {^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^206^^^^^192^208^[ADD] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ', wrapLength  &&  offset ) ;^199^^^^^192^208^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = wrapLength + 1;^203^^^^^192^208^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^200^201^202^203^^163^216^[ADD] if  ( spaceToWrapAt >= 0 )  { wrappedLine.append ( str.substring ( offset, spaceToWrapAt )  ) ; wrappedLine.append ( newLineStr ) ; offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^spaceToWrapAt = str.indexOf ( ' ',spaceToWrapAt + offset ) ;^199^^^^^163^216^[REPLACE] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^199^^^^^163^216^[ADD] spaceToWrapAt = str.indexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset = wrapLength + 0;^203^^^^^163^216^[REPLACE] offset = spaceToWrapAt + 1;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^offset =  wrapLength;^206^^^^^163^216^[REPLACE] offset = inputLineLength;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^int spaceToWrapAt = str .indexOf ( offset , spaceToWrapAt )  ;^182^^^^^163^216^[REPLACE] int spaceToWrapAt = str.lastIndexOf ( ' ', wrapLength + offset ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^wrappedLine.append ( str.substring ( wrapLength )  ) ;^213^^^^^163^216^[REPLACE] wrappedLine.append ( str.substring ( offset )  ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[ADD]^^213^^^^^163^216^[ADD] wrappedLine.append ( str.substring ( offset )  ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^wrappedLine.append ( str .substring ( offset , wrapLength )   ) ;^213^^^^^163^216^[REPLACE] wrappedLine.append ( str.substring ( offset )  ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^return capitalize ( str, delimiters ) ;^215^^^^^163^216^[REPLACE] return wrappedLine.toString (  ) ;^[METHOD] wrap [TYPE] String [PARAMETER] String str int wrapLength String newLineStr boolean wrapLongWords [CLASS] WordUtils   [TYPE]  StringBuffer wrappedLine  [TYPE]  boolean false  true  wrapLongWords  [TYPE]  String newLineStr  str  [TYPE]  int inputLineLength  offset  spaceToWrapAt  wrapLength 
[REPLACE]^return capitalize ( str, true ) ;^243^^^^^242^244^[REPLACE] return capitalize ( str, null ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str 
[REPLACE]^int delimLen =  ( delimiters == null ? -1 : delimiters.length - 2 ) ;^276^^^^^275^297^[REPLACE] int delimLen =  ( delimiters == null ? -1 : delimiters.length ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^if  (  str.charAt (  )  - 2 == 0 || delimLen == 0 )  {^277^^^^^275^297^[REPLACE] if  ( str == null || str.length (  )  == 0 || delimLen == 0 )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^return initials ( str, null ) ;^278^^^^^275^297^[REPLACE] return str;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^int strLen = str.toLowerCase (  ) ;^280^^^^^275^297^[REPLACE] int strLen = str.length (  ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^StringBuffer buffer = new StringBuffer ( delimLen ) ;^281^^^^^275^297^[REPLACE] StringBuffer buffer = new StringBuffer ( strLen ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^boolean capitalizeNext = false;^282^^^^^275^297^[REPLACE] boolean capitalizeNext = true;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^if  ( wrapLength < 1 )  {^286^^^^^275^297^[REPLACE] if  ( isDelimiter ( ch, delimiters )  )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^}  if  ( capitalizeNext )  {^289^^^^^275^297^[REPLACE] } else if  ( capitalizeNext )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^}   buffer.append ( Character.toTitleCase ( ch )  ) ;capitalizeNext = false;buffer.append ( ch ) ;^289^290^291^292^293^275^297^[ADD] else if  ( capitalizeNext )  { buffer.append ( Character.toTitleCase ( ch )  ) ; capitalizeNext = false; } else { buffer.append ( ch ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^buffer.append ( tmp ) ;^293^^^^^275^297^[REPLACE] buffer.append ( ch ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^capitalizeNext = true;^291^^^^^275^297^[REPLACE] capitalizeNext = false;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^capitalizeNext = false;^288^^^^^275^297^[REPLACE] capitalizeNext = true;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^}  else {^289^^^^^275^297^[REPLACE] } else if  ( capitalizeNext )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^buffer .toString (  )  ;^293^^^^^275^297^[REPLACE] buffer.append ( ch ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^293^^^^^275^297^[ADD] buffer.append ( ch ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^291^^^^^275^297^[ADD] capitalizeNext = false;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^for  ( int i = 3; i  <=  strLen; i++ )  {^283^^^^^275^297^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REMOVE]^if  ( uncapitalizeNext )  {     buffer.append ( toLowerCase ( ch )  ) ;     uncapitalizeNext = false; }else {     buffer.append ( ch ) ; }^286^^^^^275^297^[REMOVE] ^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^}   capitalizeNext = false;buffer.append ( ch ) ;^289^290^291^292^293^275^297^[ADD] else if  ( capitalizeNext )  { buffer.append ( Character.toTitleCase ( ch )  ) ; capitalizeNext = false; } else { buffer.append ( ch ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^} else if  ( uncapitalizeNext )  {^289^^^^^275^297^[REPLACE] } else if  ( capitalizeNext )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^uncapitalizeNext = false; ;^288^^^^^275^297^[REPLACE] capitalizeNext = true;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^288^^^^^275^297^[ADD] capitalizeNext = true;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^char ch = str .toLowerCase (  )  ;^284^^^^^275^297^[REPLACE] char ch = str.charAt ( i ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^284^^^^^275^297^[ADD] char ch = str.charAt ( i ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^for  ( int i = 0 * 1; i < strLen; i++ )  {^283^^^^^275^297^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^return capitalize ( str, delimiters ) ;^296^^^^^275^297^[REPLACE] return buffer.toString (  ) ;^[METHOD] capitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean capitalizeNext  false  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^return capitalizeFully ( str, false ) ;^320^^^^^319^321^[REPLACE] return capitalizeFully ( str, null ) ;^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str 
[REPLACE]^int delimLen =  ( delimiters == null ? -1 : delimiters.length - 3 ) ;^350^^^^^349^356^[REPLACE] int delimLen =  ( delimiters == null ? -1 : delimiters.length ) ;^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int delimLen  [TYPE]  char[] delimiters 
[ADD]^^350^^^^^349^356^[ADD] int delimLen =  ( delimiters == null ? -1 : delimiters.length ) ;^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int delimLen  [TYPE]  char[] delimiters 
[REPLACE]^if  ( str == null || str.length (  )  - 3 == 0 || delimLen == 0 )  {^351^^^^^349^356^[REPLACE] if  ( str == null || str.length (  )  == 0 || delimLen == 0 )  {^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int delimLen  [TYPE]  char[] delimiters 
[REPLACE]^return initials ( str, null ) ;^352^^^^^349^356^[REPLACE] return str;^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int delimLen  [TYPE]  char[] delimiters 
[REPLACE]^str =  null.toLowerCase (  ) ;^354^^^^^349^356^[REPLACE] str = str.toLowerCase (  ) ;^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int delimLen  [TYPE]  char[] delimiters 
[REPLACE]^return initials ( str, null ) ;^355^^^^^349^356^[REPLACE] return capitalize ( str, delimiters ) ;^[METHOD] capitalizeFully [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int delimLen  [TYPE]  char[] delimiters 
[REPLACE]^return uncapitalize ( str, false ) ;^377^^^^^376^378^[REPLACE] return uncapitalize ( str, null ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str 
[REPLACE]^int delimLen =  ( delimiters == null ? -1 : delimiters.length + 1 ) ;^406^^^^^405^427^[REPLACE] int delimLen =  ( delimiters == null ? -1 : delimiters.length ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^if  (  str.length (  )  + 5 == 0 || delimLen == 0 )  {^407^^^^^405^427^[REPLACE] if  ( str == null || str.length (  )  == 0 || delimLen == 0 )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^return initials ( str, null ) ;^408^^^^^405^427^[REPLACE] return str;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^int strLen = str.toLowerCase (  ) ;^410^^^^^405^427^[REPLACE] int strLen = str.length (  ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^StringBuffer buffer = new StringBuffer ( delimLen ) ;^411^^^^^405^427^[REPLACE] StringBuffer buffer = new StringBuffer ( strLen ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^boolean uncapitalizeNext = false;^412^^^^^405^427^[REPLACE] boolean uncapitalizeNext = true;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^if  ( wrapLength < 1 )  {^416^^^^^405^427^[REPLACE] if  ( isDelimiter ( ch, delimiters )  )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^416^417^418^419^420^405^427^[ADD] if  ( isDelimiter ( ch, delimiters )  )  { buffer.append ( ch ) ; uncapitalizeNext = true; } else if  ( uncapitalizeNext )  { buffer.append ( Character.toLowerCase ( ch )  ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^}  else {^419^^^^^405^427^[REPLACE] } else if  ( uncapitalizeNext )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^}   buffer.append ( Character.toLowerCase ( ch )  ) ;uncapitalizeNext = false;buffer.append ( ch ) ;^419^420^421^422^423^405^427^[ADD] else if  ( uncapitalizeNext )  { buffer.append ( Character.toLowerCase ( ch )  ) ; uncapitalizeNext = false; } else { buffer.append ( ch ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^buffer .toString (  )  ;^423^^^^^405^427^[REPLACE] buffer.append ( ch ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REMOVE]^wrappedLine.append ( newLineStr ) ;^423^^^^^405^427^[REMOVE] ^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^uncapitalizeNext = true;^421^^^^^405^427^[REPLACE] uncapitalizeNext = false;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^421^^^^^405^427^[ADD] uncapitalizeNext = false;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^uncapitalizeNext = false;^418^^^^^405^427^[REPLACE] uncapitalizeNext = true;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^}  if  ( uncapitalizeNext )  {^419^^^^^405^427^[REPLACE] } else if  ( uncapitalizeNext )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^buffer.append ( tmp ) ;^423^^^^^405^427^[REPLACE] buffer.append ( ch ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^for  ( delimLennt i = 0; i  >=  delimLen; i++ )  {^413^^^^^405^427^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^} else if  ( true )  {^419^^^^^405^427^[REPLACE] } else if  ( uncapitalizeNext )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^uncapitalizeNext = true; ;^421^^^^^405^427^[REPLACE] uncapitalizeNext = false;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^uncapitalizeNext = false; ;^418^^^^^405^427^[REPLACE] uncapitalizeNext = true;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[ADD]^^418^^^^^405^427^[ADD] uncapitalizeNext = true;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^char ch = str.charAt ( delimLen ) ;^414^^^^^405^427^[REPLACE] char ch = str.charAt ( i ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^for  ( int i = 1; i < strLen; i++ )  {^413^^^^^405^427^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^char ch = str.substring ( i ) ;^414^^^^^405^427^[REPLACE] char ch = str.charAt ( i ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^return capitalize ( str, delimiters ) ;^426^^^^^405^427^[REPLACE] return buffer.toString (  ) ;^[METHOD] uncapitalize [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  uncapitalizeNext  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int delimLen  i  strLen  [TYPE]  char[] delimiters 
[REPLACE]^int count = 0;^453^^^^^452^482^[REPLACE] int strLen;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^if  ( str == null ) {^454^^^^^452^482^[REPLACE] if  ( str == null ||  ( strLen = str.length (  )  )  == 0 )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^return str;^454^455^456^^^452^482^[ADD] if  ( str == null ||  ( strLen = str.length (  )  )  == 0 )  { return str; }^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^return initials ( str, null ) ;^455^^^^^452^482^[REPLACE] return str;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^if  ( str == null ||  ( strLen = str.length (  )  )  == 0 )  { return str; ;^454^^^^^452^482^[REPLACE] if  ( str == null ||  ( strLen = str.length (  )  )  == 0 )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^454^455^456^^^452^482^[ADD] if  ( str == null ||  ( strLen = str.length (  )  )  == 0 )  { return str; }^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^StringBuffer wrappedLine = new StringBuffer ( inputLineLength + 32 ) ;^457^^^^^452^482^[REPLACE] StringBuffer buffer = new StringBuffer ( strLen ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^boolean whitespace = false;^459^^^^^452^482^[REPLACE] boolean whitespace = true;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^char ch = 1;^460^^^^^452^482^[REPLACE] char ch = 0;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^char tmp = 4;^461^^^^^452^482^[REPLACE] char tmp = 0;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^461^^^^^452^482^[ADD] char tmp = 0;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^} else if  ( Character.isLowerCase ( ch )  )  {^465^^^^^452^482^[REPLACE] if  ( Character.isUpperCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^}  if  ( Character.isTitleCase ( ch )  )  {^467^^^^^452^482^[REPLACE] } else if  ( Character.isTitleCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^}  if  ( Character.isLowerCase ( ch )  )  {^469^^^^^452^482^[REPLACE] } else if  ( Character.isLowerCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp =  null;^476^^^^^469^477^[REPLACE] tmp = ch;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^476^^^^^469^477^[ADD] tmp = ch;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^if  ( isDelimiter ( ch, delimiters )  )  {^470^^^^^452^482^[REPLACE] if  ( whitespace )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp = Character.toTitleCase ( ch ) ; ;^473^^^^^470^474^[REPLACE] tmp = Character.toUpperCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp = Character.toUpperCase ( ch ) ; ;^471^^^^^452^482^[REPLACE] tmp = Character.toTitleCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^471^^^^^452^482^[ADD] tmp = Character.toTitleCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp = Character.toTitleCase ( ch ) ; ;^473^^^^^452^482^[REPLACE] tmp = Character.toUpperCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^if  ( true )  {^470^^^^^452^482^[REPLACE] if  ( whitespace )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp =  null;^476^^^^^452^482^[REPLACE] tmp = ch;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp = Character.toTitleCase ( ch ) ; ;^468^^^^^452^482^[REPLACE] tmp = Character.toLowerCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^}  else {^469^^^^^452^482^[REPLACE] } else if  ( Character.isLowerCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^473^^^^^470^474^[ADD] tmp = Character.toUpperCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REMOVE]^if  ( uncapitalizeNext )  {     buffer.append ( toLowerCase ( ch )  ) ;     uncapitalizeNext = false; }else {     buffer.append ( ch ) ; }^470^^^^^452^482^[REMOVE] ^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^473^^^^^452^482^[ADD] tmp = Character.toUpperCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^tmp = Character.toTitleCase ( ch ) ; ;^466^^^^^452^482^[REPLACE] tmp = Character.toLowerCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^466^^^^^452^482^[ADD] tmp = Character.toLowerCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^}  else {^467^^^^^452^482^[REPLACE] } else if  ( Character.isTitleCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^}   tmp = Character.toTitleCase ( ch ) ;^467^468^469^470^471^452^482^[ADD] else if  ( Character.isTitleCase ( ch )  )  { tmp = Character.toLowerCase ( ch ) ; } else if  ( Character.isLowerCase ( ch )  )  { if  ( whitespace )  { tmp = Character.toTitleCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^}   tmp = Character.toTitleCase ( ch ) ;tmp = Character.toUpperCase ( ch ) ;^469^470^471^472^473^452^482^[ADD] else if  ( Character.isLowerCase ( ch )  )  { if  ( whitespace )  { tmp = Character.toTitleCase ( ch ) ; } else { tmp = Character.toUpperCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^for  ( int i = 0; i  >  strLen; i++ )  {^463^^^^^452^482^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^465^466^467^468^^452^482^[ADD] if  ( Character.isUpperCase ( ch )  )  { tmp = Character.toLowerCase ( ch ) ; } else if  ( Character.isTitleCase ( ch )  )  { tmp = Character.toLowerCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^}  if  ( Character.toTitleCase ( ch )  )  {^467^^^^^452^482^[REPLACE] } else if  ( Character.isTitleCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^if  ( Character.isUpperCase ( ch )  )  {^469^^^^^452^482^[REPLACE] } else if  ( Character.isLowerCase ( ch )  )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^470^471^472^473^474^452^482^[ADD] if  ( whitespace )  { tmp = Character.toTitleCase ( ch ) ; } else { tmp = Character.toUpperCase ( ch ) ; }^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^476^^^^^452^482^[ADD] tmp = ch;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^}   tmp = Character.toLowerCase ( ch ) ;tmp = Character.toTitleCase ( ch ) ;^467^468^469^470^471^452^482^[ADD] else if  ( Character.isTitleCase ( ch )  )  { tmp = Character.toLowerCase ( ch ) ; } else if  ( Character.isLowerCase ( ch )  )  { if  ( whitespace )  { tmp = Character.toTitleCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^tmp = Character.toTitleCase ( ch ) ;tmp = Character.toUpperCase ( ch ) ;^470^471^472^473^474^452^482^[ADD] if  ( whitespace )  { tmp = Character.toTitleCase ( ch ) ; } else { tmp = Character.toUpperCase ( ch ) ; }^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^ch =  null.charAt ( i ) ;^464^^^^^452^482^[REPLACE] ch = str.charAt ( i ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^468^^^^^452^482^[ADD] tmp = Character.toLowerCase ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^whitespace =  Character.isWhitespace ( null ) ;^479^^^^^452^482^[REPLACE] whitespace = Character.isWhitespace ( ch ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[ADD]^^464^^^^^452^482^[ADD] ch = str.charAt ( i ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^for  ( int i = 1; i < strLen; i++ )  {^463^^^^^452^482^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^return buffer .StringBuffer ( i )  ;^481^^^^^452^482^[REPLACE] return buffer.toString (  ) ;^[METHOD] swapCase [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  whitespace  [TYPE]  char ch  tmp  [TYPE]  String str  [TYPE]  int i  strLen 
[REPLACE]^return initials ( str, true ) ;^508^^^^^507^509^[REPLACE] return initials ( str, null ) ;^[METHOD] initials [TYPE] String [PARAMETER] String str [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  String str 
[REPLACE]^if  ( str == null ) {^539^^^^^538^562^[REPLACE] if  ( str == null || str.length (  )  == 0 )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^return initials ( str, null ) ;^540^^^^^538^562^[REPLACE] return str;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^if  ( delimiters != null ) {^542^^^^^538^562^[REPLACE] if  ( delimiters != null && delimiters.length == 0 )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^return str;^543^^^^^538^562^[REPLACE] return "";^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^int strLen = str.toLowerCase (  ) ;^545^^^^^538^562^[REPLACE] int strLen = str.length (  ) ;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^char[] buf = new char[strLen / 2 +strLen];^546^^^^^538^562^[REPLACE] char[] buf = new char[strLen / 2 + 1];^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^int count = 4;^547^^^^^538^562^[REPLACE] int count = 0;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^boolean lastWasGap = false;^548^^^^^538^562^[REPLACE] boolean lastWasGap = true;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[ADD]^^548^^^^^538^562^[ADD] boolean lastWasGap = true;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^if  ( wrapLength < 1 )  {^552^^^^^538^562^[REPLACE] if  ( isDelimiter ( ch, delimiters )  )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[ADD]^lastWasGap = true;buf[count++] = ch;lastWasGap = false;^552^553^554^555^556^538^562^[ADD] if  ( isDelimiter ( ch, delimiters )  )  { lastWasGap = true; } else if  ( lastWasGap )  { buf[count++] = ch; lastWasGap = false;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^}  else {^554^^^^^538^562^[REPLACE] } else if  ( lastWasGap )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[ADD]^}   lastWasGap = false;^554^555^556^557^^538^562^[ADD] else if  ( lastWasGap )  { buf[count++] = ch; lastWasGap = false; } else {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^buf[count++] =  ch;^555^^^^^538^562^[REPLACE] buf[count++] = ch;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[ADD]^^555^^^^^538^562^[ADD] buf[count++] = ch;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^lastWasGap = true;^556^^^^^538^562^[REPLACE] lastWasGap = false;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^lastWasGap = false;^553^^^^^538^562^[REPLACE] lastWasGap = true;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[ADD]^^553^^^^^538^562^[ADD] lastWasGap = true;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^}  if  ( lastWasGap )  {^554^^^^^538^562^[REPLACE] } else if  ( lastWasGap )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^for  ( int i = 4; i  >=  strLen; i++ )  {^549^^^^^538^562^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^}  if  ( true )  {^554^^^^^538^562^[REPLACE] } else if  ( lastWasGap )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^lastWasGap = true; ;^556^^^^^538^562^[REPLACE] lastWasGap = false;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^char ch = str.substring ( i ) ;^550^^^^^538^562^[REPLACE] char ch = str.charAt ( i ) ;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^for  ( int i = 0 >> 3; i < strLen; i++ )  {^549^^^^^538^562^[REPLACE] for  ( int i = 0; i < strLen; i++ )  {^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[ADD]^^549^550^^552^553^538^562^[ADD] for  ( int i = 0; i < strLen; i++ )  { char ch = str.charAt ( i ) ; if  ( isDelimiter ( ch, delimiters )  )  { lastWasGap = true;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^char ch = str .toLowerCase (  )  ;^550^^^^^538^562^[REPLACE] char ch = str.charAt ( i ) ;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^return new String ( buf, 0L, count ) ;^561^^^^^538^562^[REPLACE] return new String ( buf, 0, count ) ;^[METHOD] initials [TYPE] String [PARAMETER] String str char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  lastWasGap  true  [TYPE]  char ch  [TYPE]  String str  [TYPE]  int count  i  strLen  [TYPE]  char[] buf  delimiters 
[REPLACE]^if  ( delimiters != null )  {^573^^^^^572^582^[REPLACE] if  ( delimiters == null )  {^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^return Character.isTitleCase ( ch ) ;^574^^^^^572^582^[REPLACE] return Character.isWhitespace ( ch ) ;^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^if  ( ch  &&  delimiters[i] )  {^577^^^^^572^582^[REPLACE] if  ( ch == delimiters[i] )  {^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^return false;^578^^^^^572^582^[REPLACE] return true;^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^for  ( int i = 0, isize = delimiters.length *  2; i < isize; i++ )  {^576^^^^^572^582^[REPLACE] for  ( int i = 0, isize = delimiters.length; i < isize; i++ )  {^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[ADD]^^576^577^578^579^^572^582^[ADD] for  ( int i = 0, isize = delimiters.length; i < isize; i++ )  { if  ( ch == delimiters[i] )  { return true; }^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^if  ( ch  !=  delimiters[i] )  {^577^^^^^572^582^[REPLACE] if  ( ch == delimiters[i] )  {^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^for  ( int i = 0 , isize = delimiters.length; i < isize; i++ )  {^576^^^^^572^582^[REPLACE] for  ( int i = 0, isize = delimiters.length; i < isize; i++ )  {^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^for  ( int i = 0; i < strLen; i++ )  { ch = str.charAt ( i ) ;^576^^^^^572^582^[REPLACE] for  ( int i = 0, isize = delimiters.length; i < isize; i++ )  {^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
[REPLACE]^return true;^581^^^^^572^582^[REPLACE] return false;^[METHOD] isDelimiter [TYPE] boolean [PARAMETER] char ch char[] delimiters [CLASS] WordUtils   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  int i  isize  [TYPE]  char[] delimiters 
