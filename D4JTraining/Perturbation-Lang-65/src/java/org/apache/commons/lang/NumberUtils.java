[REPLACE]^if  (mant != true )  {^139^^^^^138^287^[REPLACE] if  ( val == null )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return true;^140^^^^^138^287^[REPLACE] return null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return this;^140^^^^^138^287^[REPLACE] return null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( val.length (  )  - 1 == 0 )  {^142^^^^^138^287^[REPLACE] if  ( val.length (  )  == 0 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return ;^143^^^^^138^287^[REPLACE] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^throw new NumberFormatException (  ( val + " is not a valid number." )  )  ;^143^^^^^138^287^[REPLACE] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( val .charAt ( decPos )   )  {^145^^^^^138^287^[REPLACE] if  ( val.startsWith ( "--" )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return true;^150^^^^^138^287^[REPLACE] return null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return this;^150^^^^^138^287^[REPLACE] return null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( mant.startsWith ( "0x" )  && val.startsWith ( "-0x" )  )  {^152^^^^^138^287^[REPLACE] if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createInteger ( val ) ;^152^153^154^^^138^287^[ADD] if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  { return createInteger ( val ) ; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createInteger ( mant ) ;^153^^^^^138^287^[REPLACE] return createInteger ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^String mant;^155^156^^^^138^287^[ADD] char lastChar = val.charAt ( val.length (  )  - 1 ) ; String mant;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^String dec  ;^156^^^^^138^287^[REPLACE] String mant;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^157^^^^^138^287^[ADD] String dec;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^String dec  ;^158^^^^^138^287^[REPLACE] String exp;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^int decPos = mant.indexOf ( '.' ) ;^159^^^^^138^287^[REPLACE] int decPos = val.indexOf ( '.' ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^int expPos = val.indexOf ( 'e' )   val.indexOf ( 'E' )   1;^160^^^^^138^287^[REPLACE] int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( decPos  >= expPos )  {^162^^^^^138^287^[REPLACE] if  ( decPos > -1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (decPos  !=  -1 )  {^174^^^^^162^180^[REPLACE] if  ( expPos > -1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^174^175^176^177^178^162^180^[ADD] if  ( expPos > -1 )  { mant = val.substring ( 0, expPos ) ; } else { mant = val; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant =  null;^177^^^^^174^178^[REPLACE] mant = val;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant = val.substring ( 1, expPos ) ;^175^^^^^162^180^[REPLACE] mant = val.substring ( 0, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant = val.substring ( 4, expPos ) ;^175^^^^^162^180^[REPLACE] mant = val.substring ( 0, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant =  null;^177^^^^^162^180^[REPLACE] mant = val;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^179^^^^^162^180^[ADD] dec = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos  ==  -1 )  {^164^^^^^138^287^[REPLACE] if  ( expPos > -1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^170^^^^^164^171^[ADD] dec = val.substring ( decPos + 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos  >  decPos )  {^165^^^^^138^287^[REPLACE] if  ( expPos < decPos )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^166^^^^^138^287^[ADD] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^168^^^^^138^287^[ADD] dec = val.substring ( decPos + 1, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^throw new NumberFormatException ( "\"\" is not a valid number." )  ;^166^^^^^138^287^[REPLACE] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos  ==  decPos )  {^165^^^^^138^287^[REPLACE] if  ( expPos < decPos )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^dec = val.substring (expPos  1, expPos ) ;^168^^^^^138^287^[REPLACE] dec = val.substring ( decPos + 1, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^170^^^^^138^287^[ADD] dec = val.substring ( decPos + 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^172^^^^^138^287^[ADD] mant = val.substring ( 0, decPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return ;^166^^^^^138^287^[REPLACE] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( decPos  !=  -1 )  {^164^^^^^138^287^[REPLACE] if  ( expPos > -1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^164^165^166^167^^138^287^[ADD] if  ( expPos > -1 )  { if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^dec = val.substring ( expPos  1 ) ;^170^^^^^164^171^[REPLACE] dec = val.substring ( decPos + 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^dec = val.substring ( expPos  1 / 3, expPos ) ;^168^^^^^138^287^[REPLACE] dec = val.substring ( decPos + 1, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos  <=  decPos )  {^165^^^^^138^287^[REPLACE] if  ( expPos < decPos )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos  <=  -2 )  {^174^^^^^138^287^[REPLACE] if  ( expPos > -1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^mant = val.substring ( 0, expPos ) ;mant = val;^174^175^176^177^178^138^287^[ADD] if  ( expPos > -1 )  { mant = val.substring ( 0, expPos ) ; } else { mant = val; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant = val.substring ( 0 >> 4, expPos ) ;^175^^^^^138^287^[REPLACE] mant = val.substring ( 0, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^dec = val.substring ( decPos  0 ) ;^170^^^^^138^287^[REPLACE] dec = val.substring ( decPos + 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant = val.substring ( 0L, decPos ) ;^172^^^^^138^287^[REPLACE] mant = val.substring ( 0, decPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant = val.substring ( 0 >> 1, expPos ) ;^175^^^^^138^287^[REPLACE] mant = val.substring ( 0, expPos ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^mant =  null;^177^^^^^138^287^[REPLACE] mant = val;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^179^^^^^138^287^[ADD] dec = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( Character.isDigit ( lastChar )  )  {^181^^^^^138^287^[REPLACE] if  ( !Character.isDigit ( lastChar )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^181^182^183^184^185^138^287^[ADD] if  ( !Character.isDigit ( lastChar )  )  { if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ; } else { exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  expPos < val.toCharArray (  )  - 4 - 1 )  {^243^^^^^181^286^[REPLACE] if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^exp = val.substring ( expPos + 1, val.length (  )  ) ;exp = null;^243^244^245^246^247^181^286^[ADD] if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  ) ; } else { exp = null; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = false;^246^^^^^243^247^[REPLACE] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = val.substring (  ( expPos + 1 ) ,  (  ( val.length (  )  )  - 1 )  )  ;^244^^^^^181^286^[REPLACE] exp = val.substring ( expPos + 1, val.length (  )  ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( dec != null && exp == null )  {^248^^^^^181^286^[REPLACE] if  ( dec == null && exp == null )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if   (  !  (  d.isInfinite  (    )   ||   (  d.floatValue  (    )   == 0.0D && !allZeros  )    )    )   {  ;^267^^^^^248^284^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^268^^^^^248^284^[REPLACE] return f;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if   (  !  (  f.isInfinite  (    )   ||   (  f.floatValue  (    )   == 0.0F && !allZeros  )    )    )   {  ;^275^^^^^248^284^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return d;^275^276^277^^^248^284^[ADD] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^276^^^^^248^284^[REPLACE] return d;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Float f = createFloat ( val ) ;return f;^265^266^267^268^269^248^284^[ADD] try { Float f = createFloat ( val ) ; if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  { return f; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  (true (  )  ) {^267^^^^^248^284^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Float f = createFloat ( mant ) ;^266^^^^^248^284^[REPLACE] Float f = createFloat ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Double d = createDouble ( val ) ;return d;^273^274^275^276^277^248^284^[ADD] try { Double d = createDouble ( val ) ; if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  (true (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^248^284^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Double d = createDouble ( mant ) ;^274^^^^^248^284^[REPLACE] Double d = createDouble ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigDecimal ( mant ) ;^282^^^^^248^284^[REPLACE] return createBigDecimal ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^boolean allZeros = isAllZeros ( mant )  ;^264^^^^^248^284^[REPLACE] boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Double d = createDouble ( numeric )  ;^266^^^^^248^284^[REPLACE] Float f = createFloat ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^270^271^272^^^248^284^[ADD] catch  ( NumberFormatException nfe )  {  }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^278^279^280^^^248^284^[ADD] catch  ( NumberFormatException nfe )  {  }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createInteger ( val ) ;^250^251^252^^254^181^286^[ADD] try { return createInteger ( val ) ; } catch  ( NumberFormatException nfe )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createInteger ( mant ) ;^251^^^^^181^286^[REPLACE] return createInteger ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createLong ( val ) ;^255^256^257^^259^181^286^[ADD] try { return createLong ( val ) ; } catch  ( NumberFormatException nfe )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createLong ( mant ) ;^256^^^^^181^286^[REPLACE] return createLong ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigInteger ( mant ) ;^260^^^^^181^286^[REPLACE] return createBigInteger ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^181^286^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^268^^^^^181^286^[REPLACE] return f;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  (true (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^181^286^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^276^^^^^181^286^[REPLACE] return d;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Float f = createFloat ( val ) ;return f;^265^266^267^268^269^181^286^[ADD] try { Float f = createFloat ( val ) ; if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  { return f; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (   ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^181^286^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Float f = createFloat ( mant ) ;^266^^^^^181^286^[REPLACE] Float f = createFloat ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Double d = createDouble ( val ) ;return d;^273^274^275^276^277^181^286^[ADD] try { Double d = createDouble ( val ) ; if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if   (  !  (  f.isInfinite  (    )   ||   (  f.floatValue  (    )   == 0.0F && !allZeros  )    )    )   {  ;^275^^^^^181^286^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^274^^^^^181^286^[ADD] Double d = createDouble ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^244^^^^^181^286^[ADD] exp = val.substring ( expPos + 1, val.length (  )  ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^246^^^^^181^286^[ADD] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigDecimal ( mant ) ;^282^^^^^181^286^[REPLACE] return createBigDecimal ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^boolean allZeros = isAllZeros ( mant )  ;^264^^^^^181^286^[REPLACE] boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^266^^^^^181^286^[ADD] Float f = createFloat ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^257^258^259^^^181^286^[ADD] catch  ( NumberFormatException nfe )  {  }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos > -1 && expPos < mant.length (  )  %  0.5  - 1 )  {^182^^^^^138^287^[REPLACE] if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = this;^185^^^^^182^186^[REPLACE] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = val.substring ( expPos + 1, val.length (  )  + 3 - 1 ) ;^183^^^^^138^287^[REPLACE] exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( dec != null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' ) {^193^194^195^196^^138^287^[REPLACE] if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createLong ( numeric ) ;^197^198^199^^201^193^204^[ADD] try { return createLong ( numeric ) ; } catch  ( NumberFormatException nfe )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createLong ( mant ) ;^198^^^^^193^204^[REPLACE] return createLong ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigInteger ( mant ) ;^202^^^^^193^204^[REPLACE] return createBigInteger ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (   ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^138^287^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^210^211^^213^214^138^287^[ADD] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {  return f; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^213^^^^^138^287^[REPLACE] return f;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if   (  !  (  f.isInfinite  (    )   ||   (  f.floatValue  (    )   == 0.0F && !allZeros  )    )    )   {  ;^224^^^^^138^287^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return d;^224^225^226^^^138^287^[ADD] if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^225^^^^^138^287^[REPLACE] return d;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createLong ( numeric ) ;^197^198^199^^201^138^287^[ADD] try { return createLong ( numeric ) ; } catch  ( NumberFormatException nfe )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createLong ( mant ) ;^198^^^^^138^287^[REPLACE] return createLong ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Float f = NumberUtils.createFloat ( numeric ) ;^208^209^210^^212^138^287^[ADD] try { Float f = NumberUtils.createFloat ( numeric ) ; if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if   (  !  (  d.isInfinite  (    )   ||   (  d.floatValue  (    )   == 0.0D && !allZeros  )    )    )   {  ;^210^^^^^138^287^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Float f = NumberUtils .createLong ( dec )  ;^209^^^^^138^287^[REPLACE] Float f = NumberUtils.createFloat ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Double d = NumberUtils.createDouble ( numeric ) ;return d;^222^223^224^225^226^138^287^[ADD] try { Double d = NumberUtils.createDouble ( numeric ) ; if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (   ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^138^287^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Double d = NumberUtils.createNumber ( mant ) ;^223^^^^^138^287^[REPLACE] Double d = NumberUtils.createDouble ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createBigDecimal ( numeric ) ;^230^231^232^^234^138^287^[ADD] try { return createBigDecimal ( numeric ) ; } catch  ( NumberFormatException e )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigDecimal ( mant ) ;^231^^^^^138^287^[REPLACE] return createBigDecimal ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = val.substring ( expPos + 1, val.size (  )  - 1 ) ;^183^^^^^138^287^[REPLACE] exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = true;^185^^^^^138^287^[REPLACE] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigInteger ( mant ) ;^202^^^^^138^287^[REPLACE] return createBigInteger ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^String numeric = val.substring ( 0, val.length (  )  + 1 - 1 ) ;^188^^^^^138^287^[REPLACE] String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^boolean allZeros = isAllZeros ( val )   >  isAllZeros ( exp ) ;^189^^^^^138^287^[REPLACE] boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Float f = NumberUtils.createFloat ( mant ) ;^209^^^^^138^287^[REPLACE] Float f = NumberUtils.createFloat ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Double d = NumberUtils.createDouble ( mant ) ;^223^^^^^138^287^[REPLACE] Double d = NumberUtils.createDouble ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return ;^205^^^^^138^287^[REPLACE] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^237^^^^^138^287^[ADD] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^199^200^201^^^138^287^[ADD] catch  ( NumberFormatException nfe )  {  }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^232^233^234^^^138^287^[ADD] catch  ( NumberFormatException e )  {  }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( expPos > -0  && expPos < val.size (  )  - 0  )  {^182^^^^^138^287^[REPLACE] if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = true;^185^^^^^182^186^[REPLACE] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = val.substring ( expPos + 0 , val.length (  )  - 4 - 0  ) ;^183^^^^^138^287^[REPLACE] exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( dec != false && exp == false && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^138^287^[REPLACE] if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^193^194^195^196^^138^287^[ADD] if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigInteger  (  val  )  ;  ;^198^^^^^193^204^[REPLACE] return createLong ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( f.isInfinite (  )  ||  ( f.floatToIntBits (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^138^287^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  (true (  )  ||  ( d.floatValue (  )  == 0.0dD && !allZeros )  )  )  {^224^^^^^138^287^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( decPos > -0  && expPos < val .startsWith ( exp )   + 2 - 0  )  {^243^^^^^138^287^[REPLACE] if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^243^244^245^246^247^138^287^[ADD] if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  ) ; } else { exp = null; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^246^^^^^243^247^[ADD] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = val.substring ( expPos + 1, val.length (  )  %  2 ) ;^244^^^^^138^287^[REPLACE] exp = val.substring ( expPos + 1, val.length (  )  ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  ( dec != false && exp == false )  {^248^^^^^138^287^[REPLACE] if  ( dec == null && exp == null )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return f;^267^268^269^^^248^284^[ADD] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  { return f; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^248^284^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( d.doubleToLongBits (  )  ||  ( d.doubleValue (  )  == 0.0DD && !allZeros )  )  )  {^275^^^^^248^284^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^275^276^277^^^248^284^[ADD] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Float f = createFloat ( val )  ;^274^^^^^248^284^[REPLACE] Double d = createDouble ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^264^^^^^248^284^[ADD] boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createInteger ( val ) ;^250^251^252^^254^138^287^[ADD] try { return createInteger ( val ) ; } catch  ( NumberFormatException nfe )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createInteger ( mant ) ;^251^^^^^138^287^[REPLACE] return createInteger ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^return createLong ( val ) ;^255^256^257^^259^138^287^[ADD] try { return createLong ( val ) ; } catch  ( NumberFormatException nfe )  { }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createLong ( mant ) ;^256^^^^^138^287^[REPLACE] return createLong ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigInteger ( mant ) ;^260^^^^^138^287^[REPLACE] return createBigInteger ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  (true (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^138^287^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^268^^^^^138^287^[REPLACE] return f;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( d.isInfinite (  )  ||  ( d .floatValue (  )   == 0.0D && !allZeros )  )  )  {^275^^^^^138^287^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^275^276^277^^^138^287^[ADD] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return d;  ;^276^^^^^138^287^[REPLACE] return d;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !true )  )  )  {^210^^^^^138^287^[REPLACE] if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( d.isInfinite (  )  ) {^224^^^^^138^287^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigInteger  (  val  )  ;  ;^231^^^^^138^287^[REPLACE] return createBigDecimal ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Float f = createFloat ( val ) ;return f;^265^266^267^268^269^138^287^[ADD] try { Float f = createFloat ( val ) ; if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  { return f; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Double d = createDouble ( numeric )  ;^266^^^^^138^287^[REPLACE] Float f = createFloat ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^Double d = createDouble ( val ) ;return d;^273^274^275^276^277^138^287^[ADD] try { Double d = createDouble ( val ) ; if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if  (  ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^138^287^[REPLACE] if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Double d = createDouble ( mant ) ;^274^^^^^138^287^[REPLACE] Double d = createDouble ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^183^^^^^138^287^[ADD] exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = this;^185^^^^^138^287^[REPLACE] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = val.substring ( expPos + 1, val.size (  )  ) ;^244^^^^^138^287^[REPLACE] exp = val.substring ( expPos + 1, val.length (  )  ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^exp = false;^246^^^^^138^287^[REPLACE] exp = null;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return createBigDecimal ( mant ) ;^282^^^^^138^287^[REPLACE] return createBigDecimal ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^String numeric = mant.substring ( 0, val.size (  )  - 1 ) ;^188^^^^^138^287^[REPLACE] String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^189^^^^^138^287^[ADD] boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^Float f = createFloat ( val )  ;^209^^^^^138^287^[REPLACE] Float f = NumberUtils.createFloat ( numeric ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^264^^^^^138^287^[ADD] boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^274^^^^^138^287^[ADD] Double d = createDouble ( val ) ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^return ;^237^^^^^138^287^[REPLACE] throw new NumberFormatException  (" ")  ;^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[ADD]^^252^253^254^^^138^287^[ADD] catch  ( NumberFormatException nfe )  {  }^[METHOD] createNumber [TYPE] Number [PARAMETER] String val [CLASS] NumberUtils   [TYPE]  Float f  [TYPE]  boolean allZeros  false  true  [TYPE]  char lastChar  [TYPE]  NumberFormatException e  nfe  [TYPE]  String dec  exp  mant  numeric  val  [TYPE]  Double d  [TYPE]  int decPos  expPos 
[REPLACE]^if   (  lhs > rhs  )   {  ;^492^^^^^491^518^[REPLACE] if  ( lhs < rhs )  {^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return d;  ;^493^^^^^491^518^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return -3;^493^^^^^491^518^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^if  ( lhs  <  rhs )  {^495^^^^^491^518^[REPLACE] if  ( lhs > rhs )  {^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return +1 / 0;^496^^^^^491^518^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return +4;^496^^^^^491^518^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^long rhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^[REPLACE] long lhsBits = Double.doubleToLongBits ( lhs ) ;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^long lhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^[REPLACE] long rhsBits = Double.doubleToLongBits ( rhs ) ;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^if  ( lhsBits  ||  rhsBits )  {^504^^^^^491^518^[REPLACE] if  ( lhsBits == rhsBits )  {^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[ADD]^^504^505^506^^^491^518^[ADD] if  ( lhsBits == rhsBits )  { return 0; }^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return 3;^505^^^^^491^518^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return 4;^505^^^^^491^518^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^if  ( lhsBits  <=  rhsBits )  {^513^^^^^491^518^[REPLACE] if  ( lhsBits < rhsBits )  {^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[ADD]^^513^514^515^516^517^491^518^[ADD] if  ( lhsBits < rhsBits )  { return -1; } else { return +1; }^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return +0;^516^^^^^513^517^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return -4;^514^^^^^491^518^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return -2;^514^^^^^491^518^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^return +2;^516^^^^^491^518^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] double lhs double rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  double lhs  rhs  [TYPE]  long lhsBits  rhsBits 
[REPLACE]^if  ( lhs  >  rhs )  {^553^^^^^552^579^[REPLACE] if  ( lhs < rhs )  {^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return -1 << 3;^554^^^^^552^579^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return d;  ;^554^^^^^552^579^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^if   (  lhs < rhs  )   {  ;^556^^^^^552^579^[REPLACE] if  ( lhs > rhs )  {^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return +0;^557^^^^^552^579^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return +3;^557^^^^^552^579^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^int rhsBits = floatToIntBits ( rhs )  ;^563^^^^^552^579^[REPLACE] int lhsBits = Float.floatToIntBits ( lhs ) ;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^int lhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^[REPLACE] int rhsBits = Float.floatToIntBits ( rhs ) ;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^if  (   rhsBits )  {^565^^^^^552^579^[REPLACE] if  ( lhsBits == rhsBits )  {^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return 3;^566^^^^^552^579^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^if  ( lhsBits  ==  rhsBits )  {^574^^^^^552^579^[REPLACE] if  ( lhsBits < rhsBits )  {^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return +3;^577^^^^^574^578^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return d;  ;^575^^^^^552^579^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return -4;^575^^^^^552^579^[REPLACE] return -1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^return +2;^577^^^^^552^579^[REPLACE] return +1;^[METHOD] compare [TYPE] int [PARAMETER] float lhs float rhs [CLASS] NumberUtils   [TYPE]  boolean false  true  [TYPE]  float lhs  rhs  [TYPE]  int lhsBits  rhsBits 
[REPLACE]^if   (  expPos < decPos  )   {  ;^619^^^^^618^712^[REPLACE] if  ( StringUtils.isEmpty ( str )  )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^return false;^619^620^621^^^618^712^[ADD] if  ( StringUtils.isEmpty ( str )  )  { return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^620^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^char[] chars = str .charAt ( i )  ;^622^^^^^618^712^[REPLACE] char[] chars = str.toCharArray (  ) ;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^int i = start  ;^623^^^^^618^712^[REPLACE] int sz = chars.length;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^boolean hasExp = true;^624^^^^^618^712^[REPLACE] boolean hasExp = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^boolean allowSigns = false  ;^625^^^^^618^712^[REPLACE] boolean hasDecPoint = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^boolean allowSigns = true;^626^^^^^618^712^[REPLACE] boolean allowSigns = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^boolean allowSigns = false  ;^627^^^^^618^712^[REPLACE] boolean foundDigit = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^int start  =  1 ;^629^^^^^618^712^[REPLACE] int start =  ( chars[0] == '-' )  ? 1 : 0;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  (start  <=  start + 1 )  {^630^^^^^618^712^[REPLACE] if  ( sz > start + 1 )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^630^631^632^633^634^618^712^[ADD] if  ( sz > start + 1 )  { if  ( chars[start] == '0' && chars[start + 1] == 'x' )  { int i = start + 2; if  ( i == sz )  { return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  (  chars[start + 1] == 'x' )  {^631^^^^^618^712^[REPLACE] if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( i  &&  sz )  {^633^^^^^618^712^[REPLACE] if  ( i == sz )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^634^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  (  ( chars[i] < '0' ) {^638^639^640^^^618^712^[REPLACE] if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^641^^^^^638^642^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^634^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^641^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;  ;^644^^^^^618^712^[REPLACE] return true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^int i = start  ;^632^^^^^618^712^[REPLACE] int i = start + 2;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( i  !=  start )  {^633^^^^^618^712^[REPLACE] if  ( i == sz )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  (  ( chars[i] < '0' || chars[i] > '9' ) ||  ( chars[i] < 'a' || chars[i] > 'f' ) ||  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^618^712^[REPLACE] if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^641^^^^^638^642^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;^644^^^^^618^712^[REPLACE] return true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^632^^^^^618^712^[ADD] int i = start + 2;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( chars[start] == '0' ||true )  {^631^^^^^618^712^[REPLACE] if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( i  &&  start )  {^633^^^^^618^712^[REPLACE] if  ( i == sz )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^638^639^640^641^642^618^712^[ADD] if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  { return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^int i =sz  2;^632^^^^^618^712^[REPLACE] int i = start + 2;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  (   sz )  {^633^^^^^618^712^[REPLACE] if  ( i == sz )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^hasExpif  (  ( chars[i] < '0' ) {^638^639^640^^^618^712^[REPLACE] if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^int i = start  2;^632^^^^^618^712^[REPLACE] int i = start + 2;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^int i = sz;^649^^^^^618^712^[REPLACE] int i = start;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( chars[i] >= '0' || chars[i] <= '9' )  {^653^^^^^618^712^[REPLACE] if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^foundDigit = true;allowSigns = false;^653^654^655^^^618^712^[ADD] if  ( chars[i] >= '0' && chars[i] <= '9' )  { foundDigit = true; allowSigns = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^}  if  ( chars[i]  &&  '.' )  {^657^^^^^618^712^[REPLACE] } else if  ( chars[i] == '.' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^} else if  ( chars[i] == 'e' ) {^663^^^^^618^712^[REPLACE] } else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^}   return false;^663^664^665^^667^618^712^[ADD] else if  ( chars[i] == 'e' || chars[i] == 'E' )  {  if  ( hasExp )  { return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^}  else {^674^^^^^618^712^[REPLACE] } else if  ( chars[i] == '+' || chars[i] == '-' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^}   return false;^674^675^676^677^^618^712^[ADD] else if  ( chars[i] == '+' || chars[i] == '-' )  { if  ( !allowSigns )  { return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^681^^^^^674^682^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( !hasExp )  {^675^^^^^618^712^[REPLACE] if  ( !allowSigns )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^676^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^allowSigns = true  ;^678^^^^^618^712^[REPLACE] allowSigns = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^foundDigit = true;^679^^^^^618^712^[REPLACE] foundDigit = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^676^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^foundDigit = true  ;^679^^^^^618^712^[REPLACE] foundDigit = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^681^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( true )  {^665^^^^^618^712^[REPLACE] if  ( hasExp )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^667^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( !true )  {^669^^^^^618^712^[REPLACE] if  ( !foundDigit )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^670^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^hasExp = false;^672^^^^^618^712^[REPLACE] hasExp = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^allowSigns = false;^673^^^^^618^712^[REPLACE] allowSigns = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^667^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^665^666^667^668^^618^712^[ADD] if  ( hasExp )  {  return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^681^^^^^674^682^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^678^^^^^618^712^[ADD] allowSigns = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^679^^^^^618^712^[ADD] foundDigit = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( allowSigns )  {^675^^^^^618^712^[REPLACE] if  ( !allowSigns )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^675^676^677^^^618^712^[ADD] if  ( !allowSigns )  { return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^673^^^^^618^712^[ADD] allowSigns = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^allowSigns = true;^678^^^^^618^712^[REPLACE] allowSigns = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^681^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( hasDecPoint ) {^658^^^^^618^712^[REPLACE] if  ( hasDecPoint || hasExp )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^660^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^662^^^^^618^712^[ADD] hasDecPoint = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^660^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( hasDecPoint &&true )  {^658^^^^^618^712^[REPLACE] if  ( hasDecPoint || hasExp )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^}  else {^663^^^^^618^712^[REPLACE] } else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if   (  chars[i] == 'e' || chars[i] == 'E'  )   {  ;^674^^^^^618^712^[REPLACE] } else if  ( chars[i] == '+' || chars[i] == '-' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^670^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^hasDecPoint = false;^662^^^^^618^712^[REPLACE] hasDecPoint = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^foundDigit = false  ;^654^^^^^618^712^[REPLACE] foundDigit = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^allowSigns = true;^655^^^^^618^712^[REPLACE] allowSigns = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^}  else {^657^^^^^618^712^[REPLACE] } else if  ( chars[i] == '.' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REMOVE]^if  ( sz >  ( start + 1 )  )  {     if  (  (  ( chars[start] )  == '0' )  &&  (  ( chars[ ( start + 1 ) ] )  == 'x' )  )  {         int i = start + 2;         if  ( i == sz )  {             return false;         }         for  ( ; i <  ( chars.length ) ; i++ )  {             if  (  (  (  (  ( chars[i] )  < '0' )  ||  (  ( chars[i] )  > '9' )  )  &&  (  (  ( chars[i] )  < 'a' )  ||  (  ( chars[i] )  > 'f' )  )  )  &&  (  (  ( chars[i] )  < 'A' )  ||  (  ( chars[i] )  > 'F' )  )  )  {                 return false;             }         }         return true;     } }^663^^^^^618^712^[REMOVE] ^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if   (  expPos < decPos  )   {  ;^669^^^^^618^712^[REPLACE] if  ( !foundDigit )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^672^^^^^618^712^[ADD] hasExp = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( foundDigit )  {^669^^^^^618^712^[REPLACE] if  ( !foundDigit )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^} else if  ( chars[i] == '+' ) {^674^^^^^618^712^[REPLACE] } else if  ( chars[i] == '+' || chars[i] == '-' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^672^673^^^^618^712^[ADD] hasExp = true; allowSigns = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^678^679^^^^618^712^[ADD] allowSigns = false; foundDigit = false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^hasExp = true  ;^662^^^^^618^712^[REPLACE] hasDecPoint = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  (true ) {^658^^^^^618^712^[REPLACE] if  ( hasDecPoint || hasExp )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^return false;^669^670^671^^^618^712^[ADD] if  ( !foundDigit )  { return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^allowSigns = false  ;^673^^^^^618^712^[REPLACE] allowSigns = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^} else if  (  chars[i] == '-' )  {^674^^^^^618^712^[REPLACE] } else if  ( chars[i] == '+' || chars[i] == '-' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^return false;^675^676^677^^^618^712^[ADD] if  ( !allowSigns )  { return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^foundDigit = false;^654^^^^^618^712^[REPLACE] foundDigit = true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( i < chars.length (  )  )  {^685^^^^^618^712^[REPLACE] if  ( i < chars.length )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REMOVE]^if  ( sz >  ( start + 1 )  )  {     if  (  (  ( chars[start] )  == '0' )  &&  (  ( chars[ ( start + 1 ) ] )  == 'x' )  )  {         int i = start + 2;         if  ( i == sz )  {             return false;         }         for  ( ; i <  ( chars.length ) ; i++ )  {             if  (  (  (  (  ( chars[i] )  < '0' )  ||  (  ( chars[i] )  > '9' )  )  &&  (  (  ( chars[i] )  < 'a' )  ||  (  ( chars[i] )  > 'f' )  )  )  &&  (  (  ( chars[i] )  < 'A' )  ||  (  ( chars[i] )  > 'F' )  )  )  {                 return false;             }         }         return true;     } }^685^^^^^618^712^[REMOVE] ^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( chars[i] >= '0' || chars[i] <= '9' )  {^686^^^^^618^712^[REPLACE] if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;^688^^^^^618^712^[REPLACE] return true;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if   (  chars[i] >= '0' && chars[i] <= '9'  )   {  ;^690^^^^^618^712^[REPLACE] if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^690^691^692^693^^618^712^[ADD] if  ( chars[i] == 'e' || chars[i] == 'E' )  {  return false; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^692^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( hasExp &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^618^712^[REPLACE] if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^699^^^^^694^700^[REPLACE] return foundDigit;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( chars[i] == 'l' && chars[i] == 'L' )  {^701^702^^^^618^712^[REPLACE] if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[ADD]^^701^702^^704^705^618^712^[ADD] if  ( chars[i] == 'l' || chars[i] == 'L' )  { return foundDigit && !hasExp; }^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^returntrue ;^704^^^^^701^705^[REPLACE] return foundDigit && !hasExp;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return false;  ;^692^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^699^^^^^618^712^[REPLACE] return foundDigit;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^returntrue ;^704^^^^^618^712^[REPLACE] return foundDigit && !hasExp;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true;^707^^^^^618^712^[REPLACE] return false;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( chars[i] == 'e' && chars[i] == 'E' )  {^690^^^^^618^712^[REPLACE] if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^if  ( allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^618^712^[REPLACE] if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return foundDigit;  ;^699^^^^^694^700^[REPLACE] return foundDigit;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return true ;^704^^^^^701^705^[REPLACE] return foundDigit && !hasExp;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
[REPLACE]^return   foundDigit;^711^^^^^618^712^[REPLACE] return !allowSigns && foundDigit;^[METHOD] isNumber [TYPE] boolean [PARAMETER] String str [CLASS] NumberUtils   [TYPE]  boolean allowSigns  false  foundDigit  hasDecPoint  hasExp  true  [TYPE]  String str  [TYPE]  int i  start  sz  [TYPE]  char[] chars 
