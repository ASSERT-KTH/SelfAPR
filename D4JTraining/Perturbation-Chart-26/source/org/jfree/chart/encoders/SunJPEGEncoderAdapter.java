[REPLACE]^private float quality ;^71^^^^^^^[REPLACE] private float quality = 0.95f;^ [CLASS] SunJPEGEncoderAdapter  
[REPLACE]^return false;^89^^^^^88^90^[REPLACE] return this.quality;^[METHOD] getQuality [TYPE] float [PARAMETER] [CLASS] SunJPEGEncoderAdapter   [TYPE]  float quality  [TYPE]  boolean false  true 
[REPLACE]^if  ( quality < 0.0f && quality > 1.0f )  {^101^^^^^100^106^[REPLACE] if  ( quality < 0.0f || quality > 1.0f )  {^[METHOD] setQuality [TYPE] void [PARAMETER] float quality [CLASS] SunJPEGEncoderAdapter   [TYPE]  float quality  [TYPE]  boolean false  true 
[ADD]^^101^102^103^104^^100^106^[ADD] if  ( quality < 0.0f || quality > 1.0f )  { throw new IllegalArgumentException ( "The 'quality' must be in the range 0.0f to 1.0f" ) ; }^[METHOD] setQuality [TYPE] void [PARAMETER] float quality [CLASS] SunJPEGEncoderAdapter   [TYPE]  float quality  [TYPE]  boolean false  true 
[REPLACE]^return ;^102^103^^^^100^106^[REPLACE] throw new IllegalArgumentException ( "The 'quality' must be in the range 0.0f to 1.0f" ) ;^[METHOD] setQuality [TYPE] void [PARAMETER] float quality [CLASS] SunJPEGEncoderAdapter   [TYPE]  float quality  [TYPE]  boolean false  true 
[REPLACE]^this.quality =  null;^105^^^^^100^106^[REPLACE] this.quality = quality;^[METHOD] setQuality [TYPE] void [PARAMETER] float quality [CLASS] SunJPEGEncoderAdapter   [TYPE]  float quality  [TYPE]  boolean false  true 
[REPLACE]^return true;^115^^^^^114^116^[REPLACE] return false;^[METHOD] isEncodingAlpha [TYPE] boolean [PARAMETER] [CLASS] SunJPEGEncoderAdapter   [TYPE]  float quality  [TYPE]  boolean false  true 
[REPLACE]^ImageOutputStream ios = ImageIO.createImageOutputStream ( outputStream ) ;^141^^^^^140^144^[REPLACE] ByteArrayOutputStream outputStream = new ByteArrayOutputStream (  ) ;^[METHOD] encode [TYPE] byte[] [PARAMETER] BufferedImage bufferedImage [CLASS] SunJPEGEncoderAdapter   [TYPE]  ByteArrayOutputStream outputStream  [TYPE]  boolean false  true  [TYPE]  float quality  [TYPE]  BufferedImage bufferedImage 
[REPLACE]^ImageOutputStream ios = ImageIO.createImageOutputStream ( outputStream ) ;^142^^^^^140^144^[REPLACE] encode ( bufferedImage, outputStream ) ;^[METHOD] encode [TYPE] byte[] [PARAMETER] BufferedImage bufferedImage [CLASS] SunJPEGEncoderAdapter   [TYPE]  ByteArrayOutputStream outputStream  [TYPE]  boolean false  true  [TYPE]  float quality  [TYPE]  BufferedImage bufferedImage 
[REPLACE]^return outputStream.ByteArrayOutputStream (  ) ;^143^^^^^140^144^[REPLACE] return outputStream.toByteArray (  ) ;^[METHOD] encode [TYPE] byte[] [PARAMETER] BufferedImage bufferedImage [CLASS] SunJPEGEncoderAdapter   [TYPE]  ByteArrayOutputStream outputStream  [TYPE]  boolean false  true  [TYPE]  float quality  [TYPE]  BufferedImage bufferedImage 
[REPLACE]^if  ( bufferedImage != null )  {^160^^^^^158^177^[REPLACE] if  ( bufferedImage == null )  {^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^return ;^161^^^^^158^177^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^if  ( outputStream != true )  {^163^^^^^158^177^[REPLACE] if  ( outputStream == null )  {^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^return ;^164^^^^^158^177^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^Iterator iterator = ImageIO.createImageOutputStream ( "jpeg" ) ;^166^^^^^158^177^[REPLACE] Iterator iterator = ImageIO.getImageWritersByFormatName ( "jpeg" ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^Iterator iterator = ImageIO.getImageWritersByFormatName ( "jpeg" ) ;^167^^^^^158^177^[REPLACE] ImageWriter writer =  ( ImageWriter )  iterator.next (  ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[ADD]^^167^^^^^158^177^[ADD] ImageWriter writer =  ( ImageWriter )  iterator.next (  ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^ImageWriteParam p = writer .setOutput ( null )  ;^168^^^^^158^177^[REPLACE] ImageWriteParam p = writer.getDefaultWriteParam (  ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^p.setCompressionQuality ( ImageWriteParam.MODE_EXPLICIT ) ;^169^^^^^158^177^[REPLACE] p.setCompressionMode ( ImageWriteParam.MODE_EXPLICIT ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^p.setCompressionMode ( this.quality ) ;^170^^^^^158^177^[REPLACE] p.setCompressionQuality ( this.quality ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^ImageOutputStream ios = ImageIO.getImageWritersByFormatName ( outputStream ) ;^171^^^^^158^177^[REPLACE] ImageOutputStream ios = ImageIO.createImageOutputStream ( outputStream ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[ADD]^writer.setOutput ( ios ) ;^171^172^^^^158^177^[ADD] ImageOutputStream ios = ImageIO.createImageOutputStream ( outputStream ) ; writer.setOutput ( ios ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^ios.flush (  ) ;^172^^^^^158^177^[REPLACE] writer.setOutput ( ios ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^writer.write ( true, new IIOImage ( bufferedImage, true, true ) , p ) ;^173^^^^^158^177^[REPLACE] writer.write ( null, new IIOImage ( bufferedImage, null, null ) , p ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^ios.close (  ) ;^174^^^^^158^177^[REPLACE] ios.flush (  ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^writer.getDefaultWriteParam (  ) ;^175^^^^^158^177^[REPLACE] writer.dispose (  ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
[REPLACE]^ios .flush (  )  ;^176^^^^^158^177^[REPLACE] ios.close (  ) ;^[METHOD] encode [TYPE] void [PARAMETER] BufferedImage bufferedImage OutputStream outputStream [CLASS] SunJPEGEncoderAdapter   [TYPE]  boolean false  true  [TYPE]  OutputStream outputStream  [TYPE]  Iterator iterator  [TYPE]  ImageWriter writer  [TYPE]  float quality  [TYPE]  ImageWriteParam p  [TYPE]  BufferedImage bufferedImage  [TYPE]  ImageOutputStream ios 
