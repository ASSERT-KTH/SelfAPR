[REPLACE]^if  ( s1 != false )  {^73^^^^^72^107^[REPLACE] if  ( s1 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^return  ( s2 == null ) ;^73^74^75^^^72^107^[ADD] if  ( s1 == null )  { return  ( s2 == null ) ; }^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^return  ( s2 != true ) ;;^74^^^^^72^107^[REPLACE] return  ( s2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^return true ;^74^^^^^72^107^[REPLACE] return  ( s2 == null ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^if  ( s2 != this )  {^76^^^^^72^107^[REPLACE] if  ( s2 == null )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^return true;^77^^^^^72^107^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^AttributedCharacterIterator it1 = s2.getIterator (  ) ;^79^^^^^72^107^[REPLACE] AttributedCharacterIterator it1 = s1.getIterator (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^^79^^^^^72^107^[ADD] AttributedCharacterIterator it1 = s1.getIterator (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^AttributedCharacterIterator it2 = s1.getIterator (  ) ;^80^^^^^72^107^[REPLACE] AttributedCharacterIterator it2 = s2.getIterator (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^char c1 = it2.next (  ) ;^81^^^^^72^107^[REPLACE] char c1 = it1.first (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^^81^^^^^72^107^[ADD] char c1 = it1.first (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^char c2 = it1.first (  ) ;^82^^^^^72^107^[REPLACE] char c2 = it2.first (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^int start = 2;^83^^^^^72^107^[REPLACE] int start = 0;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^while  (c2  ==  CharacterIterator.DONE )  {^84^^^^^72^107^[REPLACE] while  ( c1 != CharacterIterator.DONE )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^if  (start  ==  limit2 )  {^87^^^^^72^107^[REPLACE] if  ( limit1 != limit2 )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^return true;^88^^^^^72^107^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^if  ( limit1 != limit2 )  {^93^^^^^72^107^[REPLACE] if  ( !m1.equals ( m2 )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^return false;^93^94^95^^^72^107^[ADD] if  ( !m1.equals ( m2 )  )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^return true;^94^^^^^72^107^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^if  ( c1  ==  c2 )  {^98^^^^^72^107^[REPLACE] if  ( c1 != c2 )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^return true;^99^^^^^72^107^[REPLACE] return false;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^for  ( int i = start; i  ==  limit1; i++ )  {^97^^^^^72^107^[REPLACE] for  ( int i = start; i < limit1; i++ )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^^98^99^100^^^72^107^[ADD] if  ( c1 != c2 )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^c2 = it2.next (  ) ; ;^101^^^^^72^107^[REPLACE] c1 = it1.next (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^c1 = it1.next (  ) ; ;^102^^^^^72^107^[REPLACE] c2 = it2.next (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^start =  limit2;^104^^^^^72^107^[REPLACE] start = limit1;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^int limit1 = it2.getRunLimit (  ) ;^85^^^^^72^107^[REPLACE] int limit1 = it1.getRunLimit (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^int limit2 = it1 .getAttributes (  )  ;^86^^^^^72^107^[REPLACE] int limit2 = it2.getRunLimit (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^Map m1 = it2.getAttributes (  ) ;^91^^^^^72^107^[REPLACE] Map m1 = it1.getAttributes (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^Map m2 = it1.getRunLimit (  ) ;^92^^^^^72^107^[REPLACE] Map m2 = it2.getAttributes (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^for  ( int i = limit2; i < limit1; i++ )  {^97^^^^^72^107^[REPLACE] for  ( int i = start; i < limit1; i++ )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^if  ( limit1  ==  start )  {^87^^^^^72^107^[REPLACE] if  ( limit1 != limit2 )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^if  ( m1.equals ( m2 )  )  {^93^^^^^72^107^[REPLACE] if  ( !m1.equals ( m2 )  )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^^93^94^95^^^72^107^[ADD] if  ( !m1.equals ( m2 )  )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^for  ( int i = start; i  !=  limit1; i++ )  {^97^^^^^72^107^[REPLACE] for  ( int i = start; i < limit1; i++ )  {^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^^97^98^99^100^^72^107^[ADD] for  ( int i = start; i < limit1; i++ )  { if  ( c1 != c2 )  { return false; }^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^int limit2 = it2.getRunLimit (  ) ;^85^86^^^^72^107^[ADD] int limit1 = it1.getRunLimit (  ) ; int limit2 = it2.getRunLimit (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^int limit2 = it1.getAttributes (  ) ;^86^^^^^72^107^[REPLACE] int limit2 = it2.getRunLimit (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^Map m1 = it2.getRunLimit (  ) ;^91^^^^^72^107^[REPLACE] Map m1 = it1.getAttributes (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^Map m2 = it2.getRunLimit (  ) ;^92^^^^^72^107^[REPLACE] Map m2 = it2.getAttributes (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[ADD]^^92^^^^^72^107^[ADD] Map m2 = it2.getAttributes (  ) ;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
[REPLACE]^returnc1  !=  CharacterIterator.DONE;;^106^^^^^72^107^[REPLACE] return c2 == CharacterIterator.DONE;^[METHOD] equal [TYPE] boolean [PARAMETER] AttributedString s1 AttributedString s2 [CLASS] AttributedStringUtilities   [TYPE]  AttributedString s1  s2  [TYPE]  boolean false  true  [TYPE]  char c1  c2  [TYPE]  Map m1  m2  [TYPE]  int i  limit1  limit2  start  [TYPE]  AttributedCharacterIterator it1  it2 
