[REPLACE]^public static final RectangleConstraint NONE  = null ;^62^63^64^65^^62^65^[REPLACE] public static final RectangleConstraint NONE = new RectangleConstraint ( 0.0, null, LengthConstraintType.NONE, 0.0, null, LengthConstraintType.NONE ) ;^ [CLASS] RectangleConstraint  
[REPLACE]^private float width;^68^^^^^^^[REPLACE] private double width;^ [CLASS] RectangleConstraint  
[REPLACE]^private float height;^77^^^^^^^[REPLACE] private double height;^ [CLASS] RectangleConstraint  
[REPLACE]^this ( w, false, LengthConstraintType.FIXED, width, false, LengthConstraintType.FIXED ) ;^91^92^93^94^^90^95^[REPLACE] this ( w, null, LengthConstraintType.FIXED, h, null, LengthConstraintType.FIXED ) ;^[METHOD] <init> [TYPE] RectangleConstraint(double,double) [PARAMETER] double w double h [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range heightRange  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this ( 4.0d, w, LengthConstraintType.RANGE, 4.0d, h, LengthConstraintType.RANGE ) ;^104^105^106^107^^103^108^[REPLACE] this ( 0.0, w, LengthConstraintType.RANGE, 0.0, h, LengthConstraintType.RANGE ) ;^[METHOD] <init> [TYPE] Range) [PARAMETER] Range w Range h [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this ( 0.0D, w, LengthConstraintType.RANGE, h, null, LengthConstraintType.FIXED ) ;^118^119^120^121^^117^122^[REPLACE] this ( 0.0, w, LengthConstraintType.RANGE, h, null, LengthConstraintType.FIXED ) ;^[METHOD] <init> [TYPE] Range,double) [PARAMETER] Range w double h [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this ( width, true, LengthConstraintType.FIXED, 0.0, h, LengthConstraintType.RANGE ) ;^132^133^134^135^^131^136^[REPLACE] this ( w, null, LengthConstraintType.FIXED, 0.0, h, LengthConstraintType.RANGE ) ;^[METHOD] <init> [TYPE] Range) [PARAMETER] double w Range h [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^132^133^134^^^131^136^[ADD] this ( w, null, LengthConstraintType.FIXED, 0.0, h, LengthConstraintType.RANGE^[METHOD] <init> [TYPE] Range) [PARAMETER] double w Range h [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( widthConstraintType != null )  {^152^^^^^148^164^[REPLACE] if  ( widthConstraintType == null )  {^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^152^153^154^^^148^164^[ADD] if  ( widthConstraintType == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return ;^153^^^^^148^164^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( heightConstraintType != this )  {^155^^^^^148^164^[REPLACE] if  ( heightConstraintType == null )  {^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return ;^156^^^^^148^164^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this.width =  null;^158^^^^^148^164^[REPLACE] this.width = w;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this.widthRange =  w;^159^^^^^148^164^[REPLACE] this.widthRange = widthRange;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^159^160^^^^148^164^[ADD] this.widthRange = widthRange; this.widthConstraintType = widthConstraintType;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this.heightConstraintType = heightConstraintType; ;^160^^^^^148^164^[REPLACE] this.widthConstraintType = widthConstraintType;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^160^^^^^148^164^[ADD] this.widthConstraintType = widthConstraintType;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this.height =  width;^161^^^^^148^164^[REPLACE] this.height = h;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^161^162^^^^148^164^[ADD] this.height = h; this.heightRange = heightRange;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this.heightRange =  widthRange;^162^^^^^148^164^[REPLACE] this.heightRange = heightRange;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^this.widthConstraintType = widthConstraintType; ;^163^^^^^148^164^[REPLACE] this.heightConstraintType = heightConstraintType;^[METHOD] <init> [TYPE] LengthConstraintType) [PARAMETER] double w Range widthRange LengthConstraintType widthConstraintType double h Range heightRange LengthConstraintType heightConstraintType [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return this.heightRange;^172^^^^^171^173^[REPLACE] return this.width;^[METHOD] getWidth [TYPE] double [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return this.width;^181^^^^^180^182^[REPLACE] return this.widthRange;^[METHOD] getWidthRange [TYPE] Range [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return this.heightConstraintType;^190^^^^^189^191^[REPLACE] return this.widthConstraintType;^[METHOD] getWidthConstraintType [TYPE] LengthConstraintType [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return this.width;^199^^^^^198^200^[REPLACE] return this.height;^[METHOD] getHeight [TYPE] double [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return this.width;^208^^^^^207^209^[REPLACE] return this.heightRange;^[METHOD] getHeightRange [TYPE] Range [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return this.widthConstraintType;^217^^^^^216^218^[REPLACE] return this.heightConstraintType;^[METHOD] getHeightConstraintType [TYPE] LengthConstraintType [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  !=  LengthConstraintType.NONE )  {^227^^^^^226^236^[REPLACE] if  ( this.widthConstraintType == LengthConstraintType.NONE )  {^[METHOD] toUnconstrainedWidth [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return  new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, 0.0, this.heightRange, LengthConstraintType.NONE )  ;^231^232^233^234^^226^236^[REPLACE] return new RectangleConstraint ( this.width, this.widthRange, LengthConstraintType.NONE, this.height, this.heightRange, this.heightConstraintType ) ;^[METHOD] toUnconstrainedWidth [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return null;^228^^^^^226^236^[REPLACE] return this;^[METHOD] toUnconstrainedWidth [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  &&  LengthConstraintType.NONE )  {^245^^^^^244^254^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] toUnconstrainedHeight [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^return this;^245^246^247^^^244^254^[ADD] if  ( this.heightConstraintType == LengthConstraintType.NONE )  { return this; }^[METHOD] toUnconstrainedHeight [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, 0.0D, this.heightRange, LengthConstraintType.NONE ) ;^249^250^251^252^^244^254^[REPLACE] return new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, 0.0, this.heightRange, LengthConstraintType.NONE ) ;^[METHOD] toUnconstrainedHeight [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return null;^246^^^^^244^254^[REPLACE] return this;^[METHOD] toUnconstrainedHeight [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return  new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, range.getUpperBound (  ) , range, LengthConstraintType.RANGE )  ;^249^250^251^252^^244^254^[REPLACE] return new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, 0.0, this.heightRange, LengthConstraintType.NONE ) ;^[METHOD] toUnconstrainedHeight [TYPE] RectangleConstraint [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return  new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, 0.0, this.heightRange, LengthConstraintType.NONE )  ;^265^266^267^268^^264^269^[REPLACE] return new RectangleConstraint ( width, this.widthRange, LengthConstraintType.FIXED, this.height, this.heightRange, this.heightConstraintType ) ;^[METHOD] toFixedWidth [TYPE] RectangleConstraint [PARAMETER] double width [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return  new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, 0.0, this.heightRange, LengthConstraintType.NONE )  ;^280^281^282^283^^279^284^[REPLACE] return new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, height, this.heightRange, LengthConstraintType.FIXED ) ;^[METHOD] toFixedHeight [TYPE] RectangleConstraint [PARAMETER] double height [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthRange != false )  {^295^^^^^294^302^[REPLACE] if  ( range == null )  {^[METHOD] toRangeWidth [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^295^296^297^^^294^302^[ADD] if  ( range == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] toRangeWidth [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return ;^296^^^^^294^302^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] toRangeWidth [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return  new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, height, this.heightRange, LengthConstraintType.FIXED )  , widthRange, LengthConstraintType.RANGE, this.height, this.heightRange, this.heightConstraintType ) ;^298^299^300^301^^294^302^[REPLACE] return new RectangleConstraint ( range.getUpperBound (  ) , range, LengthConstraintType.RANGE, this.height, this.heightRange, this.heightConstraintType ) ;^[METHOD] toRangeWidth [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthRange != null )  {^313^^^^^312^320^[REPLACE] if  ( range == null )  {^[METHOD] toRangeHeight [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return ;^314^^^^^312^320^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] toRangeHeight [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, range.constrain (  ) , range, LengthConstraintType.RANGE ) ;^316^317^318^319^^312^320^[REPLACE] return new RectangleConstraint ( this.width, this.widthRange, this.widthConstraintType, range.getUpperBound (  ) , range, LengthConstraintType.RANGE ) ;^[METHOD] toRangeHeight [TYPE] RectangleConstraint [PARAMETER] Range range [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return "RectangleConstraint[" + this.widthConstraintType .toString (  )   + ": width=" + this.width + ", height=" + this.height + "]";^329^330^331^^^328^332^[REPLACE] return "RectangleConstraint[" + this.widthConstraintType.toString (  )  + ": width=" + this.width + ", height=" + this.height + "]";^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  &&  LengthConstraintType.NONE )  {^344^^^^^342^381^[REPLACE] if  ( this.widthConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^356^^^^^342^381^[REPLACE] else if  ( this.widthConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.widthConstraintType  !=  NONE )  {^368^^^^^342^381^[REPLACE] else if  ( this.widthConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  != widthConstraintType )  {^370^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^result.height = this.heightRange.constrain ( base.height ) ;^373^374^375^^^342^381^[ADD] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  { result.height = this.heightRange.constrain ( base.height ) ; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {     result.height = constrain ( base.height ) ; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {         result.height = this.height;     }^376^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = base.height; ;^377^^^^^342^381^[REPLACE] result.height = this.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.width = this.widthRange.constrain ( base.width ) ; ;^374^^^^^342^381^[REPLACE] result.height = this.heightRange.constrain ( base.height ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  !=  LengthConstraintType.FIXED )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = this.height; ;^371^^^^^342^381^[REPLACE] result.height = base.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  !=  LengthConstraintType.RANGE )  {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^result.height = this.height;^376^377^378^^^342^381^[ADD] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  { result.height = this.height; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  && widthConstraintType )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.width = base.width; ;^369^^^^^342^381^[REPLACE] result.width = this.width;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^369^^^^^342^381^[ADD] result.width = this.width;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^374^^^^^342^381^[ADD] result.height = this.heightRange.constrain ( base.height ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^377^^^^^342^381^[ADD] result.height = this.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  &&  LengthConstraintType.NONE )  {^370^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  !=  LengthConstraintType.FIXED )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^371^^^^^342^381^[ADD] result.height = base.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  != widthConstraintType )  {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  != widthConstraintType )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  !=  LengthConstraintType.NONE )  {^358^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  &&  LengthConstraintType.RANGE )  {^361^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = base.height; ;^365^^^^^342^381^[REPLACE] result.height = this.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.width = this.widthRange.constrain ( base.width ) ; ;^362^^^^^342^381^[REPLACE] result.height = this.heightRange.constrain ( base.height ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^365^^^^^342^381^[ADD] result.height = this.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = this.height; ;^359^^^^^342^381^[REPLACE] result.height = base.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  !=  LengthConstraintType.RANGE )  {^361^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  !=  LengthConstraintType.FIXED )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  !=  LengthConstraintType.FIXED )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^result.height = this.height;^364^365^366^^^342^381^[ADD] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  { result.height = this.height; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = this.heightRange.constrain ( base.height ) ; ;^357^^^^^342^381^[REPLACE] result.width = this.widthRange.constrain ( base.width ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^362^^^^^342^381^[ADD] result.height = this.heightRange.constrain ( base.height ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  ||  LengthConstraintType.NONE )  {^358^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  && widthConstraintType )  {^361^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^result.height = this.heightRange.constrain ( base.height ) ;^361^362^363^^^342^381^[ADD] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  { result.height = this.heightRange.constrain ( base.height ) ; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {     result.height = constrain ( base.height ) ; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {         result.height = this.height;     }^364^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^359^^^^^342^381^[ADD] result.height = base.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  ||  LengthConstraintType.RANGE )  {^361^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  != widthConstraintType )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( widthConstraintType  ||  NONE )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.widthConstraintType  != widthConstraintType )  {^368^^^^^342^381^[REPLACE] else if  ( this.widthConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  ||  LengthConstraintType.NONE )  {^370^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  && widthConstraintType )  {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  ||  LengthConstraintType.FIXED )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  ||  LengthConstraintType.RANGE )  {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  (widthConstraintType  &&  LengthConstraintType.FIXED )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^357^^^^^342^381^[ADD] result.width = this.widthRange.constrain ( base.width ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  != widthConstraintType )  {^346^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  (widthConstraintType  ||  LengthConstraintType.RANGE )  {^349^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  &&  LengthConstraintType.FIXED )  {^352^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = base.height; ;^353^^^^^342^381^[REPLACE] result.height = this.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.width = this.widthRange.constrain ( base.width ) ; ;^350^^^^^342^381^[REPLACE] result.height = this.heightRange.constrain ( base.height ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  &&  LengthConstraintType.FIXED )  {^352^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^350^^^^^342^381^[ADD] result.height = this.heightRange.constrain ( base.height ) ;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.height = this.height; ;^347^^^^^342^381^[REPLACE] result.height = base.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( widthConstraintType  ||  NONE )  {^349^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.NONE )  )  {     result.height = base.height; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {         result.height = constrain ( base.height ) ;     }else         if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {             result.height = this.height;         }^349^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^352^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^353^^^^^342^381^[ADD] result.height = this.height;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^result.width = this.width; ;^345^^^^^342^381^[REPLACE] result.width = base.width;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  &&  LengthConstraintType.NONE )  {^346^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  &&  LengthConstraintType.RANGE )  {^349^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^349^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  !=  LengthConstraintType.FIXED )  {^352^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {     result.height = constrain ( base.height ) ; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {         result.height = this.height;     }^352^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.widthConstraintType  !=  LengthConstraintType.RANGE )  {^356^^^^^342^381^[REPLACE] else if  ( this.widthConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^368^^^^^342^381^[REPLACE] else if  ( this.widthConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  !=  LengthConstraintType.NONE )  {^370^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  || widthConstraintType )  {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.NONE )  )  {     result.height = base.height; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {         result.height = constrain ( base.height ) ;     }else         if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {             result.height = this.height;         }^373^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  &&  LengthConstraintType.FIXED )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  || widthConstraintType )  {^370^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {     result.height = constrain ( base.height ) ; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {         result.height = this.height;     }^370^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  && widthConstraintType )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^376^377^378^^^342^381^[ADD] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  { result.height = this.height; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  ||  NONE )  {^358^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^result.height = base.height;^358^359^360^^^342^381^[ADD] if  ( this.heightConstraintType == LengthConstraintType.NONE )  { result.height = base.height; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else {^361^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  !=  LengthConstraintType.FIXED )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  ||  LengthConstraintType.RANGE )  {^361^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  &&  LengthConstraintType.FIXED )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  ||  LengthConstraintType.FIXED )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  &&  LengthConstraintType.NONE )  {^358^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  ( this.heightConstraintType  || widthConstraintType )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^else if  (widthConstraintType  !=  LengthConstraintType.FIXED )  {^364^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REMOVE]^if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.NONE )  )  {     result.height = base.height; }else     if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.RANGE )  )  {         result.height = constrain ( base.height ) ;     }else         if  (  ( this.heightConstraintType )  ==  ( LengthConstraintType.FIXED )  )  {             result.height = this.height;         }^361^^^^^342^381^[REMOVE] ^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  !=  LengthConstraintType.FIXED )  {^368^^^^^342^381^[REPLACE] else if  ( this.widthConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  (widthConstraintType  !=  LengthConstraintType.NONE )  {^370^^^^^342^381^[REPLACE] if  ( this.heightConstraintType == LengthConstraintType.NONE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  !=  LengthConstraintType.RANGE )  {^373^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( widthConstraintType  !=  NONE )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^370^371^372^^^342^381^[ADD] if  ( this.heightConstraintType == LengthConstraintType.NONE )  { result.height = base.height; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^if  ( this.heightConstraintType  ||  LengthConstraintType.FIXED )  {^376^^^^^342^381^[REPLACE] else if  ( this.heightConstraintType == LengthConstraintType.FIXED )  {^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[ADD]^^373^374^375^^^342^381^[ADD] else if  ( this.heightConstraintType == LengthConstraintType.RANGE )  { result.height = this.heightRange.constrain ( base.height ) ; }^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
[REPLACE]^return base;^380^^^^^342^381^[REPLACE] return result;^[METHOD] calculateConstrainedSize [TYPE] Size2D [PARAMETER] Size2D base [CLASS] RectangleConstraint   [TYPE]  LengthConstraintType heightConstraintType  widthConstraintType  [TYPE]  Size2D base  result  [TYPE]  RectangleConstraint NONE  [TYPE]  boolean false  true  [TYPE]  Range h  heightRange  range  w  widthRange  [TYPE]  double h  height  w  width 
