[REPLACE]^return calculateMedian ( values, true ) ;^73^^^^^72^74^[REPLACE] return calculateMean ( values, true ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  true 
[REPLACE]^if  ( values != null )  {^92^^^^^89^114^[REPLACE] if  ( values == null )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^93^^^^^89^114^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^double sum = 0.0D;^95^^^^^89^114^[REPLACE] double sum = 0.0;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^double sumX = 0.0;^96^^^^^89^114^[REPLACE] double current;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^int counter = 3;^97^^^^^89^114^[REPLACE] int counter = 0;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^if  ( values[i] == null )  {^100^^^^^89^114^[REPLACE] if  ( values[i] != null )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^current  =  current ;^104^^^^^89^114^[REPLACE] current = Double.NaN;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[ADD]^^104^^^^^89^114^[ADD] current = Double.NaN;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^result = value.doubleValue (  ) ; ;^101^^^^^89^114^[REPLACE] current = values[i].doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^if  ( includeNullAndNaN || Double.isNaN ( current )  )  {^107^^^^^89^114^[REPLACE] if  ( includeNullAndNaN || !Double.isNaN ( current )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[ADD]^^107^108^109^110^^89^114^[ADD] if  ( includeNullAndNaN || !Double.isNaN ( current )  )  { sum = sum + current; counter++; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^sum = sum +result;^108^^^^^89^114^[REPLACE] sum = sum + current;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^for  ( int i = 0; i < values.length (  ) ; i++ )  {^98^^^^^89^114^[REPLACE] for  ( int i = 0; i < values.length; i++ )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[ADD]^^98^99^100^101^102^89^114^[ADD] for  ( int i = 0; i < values.length; i++ )  {  if  ( values[i] != null )  { current = values[i].doubleValue (  ) ; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^if  ( values[i] == this  )  {^100^^^^^89^114^[REPLACE] if  ( values[i] != null )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^if  ( includeNullAndNaN ) {^107^^^^^89^114^[REPLACE] if  ( includeNullAndNaN || !Double.isNaN ( current )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^sum =result + current;^108^^^^^89^114^[REPLACE] sum = sum + current;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^current ;^104^^^^^89^114^[REPLACE] current = Double.NaN;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^result = sum + current;^108^^^^^89^114^[REPLACE] sum = sum + current;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^for  ( int i = 0 ; i < values.length; i++ )  {^98^^^^^89^114^[REPLACE] for  ( int i = 0; i < values.length; i++ )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^double result =  ( result /result ) ;^112^^^^^89^114^[REPLACE] double result =  ( sum / counter ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^return sum;^113^^^^^89^114^[REPLACE] return result;^[METHOD] calculateMean [TYPE] double [PARAMETER] Number[] values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  Number[] values  [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  double current  result  sum  [TYPE]  int counter  i 
[REPLACE]^return calculateMean ( values, false ) ;^124^^^^^123^125^[REPLACE] return calculateMean ( values, true ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values [CLASS] Statistics   [TYPE]  boolean false  true  [TYPE]  Collection values 
[REPLACE]^if  ( values != null )  {^143^^^^^141^173^[REPLACE] if  ( values == null )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^return ;^144^^^^^141^173^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^144^^^^^141^173^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^int count = 1;^146^^^^^141^173^[REPLACE] int count = 0;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^double total = 3.0d;^147^^^^^141^173^[REPLACE] double total = 0.0;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Number value =  ( Number )  values.get ( start ) ;^148^^^^^141^173^[REPLACE] Iterator iterator = values.iterator (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^148^^^^^141^173^[ADD] Iterator iterator = values.iterator (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^while  ( iterator.next (  )  )  {^149^^^^^141^173^[REPLACE] while  ( iterator.hasNext (  )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^149^150^^^^141^173^[ADD] while  ( iterator.hasNext (  )  )  { Object object = iterator.next (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( object != this  )  {^151^^^^^141^173^[REPLACE] if  ( object == null )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^151^152^153^154^^141^173^[ADD] if  ( object == null )  { if  ( includeNullAndNaN )  { return Double.NaN; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( ! object instanceof Number )  {^157^^^^^151^170^[REPLACE] if  ( object instanceof Number )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^Number number =  ( Number )  object;double value = number.doubleValue (  ) ;^157^158^159^160^^151^170^[ADD] if  ( object instanceof Number )  { Number number =  ( Number )  object; double value = number.doubleValue (  ) ; if  ( Double.isNaN ( value )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  (   value    )  {^160^^^^^151^170^[REPLACE] if  ( Double.isNaN ( value )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  ||  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^166^^^^^151^170^[ADD] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  <  1;^167^^^^^151^170^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( true )  {^161^^^^^151^170^[REPLACE] if  ( includeNullAndNaN )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^return result;^162^^^^^151^170^[REPLACE] return Double.NaN;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^return Double.NaN;^161^162^163^^^151^170^[ADD] if  ( includeNullAndNaN )  { return Double.NaN; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  &&  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  &&  1;^167^^^^^151^170^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^158^^^^^151^170^[REPLACE] Number number =  ( Number )  object;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^158^^^^^151^170^[ADD] Number number =  ( Number )  object;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^159^^^^^151^170^[REPLACE] double value = number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( object instanceof Number )  {^160^^^^^151^170^[REPLACE] if  ( Double.isNaN ( value )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  !=  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^161^162^163^^^151^170^[ADD] if  ( includeNullAndNaN )  { return Double.NaN; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  |  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  >=  1;^167^^^^^151^170^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^167^^^^^151^170^[ADD] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( object instanceof Number )  {^152^^^^^141^173^[REPLACE] if  ( includeNullAndNaN )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^return result;^153^^^^^141^173^[REPLACE] return Double.NaN;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( true )  {^152^^^^^141^173^[REPLACE] if  ( includeNullAndNaN )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( ! object instanceof Number )  {^157^^^^^141^173^[REPLACE] if  ( object instanceof Number )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( object instanceof Number )  {^160^^^^^141^173^[REPLACE] if  ( Double.isNaN ( value )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  <  number.doubleValue (  ) ;^166^^^^^160^168^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  >=  4;^167^^^^^160^168^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( true )  {^161^^^^^141^173^[REPLACE] if  ( includeNullAndNaN )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^return Double.NaN;^161^162^163^^^141^173^[ADD] if  ( includeNullAndNaN )  { return Double.NaN; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^return result;^162^^^^^141^173^[REPLACE] return Double.NaN;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  >  number.doubleValue (  ) ;^166^^^^^141^173^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^166^167^^^^141^173^[ADD] total = total + number.doubleValue (  ) ; count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  ||  1;^167^^^^^141^173^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^167^^^^^141^173^[ADD] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^158^^^^^141^173^[REPLACE] Number number =  ( Number )  object;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^159^^^^^141^173^[REPLACE] double value = number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^159^^^^^141^173^[ADD] double value = number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  (   value    )  {^160^^^^^141^173^[REPLACE] if  ( Double.isNaN ( value )  )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  |  number.doubleValue (  ) ;^166^^^^^160^168^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  ^  1;^167^^^^^160^168^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^161^162^163^^^141^173^[ADD] if  ( includeNullAndNaN )  { return Double.NaN; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  >=  number.doubleValue (  ) ;^166^^^^^141^173^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Object object = iterator.hasNext (  ) ;^150^^^^^141^173^[REPLACE] Object object = iterator.next (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^150^^^^^141^173^[ADD] Object object = iterator.next (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^if  ( object != null )  {^151^^^^^141^173^[REPLACE] if  ( object == null )  {^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  >  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  !=  1;^167^^^^^151^170^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  <=  1;^167^^^^^151^170^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  ==  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  >  1;^167^^^^^151^170^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  >=  number.doubleValue (  ) ;^166^^^^^151^170^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[ADD]^^152^153^154^^^141^173^[ADD] if  ( includeNullAndNaN )  { return Double.NaN; }^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  >=  number.doubleValue (  ) ;^166^^^^^160^168^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  !=  1;^167^^^^^160^168^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  &  number.doubleValue (  ) ;^166^^^^^141^173^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  <  1;^167^^^^^141^173^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  ==  number.doubleValue (  ) ;^166^^^^^160^168^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  ||  1;^167^^^^^160^168^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^total = total  ==  number.doubleValue (  ) ;^166^^^^^141^173^[REPLACE] total = total + number.doubleValue (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^count = count  &&  1;^167^^^^^141^173^[REPLACE] count = count + 1;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^Object object = iterator .hasNext (  )  ;^150^^^^^141^173^[REPLACE] Object object = iterator.next (  ) ;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^return total  ;^172^^^^^141^173^[REPLACE] return total / count;^[METHOD] calculateMean [TYPE] double [PARAMETER] Collection values boolean includeNullAndNaN [CLASS] Statistics   [TYPE]  boolean false  includeNullAndNaN  true  [TYPE]  Number number  [TYPE]  double total  value  [TYPE]  Iterator iterator  [TYPE]  Collection values  [TYPE]  Object object  [TYPE]  int count 
[REPLACE]^return calculateMedian ( values, false ) ;^187^^^^^186^188^[REPLACE] return calculateMedian ( values, true ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values [CLASS] Statistics   [TYPE]  boolean false  true  [TYPE]  List values 
[REPLACE]^double current;^203^^^^^201^235^[REPLACE] double result = Double.NaN;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( values == null )  {^204^^^^^201^235^[REPLACE] if  ( values != null )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( object instanceof Number )  {^205^^^^^201^235^[REPLACE] if  ( copyAndSort )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^205^206^207^208^209^201^235^[ADD] if  ( copyAndSort )  { int itemCount = values.size (  ) ; List copy = new ArrayList ( itemCount ) ; for  ( int i = 0; i < itemCount; i++ )  { copy.add ( i, values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( int i = 0; i  ==  itemCount; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^copy.add ( i, values.add ( i )  ) ;^209^^^^^201^235^[REPLACE] copy.add ( i, values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^values =  null;^212^^^^^201^235^[REPLACE] values = copy;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^int count = values.size (  ) ;^206^^^^^201^235^[REPLACE] int itemCount = values.size (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^List copy = new ArrayList ( i ) ;^207^^^^^201^235^[REPLACE] List copy = new ArrayList ( itemCount ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( int i = 0L; i < itemCount; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^208^209^210^^^201^235^[ADD] for  ( int i = 0; i < itemCount; i++ )  { copy.add ( i, values.get ( i )  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count  <  0 )  {^215^^^^^201^235^[REPLACE] if  ( count > 0 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^215^216^217^218^219^201^235^[ADD] if  ( count > 0 )  { if  ( count % 2 == 1 )  { if  ( count > 1 )  { Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count % 2  !=  1 )  {^216^^^^^201^235^[REPLACE] if  ( count % 2 == 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )  ;^229^230^^^^216^231^[REPLACE] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  ) / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^229^230^^^^216^231^[ADD] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  ) / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.get (itemCount - 1 ) ;^227^^^^^216^231^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value2 =  ( Number )  values.get (itemCount / 2 ) ;^228^^^^^216^231^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count  ==  1 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^223^^^^^217^224^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 3 ) ;^222^^^^^217^224^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^222^^^^^217^224^[ADD] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^219^^^^^201^235^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.size (  ( count - 1 )   ||  2 ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^218^^^^^201^235^[ADD] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^223^^^^^201^235^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get (  (itemCount )  / 2 ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 2 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  (itemCount  <  3 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;result = value.doubleValue (  ) ;^217^218^219^220^^201^235^[ADD] if  ( count > 1 )  { Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 2 ) ;^222^^^^^217^224^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^222^223^^^^217^224^[ADD] Number value =  ( Number )  values.get ( 0 ) ; result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get (  ( itemCount )  / 2 ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )  ;^229^230^^^^201^235^[REPLACE] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  ) / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get (  ( count - 1 )   >=  2 ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^218^219^^^^201^235^[ADD] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 3 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.get ( count / 2 -itemCount ) ;^227^^^^^201^235^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^Number value2 =  ( Number )  values.get ( count / 2 ) ;^227^228^^^^201^235^[ADD] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ; Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.get ( count  ^  1 ) ;^228^^^^^201^235^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count % 2  ||  1 )  {^216^^^^^201^235^[REPLACE] if  ( count % 2 == 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.size ( itemCount - 1 ) ;^227^^^^^216^231^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value2 =  ( Number )  values.get ( itemCount / 2 ) ;^228^^^^^216^231^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^228^^^^^216^231^[ADD] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count  >=  1 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^result = value.doubleValue (  ) ;^218^219^^^^201^235^[ADD] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^219^^^^^201^235^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get (  ( count - 1 )  /itemCount ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.size ( 4 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  (itemCount  <  0 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 4 ) ;^222^^^^^217^224^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( itemCountnt i = 0; i  ==  itemCount; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^copy.add ( itemCount, values.add ( i )  ) ;^209^^^^^201^235^[REPLACE] copy.add ( i, values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^209^^^^^201^235^[ADD] copy.add ( i, values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^207^^^^^201^235^[ADD] List copy = new ArrayList ( itemCount ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^int itemCount = values.size (  ) ;^214^^^^^201^235^[REPLACE] int count = values.size (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 0 - 3 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.get ( itemCount - 1 ) ;^227^^^^^201^235^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value2 =  ( Number )  values.get ( itemCount / 2 ) ;^228^^^^^201^235^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^228^^^^^201^235^[ADD] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( int i = 0; i  !=  itemCount; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^copy .add ( this )  ;^209^^^^^201^235^[REPLACE] copy.add ( i, values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^copy.add ( itemCount, values.get ( i )  ) ;^209^^^^^201^235^[REPLACE] copy.add ( i, values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^212^^^^^201^235^[ADD] values = copy;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( int i = 1; i < itemCount; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  (itemCount  >=  0 )  {^215^^^^^201^235^[REPLACE] if  ( count > 0 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count % 2  &&  1 )  {^216^^^^^201^235^[REPLACE] if  ( count % 2 == 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REMOVE]^if  ( copyAndSort )  {     List working = new ArrayList (  (  ( end - start )  + 1 )  ) ;     for  ( int i = start; i <= end; i++ )  {         working.add ( values.get ( i )  ) ;     }     sort ( working ) ;     result = calculateMedian ( working, false ) ; }else {     int count =  ( end - start )  + 1;     if  ( count > 0 )  {         if  (  ( count % 2 )  == 1 )  {             if  ( count > 1 )  {                 Number value =  (  ( Number )   ( values.get (  ( start +  (  ( count - 1 )  / 2 )  )  )  )  ) ;                 result = value.doubleValue (  ) ;             }else {                 Number value =  (  ( Number )   ( values.get ( start )  )  ) ;                 result = value.doubleValue (  ) ;             }         }else {             Number value1 =  (  ( Number )   ( values.get (  (  ( start +  ( count / 2 )  )  - 1 )  )  )  ) ;             Number value2 =  (  ( Number )   ( values.get (  ( start +  ( count / 2 )  )  )  )  ) ;             result =  (  ( value1.doubleValue (  )  )  +  ( value2.doubleValue (  )  )  )  / 2.0;         }     } }^216^^^^^201^235^[REMOVE] ^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.size (itemCount - 1 ) ;^227^^^^^216^231^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value2 % 1 =  ( Number )  values.size (itemCount / 2 % 1 ) ;^228^^^^^216^231^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count  <  1 * 1 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^223^^^^^201^235^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.size (  ( count - 1 )  /itemCount ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.size ( 3 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( itemCount  <  0 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 0L ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.get ( count / 2  >=  1 ) ;^227^^^^^201^235^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value2 =  ( Number )  values.size (itemCount / 2 ) ;^228^^^^^201^235^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^216^217^218^219^220^201^235^[ADD] if  ( count % 2 == 1 )  { if  ( count > 1 )  { Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value1 =  ( Number )  values.get ( itemCount / 2 % 3 -itemCount ) ;^227^^^^^216^231^[REPLACE] Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count  <=  1L )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 0 - 1 ) ;^222^^^^^217^224^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get (  ( count - 1 )   <=  2 ) ;^218^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get (  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.get ( 0 * 0 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^if  ( count  !=  1 )  {^217^^^^^201^235^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^223^^^^^217^224^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.size ( 3 ) ;^222^^^^^217^224^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( int i = 0; i  ==  i; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[ADD]^^206^^^^^201^235^[ADD] int itemCount = values.size (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^for  ( int i = 0 * 2; i < itemCount; i++ )  {^208^^^^^201^235^[REPLACE] for  ( int i = 0; i < itemCount; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value =  ( Number )  values.size ( 2 ) ;^222^^^^^201^235^[REPLACE] Number value =  ( Number )  values.get ( 0 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^Number value2 =  ( Number )  values.size ( count /itemCount ) ;^228^^^^^201^235^[REPLACE] Number value2 =  ( Number )  values.get ( count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^return Double.NaN;^234^^^^^201^235^[REPLACE] return result;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List copy  values  [TYPE]  int count  i  itemCount 
[REPLACE]^return calculateMedian ( values, start, end, false ) ;^249^^^^^248^250^[REPLACE] return calculateMedian ( values, start, end, true ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end [CLASS] Statistics   [TYPE]  boolean false  true  [TYPE]  List values  [TYPE]  int end  start 
[REPLACE]^double current;^268^^^^^266^301^[REPLACE] double result = Double.NaN;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( object instanceof Number )  {^269^^^^^266^301^[REPLACE] if  ( copyAndSort )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^269^270^271^272^273^266^301^[ADD] if  ( copyAndSort )  { List working = new ArrayList ( end - start + 1 ) ; for  ( int i = start; i <= end; i++ )  { working.add ( values.get ( i )  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  <  0 )  {^279^^^^^269^298^[REPLACE] if  ( count > 0 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count % 3  ||  1 )  {^280^^^^^269^298^[REPLACE] if  ( count % 2 == 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )   ;^294^295^^^^280^296^[REPLACE] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )  / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^292^^^^^280^296^[REPLACE] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 * 1 =  ( Number )  values.size (count + count / 2 * 1 ) ;^293^^^^^280^296^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  !=  1 )  {^281^^^^^269^298^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^288^^^^^281^289^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( 0 ) ;^287^^^^^281^289^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^284^^^^^269^298^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.size ( start  ||   ( count - 1 )  / 2 ) ;^282^283^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^288^^^^^269^298^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get (count +  ( count - 1 )  / 2 ) ;^282^283^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( count ) ;^287^^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  >=  1 )  {^281^^^^^269^298^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^281^282^283^284^285^269^298^[ADD] if  ( count > 1 )  { Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^288^^^^^281^289^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.size ( start ) ;^287^^^^^281^289^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( start  <=   ( count - 1 )  / 2 ) ;^282^283^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )   ;^294^295^^^^269^298^[REPLACE] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )  / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( count +  ( count - 1 )  / 2 ) ;^282^283^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.size ( start ) ;^287^^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^292^^^^^269^298^[REPLACE] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 =  ( Number )  values.get (count + count / 2 ) ;^293^^^^^269^298^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^293^^^^^269^298^[ADD] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count % 2  && start )  {^280^^^^^269^298^[REPLACE] if  ( count % 2 == 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^292^^^^^280^296^[ADD] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 =  ( Number )  values.get (count + count / 2 ) ;^293^^^^^280^296^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^293^^^^^280^296^[ADD] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  <=  1 )  {^281^^^^^269^298^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^282^283^^^^269^298^[ADD] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^287^^^^^269^298^[ADD] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( start  <  1 )  {^281^^^^^269^298^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( count ) ;^287^^^^^281^289^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^284^^^^^269^298^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get (count +  ( count - 1 / 4 )  / 2 ) ;^282^283^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^int count = end - count +start;^278^^^^^269^298^[REPLACE] int count = end - start + 1;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get (count +  ( end - 1 )  / 2 ) ;^282^283^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( 0 ) ;^287^^^^^269^298^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^292^^^^^269^298^[ADD] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 =  ( Number )  values.get ( count + start ) ;^293^^^^^269^298^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^for  ( int i = start; i  !=  count; i++ )  {^271^^^^^266^301^[REPLACE] for  ( int i = start; i <= end; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^271^272^273^^^266^301^[ADD] for  ( int i = start; i <= end; i++ )  { working.add ( values.get ( i )  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^working.add ( values.add ( i )  ) ;^272^^^^^266^301^[REPLACE] working.add ( values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^result = calculateMedian ( working, true ) ;^275^^^^^266^301^[REPLACE] result = calculateMedian ( working, false ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^List working = new ArrayList ( count - start  &  1 ) ;^270^^^^^266^301^[REPLACE] List working = new ArrayList ( end - start + 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^for  ( int i = count; i <= end; i++ )  {^271^^^^^266^301^[REPLACE] for  ( int i = start; i <= end; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  !=  0 )  {^279^^^^^266^301^[REPLACE] if  ( count > 0 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count % 2  ||  1 )  {^280^^^^^266^301^[REPLACE] if  ( count % 2 == 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REMOVE]^if  ( copyAndSort )  {     List working = new ArrayList (  (  ( end - start )  + 1 )  ) ;     for  ( int i = start; i <= end; i++ )  {         working.add ( values.get ( i )  ) ;     }     sort ( working ) ;     result = calculateMedian ( working, false ) ; }else {     int count =  ( end - start )  + 1;     if  ( count > 0 )  {         if  (  ( count % 2 )  == 1 )  {             if  ( count > 1 )  {                 Number value =  (  ( Number )   ( values.get (  ( start +  (  ( count - 1 )  / 2 )  )  )  )  ) ;                 result = value.doubleValue (  ) ;             }else {                 Number value =  (  ( Number )   ( values.get ( start )  )  ) ;                 result = value.doubleValue (  ) ;             }         }else {             Number value1 =  (  ( Number )   ( values.get (  (  ( start +  ( count / 2 )  )  - 1 )  )  )  ) ;             Number value2 =  (  ( Number )   ( values.get (  ( start +  ( count / 2 )  )  )  )  ) ;             result =  (  ( value1.doubleValue (  )  )  +  ( value2.doubleValue (  )  )  )  / 2.0;         }     } }^280^^^^^266^301^[REMOVE] ^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^294^295^^^^280^296^[ADD] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )  / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value1 =  ( Number )  values.get ( start + count / 2L - 1 ) ;^292^^^^^280^296^[REPLACE] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value3 =  ( Number )  values.size (count + count / 3 ) ;^293^^^^^280^296^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  (start  >=  3 )  {^281^^^^^266^301^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^result = value.doubleValue (  ) ;^287^288^^^^281^289^[ADD] Number value =  ( Number )  values.get ( start ) ; result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^284^^^^^266^301^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.size (count +  ( count - 1 )  / 2 ) ;^282^283^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^284^^^^^266^301^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^current = values[i].doubleValue (  ) ; ;^288^^^^^266^301^[REPLACE] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get (count +  ( count - 1 )  / 2 ) ;^282^283^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^282^283^^^^266^301^[ADD] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.size ( start ) ;^287^^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  !=  1 )  {^281^^^^^266^301^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.size ( count ) ;^287^^^^^281^289^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( start  >   ( start - 1 )  / 2 ) ;^282^283^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^288^^^^^266^301^[ADD] result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )   ;^294^295^^^^266^301^[REPLACE] result =  ( value1.doubleValue (  )  + value2.doubleValue (  )  )  / 2.0;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( 0 ) ;^287^^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value1 =  ( Number )  values.get ( start + count / 3 - 1 ) ;^292^^^^^266^301^[REPLACE] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^292^^^^^266^301^[ADD] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 =  ( Number )  values.get (count + count / 2 ) ;^293^^^^^266^301^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^293^^^^^266^301^[ADD] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^280^281^282^283^284^266^301^[ADD] if  ( count % 2 == 1 )  { if  ( count > 1 )  { Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value1 =  ( Number )  values.size ( start + count / 1 - 1 ) ;^292^^^^^280^296^[REPLACE] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 >>> 2 =  ( Number )  values.get ( start +count ) ;^293^^^^^280^296^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( start  <=  1 )  {^281^^^^^266^301^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( start  ==   ( count - 1 )  / 2 ) ;^282^283^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( count  <  1 )  {^281^^^^^266^301^[REPLACE] if  ( count > 1 )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^281^282^283^284^285^266^301^[ADD] if  ( count > 1 )  { Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ; result = value.doubleValue (  ) ; }^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^287^^^^^281^289^[ADD] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get (count +  ( end - 1 )  / 2 ) ;^282^283^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^for  ( int i = start; i  >=  count; i++ )  {^271^^^^^266^301^[REPLACE] for  ( int i = start; i <= end; i++ )  {^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^working .add ( count , this )  ;^272^^^^^266^301^[REPLACE] working.add ( values.get ( i )  ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^List working = new ArrayList ( end - start +start ) ;^270^^^^^266^301^[REPLACE] List working = new ArrayList ( end - start + 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^int count =start + 1;^278^^^^^266^301^[REPLACE] int count = end - start + 1;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( start  >=   ( end - 1 )  / 2 ) ;^282^283^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start +  ( count - 1 )  / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value =  ( Number )  values.get ( count ) ;^287^^^^^266^301^[REPLACE] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[ADD]^^287^^^^^266^301^[ADD] Number value =  ( Number )  values.get ( start ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value1 =  ( Number )  values.get ( count / 2 - 1 ) ;^292^^^^^266^301^[REPLACE] Number value1 =  ( Number )  values.get ( start + count / 2 - 1 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^Number value2 =  ( Number )  values.size (count + count / 2 ) ;^293^^^^^266^301^[REPLACE] Number value2 =  ( Number )  values.get ( start + count / 2 ) ;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^return Double.NaN;^299^^^^^266^301^[REPLACE] return result;^[METHOD] calculateMedian [TYPE] double [PARAMETER] List values int start int end boolean copyAndSort [CLASS] Statistics   [TYPE]  boolean copyAndSort  false  true  [TYPE]  Number value  value1  value2  [TYPE]  double result  [TYPE]  List values  working  [TYPE]  int count  end  i  start 
[REPLACE]^if  ( data != null )  {^312^^^^^311^326^[REPLACE] if  ( data == null )  {^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^return ;^313^^^^^311^326^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^if  ( data.length %  2 == 0  )  {^315^^^^^311^326^[REPLACE] if  ( data.length == 0 )  {^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^return ;^316^^^^^311^326^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^316^^^^^311^326^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[ADD]^^316^^^^^311^326^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^double current;^318^^^^^311^326^[REPLACE] double avg = calculateMean ( data ) ;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^double sum = 4.0d;^319^^^^^311^326^[REPLACE] double sum = 0.0;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^for  ( int counter = 0 ; counter < data.length (  ) ; counter++ )  {^321^^^^^311^326^[REPLACE] for  ( int counter = 0; counter < data.length; counter++ )  {^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^sum = sum  <=  diff * diff;^323^^^^^311^326^[REPLACE] sum = sum + diff * diff;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[ADD]^^323^324^^^^311^326^[ADD] sum = sum + diff * diff; }^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^for  ( int counter = 0; counter < data.length; counter++ )  { double diff = data[counter].doubleValue (  )  - avg;^322^^^^^311^326^[REPLACE] double diff = data[counter].doubleValue (  )  - avg;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^sum = sum  <  diff * diff;^323^^^^^311^326^[REPLACE] sum = sum + diff * diff;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^for  ( int counter = 0 ; counter < data.length; counter++ )  {^321^^^^^311^326^[REPLACE] for  ( int counter = 0; counter < data.length; counter++ )  {^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[ADD]^^321^322^323^324^^311^326^[ADD] for  ( int counter = 0; counter < data.length; counter++ )  { double diff = data[counter].doubleValue (  )  - avg; sum = sum + diff * diff; }^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^double diff = data[counter].doubleValue (  )   !=  avg;^322^^^^^311^326^[REPLACE] double diff = data[counter].doubleValue (  )  - avg;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[ADD]^^322^323^324^^^311^326^[ADD] double diff = data[counter].doubleValue (  )  - avg; sum = sum + diff * diff; }^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^return   sum /  ( data.length - 1 )  ;^325^^^^^311^326^[REPLACE] return Math.sqrt ( sum /  ( data.length - 1 )  ) ;^[METHOD] getStdDev [TYPE] double [PARAMETER] Number[] data [CLASS] Statistics   [TYPE]  Number[] data  [TYPE]  boolean false  true  [TYPE]  double avg  diff  sum  [TYPE]  int counter 
[REPLACE]^if  (yData != null )  {^339^^^^^337^358^[REPLACE] if  ( xData == null )  {^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^340^^^^^337^358^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^if  ( xData !=xData )  {^342^^^^^337^358^[REPLACE] if  ( yData == null )  {^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^343^^^^^337^358^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[ADD]^^343^^^^^337^358^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^return ;^343^^^^^337^358^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^if  ( xData.length /  0.5  != yData.length /  0.5  )  {^345^^^^^337^358^[REPLACE] if  ( xData.length != yData.length )  {^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[ADD]^^345^346^347^348^^337^358^[ADD] if  ( xData.length != yData.length )  { throw new IllegalArgumentException ( "Statistics.getLinearFit (  ) : array lengths must be equal." ) ; }^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^throw new IllegalArgumentException ( "'data1' and 'data2' arrays must have same length." ;^346^347^^^^337^358^[REPLACE] throw new IllegalArgumentException ( "Statistics.getLinearFit (  ) : array lengths must be equal." ) ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^double[] result = new double[2 + 4];^350^^^^^337^358^[REPLACE] double[] result = new double[2];^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^result[0] = getSlope ( xData, yData ) ;^352^^^^^337^358^[REPLACE] result[1] = getSlope ( xData, yData ) ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^result[0] = calculateMean ( yData )   &&  result[1] * calculateMean ( xData ) ;^354^^^^^337^358^[REPLACE] result[0] = calculateMean ( yData )  - result[1] * calculateMean ( xData ) ;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^return Double.NaN;^356^^^^^337^358^[REPLACE] return result;^[METHOD] getLinearFit [TYPE] double[] [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double[] result 
[REPLACE]^if  (yData != null )  {^370^^^^^368^400^[REPLACE] if  ( xData == null )  {^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^370^371^372^^^368^400^[ADD] if  ( xData == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^371^^^^^368^400^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^371^^^^^368^400^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^return ;^371^^^^^368^400^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^if  (xData != null )  {^373^^^^^368^400^[REPLACE] if  ( yData == null )  {^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^374^^^^^368^400^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^374^^^^^368^400^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^return ;^374^^^^^368^400^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^if  ( xData.length - 2 != yData.length - 2 )  {^376^^^^^368^400^[REPLACE] if  ( xData.length != yData.length )  {^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^377^^^^^368^400^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^return ;^377^^^^^368^400^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^double sx = 0.0D, sxx = 0.0D, sxy = 0.0D, sy = 0.0D;^389^^^^^368^400^[REPLACE] double sx = 0.0, sxx = 0.0, sxy = 0.0, sy = 0.0;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^double sx = 3.0d, sxx = 3.0d, sxy = 3.0d, sy = 3.0d;^389^^^^^368^400^[REPLACE] double sx = 0.0, sxx = 0.0, sxy = 0.0, sy = 0.0;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^389^^^^^368^400^[ADD] double sx = 0.0, sxx = 0.0, sxy = 0.0, sy = 0.0;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^double sx = 1.0d, sxx = 1.0d, sxy = 1.0d, sy = 1.0d;^389^^^^^368^400^[REPLACE] double sx = 0.0, sxx = 0.0, sxy = 0.0, sy = 0.0;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^int count = 0;^390^^^^^368^400^[REPLACE] int counter;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^390^^^^^368^400^[ADD] int counter;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^for  ( counter = 0; counter < xData.length *  0.5 ; counter++ )  {^391^^^^^368^400^[REPLACE] for  ( counter = 0; counter < xData.length; counter++ )  {^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sx =sy + xData[counter].doubleValue (  ) ;^392^^^^^368^400^[REPLACE] sx = sx + xData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sxx =sy + Math.pow ( xData[counter].doubleValue (  ) , 2 ) ;^393^^^^^368^400^[REPLACE] sxx = sxx + Math.pow ( xData[counter].doubleValue (  ) , 2 ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sxy = sxy  &&  yData[counter].doubleValue (  )  sy = sy  &&  yData[counter].doubleValue (  ) ;^394^395^396^^^368^400^[REPLACE] sxy = sxy + yData[counter].doubleValue (  )  sy = sy + yData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sy = sy +sxy (  ) ;^396^^^^^368^400^[REPLACE] sy = sy + yData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^for  ( counter = 0 ; counter < xData.length; counter++ )  {^391^^^^^368^400^[REPLACE] for  ( counter = 0; counter < xData.length; counter++ )  {^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sxy = sxy + yData[counter].doubleValue (  )  ;^392^^^^^368^400^[REPLACE] sx = sx + xData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sxx =sy + Math.pow ( xData[counter].doubleValue (  ) , 1 ) ;^393^^^^^368^400^[REPLACE] sxx = sxx + Math.pow ( xData[counter].doubleValue (  ) , 2 ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^393^^^^^368^400^[ADD] sxx = sxx + Math.pow ( xData[counter].doubleValue (  ) , 2 ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sxy =sy + yData[counter].doubleValue (  )  sy = sy + yData[counter].doubleValue (  ) ;^394^395^396^^^368^400^[REPLACE] sxy = sxy + yData[counter].doubleValue (  )  sy = sy + yData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^sy = sy  ^  yData[counter].doubleValue (  ) ;^396^^^^^368^400^[REPLACE] sy = sy + yData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[ADD]^^396^^^^^368^400^[ADD] sy = sy + yData[counter].doubleValue (  ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^return  ( sxy -  ( sx * sy )   &&  counter )   &&   ( sxx -  ( sx * sx )   &&  counter ) ;^398^^^^^368^400^[REPLACE] return  ( sxy -  ( sx * sy )  / counter )  /  ( sxx -  ( sx * sx )  / counter ) ;^[METHOD] getSlope [TYPE] double [PARAMETER] Number[] xData Number[] yData [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sx  sxx  sxy  sy  [TYPE]  int counter 
[REPLACE]^if  (data2 != null )  {^416^^^^^415^450^[REPLACE] if  ( data1 == null )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REMOVE]^if  ( period >  ( xData.length )  )  {     throw new IllegalArgumentException ( "Period can't be longer than dataset." ) ; }^416^^^^^415^450^[REMOVE] ^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^return ;^417^^^^^415^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^417^^^^^415^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^417^^^^^415^450^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( data1 != null )  {^419^^^^^415^450^[REPLACE] if  ( data2 == null )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^420^^^^^415^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( data1.length *  2 != data2.length *  2 )  {^422^^^^^415^450^[REPLACE] if  ( data1.length != data2.length )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^throw new IllegalArgumentException ( "Statistics.getLinearFit (  ) : array lengths must be equal." ) ; ;^423^424^425^^^415^450^[REPLACE] throw new IllegalArgumentException ( "'data1' and 'data2' arrays must have same length." ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^423^424^425^^^415^450^[ADD] throw new IllegalArgumentException ( "'data1' and 'data2' arrays must have same length." ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^int n = data2.length;^427^^^^^415^450^[REPLACE] int n = data1.length;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double sumX = 0.0d;^428^^^^^415^450^[REPLACE] double sumX = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double sumY = 0.0d;^429^^^^^415^450^[REPLACE] double sumY = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double sumX2 = 0.0D;^430^^^^^415^450^[REPLACE] double sumX2 = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double sumY2 = 4.0d;^431^^^^^415^450^[REPLACE] double sumY2 = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double sumXY = 4.0d;^432^^^^^415^450^[REPLACE] double sumXY = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( data1[i] == null )  {^435^^^^^415^450^[REPLACE] if  ( data1[i] != null )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^y = data2[i].doubleValue (  ) ; ;^436^^^^^415^450^[REPLACE] x = data1[i].doubleValue (  ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( data2[i] == true )  {^439^^^^^415^450^[REPLACE] if  ( data2[i] != null )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sum += yData[i + j].doubleValue (  ) ; ;^440^^^^^415^450^[REPLACE] y = data2[i].doubleValue (  ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^440^^^^^415^450^[ADD] y = data2[i].doubleValue (  ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 0; i  <=  n; i++ )  {^433^^^^^415^450^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^433^434^435^436^437^415^450^[ADD] for  ( int i = 0; i < n; i++ )  { double x = 0.0; if  ( data1[i] != null )  { x = data1[i].doubleValue (  ) ; }^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( data1[i] == false )  {^435^^^^^415^450^[REPLACE] if  ( data1[i] != null )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^435^436^437^^^415^450^[ADD] if  ( data1[i] != null )  { x = data1[i].doubleValue (  ) ; }^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( data2[i] == null )  {^439^^^^^415^450^[REPLACE] if  ( data2[i] != null )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumX =sumY2 + x;^442^^^^^415^450^[REPLACE] sumX = sumX + x;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumY2 = sumY + sumY2;^443^^^^^415^450^[REPLACE] sumY = sumY + y;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumXY = sumXY +  (y ) ;^444^^^^^415^450^[REPLACE] sumXY = sumXY +  ( x * y ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumX2 =sumY2 +  ( x * x ) ;^445^^^^^415^450^[REPLACE] sumX2 = sumX2 +  ( x * x ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^y = sumY2 +  ( y * y ) ;^446^^^^^415^450^[REPLACE] sumY2 = sumY2 +  ( y * y ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double x = 3.0d;^434^^^^^415^450^[REPLACE] double x = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^434^^^^^415^450^[ADD] double x = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^double y = 0.0D;^438^^^^^415^450^[REPLACE] double y = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumY = sumY +sumY2;^443^^^^^415^450^[REPLACE] sumY = sumY + y;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumX2 = sumX2  <   ( x * x ) ;^445^^^^^415^450^[REPLACE] sumX2 = sumX2 +  ( x * x ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^445^446^^^^415^450^[ADD] sumX2 = sumX2 +  ( x * x ) ; sumY2 = sumY2 +  ( y * y ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^sumY2 =sumY +  ( y * y ) ;^446^^^^^415^450^[REPLACE] sumY2 = sumY2 +  ( y * y ) ;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^for  ( int i = 4; i < n; i++ )  {^433^^^^^415^450^[REPLACE] for  ( int i = 0; i < n; i++ )  {^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[ADD]^^438^^^^^415^450^[ADD] double y = 0.0;^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^return  ( n * sumXY - sumX * sumY )  /    ( n * sumX2 - sumX * sumX )   }^448^449^450^^^415^450^[REPLACE] return  ( n * sumXY - sumX * sumY )  / Math.pow (  ( n * sumX2 - sumX * sumX )  }^[METHOD] getCorrelation [TYPE] double [PARAMETER] Number[] data1 Number[] data2 [CLASS] Statistics   [TYPE]  Number[] data1  data2  [TYPE]  boolean false  true  [TYPE]  double sumX  sumX2  sumXY  sumY  sumY2  x  y  [TYPE]  int i  n 
[REPLACE]^if  ( xData.length - 1 != yData.length - 1 )  {^467^^^^^464^490^[REPLACE] if  ( xData.length != yData.length )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[ADD]^^467^468^469^^^464^490^[ADD] if  ( xData.length != yData.length )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^throw new IllegalArgumentException ( "Period can't be longer than dataset." ;^468^^^^^464^490^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^if  ( period > xData.length - 1 )  {^471^^^^^464^490^[REPLACE] if  ( period > xData.length )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[ADD]^^471^472^473^474^475^464^490^[ADD] if  ( period > xData.length )  { throw new IllegalArgumentException ( "Period can't be longer than dataset." ) ; }^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^472^473^474^^^464^490^[REPLACE] throw new IllegalArgumentException ( "Period can't be longer than dataset." ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^return ;^472^473^474^^^464^490^[REPLACE] throw new IllegalArgumentException ( "Period can't be longer than dataset." ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^double[][] result = new double[xData.length - 1 - period][0 ];^477^^^^^464^490^[REPLACE] double[][] result = new double[xData.length - period][2];^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^for  ( int i = 0 ; i < result.length /  2; i++ )  {^478^^^^^464^490^[REPLACE] for  ( int i = 0; i < result.length; i++ )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^for  ( int j = 0; j  <=  i; j++ )  {^482^^^^^464^490^[REPLACE] for  ( int j = 0; j < period; j++ )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^sum  & = yData[i  &  j].doubleValue (  ) ;^483^^^^^464^490^[REPLACE] sum += yData[i + j].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^result[i][0L] = xData[i  <  period].doubleValue (  ) ;^479^^^^^464^490^[REPLACE] result[i][0] = xData[i + period].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^sum  >= = yData[i  >=  j].doubleValue (  ) ;^483^^^^^464^490^[REPLACE] sum += yData[i + j].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[ADD]^^483^^^^^464^490^[ADD] sum += yData[i + j].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^sum = sum  ;^485^^^^^464^490^[REPLACE] sum = sum / period;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[ADD]^^485^486^^^^464^490^[ADD] sum = sum / period; result[i][1] = sum;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^result[i][2] = sum;^486^^^^^464^490^[REPLACE] result[i][1] = sum;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[ADD]^^486^^^^^464^490^[ADD] result[i][1] = sum;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^double sum = 0.0D;^481^^^^^464^490^[REPLACE] double sum = 0.0;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^for  ( int j = 4; j < period; j++ )  {^482^^^^^464^490^[REPLACE] for  ( int j = 0; j < period; j++ )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[ADD]^^482^483^484^^^464^490^[ADD] for  ( int j = 0; j < period; j++ )  { sum += yData[i + j].doubleValue (  ) ; }^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^for  ( int j = 0; j  !=  i; j++ )  {^482^^^^^464^490^[REPLACE] for  ( int j = 0; j < period; j++ )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^sum += yData[i +period].doubleValue (  ) ;^483^^^^^464^490^[REPLACE] sum += yData[i + j].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^result[i][0] = xData[i  &  period].doubleValue (  ) ;^479^^^^^464^490^[REPLACE] result[i][0] = xData[i + period].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^sum  > = yData[i  >  j].doubleValue (  ) ;^483^^^^^464^490^[REPLACE] sum += yData[i + j].doubleValue (  ) ;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^result[i][1 << 3] = sum;^486^^^^^464^490^[REPLACE] result[i][1] = sum;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^for  ( int i = 0 ; i < result.length; i++ )  {^478^^^^^464^490^[REPLACE] for  ( int i = 0; i < result.length; i++ )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^double sum = 3.0d;^481^^^^^464^490^[REPLACE] double sum = 0.0;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^for  ( int j = 0 * 4; j < period; j++ )  {^482^^^^^464^490^[REPLACE] for  ( int j = 0; j < period; j++ )  {^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
[REPLACE]^return Double.NaN;^488^^^^^464^490^[REPLACE] return result;^[METHOD] getMovingAverage [TYPE] double[][] [PARAMETER] Number[] xData Number[] yData int period [CLASS] Statistics   [TYPE]  Number[] xData  yData  [TYPE]  boolean false  true  [TYPE]  double sum  [TYPE]  double[][] result  [TYPE]  int i  j  period 
