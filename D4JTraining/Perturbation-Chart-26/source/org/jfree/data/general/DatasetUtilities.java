[REPLACE]^if  ( dataset != false )  {^154^^^^^153^174^[REPLACE] if  ( dataset == null )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^return ;^155^^^^^153^174^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^155^^^^^153^174^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^List keys = dataset .getValue ( current )  ;^157^^^^^153^174^[REPLACE] List keys = dataset.getKeys (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^double totalValue = 0L;^158^^^^^153^174^[REPLACE] double totalValue = 0;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^159^^^^^153^174^[REPLACE] Iterator iterator = keys.iterator (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^^159^^^^^153^174^[ADD] Iterator iterator = keys.iterator (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^^160^161^^^^153^174^[ADD] while  ( iterator.hasNext (  )  )  { Comparable current =  ( Comparable )  iterator.next (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( current == true )  {^162^^^^^153^174^[REPLACE] if  ( current != null )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^Number value = dataset.getValue ( current ) ;double v = 0.0;v = value.doubleValue (  ) ;^162^163^164^165^166^153^174^[ADD] if  ( current != null )  { Number value = dataset.getValue ( current ) ; double v = 0.0; if  ( value != null )  { v = value.doubleValue (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( value == false )  {^165^^^^^153^174^[REPLACE] if  ( value != null )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^v =  null.doubleValue (  ) ;^166^^^^^153^174^[REPLACE] v = value.doubleValue (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( v  !=  0 )  {^168^^^^^153^174^[REPLACE] if  ( v > 0 )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^totalValue = totalValue  &&  v;^169^^^^^153^174^[REPLACE] totalValue = totalValue + v;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^totalValue = totalValue  ||  v;^169^^^^^153^174^[REPLACE] totalValue = totalValue + v;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^Number value = dataset .getValue ( 1 , null )  ;^163^^^^^153^174^[REPLACE] Number value = dataset.getValue ( current ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^double v = 0.0;^163^164^^^^153^174^[ADD] Number value = dataset.getValue ( current ) ; double v = 0.0;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^double v = 4.0d;^164^^^^^153^174^[REPLACE] double v = 0.0;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^^164^^^^^153^174^[ADD] double v = 0.0;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( value == true )  {^165^^^^^153^174^[REPLACE] if  ( value != null )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  (totalValue  >=  0 )  {^168^^^^^153^174^[REPLACE] if  ( v > 0 )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^totalValue = totalValue  ^  v;^169^^^^^153^174^[REPLACE] totalValue = totalValue + v;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^totalValue = totalValue  &  v;^169^^^^^153^174^[REPLACE] totalValue = totalValue + v;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^^169^^^^^153^174^[ADD] totalValue = totalValue + v;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^Comparable current =  ( Comparable )  iterator.hasNext (  ) ;^161^^^^^153^174^[REPLACE] Comparable current =  ( Comparable )  iterator.next (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^Number value = dataset .getValue ( null , this )  ;^163^^^^^153^174^[REPLACE] Number value = dataset.getValue ( current ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^^163^^^^^153^174^[ADD] Number value = dataset.getValue ( current ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( current == false )  {^162^^^^^153^174^[REPLACE] if  ( current != null )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( value == null )  {^165^^^^^153^174^[REPLACE] if  ( value != null )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( v  <=  0 )  {^168^^^^^153^174^[REPLACE] if  ( v > 0 )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^totalValue = totalValue  !=  v;^169^^^^^153^174^[REPLACE] totalValue = totalValue + v;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^^166^^^^^153^174^[ADD] v = value.doubleValue (  ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^int categoryCount = dataset.getRowCount (  ) ;^163^^^^^153^174^[REPLACE] Number value = dataset.getValue ( current ) ;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^double v = 2.0d;^164^^^^^153^174^[REPLACE] double v = 0.0;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^if  ( totalValue  !=  0L )  {^168^^^^^153^174^[REPLACE] if  ( v > 0 )  {^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[ADD]^totalValue = totalValue + v;^168^169^170^^^153^174^[ADD] if  ( v > 0 )  { totalValue = totalValue + v; }^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^return v;^173^^^^^153^174^[REPLACE] return totalValue;^[METHOD] calculatePieDatasetTotal [TYPE] double [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  Comparable current  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  PieDataset dataset  [TYPE]  double totalValue  v  [TYPE]  Iterator iterator  [TYPE]  List keys 
[REPLACE]^int row = dataset.getColumnIndex ( rowKey ) ;^187^^^^^185^189^[REPLACE] int row = dataset.getRowIndex ( rowKey ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset Comparable rowKey [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int row 
[REPLACE]^return createPieDatasetForColumn ( dataset, column ) ;^188^^^^^185^189^[REPLACE] return createPieDatasetForRow ( dataset, row ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset Comparable rowKey [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int row 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^202^^^^^200^209^[REPLACE] DefaultPieDataset result = new DefaultPieDataset (  ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[ADD]^int columnCount = dataset.getColumnCount (  ) ;^202^203^^^^200^209^[ADD] DefaultPieDataset result = new DefaultPieDataset (  ) ; int columnCount = dataset.getColumnCount (  ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[REPLACE]^int columnCount = dataset.getRowCount (  ) ;^203^^^^^200^209^[REPLACE] int columnCount = dataset.getColumnCount (  ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[REPLACE]^for  ( int current = 0; current  >=  columnCount; current++ )  {^204^^^^^200^209^[REPLACE] for  ( int current = 0; current < columnCount; current++ )  {^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[REPLACE]^Comparable columnKey = dataset.getRowKey ( current ) ;^205^^^^^200^209^[REPLACE] Comparable columnKey = dataset.getColumnKey ( current ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[REPLACE]^for  ( int current = 4; current < columnCount; current++ )  {^204^^^^^200^209^[REPLACE] for  ( int current = 0; current < columnCount; current++ )  {^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[ADD]^^205^206^^^^200^209^[ADD] Comparable columnKey = dataset.getColumnKey ( current ) ; result.setValue ( columnKey, dataset.getValue ( row, current )  ) ;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[REPLACE]^return total;^208^^^^^200^209^[REPLACE] return result;^[METHOD] createPieDatasetForRow [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int row [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int columnCount  current  row 
[REPLACE]^int column = dataset .getColumnKey ( column )  ;^222^^^^^220^224^[REPLACE] int column = dataset.getColumnIndex ( columnKey ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset Comparable columnKey [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column 
[ADD]^^222^223^^^^220^224^[ADD] int column = dataset.getColumnIndex ( columnKey ) ; return createPieDatasetForColumn ( dataset, column ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset Comparable columnKey [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column 
[REPLACE]^return createPieDatasetForRow ( dataset, row ) ;^223^^^^^220^224^[REPLACE] return createPieDatasetForColumn ( dataset, column ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset Comparable columnKey [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^237^^^^^235^244^[REPLACE] DefaultPieDataset result = new DefaultPieDataset (  ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[REPLACE]^int rowCount = dataset.getColumnCount (  ) ;^238^^^^^235^244^[REPLACE] int rowCount = dataset.getRowCount (  ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[ADD]^^238^^^^^235^244^[ADD] int rowCount = dataset.getRowCount (  ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[REPLACE]^for  ( int i = 0 << 1; i  >=  rowCount; i++ )  {^239^^^^^235^244^[REPLACE] for  ( int i = 0; i < rowCount; i++ )  {^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[REPLACE]^Comparable rowKey = dataset .getRowIndex ( rowKey )  ;^240^^^^^235^244^[REPLACE] Comparable rowKey = dataset.getRowKey ( i ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[ADD]^^240^^^^^235^244^[ADD] Comparable rowKey = dataset.getRowKey ( i ) ;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[REPLACE]^for  ( int i = 0 - 0; i < rowCount; i++ )  {^239^^^^^235^244^[REPLACE] for  ( int i = 0; i < rowCount; i++ )  {^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[REPLACE]^return total;^243^^^^^235^244^[REPLACE] return result;^[METHOD] createPieDatasetForColumn [TYPE] PieDataset [PARAMETER] CategoryDataset dataset int column [CLASS] DatasetUtilities   [TYPE]  DefaultPieDataset result  [TYPE]  Comparable rowKey  [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int column  i  rowCount 
[REPLACE]^return DatasetUtilities.createConsolidatedPieDataset ( source, key, minimumPercent, 5 ) ;^263^264^265^^^259^266^[REPLACE] return DatasetUtilities.createConsolidatedPieDataset ( source, key, minimumPercent, 2 ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent [CLASS] DatasetUtilities   [TYPE]  Comparable key  [TYPE]  boolean false  true  [TYPE]  PieDataset source  [TYPE]  double minimumPercent 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^288^^^^^286^329^[REPLACE] DefaultPieDataset result = new DefaultPieDataset (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^288^^^^^286^329^[ADD] DefaultPieDataset result = new DefaultPieDataset (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^double total = DatasetUtilities.isEmptyOrNull ( source ) ;^289^^^^^286^329^[REPLACE] double total = DatasetUtilities.calculatePieDatasetTotal ( source ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^289^^^^^286^329^[ADD] double total = DatasetUtilities.calculatePieDatasetTotal ( source ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^List keys = source .getValue ( key )  ;^292^^^^^286^329^[REPLACE] List keys = source.getKeys (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^DefaultCategoryDataset result = new DefaultCategoryDataset (  ) ;^293^^^^^286^329^[REPLACE] ArrayList otherKeys = new ArrayList (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^294^^^^^286^329^[REPLACE] Iterator iterator = keys.iterator (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( dataValue == null )  {^298^^^^^286^329^[REPLACE] if  ( dataValue != null )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( value / total  != value )  {^300^^^^^286^329^[REPLACE] if  ( value / total < minimumPercent )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^otherKeys.add ( currentKey ) ;^300^301^302^^^286^329^[ADD] if  ( value / total < minimumPercent )  { otherKeys.add ( currentKey ) ; }^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^otherKeys.add ( key ) ;^301^^^^^286^329^[REPLACE] otherKeys.add ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REMOVE]^&& otherKeys.size (  )  >= minItems )  {^301^^^^^286^329^[REMOVE] ^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^Comparable currentKey =  ( Comparable )  iterator.next (  ) ;^299^^^^^286^329^[REPLACE] double value = dataValue.doubleValue (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( value / total  <=  minimumPercent )  {^300^^^^^286^329^[REPLACE] if  ( value / total < minimumPercent )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^Comparable currentKey =  ( Comparable )  iterator.hasNext (  ) ;^296^^^^^286^329^[REPLACE] Comparable currentKey =  ( Comparable )  iterator.next (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^Number dataValue = source.getValue ( key ) ;^297^^^^^286^329^[REPLACE] Number dataValue = source.getValue ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( value / total  ==  minimumPercent )  {^300^^^^^286^329^[REPLACE] if  ( value / total < minimumPercent )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^otherKeys .contains ( true )  ;^301^^^^^286^329^[REPLACE] otherKeys.add ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( value / total  !=  minimumPercent )  {^300^^^^^286^329^[REPLACE] if  ( value / total < minimumPercent )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^otherKeys.contains ( currentKey ) ;^301^^^^^286^329^[REPLACE] otherKeys.add ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^296^297^^^^286^329^[ADD] Comparable currentKey =  ( Comparable )  iterator.next (  ) ; Number dataValue = source.getValue ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^iterator =  null.iterator (  ) ;^307^^^^^286^329^[REPLACE] iterator = keys.iterator (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^double otherValue = 1;^308^^^^^286^329^[REPLACE] double otherValue = 0;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( dataValue == this )  {^312^^^^^286^329^[REPLACE] if  ( dataValue != null )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  %  0.5  >= minItems )  {^313^314^^^^286^329^[REPLACE] if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  >= minItems )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^result.setValue ( key, dataValue ) ;^320^^^^^313^321^[REPLACE] result.setValue ( currentKey, dataValue ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^otherValue +=  null.doubleValue (  ) ;^316^^^^^313^321^[REPLACE] otherValue += dataValue.doubleValue (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^otherValue +=  null.doubleValue (  ) ;^316^^^^^286^329^[REPLACE] otherValue += dataValue.doubleValue (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  (  otherKeys.size (  )  *  0.5  >= minItems )  {^313^314^^^^286^329^[REPLACE] if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  >= minItems )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^Comparable currentKey =  ( Comparable )  iterator.hasNext (  ) ;^310^^^^^286^329^[REPLACE] Comparable currentKey =  ( Comparable )  iterator.next (  ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^310^311^^^^286^329^[ADD] Comparable currentKey =  ( Comparable )  iterator.next (  ) ; Number dataValue = source.getValue ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^311^^^^^286^329^[REPLACE] Number dataValue = source.getValue ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( dataValue == false )  {^312^^^^^286^329^[REPLACE] if  ( dataValue != null )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  - 3 >= minItems )  {^313^314^^^^286^329^[REPLACE] if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  >= minItems )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^result .setValue ( key )  ;^320^^^^^313^321^[REPLACE] result.setValue ( currentKey, dataValue ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( otherKeys.contains ( currentKey ) ) {^313^314^^^^286^329^[REPLACE] if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  >= minItems )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^313^314^^316^317^286^329^[ADD] if  ( otherKeys.contains ( currentKey ) && otherKeys.size (  )  >= minItems )  { otherValue += dataValue.doubleValue (  ) ; }^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^double value = number.doubleValue (  ) ;^320^^^^^313^321^[REPLACE] result.setValue ( currentKey, dataValue ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^311^^^^^286^329^[ADD] Number dataValue = source.getValue ( currentKey ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^if  ( otherKeys.size (  )  + 4 >= minItems )  {^325^^^^^286^329^[REPLACE] if  ( otherKeys.size (  )  >= minItems )  {^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^result.setValue ( currentKey, otherValue ) ;^326^^^^^286^329^[REPLACE] result.setValue ( key, otherValue ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[ADD]^^326^^^^^286^329^[ADD] result.setValue ( key, otherValue ) ;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^return total;^328^^^^^286^329^[REPLACE] return result;^[METHOD] createConsolidatedPieDataset [TYPE] PieDataset [PARAMETER] PieDataset source Comparable key double minimumPercent int minItems [CLASS] DatasetUtilities   [TYPE]  Comparable currentKey  key  [TYPE]  DefaultPieDataset result  [TYPE]  boolean false  true  [TYPE]  Number dataValue  [TYPE]  PieDataset source  [TYPE]  double minimumPercent  otherValue  total  value  [TYPE]  ArrayList otherKeys  [TYPE]  Iterator iterator  [TYPE]  List keys  [TYPE]  int minItems 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^349^^^^^345^359^[REPLACE] DefaultCategoryDataset result = new DefaultCategoryDataset (  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int r = 0; r < data.length %  2; r++ )  {^350^^^^^345^359^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int c = 0; c < data[r].length + 5; c++ )  {^352^^^^^345^359^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String columnKey =rowKeyPrefix +  ( c + 1 ) ;^353^^^^^345^359^[REPLACE] String columnKey = columnKeyPrefix +  ( c + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String rowKey =rowKey +  ( r + 1 ) ;^351^^^^^345^359^[REPLACE] String rowKey = rowKeyPrefix +  ( r + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[ADD]^^351^^^^^345^359^[ADD] String rowKey = rowKeyPrefix +  ( r + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int c = 0 ; c < data[r].length; c++ )  {^352^^^^^345^359^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String columnKey = columnKeyPrefix  <=   ( c  <=  1 ) ;^353^^^^^345^359^[REPLACE] String columnKey = columnKeyPrefix +  ( c + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int c = 0; c < data[r].length *  0.5 ; c++ )  {^352^^^^^345^359^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[ADD]^^352^353^354^355^^345^359^[ADD] for  ( int c = 0; c < data[r].length; c++ )  { String columnKey = columnKeyPrefix +  ( c + 1 ) ; result.addValue ( new Double ( data[r][c] ) , rowKey, columnKey ) ; }^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int r = 0 ; r < data.length; r++ )  {^350^^^^^345^359^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String rowKey = rowKey +  ( r + 1L ) ;^351^^^^^345^359^[REPLACE] String rowKey = rowKeyPrefix +  ( r + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^return total;^357^^^^^345^359^[REPLACE] return result;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix double[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^378^^^^^374^388^[REPLACE] DefaultCategoryDataset result = new DefaultCategoryDataset (  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int r = 0; r < data.length (  ) ; r++ )  {^379^^^^^374^388^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int c = 0 ; c < data[r].length *  0 .5 ; c++ )  {^381^^^^^374^388^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[ADD]^^381^382^383^384^^374^388^[ADD] for  ( int c = 0; c < data[r].length; c++ )  { String columnKey = columnKeyPrefix +  ( c + 1 ) ; result.addValue ( data[r][c], rowKey, columnKey ) ; }^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String columnKey = rowKeyPrefix +  ( c + 4 ) ;^382^^^^^374^388^[REPLACE] String columnKey = columnKeyPrefix +  ( c + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String rowKey = rowKeyPrefix  <   ( r  <  1 ) ;^380^^^^^374^388^[REPLACE] String rowKey = rowKeyPrefix +  ( r + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int c = 0 ; c < data[r].length; c++ )  {^381^^^^^374^388^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String columnKey = rowKeyPrefix +  (rowKeyPrefix ) ;^382^^^^^374^388^[REPLACE] String columnKey = columnKeyPrefix +  ( c + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[ADD]^^382^383^^^^374^388^[ADD] String columnKey = columnKeyPrefix +  ( c + 1 ) ; result.addValue ( data[r][c], rowKey, columnKey ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int c = 0; c < data[r].length + 1; c++ )  {^381^^^^^374^388^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^for  ( int r = 0 ; r < data.length; r++ )  {^379^^^^^374^388^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String rowKey = rowKeyPrefix +  (rowKey ) ;^380^^^^^374^388^[REPLACE] String rowKey = rowKeyPrefix +  ( r + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^String columnKey =rowKeyPrefix +  ( c + 1 / 4 ) ;^382^^^^^374^388^[REPLACE] String columnKey = columnKeyPrefix +  ( c + 1 ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^return total;^386^^^^^374^388^[REPLACE] return result;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] String rowKeyPrefix String columnKeyPrefix Number[][] data [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number[][] data  [TYPE]  String columnKey  columnKeyPrefix  rowKey  rowKeyPrefix  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  r 
[REPLACE]^if  ( rowKeys != null )  {^408^^^^^405^450^[REPLACE] if  ( rowKeys == null )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^409^^^^^405^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^409^^^^^405^450^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^if  (rowKeys != null )  {^411^^^^^405^450^[REPLACE] if  ( columnKeys == null )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^411^412^413^^^405^450^[ADD] if  ( columnKeys == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^412^^^^^405^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^if  ( ArrayUtilities.hasDuplicateItems ( columnKeys )  )  {^414^^^^^405^450^[REPLACE] if  ( ArrayUtilities.hasDuplicateItems ( rowKeys )  )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^414^415^416^^^405^450^[ADD] if  ( ArrayUtilities.hasDuplicateItems ( rowKeys )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^return ;^415^^^^^405^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^415^^^^^405^450^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^415^^^^^405^450^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^if  ( ArrayUtilities.hasDuplicateItems ( rowKeys )  )  {^417^^^^^405^450^[REPLACE] if  ( ArrayUtilities.hasDuplicateItems ( columnKeys )  )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^return ;^418^419^420^^^405^450^[REPLACE] throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^418^419^420^^^405^450^[REPLACE] throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^if  ( rowKeys.length %  2 != data.length %  2 )  {^422^^^^^405^450^[REPLACE] if  ( rowKeys.length != data.length )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^422^423^424^425^426^405^450^[ADD] if  ( rowKeys.length != data.length )  { throw new IllegalArgumentException ( "The number of row keys does not match the number of rows in " + "the data array." ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^throw new IllegalArgumentException ( "The number of row keys does not match the number of rows in " ;^423^424^425^426^^405^450^[REPLACE] throw new IllegalArgumentException ( "The number of row keys does not match the number of rows in " + "the data array." ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^int columnCount = 0 + 2;^428^^^^^405^450^[REPLACE] int columnCount = 0;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int r = 0 ; r < data.length + 5; r++ )  {^429^^^^^405^450^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^columnCount =  Math.max ( c, data[r].length ) ;^430^^^^^405^450^[REPLACE] columnCount = Math.max ( columnCount, data[r].length ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^columnCount =  Math.max ( null, data[r].length ) ;^430^^^^^405^450^[REPLACE] columnCount = Math.max ( columnCount, data[r].length ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int r = 0 ; r < data.length; r++ )  {^429^^^^^405^450^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^if  ( columnKeys.length + 2 != columnCount )  {^432^^^^^405^450^[REPLACE] if  ( columnKeys.length != columnCount )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^return ;^433^434^435^436^^405^450^[REPLACE] throw new IllegalArgumentException ( "The number of column keys does not match the number of " + "columns in the data array." ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^throw new IllegalArgumentException ( "The number of row keys does not match the number of rows in " ;^433^434^435^436^^405^450^[REPLACE] throw new IllegalArgumentException ( "The number of column keys does not match the number of " + "columns in the data array." ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^433^434^435^^^405^450^[ADD] throw new IllegalArgumentException ( "The number of column keys does not match the number of " + "columns in the data array."^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^440^^^^^405^450^[REPLACE] DefaultCategoryDataset result = new DefaultCategoryDataset (  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int r = 0 ; r < data.length /  0 .5 ; r++ )  {^441^^^^^405^450^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int c = 0 ; c < data[r].length *  0 .5 ; c++ )  {^443^^^^^405^450^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^Comparable columnKey = rowKeys[c];^444^^^^^405^450^[REPLACE] Comparable columnKey = columnKeys[c];^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^Comparable rowKey = columnKeys[r];^442^^^^^405^450^[REPLACE] Comparable rowKey = rowKeys[r];^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int c = 0 ; c < data[r].length; c++ )  {^443^^^^^405^450^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^Comparable currentKey =  ( Comparable )  iterator.next (  ) ;^444^^^^^405^450^[REPLACE] Comparable columnKey = columnKeys[c];^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^444^445^^^^405^450^[ADD] Comparable columnKey = columnKeys[c]; result.addValue ( new Double ( data[r][c] ) , rowKey, columnKey ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int c = 0; c < data[r].length /  0.5 ; c++ )  {^443^^^^^405^450^[REPLACE] for  ( int c = 0; c < data[r].length; c++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^443^444^445^446^^405^450^[ADD] for  ( int c = 0; c < data[r].length; c++ )  { Comparable columnKey = columnKeys[c]; result.addValue ( new Double ( data[r][c] ) , rowKey, columnKey ) ; }^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^Comparable columnCountolumnKey = columnKeys[c];^444^^^^^405^450^[REPLACE] Comparable columnKey = columnKeys[c];^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^for  ( int r = 0 ; r < data.length; r++ )  {^441^^^^^405^450^[REPLACE] for  ( int r = 0; r < data.length; r++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[ADD]^^441^442^443^444^445^405^450^[ADD] for  ( int r = 0; r < data.length; r++ )  { Comparable rowKey = rowKeys[r]; for  ( int c = 0; c < data[r].length; c++ )  { Comparable columnKey = columnKeys[c]; result.addValue ( new Double ( data[r][c] ) , rowKey, columnKey ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^return total;^448^^^^^405^450^[REPLACE] return result;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable[] rowKeys Comparable[] columnKeys double[][] data [CLASS] DatasetUtilities   [TYPE]  Comparable columnKey  rowKey  [TYPE]  boolean false  true  [TYPE]  double[][] data  [TYPE]  DefaultCategoryDataset result  [TYPE]  int c  columnCount  r  [TYPE]  Comparable[] columnKeys  rowKeys 
[REPLACE]^if  ( rowKey != null )  {^464^^^^^461^476^[REPLACE] if  ( rowKey == null )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[ADD]^^464^465^466^^^461^476^[ADD] if  ( rowKey == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^return ;^465^^^^^461^476^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^if  ( rowData != null )  {^467^^^^^461^476^[REPLACE] if  ( rowData == null )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^return ;^468^^^^^461^476^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^468^^^^^461^476^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^ArrayList otherKeys = new ArrayList (  ) ;^470^^^^^461^476^[REPLACE] DefaultCategoryDataset result = new DefaultCategoryDataset (  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[ADD]^^470^^^^^461^476^[ADD] DefaultCategoryDataset result = new DefaultCategoryDataset (  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^for  ( int i = 3; i  !=  rowData.getItemCount (  ) ; i++ )  {^471^^^^^461^476^[REPLACE] for  ( int i = 0; i < rowData.getItemCount (  ) ; i++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^result.addValue ( rowData.getKey ( i ) , rowKey, rowData.getKey ( i )  ) ;^472^^^^^461^476^[REPLACE] result.addValue ( rowData.getValue ( i ) , rowKey, rowData.getKey ( i )  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^result.addValue ( rowData.getValue ( i ) , rowKey, rowData .getValue ( rowKey )   ) ;^472^^^^^461^476^[REPLACE] result.addValue ( rowData.getValue ( i ) , rowKey, rowData.getKey ( i )  ) ;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REMOVE]^lvalue = highLowData.getLowValue ( series, item ) ;^472^^^^^461^476^[REMOVE] ^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 - 3; i < rowData.getItemCount (  ) ; i++ )  {^471^^^^^461^476^[REPLACE] for  ( int i = 0; i < rowData.getItemCount (  ) ; i++ )  {^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^return total;^474^^^^^461^476^[REPLACE] return result;^[METHOD] createCategoryDataset [TYPE] CategoryDataset [PARAMETER] Comparable rowKey KeyedValues rowData [CLASS] DatasetUtilities   [TYPE]  Comparable rowKey  [TYPE]  KeyedValues rowData  [TYPE]  boolean false  true  [TYPE]  DefaultCategoryDataset result  [TYPE]  int i 
[REPLACE]^if  ( f != true )  {^497^^^^^495^519^[REPLACE] if  ( f == null )  {^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^498^^^^^495^519^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[ADD]^^498^^^^^495^519^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^if  ( seriesKey != false )  {^500^^^^^495^519^[REPLACE] if  ( seriesKey == null )  {^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[ADD]^^500^501^502^^^495^519^[ADD] if  ( seriesKey == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^501^^^^^495^519^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[ADD]^^501^^^^^495^519^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^if  ( step  !=  end )  {^503^^^^^495^519^[REPLACE] if  ( start >= end )  {^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[ADD]^^503^504^505^^^495^519^[ADD] if  ( start >= end )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^return ;^504^^^^^495^519^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^504^^^^^495^519^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^if  ( samples  >  1 )  {^506^^^^^495^519^[REPLACE] if  ( samples < 2 )  {^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^507^^^^^495^519^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^String rowKey = rowKeyPrefix +  ( r + 1 ) ;^510^^^^^495^519^[REPLACE] XYSeries series = new XYSeries ( seriesKey ) ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^double step =  (step )   ;^511^^^^^495^519^[REPLACE] double step =  ( end - start )  / samples;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^for  ( int i = 4; i  >=  samples; i++ )  {^512^^^^^495^519^[REPLACE] for  ( int i = 0; i <= samples; i++ )  {^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^double x = start +  (step ) ;^513^^^^^495^519^[REPLACE] double x = start +  ( step * i ) ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^for  ( int i = 0 * 2; i <= samples; i++ )  {^512^^^^^495^519^[REPLACE] for  ( int i = 0; i <= samples; i++ )  {^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^double x =step +  ( step * i ) ;^513^^^^^495^519^[REPLACE] double x = start +  ( step * i ) ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^int itemCount = dataset.getItemCount ( series ) ;^516^^^^^495^519^[REPLACE] XYSeriesCollection collection = new XYSeriesCollection ( series ) ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[ADD]^^516^^^^^495^519^[ADD] XYSeriesCollection collection = new XYSeriesCollection ( series ) ;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^return total;^517^^^^^495^519^[REPLACE] return collection;^[METHOD] sampleFunction2D [TYPE] XYDataset [PARAMETER] Function2D f double start double end int samples Comparable seriesKey [CLASS] DatasetUtilities   [TYPE]  XYSeries series  [TYPE]  Comparable seriesKey  [TYPE]  boolean false  true  [TYPE]  double end  start  step  x  [TYPE]  Function2D f  [TYPE]  XYSeriesCollection collection  [TYPE]  int i  samples 
[REPLACE]^if  ( dataset != null )  {^531^^^^^529^552^[REPLACE] if  ( dataset == null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^return false;^532^^^^^529^552^[REPLACE] return true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^int itemCount = dataset.getKeys (  ) ;^535^^^^^529^552^[REPLACE] int itemCount = dataset.getItemCount (  ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( item  ||  0 )  {^536^^^^^529^552^[REPLACE] if  ( itemCount == 0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^return false;^537^^^^^529^552^[REPLACE] return true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( y == null )  {^542^^^^^529^552^[REPLACE] if  ( y != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[ADD]^double yy = y.doubleValue (  ) ;return false;^542^543^544^545^546^529^552^[ADD] if  ( y != null )  { double yy = y.doubleValue (  ) ; if  ( yy > 0.0 )  { return false; }^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( yy  >=  0.0 )  {^544^^^^^529^552^[REPLACE] if  ( yy > 0.0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^return true;^545^^^^^529^552^[REPLACE] return false;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^Comparable currentKey =  ( Comparable )  iterator.next (  ) ;^543^^^^^529^552^[REPLACE] double yy = y.doubleValue (  ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( yy  ==  0.0 )  {^544^^^^^529^552^[REPLACE] if  ( yy > 0.0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[ADD]^^544^545^546^^^529^552^[ADD] if  ( yy > 0.0 )  { return false; }^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^for  ( int item = 0; item  !=  itemCount; item++ )  {^540^^^^^529^552^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[ADD]^^540^541^542^543^^529^552^[ADD] for  ( int item = 0; item < itemCount; item++ )  { Number y = dataset.getValue ( item ) ; if  ( y != null )  { double yy = y.doubleValue (  ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( y == true )  {^542^^^^^529^552^[REPLACE] if  ( y != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( yy  ==  0.0D )  {^544^^^^^529^552^[REPLACE] if  ( yy > 0.0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[ADD]^^543^^^^^529^552^[ADD] double yy = y.doubleValue (  ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^Number y = dataset.getValue ( itemCount ) ;^541^^^^^529^552^[REPLACE] Number y = dataset.getValue ( item ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[ADD]^^541^^^^^529^552^[ADD] Number y = dataset.getValue ( item ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^for  ( int item = 0 - 1; item < itemCount; item++ )  {^540^^^^^529^552^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^Number y = dataset .getValue ( itemCount , item )  ;^541^^^^^529^552^[REPLACE] Number y = dataset.getValue ( item ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^return false;^550^^^^^529^552^[REPLACE] return true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] PieDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number y  [TYPE]  PieDataset dataset  [TYPE]  double yy  [TYPE]  int item  itemCount 
[REPLACE]^if  ( dataset != null )  {^564^^^^^562^585^[REPLACE] if  ( dataset == null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^return false;^565^^^^^562^585^[REPLACE] return true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^int rowCount = dataset.getColumnCount (  ) ;^568^^^^^562^585^[REPLACE] int rowCount = dataset.getRowCount (  ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^int columnCount = dataset.getRowCount (  ) ;^569^^^^^562^585^[REPLACE] int columnCount = dataset.getColumnCount (  ) ;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^if  ( true && true )  {^570^^^^^562^585^[REPLACE] if  ( rowCount == 0 || columnCount == 0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[ADD]^^570^571^572^^^562^585^[ADD] if  ( rowCount == 0 || columnCount == 0 )  { return true; }^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^return false;^571^^^^^562^585^[REPLACE] return true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^if  ( dataset.getColumnKey ( rowCount, c )  == null )  {^576^^^^^562^585^[REPLACE] if  ( dataset.getValue ( r, c )  != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^return true;^577^^^^^562^585^[REPLACE] return false;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^for  ( int r = 0; r  <=  rowCount; r++ )  {^574^^^^^562^585^[REPLACE] for  ( int r = 0; r < rowCount; r++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^if  ( dataset.getValue ( r, c )  == this )  {^576^^^^^562^585^[REPLACE] if  ( dataset.getValue ( r, c )  != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^for  ( int c = 4; c  >=  columnCount; c++ )  {^575^^^^^562^585^[REPLACE] for  ( int c = 0; c < columnCount; c++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^if  ( dataset.getValue ( r, c )  == false )  {^576^^^^^562^585^[REPLACE] if  ( dataset.getValue ( r, c )  != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^for  ( int c = 3; c < columnCount; c++ )  {^575^^^^^562^585^[REPLACE] for  ( int c = 0; c < columnCount; c++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^for  ( int c = 4; c  > rowCount; c++ )  {^575^^^^^562^585^[REPLACE] for  ( int c = 0; c < columnCount; c++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^if  ( dataset.getValue ( r, c )  == null )  {^576^^^^^562^585^[REPLACE] if  ( dataset.getValue ( r, c )  != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^for  ( int r = 3; r < rowCount; r++ )  {^574^^^^^562^585^[REPLACE] for  ( int r = 0; r < rowCount; r++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^for  ( int c = 2; c < columnCount; c++ )  {^575^^^^^562^585^[REPLACE] for  ( int c = 0; c < columnCount; c++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^return false;^583^^^^^562^585^[REPLACE] return true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset  [TYPE]  int c  columnCount  r  rowCount 
[REPLACE]^boolean result = false;^597^^^^^595^610^[REPLACE] boolean result = true;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^if  ( dataset == null )  {^599^^^^^595^610^[REPLACE] if  ( dataset != null )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[ADD]^^599^600^601^602^603^595^610^[ADD] if  ( dataset != null )  { for  ( int s = 0; s < dataset.getSeriesCount (  ) ; s++ )  { if  ( dataset.getItemCount ( s )  > 0 )  { result = false; continue;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^if  ( dataset.getItemCount ( s )   <=  0 )  {^601^^^^^595^610^[REPLACE] if  ( dataset.getItemCount ( s )  > 0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^result = true;^602^^^^^595^610^[REPLACE] result = false;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^for  ( int s = 0; s  >  dataset.getSeriesCount (  ) ; s++ )  {^600^^^^^595^610^[REPLACE] for  ( int s = 0; s < dataset.getSeriesCount (  ) ; s++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[ADD]^^600^601^602^603^604^595^610^[ADD] for  ( int s = 0; s < dataset.getSeriesCount (  ) ; s++ )  { if  ( dataset.getItemCount ( s )  > 0 )  { result = false; continue; }^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^if  ( dataset.getItemCount ( s )   ==  0 )  {^601^^^^^595^610^[REPLACE] if  ( dataset.getItemCount ( s )  > 0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[ADD]^^601^602^603^604^^595^610^[ADD] if  ( dataset.getItemCount ( s )  > 0 )  { result = false; continue; }^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^result = null; ;^602^^^^^595^610^[REPLACE] result = false;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^for  ( int s = 0 % 2; s < dataset.getSeriesCount (  ) ; s++ )  {^600^^^^^595^610^[REPLACE] for  ( int s = 0; s < dataset.getSeriesCount (  ) ; s++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^for  ( int s = 0; s  ==  dataset.getSeriesCount (  ) ; s++ )  {^600^^^^^595^610^[REPLACE] for  ( int s = 0; s < dataset.getSeriesCount (  ) ; s++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^if  ( dataset.getItemCount ( s )   >=  0 )  {^601^^^^^595^610^[REPLACE] if  ( dataset.getItemCount ( s )  > 0 )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[ADD]^result = false;continue;^601^602^603^604^^595^610^[ADD] if  ( dataset.getItemCount ( s )  > 0 )  { result = false; continue; }^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[ADD]^^602^^^^^595^610^[ADD] result = false;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^for  ( int s = 1; s < dataset.getSeriesCount (  ) ; s++ )  {^600^^^^^595^610^[REPLACE] for  ( int s = 0; s < dataset.getSeriesCount (  ) ; s++ )  {^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^return true;^608^^^^^595^610^[REPLACE] return result;^[METHOD] isEmptyOrNull [TYPE] boolean [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  result  true  [TYPE]  XYDataset dataset  [TYPE]  int s 
[REPLACE]^return findRangeBounds ( dataset, true ) ;^620^^^^^619^621^[REPLACE] return findDomainBounds ( dataset, true ) ;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  XYDataset dataset 
[REPLACE]^if  ( dataset != false )  {^636^^^^^633^651^[REPLACE] if  ( dataset == null )  {^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^637^^^^^633^651^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[ADD]^^637^^^^^633^651^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^Range result = true;^640^^^^^633^651^[REPLACE] Range result = null;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^if  ( ! dataset instanceof DomainInfo )  {^642^^^^^633^651^[REPLACE] if  ( dataset instanceof DomainInfo )  {^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^result = iterateCategoryRangeBounds ( dataset, includeInterval ) ; ;^647^^^^^633^651^[REPLACE] result = iterateDomainBounds ( dataset, includeInterval ) ;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^result = info.getRangeBounds ( includeInterval ) ; ;^644^^^^^633^651^[REPLACE] result = info.getDomainBounds ( includeInterval ) ;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;^643^^^^^633^651^[REPLACE] DomainInfo info =  ( DomainInfo )  dataset;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[ADD]^^643^^^^^633^651^[ADD] DomainInfo info =  ( DomainInfo )  dataset;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[ADD]^^647^^^^^633^651^[ADD] result = iterateDomainBounds ( dataset, includeInterval ) ;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^return total;^649^^^^^633^651^[REPLACE] return result;^[METHOD] findDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  Range result 
[REPLACE]^return iterateDomainBounds ( dataset, false ) ;^662^^^^^661^663^[REPLACE] return iterateDomainBounds ( dataset, true ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  XYDataset dataset 
[REPLACE]^if  ( dataset != null )  {^678^^^^^677^715^[REPLACE] if  ( dataset == null )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^678^679^680^^^677^715^[ADD] if  ( dataset == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^679^^^^^677^715^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^679^^^^^677^715^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return ;^679^^^^^677^715^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^681^^^^^677^715^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^682^^^^^677^715^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^683^^^^^677^715^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double value;^684^^^^^677^715^[REPLACE] double lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double value;^685^^^^^677^715^[REPLACE] double uvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^685^^^^^677^715^[ADD] double uvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! includeInterval ) {^686^^^^^677^715^[REPLACE] if  ( includeInterval && dataset instanceof IntervalXYDataset )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 4; series  ==  seriesCount; series++ )  {^699^^^^^686^708^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  !=  itemCount; item++ )  {^701^^^^^686^708^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^702^^^^^686^708^[REPLACE] lvalue = dataset.getXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  null;^703^^^^^686^708^[REPLACE] uvalue = lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^minimum = Math.min ( minimum, lvalue ) ;^703^704^^^^686^708^[ADD] uvalue = lvalue; minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^704^^^^^686^708^[REPLACE] minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^705^^^^^686^708^[REPLACE] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^704^^^^^686^708^[ADD] minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^705^^^^^686^708^[ADD] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount (  ) ;^700^^^^^686^708^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 1; item < itemCount; item++ )  {^701^^^^^686^708^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int seriesCount = 0; item  >  seriesCount; item++ )  {^701^^^^^686^708^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^701^702^703^704^705^686^708^[ADD] for  ( int item = 0; item < itemCount; item++ )  { lvalue = dataset.getXValue ( series, item ) ; uvalue = lvalue; minimum = Math.min ( minimum, lvalue ) ; maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  minimum;^703^^^^^686^708^[REPLACE] uvalue = lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^704^705^^^^686^708^[ADD] minimum = Math.min ( minimum, lvalue ) ; maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 4; series < seriesCount; series++ )  {^699^^^^^686^708^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^700^^^^^686^708^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item < itemCount; item++ )  {^701^^^^^686^708^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >= itemCount; series++ )  {^688^^^^^677^715^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item  <=  itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^691^^^^^677^715^[REPLACE] lvalue = intervalXYData.getStartXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^692^^^^^677^715^[REPLACE] uvalue = intervalXYData.getEndXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^minimum = Math.min ( minimum, lvalue ) ;^692^693^^^^677^715^[ADD] uvalue = intervalXYData.getEndXValue ( series, item ) ; minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^693^^^^^677^715^[REPLACE] minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^694^^^^^677^715^[REPLACE] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( this )  ;^689^^^^^677^715^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 1; item < itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^690^691^692^693^694^677^715^[ADD] for  ( int item = 0; item < itemCount; item++ )  { lvalue = intervalXYData.getStartXValue ( series, item ) ; uvalue = intervalXYData.getEndXValue ( series, item ) ; minimum = Math.min ( minimum, lvalue ) ; maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0; item  !=  itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^DefaultPieDataset result = new DefaultPieDataset (  ) ;^687^^^^^677^715^[REPLACE] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 % 4; series < seriesCount; series++ )  {^688^^^^^677^715^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount (  ) ;^689^^^^^677^715^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 - 2; series  !=  seriesCount; series++ )  {^688^^^^^677^715^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 - 2; item  ==  itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^691^692^^^^677^715^[ADD] lvalue = intervalXYData.getStartXValue ( series, item ) ; uvalue = intervalXYData.getEndXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^692^^^^^677^715^[ADD] uvalue = intervalXYData.getEndXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^694^^^^^677^715^[ADD] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^689^^^^^677^715^[ADD] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 - 3; item < itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  <=  itemCount; item++ )  {^690^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 2; series  != itemCount; series++ )  {^699^^^^^677^715^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^699^700^701^702^703^677^715^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { int itemCount = dataset.getItemCount ( series ) ; for  ( int item = 0; item < itemCount; item++ )  { lvalue = dataset.getXValue ( series, item ) ; uvalue = lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0; item  <=  itemCount; item++ )  {^701^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^701^702^703^704^705^677^715^[ADD] for  ( int item = 0; item < itemCount; item++ )  { lvalue = dataset.getXValue ( series, item ) ; uvalue = lvalue; minimum = Math.min ( minimum, lvalue ) ; maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^702^^^^^677^715^[REPLACE] lvalue = dataset.getXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  minimum;^703^^^^^677^715^[REPLACE] uvalue = lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^703^^^^^677^715^[ADD] uvalue = lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^704^^^^^677^715^[REPLACE] minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^705^^^^^677^715^[REPLACE] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  null;^703^^^^^677^715^[REPLACE] uvalue = lvalue;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^700^^^^^677^715^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < itemCount; item++ )  {^701^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  >  itemCount; item++ )  {^701^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^705^^^^^677^715^[ADD] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^691^^^^^677^715^[ADD] lvalue = intervalXYData.getStartXValue ( series, item ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^692^693^^^^677^715^[ADD] uvalue = intervalXYData.getEndXValue ( series, item ) ; minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^704^705^^^^677^715^[ADD] minimum = Math.min ( minimum, lvalue ) ; maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 4; series < seriesCount; series++ )  {^688^^^^^677^715^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^689^^^^^677^715^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 1; series < seriesCount; series++ )  {^699^^^^^677^715^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( null )  ;^700^^^^^677^715^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item < itemCount; item++ )  {^701^^^^^677^715^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  (uvalue  !=  maximum )  {^709^^^^^677^715^[REPLACE] if  ( minimum > maximum )  {^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^713^^^^^709^714^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return false;^710^^^^^677^715^[REPLACE] return null;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return true;^710^^^^^677^715^[REPLACE] return null;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^713^^^^^677^715^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] iterateDomainBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return findDomainBounds ( dataset, true ) ;^725^^^^^724^726^[REPLACE] return findRangeBounds ( dataset, true ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset 
[REPLACE]^if  ( dataset != null )  {^739^^^^^737^751^[REPLACE] if  ( dataset == null )  {^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[ADD]^^739^740^741^^^737^751^[ADD] if  ( dataset == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^740^^^^^737^751^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^return ;^740^^^^^737^751^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^Range result = true;^742^^^^^737^751^[REPLACE] Range result = null;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^if  ( ! dataset instanceof RangeInfo )  {^743^^^^^737^751^[REPLACE] if  ( dataset instanceof RangeInfo )  {^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^result = iterateDomainBounds ( dataset, includeInterval ) ; ;^748^^^^^737^751^[REPLACE] result = iterateCategoryRangeBounds ( dataset, includeInterval ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[ADD]^^748^^^^^737^751^[ADD] result = iterateCategoryRangeBounds ( dataset, includeInterval ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^result = info.getDomainBounds ( includeInterval ) ; ;^745^^^^^737^751^[REPLACE] result = info.getRangeBounds ( includeInterval ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^744^^^^^737^751^[REPLACE] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[ADD]^^745^^^^^737^751^[ADD] result = info.getRangeBounds ( includeInterval ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^return total;^750^^^^^737^751^[REPLACE] return result;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^return findRangeBounds ( dataset, false ) ;^762^^^^^761^763^[REPLACE] return findRangeBounds ( dataset, true ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  XYDataset dataset 
[REPLACE]^if  ( dataset != true )  {^778^^^^^776^790^[REPLACE] if  ( dataset == null )  {^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^779^^^^^776^790^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[ADD]^^779^^^^^776^790^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^Range result = false;^781^^^^^776^790^[REPLACE] Range result = null;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^if  ( ! dataset instanceof RangeInfo )  {^782^^^^^776^790^[REPLACE] if  ( dataset instanceof RangeInfo )  {^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^result =  iterateXYRangeBounds ( null ) ;^787^^^^^776^790^[REPLACE] result = iterateXYRangeBounds ( dataset ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^result = info.getDomainBounds ( includeInterval ) ; ;^784^^^^^776^790^[REPLACE] result = info.getRangeBounds ( includeInterval ) ;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^783^^^^^776^790^[REPLACE] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^return total;^789^^^^^776^790^[REPLACE] return result;^[METHOD] findRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  boolean false  includeInterval  true  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  Range result 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^804^^^^^803^838^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^805^^^^^803^838^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^boolean interval = includeInterval  >  dataset instanceof IntervalCategoryDataset;^806^807^^^^803^838^[REPLACE] boolean interval = includeInterval && dataset instanceof IntervalCategoryDataset;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^int rowCount = dataset.getColumnCount (  ) ;^808^^^^^803^838^[REPLACE] int rowCount = dataset.getRowCount (  ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^int columnCount = dataset.getRowCount (  ) ;^809^^^^^803^838^[REPLACE] int columnCount = dataset.getColumnCount (  ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( start >= end )  {^814^^^^^803^838^[REPLACE] if  ( interval )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^814^815^816^817^818^803^838^[ADD] if  ( interval )  { IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset; lvalue = icd.getStartValue ( row, column ) ; uvalue = icd.getEndValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^lvalue = icd.getStartValue ( row, column ) ; ;^821^^^^^814^823^[REPLACE] lvalue = dataset.getValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^uvalue =  null;^822^^^^^814^823^[REPLACE] uvalue = lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^uvalue = icd.getEndValue ( row, column ) ; ;^817^^^^^803^838^[REPLACE] lvalue = icd.getStartValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^817^^^^^803^838^[ADD] lvalue = icd.getStartValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^lvalue = icd.getStartValue ( row, column ) ; ;^818^^^^^803^838^[REPLACE] uvalue = icd.getEndValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^818^^^^^803^838^[ADD] uvalue = icd.getEndValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^815^816^^^^803^838^[ADD] IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( lvalue == null )  {^824^^^^^803^838^[REPLACE] if  ( lvalue != null )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^minimum = Math.min ( minimum, lvalue.doubleValue (  )  ) ;^824^825^826^^^803^838^[ADD] if  ( lvalue != null )  { minimum = Math.min ( minimum, lvalue.doubleValue (  )  ) ; }^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^825^^^^^803^838^[REPLACE] minimum = Math.min ( minimum, lvalue.doubleValue (  )  ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^825^^^^^803^838^[ADD] minimum = Math.min ( minimum, lvalue.doubleValue (  )  ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( uvalue == null )  {^827^^^^^803^838^[REPLACE] if  ( uvalue != null )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^828^^^^^803^838^[REPLACE] maximum = Math.max ( maximum, uvalue.doubleValue (  )  ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^828^^^^^803^838^[ADD] maximum = Math.max ( maximum, uvalue.doubleValue (  )  ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^for  ( int row = 0; row  !=  row; row++ )  {^810^^^^^803^838^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^810^811^812^813^^803^838^[ADD] for  ( int row = 0; row < rowCount; row++ )  { for  ( int column = 0; column < columnCount; column++ )  { Number lvalue; Number uvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^821^822^^^^814^823^[ADD] lvalue = dataset.getValue ( row, column ) ; uvalue = lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^822^^^^^814^823^[ADD] uvalue = lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( lvalue == false )  {^824^^^^^803^838^[REPLACE] if  ( lvalue != null )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^for  ( int column = 0; column  == rowCount; column++ )  {^811^^^^^803^838^[REPLACE] for  ( int column = 0; column < columnCount; column++ )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^811^812^813^814^815^803^838^[ADD] for  ( int column = 0; column < columnCount; column++ )  { Number lvalue; Number uvalue; if  ( interval )  { IntervalCategoryDataset icd^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( true )  {^814^^^^^803^838^[REPLACE] if  ( interval )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^uvalue = icd.getEndValue ( row, column ) ;^817^818^^^^803^838^[ADD] lvalue = icd.getStartValue ( row, column ) ; uvalue = icd.getEndValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( uvalue == this  )  {^827^^^^^803^838^[REPLACE] if  ( uvalue != null )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^maximum = Math.max ( maximum, uvalue.doubleValue (  )  ) ;^827^828^829^^^803^838^[ADD] if  ( uvalue != null )  { maximum = Math.max ( maximum, uvalue.doubleValue (  )  ) ; }^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^lvalue = icd.getStartValue ( row, column ) ; ;^821^^^^^803^838^[REPLACE] lvalue = dataset.getValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^821^^^^^803^838^[ADD] lvalue = dataset.getValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^uvalue =  null;^822^^^^^803^838^[REPLACE] uvalue = lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^Number value;^812^^^^^803^838^[REPLACE] Number lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^Number value;^813^^^^^803^838^[REPLACE] Number uvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^813^^^^^803^838^[ADD] Number uvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^for  ( int column = 2; column < columnCount; column++ )  {^811^^^^^803^838^[REPLACE] for  ( int column = 0; column < columnCount; column++ )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^for  ( int column = 0; column  >=  columnCount; column++ )  {^811^^^^^803^838^[REPLACE] for  ( int column = 0; column < columnCount; column++ )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^821^^^^^814^823^[ADD] lvalue = dataset.getValue ( row, column ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( lvalue == this  )  {^824^^^^^803^838^[REPLACE] if  ( lvalue != null )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( uvalue ==lvalue )  {^827^^^^^803^838^[REPLACE] if  ( uvalue != null )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^uvalue = lvalue;^821^822^^^^803^838^[ADD] lvalue = dataset.getValue ( row, column ) ; uvalue = lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^822^^^^^803^838^[ADD] uvalue = lvalue;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^for  ( int row = 2; row < rowCount; row++ )  {^810^^^^^803^838^[REPLACE] for  ( int row = 0; row < rowCount; row++ )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^for  ( int column = 1; column < columnCount; column++ )  {^811^^^^^803^838^[REPLACE] for  ( int column = 0; column < columnCount; column++ )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^if  ( minimum  !=  Double.POSITIVE_INFINITY )  {^832^^^^^803^838^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[ADD]^^832^833^834^^^803^838^[ADD] if  ( minimum == Double.POSITIVE_INFINITY )  { return null; }^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^836^^^^^832^837^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^return true;^833^^^^^803^838^[REPLACE] return null;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^return false;^833^^^^^803^838^[REPLACE] return null;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^836^^^^^803^838^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] iterateCategoryRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset boolean includeInterval [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  includeInterval  interval  true  [TYPE]  Number lvalue  uvalue  [TYPE]  double maximum  minimum  [TYPE]  CategoryDataset dataset  [TYPE]  int column  columnCount  row  rowCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^849^^^^^848^886^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^850^^^^^848^886^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^851^^^^^848^886^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^857^^^^^848^886^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^857^858^859^860^861^848^886^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; lvalue = intervalXYData.getStartYValue ( series, item ) ; uvalue = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else if  ( ! dataset instanceof OHLCDataset )  {^863^^^^^848^886^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;lvalue = highLowData.getLowValue ( series, item ) ;uvalue = highLowData.getHighValue ( series, item ) ;^863^864^865^866^867^848^886^[ADD] else if  ( dataset instanceof OHLCDataset )  { OHLCDataset highLowData =  ( OHLCDataset )  dataset; lvalue = highLowData.getLowValue ( series, item ) ; uvalue = highLowData.getHighValue ( series, item ) ; }^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^869^^^^^863^871^[REPLACE] lvalue = dataset.getYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  null;^870^^^^^863^871^[REPLACE] uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^870^^^^^863^871^[ADD] uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^865^^^^^848^886^[REPLACE] lvalue = highLowData.getLowValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^866^^^^^848^886^[REPLACE] uvalue = highLowData.getHighValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^866^^^^^848^886^[ADD] uvalue = highLowData.getHighValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^864^^^^^848^886^[REPLACE] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^uvalue = highLowData.getHighValue ( series, item ) ;^865^866^^^^848^886^[ADD] lvalue = highLowData.getLowValue ( series, item ) ; uvalue = highLowData.getHighValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^869^^^^^848^886^[REPLACE] lvalue = dataset.getYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^869^870^^^^848^886^[ADD] lvalue = dataset.getYValue ( series, item ) ; uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  null;^870^^^^^848^886^[REPLACE] uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^864^865^^^^848^886^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; lvalue = highLowData.getLowValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^860^^^^^848^886^[REPLACE] lvalue = intervalXYData.getStartYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^861^^^^^848^886^[REPLACE] uvalue = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof OHLCDataset )  {^863^^^^^848^886^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^869^^^^^863^871^[ADD] lvalue = dataset.getYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  minimum;^870^^^^^863^871^[REPLACE] uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^865^^^^^848^886^[ADD] lvalue = highLowData.getLowValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.isNaN ( uvalue )  )  {^872^^^^^848^886^[REPLACE] if  ( !Double.isNaN ( lvalue )  )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^873^^^^^848^886^[REPLACE] minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( uvalue )  )  {^875^^^^^848^886^[REPLACE] if  ( !Double.isNaN ( uvalue )  )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^876^^^^^848^886^[REPLACE] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 4; series  != itemCount; series++ )  {^852^^^^^848^886^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^864^^^^^848^886^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue =  minimum;^870^^^^^848^886^[REPLACE] uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^870^^^^^848^886^[ADD] uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^uvalue = intervalXYData.getEndYValue ( series, item ) ;^860^861^^^^848^886^[ADD] lvalue = intervalXYData.getStartYValue ( series, item ) ; uvalue = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else {^863^^^^^848^886^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( uvalue )  )  {^872^^^^^848^886^[REPLACE] if  ( !Double.isNaN ( lvalue )  )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^minimum = Math.min ( minimum, lvalue ) ;^872^873^874^^^848^886^[ADD] if  ( !Double.isNaN ( lvalue )  )  { minimum = Math.min ( minimum, lvalue ) ; }^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^873^^^^^848^886^[ADD] minimum = Math.min ( minimum, lvalue ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( minimum )  )  {^875^^^^^848^886^[REPLACE] if  ( !Double.isNaN ( uvalue )  )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  >=  itemCount; item++ )  {^854^^^^^848^886^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^863^864^865^866^867^848^886^[ADD] else if  ( dataset instanceof OHLCDataset )  { OHLCDataset highLowData =  ( OHLCDataset )  dataset; lvalue = highLowData.getLowValue ( series, item ) ; uvalue = highLowData.getHighValue ( series, item ) ; }^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^869^870^^^^863^871^[ADD] lvalue = dataset.getYValue ( series, item ) ; uvalue = lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.isNaN ( y )  )  {^872^^^^^848^886^[REPLACE] if  ( !Double.isNaN ( lvalue )  )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.isNaN ( lvalue )  )  {^875^^^^^848^886^[REPLACE] if  ( !Double.isNaN ( uvalue )  )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^865^866^^^^848^886^[ADD] lvalue = highLowData.getLowValue ( series, item ) ; uvalue = highLowData.getHighValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double value;^855^^^^^848^886^[REPLACE] double lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double value;^856^^^^^848^886^[REPLACE] double uvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^lvalue = highLowData.getLowValue ( series, item ) ;^864^865^^^^848^886^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; lvalue = highLowData.getLowValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^861^^^^^848^886^[ADD] uvalue = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( false )  ;^853^^^^^848^886^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 3; item < itemCount; item++ )  {^854^^^^^848^886^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int seriesCount = 0; seriesCount  !=  itemCount; item++ )  {^854^^^^^848^886^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^854^855^856^857^858^848^886^[ADD] for  ( int item = 0; item < itemCount; item++ )  { double lvalue; double uvalue; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^858^859^^^^848^886^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^maximum = Math.max ( maximum, uvalue ) ;^875^876^877^^^848^886^[ADD] if  ( !Double.isNaN ( uvalue )  )  { maximum = Math.max ( maximum, uvalue ) ; }^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^876^^^^^848^886^[ADD] maximum = Math.max ( maximum, uvalue ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^855^^^^^848^886^[ADD] double lvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^856^^^^^848^886^[ADD] double uvalue;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 3; series < seriesCount; series++ )  {^852^^^^^848^886^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^853^^^^^848^886^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item < itemCount; item++ )  {^854^^^^^848^886^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( minimum  !=  Double.POSITIVE_INFINITY )  {^880^^^^^848^886^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^884^^^^^880^885^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return false;^881^^^^^848^886^[REPLACE] return null;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^884^^^^^848^886^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] iterateXYRangeBounds [TYPE] Range [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double lvalue  maximum  minimum  uvalue  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( dataset != true )  {^902^^^^^901^942^[REPLACE] if  ( dataset == null )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^903^^^^^901^942^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return ;^903^^^^^901^942^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^Number result = false;^905^^^^^901^942^[REPLACE] Number result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^905^^^^^901^942^[ADD] Number result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof DomainInfo )  {^907^^^^^901^942^[REPLACE] if  ( dataset instanceof DomainInfo )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^907^908^909^910^^901^942^[ADD] if  ( dataset instanceof DomainInfo )  { DomainInfo info =  ( DomainInfo )  dataset; return new Double ( info.getDomainLowerBound ( true )  ) ; }^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^919^^^^^907^939^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^919^920^921^922^923^907^939^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getStartXValue ( series, item ) ; }^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^925^^^^^919^926^[REPLACE] value = dataset.getXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^922^^^^^907^939^[REPLACE] value = intervalXYData.getStartXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.isNaN ( lvalue )  )  {^927^^^^^907^939^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^928^^^^^907^939^[REPLACE] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( minimum  !=  Double.POSITIVE_INFINITY )  {^933^^^^^907^939^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result =  new Double ( maximum )  ; ;^937^^^^^933^938^[REPLACE] result = new Double ( minimum ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^937^^^^^933^938^[ADD] result = new Double ( minimum ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = false;^934^^^^^907^939^[REPLACE] result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int itemCount = 0; series  ==  seriesCount; series++ )  {^914^^^^^907^939^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^927^^^^^907^939^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^minimum = Math.min ( minimum, value ) ;^927^928^929^^^907^939^[ADD] if  ( !Double.isNaN ( value )  )  { minimum = Math.min ( minimum, value ) ; }^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0 + 1; item  <=  itemCount; item++ )  {^916^^^^^907^939^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^916^917^918^919^920^907^939^[ADD] for  ( int item = 0; item < itemCount; item++ )  {  double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^922^^^^^907^939^[ADD] value = intervalXYData.getStartXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^925^^^^^907^939^[REPLACE] value = dataset.getXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^918^^^^^907^939^[REPLACE] double value;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^925^^^^^907^939^[ADD] value = dataset.getXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( null )  ;^915^^^^^907^939^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 >> 3; item < itemCount; item++ )  {^916^^^^^907^939^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  ==  itemCount; item++ )  {^916^^^^^907^939^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^920^921^^^^907^939^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^918^^^^^907^939^[ADD] double value;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^928^^^^^907^939^[ADD] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = true;^934^^^^^907^939^[REPLACE] result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = new Double ( maximum ) ; ;^937^^^^^907^939^[REPLACE] result = new Double ( minimum ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^912^^^^^907^939^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^912^^^^^907^939^[ADD] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^913^^^^^907^939^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 3; series < seriesCount; series++ )  {^914^^^^^907^939^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount (  ) ;^915^^^^^907^939^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0L; item < itemCount; item++ )  {^916^^^^^907^939^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( info.getRangeLowerBound ( true )  )   ) ;^909^^^^^901^942^[REPLACE] return new Double ( info.getDomainLowerBound ( true )  ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;^908^^^^^901^942^[REPLACE] DomainInfo info =  ( DomainInfo )  dataset;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^919^^^^^901^942^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^919^920^921^922^923^901^942^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getStartXValue ( series, item ) ; }^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^922^^^^^901^942^[REPLACE] value = intervalXYData.getStartXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !  value    )  {^927^^^^^901^942^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^928^^^^^901^942^[REPLACE] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^928^^^^^901^942^[ADD] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value  !=  Double.POSITIVE_INFINITY )  {^933^^^^^901^942^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = new Double ( maximum ) ; ;^937^^^^^933^938^[REPLACE] result = new Double ( minimum ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = true;^934^^^^^901^942^[REPLACE] result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  <= itemCount; series++ )  {^914^^^^^901^942^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^927^^^^^901^942^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  ==  itemCount; item++ )  {^916^^^^^901^942^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^927^^^^^901^942^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^925^^^^^901^942^[REPLACE] value = dataset.getXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^925^^^^^901^942^[ADD] value = dataset.getXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^918^^^^^901^942^[REPLACE] double value;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^915^^^^^901^942^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^915^^^^^901^942^[ADD] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 + 4; item < itemCount; item++ )  {^916^^^^^901^942^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^918^^^^^901^942^[ADD] double value;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0; item  <=  itemCount; item++ )  {^916^^^^^901^942^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^925^^^^^919^926^[ADD] value = dataset.getXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^922^^^^^901^942^[ADD] value = intervalXYData.getStartXValue ( series, item ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = false; ;^934^^^^^901^942^[REPLACE] result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^934^^^^^901^942^[ADD] result = null;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = new Double ( maximum ) ; ;^937^^^^^901^942^[REPLACE] result = new Double ( minimum ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info .getDomainUpperBound ( false )   ) ;^909^^^^^901^942^[REPLACE] return new Double ( info.getDomainLowerBound ( true )  ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^908^^^^^901^942^[ADD] DomainInfo info =  ( DomainInfo )  dataset;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^912^^^^^901^942^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getItemCount (  )  ;^913^^^^^901^942^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 >>> 3; series < seriesCount; series++ )  {^914^^^^^901^942^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( null )  ;^915^^^^^901^942^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 - 3; item < itemCount; item++ )  {^916^^^^^901^942^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^916^917^918^919^920^901^942^[ADD] for  ( int item = 0; item < itemCount; item++ )  {  double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return total;^941^^^^^901^942^[REPLACE] return result;^[METHOD] findMinimumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( dataset != null )  {^957^^^^^956^999^[REPLACE] if  ( dataset == null )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^957^958^959^^^956^999^[ADD] if  ( dataset == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return ;^958^^^^^956^999^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^958^^^^^956^999^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^958^^^^^956^999^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^Number result = this;^960^^^^^956^999^[REPLACE] Number result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^960^^^^^956^999^[ADD] Number result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof DomainInfo )  {^962^^^^^956^999^[REPLACE] if  ( dataset instanceof DomainInfo )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^962^963^964^965^^956^999^[ADD] if  ( dataset instanceof DomainInfo )  { DomainInfo info =  ( DomainInfo )  dataset; return new Double ( info.getDomainUpperBound ( true )  ) ; }^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^976^^^^^962^996^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^982^^^^^976^983^[REPLACE] value = dataset.getXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^982^^^^^976^983^[ADD] value = dataset.getXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^979^^^^^962^996^[REPLACE] value = intervalXYData.getEndXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^979^^^^^962^996^[ADD] value = intervalXYData.getEndXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^984^^^^^962^996^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^985^^^^^962^996^[REPLACE] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( maximum  &&  Double.NEGATIVE_INFINITY )  {^989^^^^^962^996^[REPLACE] if  ( maximum == Double.NEGATIVE_INFINITY )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = new Double ( minimum ) ; ;^993^^^^^989^994^[REPLACE] result = new Double ( maximum ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = false; ;^990^^^^^962^996^[REPLACE] result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  <=  seriesCount; series++ )  {^971^^^^^962^996^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^984^^^^^962^996^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^maximum = Math.max ( maximum, value ) ;^984^985^986^^^962^996^[ADD] if  ( !Double.isNaN ( value )  )  { maximum = Math.max ( maximum, value ) ; }^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0L; item  ==  itemCount; item++ )  {^973^^^^^962^996^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^973^974^975^976^977^962^996^[ADD] for  ( int item = 0; item < itemCount; item++ )  {  double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^976^977^978^979^980^962^996^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getEndXValue ( series, item ) ; }^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^982^^^^^962^996^[REPLACE] value = dataset.getXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^982^^^^^962^996^[ADD] value = dataset.getXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^975^^^^^962^996^[REPLACE] double value;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( this )  ;^972^^^^^962^996^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < itemCount; item++ )  {^973^^^^^962^996^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  ==  seriesCount; item++ )  {^973^^^^^962^996^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^985^^^^^962^996^[ADD] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^977^978^^^^962^996^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = true;^990^^^^^962^996^[REPLACE] result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^990^^^^^962^996^[ADD] result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result =  new Double ( data[r][c] )  ; ;^993^^^^^962^996^[REPLACE] result = new Double ( maximum ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^969^^^^^962^996^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getItemCount (  )  ;^970^^^^^962^996^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 / 3; series < seriesCount; series++ )  {^971^^^^^962^996^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount (  ) ;^972^^^^^962^996^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 / 0; item < itemCount; item++ )  {^973^^^^^962^996^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^975^^^^^962^996^[ADD] double value;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( info.getRangeLowerBound ( true )  )    ) ;^964^^^^^956^999^[REPLACE] return new Double ( info.getDomainUpperBound ( true )  ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;^963^^^^^956^999^[REPLACE] DomainInfo info =  ( DomainInfo )  dataset;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^976^^^^^956^999^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^979^^^^^956^999^[REPLACE] value = intervalXYData.getEndXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^984^^^^^956^999^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^984^985^986^^^956^999^[ADD] if  ( !Double.isNaN ( value )  )  { maximum = Math.max ( maximum, value ) ; }^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^985^^^^^956^999^[REPLACE] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^985^^^^^956^999^[ADD] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  (value  !=  Double.NEGATIVE_INFINITY )  {^989^^^^^956^999^[REPLACE] if  ( maximum == Double.NEGATIVE_INFINITY )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^993^^^^^989^994^[ADD] result = new Double ( maximum ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = false; ;^990^^^^^956^999^[REPLACE] result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 1; series  >  seriesCount; series++ )  {^971^^^^^956^999^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  >=  itemCount; item++ )  {^973^^^^^956^999^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^977^978^^^^956^999^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !  value    )  {^984^^^^^956^999^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^982^^^^^956^999^[REPLACE] value = dataset.getXValue ( series, item ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^975^^^^^956^999^[REPLACE] double value;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^975^^^^^956^999^[ADD] double value;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount (  ) ;^972^^^^^956^999^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 1; item < itemCount; item++ )  {^973^^^^^956^999^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^973^974^975^976^977^956^999^[ADD] for  ( int item = 0; item < itemCount; item++ )  {  double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0; item  !=  itemCount; item++ )  {^973^^^^^956^999^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^976^977^978^979^980^956^999^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getEndXValue ( series, item ) ; }^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = true;^990^^^^^956^999^[REPLACE] result = null;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^result = new Double ( minimum ) ; ;^993^^^^^956^999^[REPLACE] result = new Double ( maximum ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info.getDomainLowerBound ( true )  ) ;^964^^^^^956^999^[REPLACE] return new Double ( info.getDomainUpperBound ( true )  ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^969^^^^^956^999^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getItemCount (  )  ;^970^^^^^956^999^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^970^^^^^956^999^[ADD] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 / 3; series < seriesCount; series++ )  {^971^^^^^956^999^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^972^^^^^956^999^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^972^^^^^956^999^[ADD] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return total;^998^^^^^956^999^[REPLACE] return result;^[METHOD] findMaximumDomainValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number result  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  DomainInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( dataset != null )  {^1016^^^^^1013^1056^[REPLACE] if  ( dataset == null )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1017^^^^^1013^1056^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof RangeInfo )  {^1021^^^^^1013^1056^[REPLACE] if  ( dataset instanceof RangeInfo )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalCategoryDataset )  {^1034^^^^^1021^1054^[REPLACE] if  ( dataset instanceof IntervalCategoryDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1040^^^^^1034^1041^[REPLACE] value = dataset.getValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue = highLowData.getHighValue ( series, item ) ; ;^1037^^^^^1021^1054^[REPLACE] value = icd.getStartValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1037^^^^^1021^1054^[ADD] value = icd.getStartValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == null )  {^1042^^^^^1021^1054^[REPLACE] if  ( value != null )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^1043^^^^^1021^1054^[REPLACE] minimum = Math.min ( minimum, value.doubleValue (  )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( minimum  !=  Double.POSITIVE_INFINITY )  {^1047^^^^^1021^1054^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( maximum ) ;^1051^^^^^1047^1052^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return this;^1048^^^^^1021^1054^[REPLACE] return null;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  !=  seriesCount; series++ )  {^1031^^^^^1021^1054^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1034^1035^1036^1037^1038^1021^1054^[ADD] if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset; value = icd.getStartValue ( series, item ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1040^^^^^1034^1041^[ADD] value = dataset.getValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1035^1036^^^^1021^1054^[ADD] IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int seriesCount = 0; item  <=  seriesCount; item++ )  {^1032^^^^^1021^1054^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1032^1033^1034^1035^1036^1021^1054^[ADD] for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1043^^^^^1021^1054^[ADD] minimum = Math.min ( minimum, value.doubleValue (  )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1040^^^^^1021^1054^[REPLACE] value = dataset.getValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1040^^^^^1021^1054^[ADD] value = dataset.getValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^Number uvalue;^1033^^^^^1021^1054^[REPLACE] Number value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < itemCount; item++ )  {^1032^^^^^1021^1054^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item  ==  itemCount; item++ )  {^1032^^^^^1021^1054^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return false;^1048^^^^^1021^1054^[REPLACE] return null;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( maximum )  ;^1051^^^^^1021^1054^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^1028^^^^^1021^1054^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1029^^^^^1021^1054^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1029^1030^^^^1021^1054^[ADD] int seriesCount = dataset.getRowCount (  ) ; int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getRowCount (  ) ;^1030^^^^^1021^1054^[REPLACE] int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1030^^^^^1021^1054^[ADD] int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 4; series < seriesCount; series++ )  {^1031^^^^^1021^1054^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1031^1032^1033^1034^1035^1021^1054^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 1; item < itemCount; item++ )  {^1032^^^^^1021^1054^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( info.getRangeUpperBound ( true )  )    ) ;^1023^^^^^1013^1056^[REPLACE] return new Double ( info.getRangeLowerBound ( true )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1022^^^^^1013^1056^[REPLACE] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalCategoryDataset )  {^1034^^^^^1013^1056^[REPLACE] if  ( dataset instanceof IntervalCategoryDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue = highLowData.getHighValue ( series, item ) ; ;^1037^^^^^1013^1056^[REPLACE] value = icd.getStartValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == null )  {^1042^^^^^1013^1056^[REPLACE] if  ( value != null )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^1043^^^^^1013^1056^[REPLACE] minimum = Math.min ( minimum, value.doubleValue (  )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( minimum  !=  Double.POSITIVE_INFINITY )  {^1047^^^^^1013^1056^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^return null;^1047^1048^1049^^^1013^1056^[ADD] if  ( minimum == Double.POSITIVE_INFINITY )  { return null; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( maximum )  ;^1051^^^^^1047^1052^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return true;^1048^^^^^1013^1056^[REPLACE] return null;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int itemCount = 0; series  !=  series; series++ )  {^1031^^^^^1013^1056^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1031^1032^1033^1034^1035^1013^1056^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1035^1036^^^^1013^1056^[ADD] IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item  <= seriesCount; item++ )  {^1032^^^^^1013^1056^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1034^1035^1036^1037^1038^1013^1056^[ADD] if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset; value = icd.getStartValue ( series, item ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == this )  {^1042^^^^^1013^1056^[REPLACE] if  ( value != null )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1040^^^^^1013^1056^[REPLACE] value = dataset.getValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^Number uvalue;^1033^^^^^1013^1056^[REPLACE] Number value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1043^^^^^1013^1056^[ADD] minimum = Math.min ( minimum, value.doubleValue (  )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < itemCount; item++ )  {^1032^^^^^1013^1056^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1032^1033^1034^1035^1036^1013^1056^[ADD] for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  <=  seriesCount; item++ )  {^1032^^^^^1013^1056^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == false )  {^1042^^^^^1013^1056^[REPLACE] if  ( value != null )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1040^^^^^1013^1056^[ADD] value = dataset.getValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1033^^^^^1013^1056^[ADD] Number value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info .getRangeUpperBound ( true )   ) ;^1023^^^^^1013^1056^[REPLACE] return new Double ( info.getRangeLowerBound ( true )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return this;^1048^^^^^1013^1056^[REPLACE] return null;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( maximum )  ;^1051^^^^^1013^1056^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1022^^^^^1013^1056^[ADD] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^1028^^^^^1013^1056^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getColumnCount (  )  ;^1029^^^^^1013^1056^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getRowCount (  ) ;^1030^^^^^1013^1056^[REPLACE] int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 * 1; series < seriesCount; series++ )  {^1031^^^^^1013^1056^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 / 4; item < itemCount; item++ )  {^1032^^^^^1013^1056^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double minimum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( dataset != null )  {^1072^^^^^1070^1118^[REPLACE] if  ( dataset == null )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return ;^1073^^^^^1070^1118^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1073^^^^^1070^1118^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1073^^^^^1070^1118^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof RangeInfo )  {^1077^^^^^1070^1118^[REPLACE] if  ( dataset instanceof RangeInfo )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^RangeInfo info =  ( RangeInfo )  dataset;return new Double ( info.getRangeLowerBound ( true )  ) ;^1077^1078^1079^1080^^1070^1118^[ADD] if  ( dataset instanceof RangeInfo )  { RangeInfo info =  ( RangeInfo )  dataset; return new Double ( info.getRangeLowerBound ( true )  ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^1091^^^^^1077^1116^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1091^1092^1093^1094^1095^1077^1116^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getStartYValue ( series, item ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else {^1096^^^^^1077^1116^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;value = highLowData.getLowValue ( series, item ) ;^1096^1097^1098^1099^^1077^1116^[ADD] else if  ( dataset instanceof OHLCDataset )  { OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getLowValue ( series, item ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1101^^^^^1096^1102^[REPLACE] value = dataset.getYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1098^^^^^1077^1116^[REPLACE] value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1097^^^^^1077^1116^[REPLACE] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1101^^^^^1077^1116^[REPLACE] value = dataset.getYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1094^^^^^1077^1116^[REPLACE] value = intervalXYData.getStartYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1094^^^^^1077^1116^[ADD] value = intervalXYData.getStartYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else if  ( ! dataset instanceof OHLCDataset )  {^1096^^^^^1077^1116^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^1103^^^^^1077^1116^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^1104^^^^^1077^1116^[REPLACE] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( minimum  ||  Double.POSITIVE_INFINITY )  {^1109^^^^^1077^1116^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( maximum )  ;^1113^^^^^1109^1114^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return false;^1110^^^^^1077^1116^[REPLACE] return null;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int itemCount = 0; series  >  series; series++ )  {^1086^^^^^1077^1116^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1101^^^^^1077^1116^[ADD] value = dataset.getYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1097^^^^^1077^1116^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1092^1093^^^^1077^1116^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1104^^^^^1077^1116^[ADD] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  >  itemCount; item++ )  {^1088^^^^^1077^1116^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof OHLCDataset )  {^1096^^^^^1077^1116^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1101^^^^^1096^1102^[ADD] value = dataset.getYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^1103^^^^^1077^1116^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^1090^^^^^1077^1116^[REPLACE] double value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1097^1098^^^^1077^1116^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^1087^^^^^1077^1116^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0L; item < itemCount; item++ )  {^1088^^^^^1077^1116^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1090^^^^^1077^1116^[ADD] double value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( intseriesCount = 0; item  <=  itemCount; item++ )  {^1088^^^^^1077^1116^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1098^^^^^1077^1116^[ADD] value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^value = highLowData.getLowValue ( series, item ) ;^1097^1098^^^^1077^1116^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^minimum = Math.min ( minimum, value ) ;^1103^1104^1105^^^1077^1116^[ADD] if  ( !Double.isNaN ( value )  )  { minimum = Math.min ( minimum, value ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( maximum )  ;^1113^^^^^1077^1116^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^1084^^^^^1077^1116^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1085^^^^^1077^1116^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 4; series < seriesCount; series++ )  {^1086^^^^^1077^1116^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 3; item < itemCount; item++ )  {^1088^^^^^1077^1116^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info.getRangeUpperBound ( true )  ) ;^1079^^^^^1070^1118^[REPLACE] return new Double ( info.getRangeLowerBound ( true )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1078^^^^^1070^1118^[REPLACE] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1078^^^^^1070^1118^[ADD] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^1091^^^^^1070^1118^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else {^1096^^^^^1070^1118^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;value = highLowData.getLowValue ( series, item ) ;^1096^1097^1098^1099^^1070^1118^[ADD] else if  ( dataset instanceof OHLCDataset )  { OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getLowValue ( series, item ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1098^^^^^1070^1118^[REPLACE] value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1097^^^^^1070^1118^[REPLACE] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1101^^^^^1070^1118^[REPLACE] value = dataset.getYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1101^^^^^1070^1118^[ADD] value = dataset.getYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1094^^^^^1070^1118^[REPLACE] value = intervalXYData.getStartYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1094^^^^^1070^1118^[ADD] value = intervalXYData.getStartYValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else if  ( ! dataset instanceof OHLCDataset )  {^1096^^^^^1070^1118^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^1103^^^^^1070^1118^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^minimum = Math.min ( minimum, value ) ;^1103^1104^1105^^^1070^1118^[ADD] if  ( !Double.isNaN ( value )  )  { minimum = Math.min ( minimum, value ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^1104^^^^^1070^1118^[REPLACE] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1104^^^^^1070^1118^[ADD] minimum = Math.min ( minimum, value ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value  !=  Double.POSITIVE_INFINITY )  {^1109^^^^^1070^1118^[REPLACE] if  ( minimum == Double.POSITIVE_INFINITY )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1109^1110^1111^^^1070^1118^[ADD] if  ( minimum == Double.POSITIVE_INFINITY )  { return null; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return true;^1110^^^^^1070^1118^[REPLACE] return null;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  ==  seriesCount; series++ )  {^1086^^^^^1070^1118^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1086^1087^1088^^1090^1070^1118^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { int itemCount = dataset.getItemCount ( series ) ; for  ( int item = 0; item < itemCount; item++ )  { double value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1091^1092^1093^1094^1095^1070^1118^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getStartYValue ( series, item ) ; }^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof OHLCDataset )  {^1096^^^^^1070^1118^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1092^1093^^^^1070^1118^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^1103^^^^^1070^1118^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  == seriesCount; item++ )  {^1088^^^^^1070^1118^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1098^^^^^1070^1118^[ADD] value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^1090^^^^^1070^1118^[REPLACE] double value;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^1087^^^^^1070^1118^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 % 3; item < itemCount; item++ )  {^1088^^^^^1070^1118^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 << 4; item  >  itemCount; item++ )  {^1088^^^^^1070^1118^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^value = highLowData.getLowValue ( series, item ) ;^1097^1098^^^^1070^1118^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getLowValue ( series, item ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info.getDomainLowerBound ( true )  ) ;^1079^^^^^1070^1118^[REPLACE] return new Double ( info.getRangeLowerBound ( true )  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( maximum )  ;^1113^^^^^1070^1118^[REPLACE] return new Double ( minimum ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^1084^^^^^1070^1118^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^int seriesCount = dataset.getSeriesCount (  ) ;^1084^1085^^^^1070^1118^[ADD] double minimum = Double.POSITIVE_INFINITY; int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getItemCount (  )  ;^1085^^^^^1070^1118^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 - 3; series < seriesCount; series++ )  {^1086^^^^^1070^1118^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 1; item < itemCount; item++ )  {^1088^^^^^1070^1118^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1088^1089^1090^1091^1092^1070^1118^[ADD] for  ( int item = 0; item < itemCount; item++ )  {  double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData^[METHOD] findMinimumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double minimum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( dataset != null )  {^1133^^^^^1131^1174^[REPLACE] if  ( dataset == null )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return ;^1134^^^^^1131^1174^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1134^^^^^1131^1174^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof RangeInfo )  {^1138^^^^^1131^1174^[REPLACE] if  ( dataset instanceof RangeInfo )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalCategoryDataset )  {^1152^^^^^1138^1172^[REPLACE] if  ( dataset instanceof IntervalCategoryDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REMOVE]^if  ( interval )  {     IntervalCategoryDataset icd =  (  ( IntervalCategoryDataset )   ( dataset )  ) ;     lvalue = icd.getStartValue ( row, column ) ;     uvalue = icd.getEndValue ( row, column ) ; }else {     lvalue = dataset.getValue ( row, column ) ;     uvalue = lvalue; }^1152^^^^^1138^1172^[REMOVE] ^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1158^^^^^1152^1159^[REPLACE] value = dataset.getValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1155^^^^^1138^1172^[REPLACE] value = icd.getEndValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1155^^^^^1138^1172^[ADD] value = icd.getEndValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1153^1154^^^^1138^1172^[ADD] IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == false )  {^1160^^^^^1138^1172^[REPLACE] if  ( value != null )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^1161^^^^^1138^1172^[REPLACE] maximum = Math.max ( maximum, value.doubleValue (  )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1161^^^^^1138^1172^[ADD] maximum = Math.max ( maximum, value.doubleValue (  )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( maximum  ||  Double.NEGATIVE_INFINITY )  {^1165^^^^^1138^1172^[REPLACE] if  ( maximum == Double.NEGATIVE_INFINITY )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( minimum ) ;^1169^^^^^1165^1170^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return false;^1166^^^^^1138^1172^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >=  seriesCount; series++ )  {^1149^^^^^1138^1172^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == null )  {^1160^^^^^1138^1172^[REPLACE] if  ( value != null )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 * 3; item  != seriesCount; item++ )  {^1150^^^^^1138^1172^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1160^1161^1162^^^1138^1172^[ADD] if  ( value != null )  { maximum = Math.max ( maximum, value.doubleValue (  )  ) ; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1158^^^^^1138^1172^[REPLACE] value = dataset.getValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^Number uvalue;^1151^^^^^1138^1172^[REPLACE] Number value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1158^^^^^1138^1172^[ADD] value = dataset.getValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item < itemCount; item++ )  {^1150^^^^^1138^1172^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 2; item  <=  itemCount; item++ )  {^1150^^^^^1138^1172^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1151^^^^^1138^1172^[ADD] Number value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return this;^1166^^^^^1138^1172^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( data[r][c] )  ;^1169^^^^^1138^1172^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^1146^^^^^1138^1172^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^int seriesCount = dataset.getRowCount (  ) ;^1146^1147^^^^1138^1172^[ADD] double maximum = Double.NEGATIVE_INFINITY; int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1147^^^^^1138^1172^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1147^1148^^^^1138^1172^[ADD] int seriesCount = dataset.getRowCount (  ) ; int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getRowCount (  ) ;^1148^^^^^1138^1172^[REPLACE] int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 2; series < seriesCount; series++ )  {^1149^^^^^1138^1172^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1149^1150^1151^1152^1153^1138^1172^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0L; item < itemCount; item++ )  {^1150^^^^^1138^1172^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info.getDomainLowerBound ( true )  ) ;^1140^^^^^1131^1174^[REPLACE] return new Double ( info.getRangeUpperBound ( true )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1139^^^^^1131^1174^[REPLACE] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalCategoryDataset )  {^1152^^^^^1131^1174^[REPLACE] if  ( dataset instanceof IntervalCategoryDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1155^^^^^1131^1174^[REPLACE] value = icd.getEndValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1155^^^^^1131^1174^[ADD] value = icd.getEndValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value == null )  {^1160^^^^^1131^1174^[REPLACE] if  ( value != null )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, value.doubleValue (  )  ) ; ;^1161^^^^^1131^1174^[REPLACE] maximum = Math.max ( maximum, value.doubleValue (  )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( maximum  &&  Double.NEGATIVE_INFINITY )  {^1165^^^^^1131^1174^[REPLACE] if  ( maximum == Double.NEGATIVE_INFINITY )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1165^1166^1167^^^1131^1174^[ADD] if  ( maximum == Double.NEGATIVE_INFINITY )  { return null; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( data[r][c] )  ;^1169^^^^^1165^1170^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return true;^1166^^^^^1131^1174^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  != itemCount; series++ )  {^1149^^^^^1131^1174^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0L; item  ==  itemCount; item++ )  {^1150^^^^^1131^1174^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1158^^^^^1152^1159^[ADD] value = dataset.getValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1161^^^^^1131^1174^[ADD] maximum = Math.max ( maximum, value.doubleValue (  )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1158^^^^^1131^1174^[REPLACE] value = dataset.getValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^Number uvalue;^1151^^^^^1131^1174^[REPLACE] Number value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 3; item < itemCount; item++ )  {^1150^^^^^1131^1174^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int seriesCount = 0L; item  >=  seriesCount; item++ )  {^1150^^^^^1131^1174^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1151^^^^^1131^1174^[ADD] Number value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1153^1154^^^^1131^1174^[ADD] IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1158^^^^^1131^1174^[ADD] value = dataset.getValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( info.getRangeLowerBound ( true )  )   ) ;^1140^^^^^1131^1174^[REPLACE] return new Double ( info.getRangeUpperBound ( true )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return false;^1166^^^^^1131^1174^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( data[r][c] )  ;^1169^^^^^1131^1174^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^1146^^^^^1131^1174^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getColumnCount (  )  ;^1147^^^^^1131^1174^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1147^1148^^^^1131^1174^[ADD] int seriesCount = dataset.getRowCount (  ) ; int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getRowCount (  ) ;^1148^^^^^1131^1174^[REPLACE] int itemCount = dataset.getColumnCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 - 0; series < seriesCount; series++ )  {^1149^^^^^1131^1174^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1149^1150^1151^1152^1153^1131^1174^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 1; item < itemCount; item++ )  {^1150^^^^^1131^1174^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1150^1151^1152^1153^1154^1131^1174^[ADD] for  ( int item = 0; item < itemCount; item++ )  { Number value; if  ( dataset instanceof IntervalCategoryDataset )  { IntervalCategoryDataset icd =  ( IntervalCategoryDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  IntervalCategoryDataset icd  [TYPE]  boolean false  true  [TYPE]  Number value  [TYPE]  double maximum  [TYPE]  CategoryDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( dataset != null )  {^1189^^^^^1187^1234^[REPLACE] if  ( dataset == null )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1190^^^^^1187^1234^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1190^^^^^1187^1234^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof RangeInfo )  {^1194^^^^^1187^1234^[REPLACE] if  ( dataset instanceof RangeInfo )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^1208^^^^^1194^1232^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1208^1209^1210^1211^1212^1194^1232^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getEndYValue ( series, item ) ; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else {^1213^^^^^1194^1232^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1213^1214^1215^1216^^1194^1232^[ADD] else if  ( dataset instanceof OHLCDataset )  { OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getHighValue ( series, item ) ; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1218^^^^^1213^1219^[REPLACE] value = dataset.getYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1215^^^^^1194^1232^[REPLACE] value = highLowData.getHighValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1214^^^^^1194^1232^[REPLACE] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1215^^^^^1194^1232^[ADD] value = highLowData.getHighValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1218^^^^^1194^1232^[REPLACE] value = dataset.getYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue = highLowData.getHighValue ( series, item ) ; ;^1211^^^^^1194^1232^[REPLACE] value = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof OHLCDataset )  {^1213^^^^^1194^1232^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1214^^^^^1194^1232^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^1220^^^^^1194^1232^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1221^^^^^1194^1232^[REPLACE] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value  ||  Double.NEGATIVE_INFINITY )  {^1225^^^^^1194^1232^[REPLACE] if  ( maximum == Double.NEGATIVE_INFINITY )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( data[r][c] )  ;^1229^^^^^1225^1230^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return true;^1226^^^^^1194^1232^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >  seriesCount; series++ )  {^1204^^^^^1194^1232^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else if  ( ! dataset instanceof OHLCDataset )  {^1213^^^^^1194^1232^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^OHLCDataset highLowData =  ( OHLCDataset )  dataset;value = highLowData.getHighValue ( series, item ) ;^1213^1214^1215^1216^^1194^1232^[ADD] else if  ( dataset instanceof OHLCDataset )  { OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getHighValue ( series, item ) ; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.isNaN ( lvalue )  )  {^1220^^^^^1194^1232^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  <=  itemCount; item++ )  {^1206^^^^^1194^1232^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1206^1207^1208^1209^1210^1194^1232^[ADD] for  ( int item = 0; item < itemCount; item++ )  { double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !  value    )  {^1220^^^^^1194^1232^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1221^^^^^1194^1232^[ADD] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^1207^^^^^1194^1232^[REPLACE] double value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1209^1210^^^^1194^1232^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1214^1215^^^^1194^1232^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getHighValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1218^^^^^1194^1232^[ADD] value = dataset.getYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount (  ) ;^1205^^^^^1194^1232^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 + 4; item < itemCount; item++ )  {^1206^^^^^1194^1232^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item  >  itemCount; item++ )  {^1206^^^^^1194^1232^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1218^^^^^1213^1219^[ADD] value = dataset.getYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^value = highLowData.getHighValue ( series, item ) ;^1214^1215^^^^1194^1232^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset; value = highLowData.getHighValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !Double.Double ( value )  )  {^1220^^^^^1194^1232^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1207^^^^^1194^1232^[ADD] double value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( data[r][c] )  ;^1229^^^^^1194^1232^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^1202^^^^^1194^1232^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getItemCount (  )  ;^1203^^^^^1194^1232^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 3; series < seriesCount; series++ )  {^1204^^^^^1194^1232^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset .getValue ( this )  ;^1205^^^^^1194^1232^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0 - 2; item < itemCount; item++ )  {^1206^^^^^1194^1232^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( info.getRangeLowerBound ( true )  )   ) ;^1196^^^^^1187^1234^[REPLACE] return new Double ( info.getRangeUpperBound ( true )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1195^^^^^1187^1234^[REPLACE] RangeInfo info =  ( RangeInfo )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof IntervalXYDataset )  {^1208^^^^^1187^1234^[REPLACE] if  ( dataset instanceof IntervalXYDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( ! dataset instanceof OHLCDataset )  {^1213^^^^^1187^1234^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1215^^^^^1187^1234^[REPLACE] value = highLowData.getHighValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^1214^^^^^1187^1234^[REPLACE] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^value = intervalXYData.getEndYValue ( series, item ) ; ;^1218^^^^^1187^1234^[REPLACE] value = dataset.getYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^uvalue = highLowData.getHighValue ( series, item ) ; ;^1211^^^^^1187^1234^[REPLACE] value = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^else {^1213^^^^^1187^1234^[REPLACE] else if  ( dataset instanceof OHLCDataset )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( !  value    )  {^1220^^^^^1187^1234^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1221^^^^^1187^1234^[REPLACE] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( value  &&  Double.NEGATIVE_INFINITY )  {^1225^^^^^1187^1234^[REPLACE] if  ( maximum == Double.NEGATIVE_INFINITY )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return true;^1226^^^^^1187^1234^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int itemCount = 0; series  !=  series; series++ )  {^1204^^^^^1187^1234^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1204^1205^1206^1207^^1187^1234^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { int itemCount = dataset.getItemCount ( series ) ; for  ( int item = 0; item < itemCount; item++ )  { double value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1208^1209^1210^1211^1212^1187^1234^[ADD] if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset; value = intervalXYData.getEndYValue ( series, item ) ; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1214^^^^^1187^1234^[ADD] OHLCDataset highLowData =  ( OHLCDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^1220^^^^^1187^1234^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  >  itemCount; item++ )  {^1206^^^^^1187^1234^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1215^^^^^1187^1234^[ADD] value = highLowData.getHighValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1211^^^^^1187^1234^[ADD] value = intervalXYData.getEndYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1220^1221^1222^^^1187^1234^[ADD] if  ( !Double.isNaN ( value )  )  { maximum = Math.max ( maximum, value ) ; }^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1218^^^^^1187^1234^[ADD] value = dataset.getYValue ( series, item ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double uvalue;^1207^^^^^1187^1234^[REPLACE] double value;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int itemCount = dataset.getItemCount ( seriesCount ) ;^1205^^^^^1187^1234^[REPLACE] int itemCount = dataset.getItemCount ( series ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 3; item < itemCount; item++ )  {^1206^^^^^1187^1234^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1209^1210^^^^1187^1234^[ADD] IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int seriesCount = 0; item  >=  seriesCount; item++ )  {^1206^^^^^1187^1234^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1221^^^^^1187^1234^[ADD] maximum = Math.max ( maximum, value ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return new Double ( info.getRangeLowerBound ( true )  ) ;^1196^^^^^1187^1234^[REPLACE] return new Double ( info.getRangeUpperBound ( true )  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return this;^1226^^^^^1187^1234^[REPLACE] return null;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return  new Double ( data[r][c] )  ;^1229^^^^^1187^1234^[REPLACE] return new Double ( maximum ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^1202^^^^^1187^1234^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1203^^^^^1187^1234^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int series = 0 >>> 0; series < seriesCount; series++ )  {^1204^^^^^1187^1234^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < itemCount; item++ )  {^1206^^^^^1187^1234^[REPLACE] for  ( int item = 0; item < itemCount; item++ )  {^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[ADD]^^1206^1207^1208^1209^1210^1187^1234^[ADD] for  ( int item = 0; item < itemCount; item++ )  { double value; if  ( dataset instanceof IntervalXYDataset )  { IntervalXYDataset intervalXYData =  ( IntervalXYDataset )  dataset;^[METHOD] findMaximumRangeValue [TYPE] Number [PARAMETER] XYDataset dataset [CLASS] DatasetUtilities   [TYPE]  OHLCDataset highLowData  [TYPE]  boolean false  true  [TYPE]  double maximum  value  [TYPE]  IntervalXYDataset intervalXYData  [TYPE]  XYDataset dataset  [TYPE]  RangeInfo info  [TYPE]  int item  itemCount  series  seriesCount 
[REPLACE]^return findStackedRangeBounds ( dataset, 1.0d ) ;^1245^^^^^1244^1246^[REPLACE] return findStackedRangeBounds ( dataset, 0.0 ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  CategoryDataset dataset 
[REPLACE]^if  ( dataset != this  )  {^1259^^^^^1258^1291^[REPLACE] if  ( dataset == null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1259^1260^1261^^^1258^1291^[ADD] if  ( dataset == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^return ;^1260^^^^^1258^1291^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1260^^^^^1258^1291^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Range result = this;^1262^^^^^1258^1291^[REPLACE] Range result = null;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double maximum = Double.NEGATIVE_INFINITY;^1263^^^^^1258^1291^[REPLACE] double minimum = Double.POSITIVE_INFINITY;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double minimum = Double.POSITIVE_INFINITY;^1264^^^^^1258^1291^[REPLACE] double maximum = Double.NEGATIVE_INFINITY;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int categoryCount = dataset.getRowCount (  ) ;^1265^^^^^1258^1291^[REPLACE] int categoryCount = dataset.getColumnCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == this  )  {^1272^^^^^1258^1291^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  >=  0.0 )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^negative = positive + positive;^1275^^^^^1258^1291^[REPLACE] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (positive  ==  0.0 )  {^1277^^^^^1258^1291^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^negative = negative + value;^1277^1278^^1280^^1258^1291^[ADD] if  ( value < 0.0 )  { negative = negative + value; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive = negative + negative;^1278^^^^^1258^1291^[REPLACE] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1278^^^^^1258^1291^[ADD] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive =negative + value;^1275^^^^^1258^1291^[REPLACE] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^negative =positive + value;^1278^^^^^1258^1291^[REPLACE] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double value = n.doubleValue (  ) ;^1273^^^^^1258^1291^[REPLACE] double value = number.doubleValue (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1273^^^^^1258^1291^[ADD] double value = number.doubleValue (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  == positive )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive = positive +negative;^1275^^^^^1258^1291^[REPLACE] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  >  0.0D )  {^1277^^^^^1258^1291^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^negative = negative  &&  value;^1278^^^^^1258^1291^[REPLACE] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  >=  categoryCount; item++ )  {^1266^^^^^1258^1291^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == this )  {^1272^^^^^1258^1291^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^double value = number.doubleValue (  ) ;positive = positive + value;^1272^1273^1274^1275^1276^1258^1291^[ADD] if  ( number != null )  { double value = number.doubleValue (  ) ; if  ( value > 0.0 )  { positive = positive + value; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  <  0.0d )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  >=  0.0D )  {^1277^^^^^1258^1291^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1277^1278^^1280^^1258^1291^[ADD] if  ( value < 0.0 )  { negative = negative + value; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^negative = negative + value; ;^1275^^^^^1258^1291^[REPLACE] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive = negative + positive;^1278^^^^^1258^1291^[REPLACE] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (positive  !=  0.0D )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  == positive )  {^1277^^^^^1258^1291^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^negative = negative +positive;^1278^^^^^1258^1291^[REPLACE] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >= item; series++ )  {^1270^^^^^1258^1291^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == null )  {^1272^^^^^1258^1291^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (positive  <=  0.0 )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1274^1275^1276^^^1258^1291^[ADD] if  ( value > 0.0 )  { positive = positive + value; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive = positive  <=  value;^1275^^^^^1258^1291^[REPLACE] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive = positive + value; ;^1278^^^^^1258^1291^[REPLACE] negative = negative + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1275^^^^^1258^1291^[ADD] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  >  0.0 )  {^1277^^^^^1258^1291^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^positive = positive  !=  value;^1275^^^^^1258^1291^[REPLACE] positive = positive + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( series, seriesCount ) ;^1271^^^^^1258^1291^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1271^^^^^1258^1291^[ADD] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^1283^^^^^1258^1291^[REPLACE] minimum = Math.min ( minimum, negative ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1284^^^^^1258^1291^[REPLACE] maximum = Math.max ( maximum, positive ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double positive = value;^1267^^^^^1258^1291^[REPLACE] double positive = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1267^^^^^1258^1291^[ADD] double positive = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double negative = value;^1268^^^^^1258^1291^[REPLACE] double negative = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getColumnCount (  )  ;^1269^^^^^1258^1291^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0 >> 4; series < seriesCount; series++ )  {^1270^^^^^1258^1291^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( seriesCount, item ) ;^1271^^^^^1258^1291^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  <=  seriesCount; series++ )  {^1270^^^^^1258^1291^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  <  0.0 )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  <= positive )  {^1277^^^^^1258^1291^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( negative  !=  4.0d )  {^1274^^^^^1258^1291^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1283^^^^^1258^1291^[ADD] minimum = Math.min ( minimum, negative ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0 + 3; item < categoryCount; item++ )  {^1266^^^^^1258^1291^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1266^1267^1268^1269^^1258^1291^[ADD] for  ( int item = 0; item < categoryCount; item++ )  { double positive = base; double negative = base; int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1268^1269^^^^1258^1291^[ADD] double negative = base; int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1269^^^^^1258^1291^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1269^^^^^1258^1291^[ADD] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0 / 3; series < seriesCount; series++ )  {^1270^^^^^1258^1291^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1270^1271^1272^1273^^1258^1291^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { Number number = dataset.getValue ( series, item ) ; if  ( number != null )  { double value = number.doubleValue (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (value  <  maximum )  {^1286^^^^^1258^1291^[REPLACE] if  ( minimum <= maximum )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1286^1287^1288^^^1258^1291^[ADD] if  ( minimum <= maximum )  { result = new Range ( minimum, maximum ) ; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^result =  new Range ( value, maximum ) ;^1287^^^^^1258^1291^[REPLACE] result = new Range ( minimum, maximum ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1287^^^^^1258^1291^[ADD] result = new Range ( minimum, maximum ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^result =   new Range ( minimum[j], maximum[j] )  ;^1287^^^^^1258^1291^[REPLACE] result = new Range ( minimum, maximum ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^return total;^1289^^^^^1258^1291^[REPLACE] return result;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  [TYPE]  double base  maximum  minimum  negative  positive  value  [TYPE]  CategoryDataset dataset  [TYPE]  Range result  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Range result = false;^1306^^^^^1304^1355^[REPLACE] Range result = null;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( dataset == true )  {^1307^^^^^1304^1355^[REPLACE] if  ( dataset != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( number == null )  {^1329^^^^^1304^1355^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1329^1330^1331^1332^1333^1304^1355^[ADD] if  ( number != null )  { double value = number.doubleValue (  ) ; if  ( value > 0.0 )  { positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  !=  0.0 )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  |  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  !=  0.0 )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  ==  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  &  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  ||  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^double value = n.doubleValue (  ) ;^1330^^^^^1304^1355^[REPLACE] double value = number.doubleValue (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  ==  0.0 )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1331^1332^1333^1334^^1304^1355^[ADD] if  ( value > 0.0 )  { positive[groupIndex[series]] = positive[groupIndex[series]] + value; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  >=  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  !=  4.0d )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  !=  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  (seriesCountnt i = 0; i  >=  dataset.getRowCount (  ) ; i++ )  {^1311^^^^^1304^1355^[REPLACE] for  ( int i = 0; i < dataset.getRowCount (  ) ; i++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^groupIndex[i] ;^1312^1313^1314^^^1304^1355^[REPLACE] groupIndex[i] = map.getGroupIndex ( map.getGroup ( dataset.getRowKey ( i )  ) ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int item = 1; item  >  categoryCount; item++ )  {^1323^^^^^1304^1355^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^double value = number.doubleValue (  ) ;= positive[groupIndex[series]] + value;^1329^1330^1331^1332^1333^1304^1355^[ADD] if  ( number != null )  { double value = number.doubleValue (  ) ; if  ( value > 0.0 )  { positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  ==  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  >  0.0 )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  <=  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1336^1337^^^^1304^1355^[ADD] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  &&  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  |  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  <=  0.0 )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1332^1333^^^^1304^1355^[ADD] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  != item; series++ )  {^1327^^^^^1304^1355^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  ||  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  ==  0.0 )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1335^1336^1337^^1339^1304^1355^[ADD] if  ( value < 0.0 )  { negative[groupIndex[series]] = negative[groupIndex[series]] + value; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  <  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1330^^^^^1304^1355^[ADD] double value = number.doubleValue (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  <  0.0 )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  <  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  <=  2.0d )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( series, seriesCount ) ;^1328^^^^^1304^1355^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( intcategoryCount = 0; g  >  groupCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^minimum = Math.min ( minimum, lvalue ) ; ;^1343^^^^^1304^1355^[REPLACE] minimum[g] = Math.min ( minimum[g], negative[g] ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^minimum[g] = Math.min ( minimum[g], negative[g] ) ; ;^1344^^^^^1304^1355^[REPLACE] maximum[g] = Math.max ( maximum[g], positive[g] ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  <=  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^double[] negative = new double[groupCount];^1324^^^^^1304^1355^[REPLACE] double[] positive = new double[groupCount];^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^double[] positive = new double[groupCount];^1325^^^^^1304^1355^[REPLACE] double[] negative = new double[groupCount];^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1326^^^^^1304^1355^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int series = 3; series < seriesCount; series++ )  {^1327^^^^^1304^1355^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^Number number = dataset .getValue ( null )  ;^1328^^^^^1304^1355^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int g = 2; g < groupCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1342^1343^1344^1345^^1304^1355^[ADD] for  ( int g = 0; g < groupCount; g++ )  { minimum[g] = Math.min ( minimum[g], negative[g] ) ; maximum[g] = Math.max ( maximum[g], positive[g] ) ; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  <= item; series++ )  {^1327^^^^^1304^1355^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( number == this  )  {^1329^^^^^1304^1355^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  ^  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  !=  2.0d )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int g = 0; g  != categoryCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1343^1344^^^^1304^1355^[ADD] minimum[g] = Math.min ( minimum[g], negative[g] ) ; maximum[g] = Math.max ( maximum[g], positive[g] ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int j = 0 * 2; j  <=  groupCount; j++ )  {^1347^^^^^1304^1355^[REPLACE] for  ( int j = 0; j < groupCount; j++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1347^1348^1349^1350^1351^1304^1355^[ADD] for  ( int j = 0; j < groupCount; j++ )  { result = Range.combine ( result, new Range ( minimum[j], maximum[j] ) ) ; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^result =  Range.combine ( null, new Range ( minimum[j], maximum[j] ) ) ;^1348^1349^1350^^^1304^1355^[REPLACE] result = Range.combine ( result, new Range ( minimum[j], maximum[j] ) ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^groupIndex[i]  =  groupIndex[i] ;^1312^1313^1314^^^1304^1355^[REPLACE] groupIndex[i] = map.getGroupIndex ( map.getGroup ( dataset.getRowKey ( i )  ) ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  >  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  >=  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^result =  new Range ( minimum, maximum )  ) ;^1348^1349^1350^^^1304^1355^[REPLACE] result = Range.combine ( result, new Range ( minimum[j], maximum[j] ) ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int[] groupIndex = new int[dataset.getColumnCount (  ) ];^1310^^^^^1304^1355^[REPLACE] int[] groupIndex = new int[dataset.getRowCount (  ) ];^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int i = 4; i < dataset.getRowCount (  ) ; i++ )  {^1311^^^^^1304^1355^[REPLACE] for  ( int i = 0; i < dataset.getRowCount (  ) ; i++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1311^1312^1313^1314^1315^1304^1355^[ADD] for  ( int i = 0; i < dataset.getRowCount (  ) ; i++ )  { groupIndex[i] = map.getGroupIndex ( map.getGroup ( dataset.getRowKey ( i )  ) ) ; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int groupCount = map.getGroupIndex (  ) ;^1318^^^^^1304^1355^[REPLACE] int groupCount = map.getGroupCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^double[] maximum = new double[groupCount];^1319^^^^^1304^1355^[REPLACE] double[] minimum = new double[groupCount];^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^double[] minimum = new double[groupCount];^1320^^^^^1304^1355^[REPLACE] double[] maximum = new double[groupCount];^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int categoryCount = dataset.getRowCount (  ) ;^1322^^^^^1304^1355^[REPLACE] int categoryCount = dataset.getColumnCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < categoryCount; item++ )  {^1323^^^^^1304^1355^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getColumnCount (  )  ;^1326^^^^^1304^1355^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int series = 1; series < seriesCount; series++ )  {^1327^^^^^1304^1355^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^Number number = dataset .getValue ( this )  ;^1328^^^^^1304^1355^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int g = 1; g < groupCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int j = 0 >>> 4; j < groupCount; j++ )  {^1347^^^^^1304^1355^[REPLACE] for  ( int j = 0; j < groupCount; j++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  >=  0.0 )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  >=  0.0 )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  <=  0.0 )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  (seriesCountnt i = 0; i  <=  dataset.getRowKey (  ) ; i++ )  {^1311^^^^^1304^1355^[REPLACE] for  ( int i = 0; i < dataset.getRowCount (  ) ; i++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  == seriesCount; item++ )  {^1323^^^^^1304^1355^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1323^1324^1325^1326^^1304^1355^[ADD] for  ( int item = 0; item < categoryCount; item++ )  { double[] positive = new double[groupCount]; double[] negative = new double[groupCount]; int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( number == true )  {^1329^^^^^1304^1355^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  ==  1.0d )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  <=  0.0d )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  >  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int series = 0 << 3; series  ==  seriesCount; series++ )  {^1327^^^^^1304^1355^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( number == this )  {^1329^^^^^1304^1355^[REPLACE] if  ( number != null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  ==  0.0D )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  >=  3.0d )  {^1335^^^^^1304^1355^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  !=  0.0D )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^negative[groupIndex[series]] = negative[groupIndex[series]]  &  value;^1336^1337^^^^1304^1355^[REPLACE] negative[groupIndex[series]] = negative[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( seriesCount, item ) ;^1328^^^^^1304^1355^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1328^^^^^1304^1355^[ADD] Number number = dataset.getValue ( series, item ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int g = 0 % 4; g  ==  groupCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1344^^^^^1304^1355^[ADD] maximum[g] = Math.max ( maximum[g], positive[g] ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1326^^^^^1304^1355^[ADD] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int g = 0 - 0; g < groupCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( intitem = 0; series  !=  seriesCount; series++ )  {^1327^^^^^1304^1355^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  <  1.0d )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^if  ( value  ==  3.0d )  {^1331^^^^^1304^1355^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^positive[groupIndex[series]] = positive[groupIndex[series]]  !=  value;^1332^1333^^^^1304^1355^[REPLACE] positive[groupIndex[series]] = positive[groupIndex[series]] + value;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int g = 0; g  ==  groupCount; g++ )  {^1342^^^^^1304^1355^[REPLACE] for  ( int g = 0; g < groupCount; g++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int j = 2; j  ==  groupCount; j++ )  {^1347^^^^^1304^1355^[REPLACE] for  ( int j = 0; j < groupCount; j++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1348^1349^1350^^^1304^1355^[ADD] result = Range.combine ( result, new Range ( minimum[j], maximum[j] ) ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[ADD]^^1343^^^^^1304^1355^[ADD] minimum[g] = Math.min ( minimum[g], negative[g] ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int[] groupIndex = new int[dataset .getColumnCount (  )  ];^1310^^^^^1304^1355^[REPLACE] int[] groupIndex = new int[dataset.getRowCount (  ) ];^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int i = 2; i < dataset.getRowCount (  ) ; i++ )  {^1311^^^^^1304^1355^[REPLACE] for  ( int i = 0; i < dataset.getRowCount (  ) ; i++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^int categoryCount = dataset .getColumnKey ( seriesCount )  ;^1322^^^^^1304^1355^[REPLACE] int categoryCount = dataset.getColumnCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int item = 0L; item < categoryCount; item++ )  {^1323^^^^^1304^1355^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^for  ( int j = 0 - 1; j < groupCount; j++ )  {^1347^^^^^1304^1355^[REPLACE] for  ( int j = 0; j < groupCount; j++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^return total;^1353^^^^^1304^1355^[REPLACE] return result;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset KeyToGroupMap map [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  double[] maximum  minimum  negative  positive  [TYPE]  Number number  [TYPE]  double value  [TYPE]  CategoryDataset dataset  [TYPE]  KeyToGroupMap map  [TYPE]  int[] groupIndex  [TYPE]  Range result  [TYPE]  int categoryCount  g  groupCount  i  item  j  series  seriesCount 
[REPLACE]^Number result = false;^1367^^^^^1365^1392^[REPLACE] Number result = null;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1367^^^^^1365^1392^[ADD] Number result = null;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( dataset == false )  {^1368^^^^^1365^1392^[REPLACE] if  ( dataset != null )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == null )  {^1377^^^^^1365^1392^[REPLACE] if  ( number != null )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (minimum  >  0.0 )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  &&  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  >=  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1380^^^^^1365^1392^[ADD] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double value = n.doubleValue (  ) ;^1378^^^^^1365^1392^[REPLACE] double value = number.doubleValue (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (minimum  >=  2.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  <=  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  <=  categoryCount; item++ )  {^1371^^^^^1365^1392^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == this )  {^1377^^^^^1365^1392^[REPLACE] if  ( number != null )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1377^1378^1379^1380^^1365^1392^[ADD] if  ( number != null )  { double value = number.doubleValue (  ) ; if  ( value < 0.0 )  { total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  <=  4.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  ||  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  != minimum )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >=  seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (minimum  <=  4.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  !=  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  |  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (minimum  <=  0.0 )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  >  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  ^  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset .getValue ( null )  ;^1376^^^^^1365^1392^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1385^^^^^1365^1392^[REPLACE] minimum = Math.min ( minimum, total ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double total = 2.0d;^1372^^^^^1365^1392^[REPLACE] double total = 0.0;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getRowCount (  ) ;^1374^^^^^1365^1392^[REPLACE] int seriesCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1374^^^^^1365^1392^[ADD] int seriesCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 4; series < seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( seriesCount, item ) ;^1376^^^^^1365^1392^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >  seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == true )  {^1377^^^^^1365^1392^[REPLACE] if  ( number != null )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  ==  1.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  <  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  ==  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  > minimum )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( series, seriesCount ) ;^1376^^^^^1365^1392^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^result = new Double ( maximum ) ; ;^1388^^^^^1365^1392^[REPLACE] result = new Double ( minimum ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double minimum = 0.0D;^1369^^^^^1365^1392^[REPLACE] double minimum = 0.0;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int categoryCount = dataset.getColumnCount (  ) ;^1370^^^^^1365^1392^[REPLACE] int categoryCount = dataset.getRowCount (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1370^^^^^1365^1392^[ADD] int categoryCount = dataset.getRowCount (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 2; item < categoryCount; item++ )  {^1371^^^^^1365^1392^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1372^^^^^1365^1392^[ADD] double total = 0.0;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0 + 0; series < seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1378^^^^^1365^1392^[ADD] double value = number.doubleValue (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( minimum  !=  0.0 )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (minimum  >=  1.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  !=  categoryCount; item++ )  {^1371^^^^^1365^1392^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1371^1372^^1374^^1365^1392^[ADD] for  ( int item = 0; item < categoryCount; item++ )  { double total = 0.0; int seriesCount = dataset.getColumnCount (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  >=  1.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^total = total + value;^1379^1380^^1382^^1365^1392^[ADD] if  ( value < 0.0 )  { total = total + value; }^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  &  value;^1380^^^^^1365^1392^[REPLACE] total = total + value;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (minimum  >  1.0d )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0 * 2; series  <=  series; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  !=  0.0 )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1376^^^^^1365^1392^[ADD] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double total = 0.0D;^1372^^^^^1365^1392^[REPLACE] double total = 0.0;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 1; series < seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( intitem = 0; series  >=  seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( minimum  >  0.0 )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  == minimum )  {^1379^^^^^1365^1392^[REPLACE] if  ( value < 0.0 )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1379^1380^^1382^^1365^1392^[ADD] if  ( value < 0.0 )  { total = total + value; }^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1388^^^^^1365^1392^[ADD] result = new Double ( minimum ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double minimum = 1.0d;^1369^^^^^1365^1392^[REPLACE] double minimum = 0.0;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int categoryCount = dataset .getColumnCount (  )  ;^1370^^^^^1365^1392^[REPLACE] int categoryCount = dataset.getRowCount (  ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 4; item < categoryCount; item++ )  {^1371^^^^^1365^1392^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double total = 1.0d;^1372^^^^^1365^1392^[REPLACE] double total = 0.0;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0L; series < seriesCount; series++ )  {^1375^^^^^1365^1392^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset .getValue ( false )  ;^1376^^^^^1365^1392^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^return total;^1390^^^^^1365^1392^[REPLACE] return result;^[METHOD] findMinimumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double minimum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number result = true;^1404^^^^^1402^1428^[REPLACE] Number result = null;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( dataset == true )  {^1406^^^^^1402^1428^[REPLACE] if  ( dataset != null )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^double maximum = 0.0;int categoryCount = dataset.getColumnCount (  ) ;^1406^1407^1408^1409^1410^1402^1428^[ADD] if  ( dataset != null )  { double maximum = 0.0; int categoryCount = dataset.getColumnCount (  ) ; for  ( int item = 0; item < categoryCount; item++ )  { double total = 0.0;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == this  )  {^1414^^^^^1402^1428^[REPLACE] if  ( number != null )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^double value = number.doubleValue (  ) ;total = total + value;^1414^1415^1416^1417^1418^1402^1428^[ADD] if  ( number != null )  { double value = number.doubleValue (  ) ; if  ( value > 0.0 )  { total = total + value; }^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( maximum  >=  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  <=  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  &&  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1417^^^^^1402^1428^[ADD] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double value = n.doubleValue (  ) ;^1415^^^^^1402^1428^[REPLACE] double value = number.doubleValue (  ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (maximum  !=  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  ==  categoryCount; item++ )  {^1409^^^^^1402^1428^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1409^1410^1411^1412^1413^1402^1428^[ADD] for  ( int item = 0; item < categoryCount; item++ )  { double total = 0.0; int seriesCount = dataset.getRowCount (  ) ; for  ( int series = 0; series < seriesCount; series++ )  { Number number = dataset.getValue ( series, item ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == true )  {^1414^^^^^1402^1428^[REPLACE] if  ( number != null )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  ==  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  |  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  ==  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  <=  1.0d )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  <  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >  seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == null )  {^1414^^^^^1402^1428^[REPLACE] if  ( number != null )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  ^  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  >  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1415^^^^^1402^1428^[ADD] double value = number.doubleValue (  ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (maximum  <  2.0d )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( series, seriesCount ) ;^1413^^^^^1402^1428^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1413^^^^^1402^1428^[ADD] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1421^^^^^1402^1428^[REPLACE] maximum = Math.max ( maximum, total ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1421^^^^^1402^1428^[ADD] maximum = Math.max ( maximum, total ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double total = 4.0d;^1410^^^^^1402^1428^[REPLACE] double total = 0.0;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1411^^^^^1402^1428^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 2; series < seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  !=  seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  <=  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1416^1417^1418^^^1402^1428^[ADD] if  ( value > 0.0 )  { total = total + value; }^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( maximum  ==  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  ||  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^result = new Double ( minimum ) ; ;^1423^^^^^1402^1428^[REPLACE] result = new Double ( maximum ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double maximum = 1.0d;^1407^^^^^1402^1428^[REPLACE] double maximum = 0.0;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int categoryCount = dataset.getRowCount (  ) ;^1408^^^^^1402^1428^[REPLACE] int categoryCount = dataset.getColumnCount (  ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0L; item < categoryCount; item++ )  {^1409^^^^^1402^1428^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double total = 0.0D;^1410^^^^^1402^1428^[REPLACE] double total = 0.0;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 1; series < seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset.getValue ( seriesCount, item ) ;^1413^^^^^1402^1428^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( maximum  <=  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  >=  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  &  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( maximum  <  0.0 )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0; item  <=  categoryCount; item++ )  {^1409^^^^^1402^1428^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( number == false )  {^1414^^^^^1402^1428^[REPLACE] if  ( number != null )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1414^1415^1416^1417^1418^1402^1428^[ADD] if  ( number != null )  { double value = number.doubleValue (  ) ; if  ( value > 0.0 )  { total = total + value; }^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  ==  3.0d )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^total = total  !=  value;^1417^^^^^1402^1428^[REPLACE] total = total + value;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^total = total + value;^1416^1417^1418^^^1402^1428^[ADD] if  ( value > 0.0 )  { total = total + value; }^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 2; series  !=  seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  (maximum  <  1.0d )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^Number number = dataset .getValue ( this )  ;^1413^^^^^1402^1428^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int seriesCount = dataset .getColumnCount (  )  ;^1411^^^^^1402^1428^[REPLACE] int seriesCount = dataset.getRowCount (  ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 0; series  >=  seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^if  ( value  ==  4.0d )  {^1416^^^^^1402^1428^[REPLACE] if  ( value > 0.0 )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^int seriesCount = dataset.getColumnCount (  ) ;^1413^^^^^1402^1428^[REPLACE] Number number = dataset.getValue ( series, item ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double maximum = 3.0d;^1407^^^^^1402^1428^[REPLACE] double maximum = 0.0;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int item = 0 >> 4; item < categoryCount; item++ )  {^1409^^^^^1402^1428^[REPLACE] for  ( int item = 0; item < categoryCount; item++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^double total = 1.0d;^1410^^^^^1402^1428^[REPLACE] double total = 0.0;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^for  ( int series = 3; series < seriesCount; series++ )  {^1412^^^^^1402^1428^[REPLACE] for  ( int series = 0; series < seriesCount; series++ )  {^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[ADD]^^1412^1413^1414^1415^^1402^1428^[ADD] for  ( int series = 0; series < seriesCount; series++ )  { Number number = dataset.getValue ( series, item ) ; if  ( number != null )  { double value = number.doubleValue (  ) ;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^return total;^1426^^^^^1402^1428^[REPLACE] return result;^[METHOD] findMaximumStackedRangeValue [TYPE] Number [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  Number number  result  [TYPE]  double maximum  total  value  [TYPE]  CategoryDataset dataset  [TYPE]  int categoryCount  item  series  seriesCount 
[REPLACE]^return findStackedRangeBounds ( dataset, 4.0d ) ;^1439^^^^^1438^1440^[REPLACE] return findStackedRangeBounds ( dataset, 0.0 ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset 
[REPLACE]^if  ( dataset != this  )  {^1453^^^^^1452^1486^[REPLACE] if  ( dataset == null )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1453^1454^1455^^^1452^1486^[ADD] if  ( dataset == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1454^^^^^1452^1486^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double minimum = positive;^1456^^^^^1452^1486^[REPLACE] double minimum = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double minimum = base;^1457^^^^^1452^1486^[REPLACE] double maximum = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( Double.isNaN ( y )  )  {^1464^^^^^1452^1486^[REPLACE] if  ( !Double.isNaN ( y )  )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1464^1465^1466^1467^^1452^1486^[ADD] if  ( !Double.isNaN ( y )  )  { if  ( y > 0.0 )  { positive += y; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( y  !=  0.0 )  {^1465^^^^^1452^1486^[REPLACE] if  ( y > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^positive += y; ;^1469^^^^^1465^1470^[REPLACE] negative += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^negative += y; ;^1466^^^^^1452^1486^[REPLACE] positive += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^positive += y; ;^1469^^^^^1452^1486^[REPLACE] negative += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1469^^^^^1452^1486^[ADD] negative += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( y  ==  0.0 )  {^1465^^^^^1452^1486^[REPLACE] if  ( y > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  (negative  <=  maximum )  {^1473^^^^^1452^1486^[REPLACE] if  ( positive > maximum )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^maximum =  null;^1474^^^^^1452^1486^[REPLACE] maximum = positive;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  (positive  !=  minimum )  {^1476^^^^^1452^1486^[REPLACE] if  ( negative < minimum )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^minimum =  positive;^1477^^^^^1452^1486^[REPLACE] minimum = negative;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^for  ( int itemNo = 0; itemNo  != seriesNo (  ) ; itemNo++ )  {^1458^^^^^1452^1486^[REPLACE] for  ( int itemNo = 0; itemNo < dataset.getItemCount (  ) ; itemNo++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( y  <=  0.0 )  {^1465^^^^^1452^1486^[REPLACE] if  ( y > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1469^^^^^1465^1470^[ADD] negative += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1466^^^^^1452^1486^[ADD] positive += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( y  >=  0.0 )  {^1465^^^^^1452^1486^[REPLACE] if  ( y > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  (negative  !=  maximum )  {^1473^^^^^1452^1486^[REPLACE] if  ( positive > maximum )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^maximum = positive;^1473^1474^1475^^^1452^1486^[ADD] if  ( positive > maximum )  { maximum = positive; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( negative  >=  minimum )  {^1476^^^^^1452^1486^[REPLACE] if  ( negative < minimum )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^for  ( intitemNo = 0 - 2; seriesNo  !=  itemNo; seriesNo++ )  {^1462^^^^^1452^1486^[REPLACE] for  ( int seriesNo = 0; seriesNo < seriesCount; seriesNo++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double y = dataset.getYValue ( seriesNo, seriesCount ) ;^1463^^^^^1452^1486^[REPLACE] double y = dataset.getYValue ( seriesNo, itemNo ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1463^^^^^1452^1486^[ADD] double y = dataset.getYValue ( seriesNo, itemNo ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^maximum =  negative;^1474^^^^^1452^1486^[REPLACE] maximum = positive;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1477^^^^^1452^1486^[ADD] minimum = negative;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double positive = positive;^1459^^^^^1452^1486^[REPLACE] double positive = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double negative = positive;^1460^^^^^1452^1486^[REPLACE] double negative = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^int seriesCount = dataset.getItemCount (  ) ;^1461^^^^^1452^1486^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^for  ( int seriesNo = 0L; seriesNo < seriesCount; seriesNo++ )  {^1462^^^^^1452^1486^[REPLACE] for  ( int seriesNo = 0; seriesNo < seriesCount; seriesNo++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1462^1463^1464^1465^1466^1452^1486^[ADD] for  ( int seriesNo = 0; seriesNo < seriesCount; seriesNo++ )  { double y = dataset.getYValue ( seriesNo, itemNo ) ; if  ( !Double.isNaN ( y )  )  { if  ( y > 0.0 )  { positive += y;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double y = dataset.getYValue ( seriesCount, itemNo ) ;^1463^^^^^1452^1486^[REPLACE] double y = dataset.getYValue ( seriesNo, itemNo ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^for  ( int seriesNo = 0 << 2; seriesNo  > seriesNo; seriesNo++ )  {^1462^^^^^1452^1486^[REPLACE] for  ( int seriesNo = 0; seriesNo < seriesCount; seriesNo++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^positive += y;^1465^1466^1467^^^1452^1486^[ADD] if  ( y > 0.0 )  { positive += y; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( y  ==  2.0d )  {^1465^^^^^1452^1486^[REPLACE] if  ( y > 0.0 )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1465^1466^1467^^^1452^1486^[ADD] if  ( y > 0.0 )  { positive += y; }^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double y = dataset .getXValue ( seriesNo , seriesCount )  ;^1463^^^^^1452^1486^[REPLACE] double y = dataset.getYValue ( seriesNo, itemNo ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^for  ( int itemNo = 0 - 3; itemNo < dataset.getItemCount (  ) ; itemNo++ )  {^1458^^^^^1452^1486^[REPLACE] for  ( int itemNo = 0; itemNo < dataset.getItemCount (  ) ; itemNo++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1458^1459^1460^1461^^1452^1486^[ADD] for  ( int itemNo = 0; itemNo < dataset.getItemCount (  ) ; itemNo++ )  { double positive = base; double negative = base; int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[ADD]^^1459^^^^^1452^1486^[ADD] double positive = base;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^int seriesCount = dataset .getItemCount (  )  ;^1461^^^^^1452^1486^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^for  ( int seriesNo = 1; seriesNo < seriesCount; seriesNo++ )  {^1462^^^^^1452^1486^[REPLACE] for  ( int seriesNo = 0; seriesNo < seriesCount; seriesNo++ )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double y = dataset.getYValue ( seriesNo, seriesNo ) ;^1463^^^^^1452^1486^[REPLACE] double y = dataset.getYValue ( seriesNo, itemNo ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^if  ( positive  >=  positive )  {^1480^^^^^1452^1486^[REPLACE] if  ( minimum <= maximum )  {^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^return true;^1484^^^^^1480^1485^[REPLACE] return null;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^1481^^^^^1452^1486^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^return false;^1484^^^^^1452^1486^[REPLACE] return null;^[METHOD] findStackedRangeBounds [TYPE] Range [PARAMETER] TableXYDataset dataset double base [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double base  maximum  minimum  negative  positive  y  [TYPE]  int itemNo  seriesCount  seriesNo 
[REPLACE]^double total = 0.0D;^1500^^^^^1499^1509^[REPLACE] double total = 0.0;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^int seriesCount = dataset.getItemCount (  ) ;^1501^^^^^1499^1509^[REPLACE] int seriesCount = dataset.getSeriesCount (  ) ;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^if  ( Double.isNaN ( value )  )  {^1504^^^^^1499^1509^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[ADD]^total = total + value;^1504^1505^1506^^^1499^1509^[ADD] if  ( !Double.isNaN ( value )  )  { total = total + value; }^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^total = total  |  value;^1505^^^^^1499^1509^[REPLACE] total = total + value;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[ADD]^^1505^^^^^1499^1509^[ADD] total = total + value;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^for  ( int s = 0; s  >=  seriesCount; s++ )  {^1502^^^^^1499^1509^[REPLACE] for  ( int s = 0; s < seriesCount; s++ )  {^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^if  (   value    )  {^1504^^^^^1499^1509^[REPLACE] if  ( !Double.isNaN ( value )  )  {^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^total = total  &&  value;^1505^^^^^1499^1509^[REPLACE] total = total + value;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^total = total  &  value;^1505^^^^^1499^1509^[REPLACE] total = total + value;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^double value = dataset.getYValue ( s, seriesCount ) ;^1503^^^^^1499^1509^[REPLACE] double value = dataset.getYValue ( s, item ) ;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^total = total  >  value;^1505^^^^^1499^1509^[REPLACE] total = total + value;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^for  ( int s = 0 - 4; s < seriesCount; s++ )  {^1502^^^^^1499^1509^[REPLACE] for  ( int s = 0; s < seriesCount; s++ )  {^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^double value = dataset.getYValue ( seriesCount, item ) ;^1503^^^^^1499^1509^[REPLACE] double value = dataset.getYValue ( s, item ) ;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[ADD]^^1503^^^^^1499^1509^[ADD] double value = dataset.getYValue ( s, item ) ;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^return totalValue;^1508^^^^^1499^1509^[REPLACE] return total;^[METHOD] calculateStackTotal [TYPE] double [PARAMETER] TableXYDataset dataset int item [CLASS] DatasetUtilities   [TYPE]  boolean false  true  [TYPE]  TableXYDataset dataset  [TYPE]  double total  value  [TYPE]  int item  s  seriesCount 
[REPLACE]^if  ( dataset != null )  {^1523^^^^^1521^1552^[REPLACE] if  ( dataset == null )  {^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^throw new IllegalArgumentException ( "Duplicate items in 'columnKeys'." ;^1524^^^^^1521^1552^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^return ;^1524^^^^^1521^1552^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^boolean allItemsNull = false;^1527^^^^^1521^1552^[REPLACE] boolean allItemsNull = true;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^double minimum = 0.0D;^1529^^^^^1521^1552^[REPLACE] double minimum = 0.0;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^double maximum = 0.0D;^1530^^^^^1521^1552^[REPLACE] double maximum = 0.0;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^if  ( n == null )  {^1536^^^^^1521^1552^[REPLACE] if  ( n != null )  {^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^allItemsNull = true;^1537^^^^^1521^1552^[REPLACE] allItemsNull = false;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^runningTotal =minimum + value;^1539^^^^^1521^1552^[REPLACE] runningTotal = runningTotal + value;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1540^^^^^1521^1552^[REPLACE] minimum = Math.min ( minimum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^minimum = Math.min ( minimum, runningTotal ) ; ;^1541^^^^^1521^1552^[REPLACE] maximum = Math.max ( maximum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1541^^^^^1521^1552^[ADD] maximum = Math.max ( maximum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^double value = number.doubleValue (  ) ;^1538^^^^^1521^1552^[REPLACE] double value = n.doubleValue (  ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^for  ( int row = 4; row  !=  dataset.getRowCount (  ) ; row++ )  {^1531^^^^^1521^1552^[REPLACE] for  ( int row = 0; row < dataset.getRowCount (  ) ; row++ )  {^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^for  ( int column = 0; column  ==  dataset.getColumnCount (  )  - 1;^1533^^^^^1521^1552^[REPLACE] for  ( int column = 0; column < dataset.getColumnCount (  )  - 1;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1533^1534^1535^1536^1537^1521^1552^[ADD] for  ( int column = 0; column < dataset.getColumnCount (  )  - 1; column++ )  { Number n = dataset.getValue ( row, column ) ; if  ( n != null )  { allItemsNull = false;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^if  ( n == null )  {^1536^^^^^1533^1543^[REPLACE] if  ( n != null )  {^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^allItemsNull = true;^1537^^^^^1533^1543^[REPLACE] allItemsNull = false;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1537^^^^^1533^1543^[ADD] allItemsNull = false;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^runningTotal =minimum + value;^1539^^^^^1533^1543^[REPLACE] runningTotal = runningTotal + value;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^maximum = Math.max ( maximum, runningTotal ) ; ;^1540^^^^^1533^1543^[REPLACE] minimum = Math.min ( minimum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^minimum = Math.min ( minimum, runningTotal ) ; ;^1541^^^^^1533^1543^[REPLACE] maximum = Math.max ( maximum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1541^^^^^1533^1543^[ADD] maximum = Math.max ( maximum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^double value = number.doubleValue (  ) ;^1538^^^^^1533^1543^[REPLACE] double value = n.doubleValue (  ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^runningTotal = runningTotal +minimum;^1539^^^^^1533^1543^[REPLACE] runningTotal = runningTotal + value;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1540^1541^^^^1533^1543^[ADD] minimum = Math.min ( minimum, runningTotal ) ; maximum = Math.max ( maximum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^Number n = dataset.getValue ( row, row ) ;^1535^^^^^1533^1543^[REPLACE] Number n = dataset.getValue ( row, column ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^runningTotal = runningTotal + value;^1538^1539^^^^1533^1543^[ADD] double value = n.doubleValue (  ) ; runningTotal = runningTotal + value;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1537^^^^^1521^1552^[ADD] allItemsNull = false;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^maximum = Math.max ( maximum, runningTotal ) ;^1540^1541^^^^1521^1552^[ADD] minimum = Math.min ( minimum, runningTotal ) ; maximum = Math.max ( maximum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^double runningTotal = 2.0d;^1532^^^^^1521^1552^[REPLACE] double runningTotal = 0.0;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^for  ( int column = 4; column < dataset.getColumnCount (  )  - 1;^1533^^^^^1521^1552^[REPLACE] for  ( int column = 0; column < dataset.getColumnCount (  )  - 1;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^Number n = dataset .getValue ( true )  ;^1535^^^^^1521^1552^[REPLACE] Number n = dataset.getValue ( row, column ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^for  ( int column = 4; column  !=  dataset.getColumnKey (  )  - 1;^1533^^^^^1521^1552^[REPLACE] for  ( int column = 0; column < dataset.getColumnCount (  )  - 1;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1539^^^^^1533^1543^[ADD] runningTotal = runningTotal + value;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1540^^^^^1533^1543^[ADD] minimum = Math.min ( minimum, runningTotal ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1535^^^^^1533^1543^[ADD] Number n = dataset.getValue ( row, column ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^double value = n.doubleValue (  ) ;^1537^1538^^^^1521^1552^[ADD] allItemsNull = false; double value = n.doubleValue (  ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^minimum = runningTotal + minimum;^1539^^^^^1521^1552^[REPLACE] runningTotal = runningTotal + value;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^for  ( int row = 4; row < dataset.getRowCount (  ) ; row++ )  {^1531^^^^^1521^1552^[REPLACE] for  ( int row = 0; row < dataset.getRowCount (  ) ; row++ )  {^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^double runningTotal = 0.0D;^1532^^^^^1521^1552^[REPLACE] double runningTotal = 0.0;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1532^1533^^^^1521^1552^[ADD] double runningTotal = 0.0; for  ( int column = 0; column < dataset.getColumnCount (  )  - 1;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^for  ( int column = 3; column < dataset.getColumnCount (  )  - 1;^1533^^^^^1521^1552^[REPLACE] for  ( int column = 0; column < dataset.getColumnCount (  )  - 1;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^Number n = dataset.getValue ( column, column ) ;^1535^^^^^1521^1552^[REPLACE] Number n = dataset.getValue ( row, column ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[ADD]^^1538^^^^^1521^1552^[ADD] double value = n.doubleValue (  ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^if  ( allItemsNull )  {^1545^^^^^1521^1552^[REPLACE] if  ( !allItemsNull )  {^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^return this;^1549^^^^^1545^1550^[REPLACE] return null;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^return  new Range ( minimum[j], maximum[j] )  ;^1546^^^^^1521^1552^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^return  new Range ( value[j], maximum[j] )  ;^1546^^^^^1521^1552^[REPLACE] return new Range ( minimum, maximum ) ;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
[REPLACE]^return true;^1549^^^^^1521^1552^[REPLACE] return null;^[METHOD] findCumulativeRangeBounds [TYPE] Range [PARAMETER] CategoryDataset dataset [CLASS] DatasetUtilities   [TYPE]  boolean allItemsNull  false  true  [TYPE]  Number n  [TYPE]  double maximum  minimum  runningTotal  value  [TYPE]  CategoryDataset dataset  [TYPE]  int column  row 
