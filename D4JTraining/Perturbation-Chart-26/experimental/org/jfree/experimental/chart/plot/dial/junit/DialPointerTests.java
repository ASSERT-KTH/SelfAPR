[REPLACE]^assertEquals ( h1, h2 ) ;^78^^^^^77^79^[REPLACE] super ( name ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^DialPointer i1L = new DialPointer.Pin ( 1L ) ;^85^^^^^84^94^[REPLACE] DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[ADD]^^85^^^^^84^94^[ADD] DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^DialPointer i2 = new DialPointer.Pin ( 3 ) ;^86^^^^^84^94^[REPLACE] DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[ADD]^^86^87^^^^84^94^[ADD] DialPointer i2 = new DialPointer.Pin ( 1 ) ; assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^87^^^^^84^94^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^i2 = new DialPointer.Pin ( 2 ) ; ;^90^^^^^84^94^[REPLACE] i1 = new DialPointer.Pin ( 2 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[ADD]^^90^91^^^^84^94^[ADD] i1 = new DialPointer.Pin ( 2 ) ; assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^91^^^^^84^94^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[ADD]^^91^^^^^84^94^[ADD] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^i1 = new DialPointer.Pin ( 2 ) ; ;^92^^^^^84^94^[REPLACE] i2 = new DialPointer.Pin ( 2 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^93^^^^^84^94^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[ADD]^^93^^^^^84^94^[ADD] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2 
[REPLACE]^DialPointer i4 = new DialPointer.Pin ( 4 ) ;^100^^^^^99^106^[REPLACE] DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[ADD]^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^100^101^^^^99^106^[ADD] DialPointer i1 = new DialPointer.Pin ( 1 ) ; DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[REPLACE]^DialPointer i2 = new DialPointer.Pin ( 4 ) ;^101^^^^^99^106^[REPLACE] DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^102^^^^^99^106^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[REPLACE]^int h1 = i2.hashCode (  ) ;^103^^^^^99^106^[REPLACE] int h1 = i1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[REPLACE]^int h2 = i1.hashCode (  ) ;^104^^^^^99^106^[REPLACE] int h2 = i2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[ADD]^^104^^^^^99^106^[ADD] int h2 = i2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[REPLACE]^assertEquals ( i1, i2 ) ;^105^^^^^99^106^[REPLACE] assertEquals ( h1, h2 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  int h1  h2 
[REPLACE]^DialPointer i2 = new DialPointer.Pin ( 2 ) ;^112^^^^^111^125^[REPLACE] DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[ADD]^^112^113^^^^111^125^[ADD] DialPointer i1 = new DialPointer.Pin ( 1 ) ; DialPointer i2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^DialPointer i2 = this;^113^^^^^111^125^[REPLACE] DialPointer i2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[ADD]^i2 =  ( DialPointer )  i1.clone (  ) ;^114^115^116^^^111^125^[ADD] try { i2 =  ( DialPointer )  i1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^i2 =  ( DialPointer )  in.readObject (  ) ; ;^115^^^^^111^125^[REPLACE] i2 =  ( DialPointer )  i1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[ADD]^^115^^^^^111^125^[ADD] i2 =  ( DialPointer )  i1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[ADD]^^117^118^^^^111^125^[ADD] catch  ( CloneNotSupportedException e )  { e.printStackTrace (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1  ==  i2 ) ;^120^^^^^111^125^[REPLACE] assertTrue ( i1 != i2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[ADD]^^120^^^^^111^125^[ADD] assertTrue ( i1 != i2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1.getClass (  )   &&  i2.getClass (  )  ) ;^121^^^^^111^125^[REPLACE] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i2.getClass (  )  == i2.getClass (  )  ) ;^121^^^^^111^125^[REPLACE] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[ADD]^^121^^^^^111^125^[ADD] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1.getClass (  )  == i1.getClass (  )  ) ;^121^^^^^111^125^[REPLACE] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^122^^^^^111^125^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^122^^^^^111^125^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  DialPointer i1  i2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^DialPointer i2 = new DialPointer.Pin ( 2 ) ;^133^^^^^131^153^[REPLACE] DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[ADD]^^133^^^^^131^153^[ADD] DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[REPLACE]^DialPointer i2 = this;^134^^^^^131^153^[REPLACE] DialPointer i2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( i1 ) ;out.close (  ) ;^136^137^138^139^140^131^153^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( i1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[REPLACE]^i2 =  ( DialPointer )  i1.clone (  ) ; ;^144^^^^^131^153^[REPLACE] i2 =  ( DialPointer )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^137^^^^^131^153^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^138^^^^^131^153^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^142^143^^^^131^153^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
[REPLACE]^assertEquals ( h1, h2 ) ;^150^^^^^131^153^[REPLACE] assertEquals ( i1, i2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialPointerTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  DialPointer i1  i2  [TYPE]  Exception e 
