[REPLACE]^i2.setRadius ( 0.77 ) ;^86^^^^^85^87^[REPLACE] super ( name ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] DialValueIndicatorTests   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^DialValueIndicator i1 = new DialValueIndicator ( 4, "Label" ) ;^93^^^^^92^180^[REPLACE] DialValueIndicator i1 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^93^^^^^92^180^[ADD] DialValueIndicator i1 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^DialValueIndicator i2 = new DialValueIndicator ( 1, "Label" ) ;^94^^^^^92^180^[REPLACE] DialValueIndicator i2 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^assertTrue ( i1.equals ( i2 )  ) ;^94^95^^^^92^180^[ADD] DialValueIndicator i2 = new DialValueIndicator ( 0, "Label" ) ; assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^95^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setDatasetIndex ( 0 ) ;^98^^^^^92^180^[REPLACE] i1.setDatasetIndex ( 99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^99^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1 .getClass (  )   ) ;^99^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setDatasetIndex ( 99 % 3 ) ;^100^^^^^92^180^[REPLACE] i2.setDatasetIndex ( 99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^101^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^101^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setAngle ( 1 ) ;^104^^^^^92^180^[REPLACE] i1.setAngle ( 43 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^105^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^105^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setAngle ( 29 ) ;^106^^^^^92^180^[REPLACE] i2.setAngle ( 43 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^107^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^107^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setRadius ( 0.0d ) ;^110^^^^^92^180^[REPLACE] i1.setRadius ( 0.77 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^111^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1 .getClass (  )   ) ;^111^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setRadius ( 0.77D ) ;^112^^^^^92^180^[REPLACE] i2.setRadius ( 0.77 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^113^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1 .setValueAnchor (  )  ;^116^^^^^92^180^[REPLACE] i1.setFrameAnchor ( RectangleAnchor.TOP_LEFT ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^116^117^^^^92^180^[ADD] i1.setFrameAnchor ( RectangleAnchor.TOP_LEFT ) ; assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^117^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^117^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setRadius ( RectangleAnchor.TOP_LEFT ) ;^118^^^^^92^180^[REPLACE] i2.setFrameAnchor ( RectangleAnchor.TOP_LEFT ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^119^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^119^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setFont ( new Double ( 0.0d )  ) ;^122^^^^^92^180^[REPLACE] i1.setTemplateValue ( new Double ( 1.23 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^123^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^123^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setFont ( new Double ( 1.23D )  ) ;^124^^^^^92^180^[REPLACE] i2.setTemplateValue ( new Double ( 1.23 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^124^^^^^92^180^[ADD] i2.setTemplateValue ( new Double ( 1.23 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^125^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^125^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setPaint ( new Font ( "Dialog", Font.PLAIN, 7 )  ) ;^128^^^^^92^180^[REPLACE] i1.setFont ( new Font ( "Dialog", Font.PLAIN, 7 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^129^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^129^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setPaint ( new Font ( "Dialog", Font.PLAIN, 7 )  ) ;^130^^^^^92^180^[REPLACE] i2.setFont ( new Font ( "Dialog", Font.PLAIN, 7 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REMOVE]^i2.setDatasetIndex ( 99 ) ;^130^^^^^92^180^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^131^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^131^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1 .setFont ( true )  ;^134^135^^^^92^180^[REPLACE] i1.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^136^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^136^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^137^138^^^^92^180^[REPLACE] i2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^137^138^^^^92^180^[ADD] i2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^139^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^142^143^^^^92^180^[REPLACE] i1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^144^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^144^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^145^146^^^^92^180^[REPLACE] i2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^147^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^147^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setOutlinePaint ( new BasicStroke ( 1.1f )  ) ;^150^^^^^92^180^[REPLACE] i1.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^151^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REMOVE]^i2.setDatasetIndex ( 99 ) ;^151^^^^^92^180^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1 .getClass (  )   ) ;^151^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2 .setOutlinePaint ( this )  ;^152^^^^^92^180^[REPLACE] i2.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^153^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^153^^^^^92^180^[ADD] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REMOVE]^i2.setDatasetIndex ( 99 ) ;^153^^^^^92^180^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1 .setOutlineStroke ( this )  ;^156^157^^^^92^180^[REPLACE] i1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^158^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^158^^^^^92^180^[ADD] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1 .getClass (  )   ) ;^158^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^159^160^^^^92^180^[REPLACE] i2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^161^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^161^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^161^^^^^92^180^[ADD] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i3.setInsets ( new RectangleInsets ( 3, 2, 3, 4 )  ) ;^164^^^^^92^180^[REPLACE] i1.setInsets ( new RectangleInsets ( 1, 2, 3, 4 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^165^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^165^^^^^92^180^[ADD] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2.setPaint ( new RectangleInsets ( 4, 2, 3, 4 )  ) ;^166^^^^^92^180^[REPLACE] i2.setInsets ( new RectangleInsets ( 1, 2, 3, 4 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[ADD]^^166^^^^^92^180^[ADD] i2.setInsets ( new RectangleInsets ( 1, 2, 3, 4 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^167^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^167^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setRadius ( RectangleAnchor.BOTTOM_LEFT ) ;^170^^^^^92^180^[REPLACE] i1.setValueAnchor ( RectangleAnchor.BOTTOM_LEFT ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^171^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REMOVE]^i2.setDatasetIndex ( 99 ) ;^171^^^^^92^180^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2 .setFrameAnchor (  )  ;^172^^^^^92^180^[REPLACE] i2.setValueAnchor ( RectangleAnchor.BOTTOM_LEFT ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^173^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^173^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i1.setAngle ( TextAnchor.TOP_LEFT ) ;^176^^^^^92^180^[REPLACE] i1.setTextAnchor ( TextAnchor.TOP_LEFT ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1.equals ( i2 )  ) ;^177^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.setInsets ( i2 )  ) ;^177^^^^^92^180^[REPLACE] assertFalse ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^i2 .setFrameAnchor (  )  ;^178^^^^^92^180^[REPLACE] i2.setTextAnchor ( TextAnchor.TOP_LEFT ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^179^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^179^^^^^92^180^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true 
[REPLACE]^DialValueIndicator i1 = new DialValueIndicator ( 0L, "Label" ) ;^186^^^^^185^192^[REPLACE] DialValueIndicator i1 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^DialValueIndicator i2 = new DialValueIndicator ( 3, "Label" ) ;^187^^^^^185^192^[REPLACE] DialValueIndicator i2 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[ADD]^^187^188^^^^185^192^[ADD] DialValueIndicator i2 = new DialValueIndicator ( 0, "Label" ) ; assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^188^^^^^185^192^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^assertTrue ( i1 .getClass (  )   ) ;^188^^^^^185^192^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^int h1 = i2.hashCode (  ) ;^189^^^^^185^192^[REPLACE] int h1 = i1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^int h2 = i1.hashCode (  ) ;^190^^^^^185^192^[REPLACE] int h2 = i2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^assertEquals ( i1, i2 ) ;^191^^^^^185^192^[REPLACE] assertEquals ( h1, h2 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  int h1  h2 
[REPLACE]^DialValueIndicator i1 = new DialValueIndicator ( 2, "Label" ) ;^199^^^^^197^212^[REPLACE] DialValueIndicator i1 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^DialValueIndicator i2 = this;^200^^^^^197^212^[REPLACE] DialValueIndicator i2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^^200^^^^^197^212^[ADD] DialValueIndicator i2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^i2 =  ( DialValueIndicator )  i1.clone (  ) ;^201^202^203^^^197^212^[ADD] try { i2 =  ( DialValueIndicator )  i1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^i2 =  ( DialValueIndicator )  in.readObject (  ) ; ;^202^^^^^197^212^[REPLACE] i2 =  ( DialValueIndicator )  i1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^^202^^^^^197^212^[ADD] i2 =  ( DialValueIndicator )  i1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1  ==  i2 ) ;^207^^^^^197^212^[REPLACE] assertTrue ( i1 != i2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1.setAngle (  )   &&  i2.getClass (  )  ) ;^208^^^^^197^212^[REPLACE] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i2.setAngle (  )  == i2.getClass (  )  ) ;^208^^^^^197^212^[REPLACE] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[ADD]^^208^^^^^197^212^[ADD] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1.setAngle (  )  == i1.getClass (  )  ) ;^208^^^^^197^212^[REPLACE] assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertFalse ( i1.equals ( i2 )  ) ;^209^^^^^197^212^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( i1.setInsets ( i2 )  ) ;^209^^^^^197^212^[REPLACE] assertTrue ( i1.equals ( i2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  CloneNotSupportedException e 
[REPLACE]^DialValueIndicator i1 = new DialValueIndicator ( 2, "Label" ) ;^220^^^^^218^240^[REPLACE] DialValueIndicator i1 = new DialValueIndicator ( 0, "Label" ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^DialValueIndicator i2 = false;^221^^^^^218^240^[REPLACE] DialValueIndicator i2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^^221^^^^^218^240^[ADD] DialValueIndicator i2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( i1 ) ;out.close (  ) ;^223^224^225^226^227^218^240^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( i1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^i2 =  ( DialValueIndicator )  i1.clone (  ) ; ;^231^^^^^218^240^[REPLACE] i2 =  ( DialValueIndicator )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^224^^^^^218^240^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^225^^^^^218^240^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^229^230^^^^218^240^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^^225^226^^^^218^240^[ADD] ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( i1 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[REPLACE]^assertEquals ( h1, h2 ) ;^237^^^^^218^240^[REPLACE] assertEquals ( i1, i2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
[ADD]^^237^^^^^218^240^[ADD] assertEquals ( i1, i2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] DialValueIndicatorTests   [TYPE]  DialValueIndicator i1  i2  [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e 
