[REPLACE]^s1.setTickRadius ( 0.99 ) ;^80^^^^^79^81^[REPLACE] super ( name ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^StandardDialScale s2 = new StandardDialScale (  ) ;^87^^^^^86^179^[REPLACE] StandardDialScale s1 = new StandardDialScale (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^StandardDialScale s1 = new StandardDialScale (  ) ;^88^^^^^86^179^[REPLACE] StandardDialScale s2 = new StandardDialScale (  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^89^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ; ;^92^^^^^86^179^[REPLACE] s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.equals ( s2 )  ) ;^93^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^93^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^93^94^^^^86^179^[ADD] assertFalse ( s1.equals ( s2 )  ) ; s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 = new StandarfialScale ( 3.0d, 100.0, 0.0, 270.0 ) ;^94^^^^^86^179^[REPLACE] s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^assertTrue ( s1.equals ( s2 )  ) ;^94^95^^^^86^179^[ADD] s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ; assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^95^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^95^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^95^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1 = new StandarfialScale ( 1.0d, 200.0, 0.0, 270.0 ) ;^98^^^^^86^179^[REPLACE] s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^99^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^99^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 = new StandarfialScale ( 10.0D, 200.0, 0.0, 270.0 ) ;^100^^^^^86^179^[REPLACE] s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^101^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^101^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1 = new StandarfialScale ( 10.0D, 200.0, 20.0, 270.0 ) ;^104^^^^^86^179^[REPLACE] s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^104^105^^^^86^179^[ADD] s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ; assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.equals ( s2 )  ) ;^105^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^105^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^105^106^^^^86^179^[ADD] assertFalse ( s1.equals ( s2 )  ) ; s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 = new StandarfialScale ( 10.0D, 200.0, 20.0, 270.0 ) ;^106^^^^^86^179^[REPLACE] s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^107^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^107^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REMOVE]^s1.setTickRadius ( 0.99 ) ;^107^^^^^86^179^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1 = new StandarfialScale ( 10.0D, 200.0, 20.0, 99.0 ) ;^110^^^^^86^179^[REPLACE] s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^111^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 = new StandarfialScale ( 1.0d, 200.0, 20.0, 99.0 ) ;^112^^^^^86^179^[REPLACE] s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^113^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^113^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^113^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setTickRadius ( 1.0d ) ;^116^^^^^86^179^[REPLACE] s1.setTickRadius ( 0.99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^117^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^117^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^117^^^^^86^179^[ADD] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 .setTickLabelPaint ( null )  ;^118^^^^^86^179^[REPLACE] s2.setTickRadius ( 0.99 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^119^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^119^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REMOVE]^s1.setTickRadius ( 0.99 ) ;^119^^^^^86^179^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMajorTickIncrement ( 1.0d ) ;^122^^^^^86^179^[REPLACE] s1.setMajorTickIncrement ( 11.1 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REMOVE]^s1.setMajorTickLength ( 0.09 ) ;^122^^^^^86^179^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^123^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^123^124^^^^86^179^[ADD] assertFalse ( s1.equals ( s2 )  ) ; s2.setMajorTickIncrement ( 11.1 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setMajorTickIncrement ( 11.1D ) ;^124^^^^^86^179^[REPLACE] s2.setMajorTickIncrement ( 11.1 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^125^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^125^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMajorTickLength ( 0.0d ) ;^128^^^^^86^179^[REPLACE] s1.setMajorTickLength ( 0.09 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^128^^^^^86^179^[ADD] s1.setMajorTickLength ( 0.09 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^129^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setMajorTickLength ( 2.0d ) ;^130^^^^^86^179^[REPLACE] s2.setMajorTickLength ( 0.09 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^131^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^131^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^134^135^^^^86^179^[REPLACE] s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.equals ( s2 )  ) ;^136^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^136^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^137^138^^^^86^179^[REPLACE] s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^139^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^139^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^139^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REMOVE]^s1.setTickRadius ( 0.99 ) ;^139^^^^^86^179^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMajorTickPaint ( new BasicStroke ( 1.1f )  ) ;^142^^^^^86^179^[REPLACE] s1.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.equals ( s2 )  ) ;^143^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REMOVE]^s1.setMajorTickLength ( 0.09 ) ;^143^^^^^86^179^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^143^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setMajorTickPaint ( new BasicStroke ( 1.1f )  ) ;^144^^^^^86^179^[REPLACE] s2.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^145^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^145^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^145^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMinorTickCount ( 4 ) ;^148^^^^^86^179^[REPLACE] s1.setMinorTickCount ( 7 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^149^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setMinorTickCount ( 4 ) ;^150^^^^^86^179^[REPLACE] s2.setMinorTickCount ( 7 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^151^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^151^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^151^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMinorTickLength ( 0.09D ) ;^154^^^^^86^179^[REPLACE] s1.setMinorTickLength ( 0.09 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^155^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^155^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setMinorTickLength ( 0.09D ) ;^156^^^^^86^179^[REPLACE] s2.setMinorTickLength ( 0.09 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^157^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^157^^^^^86^179^[ADD] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setTickRadius ( 0.11D ) ;^160^^^^^86^179^[REPLACE] s1.setTickLabelOffset ( 0.11 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.equals ( s2 )  ) ;^161^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^161^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setTickLabelOffset ( 0.11D ) ;^162^^^^^86^179^[REPLACE] s2.setTickLabelOffset ( 0.11 ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^163^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^163^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setTickLabelPaint ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^166^^^^^86^179^[REPLACE] s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^167^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.setMajorTickPaint ( s2 )  ) ;^167^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2.setTickLabelPaint ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^168^^^^^86^179^[REPLACE] s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^169^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^172^173^^^^86^179^[REPLACE] s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[ADD]^^172^173^^^^86^179^[ADD] s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1 .getClass (  )   ) ;^174^^^^^86^179^[REPLACE] assertFalse ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 .setTickLabelFont ( this )  ;^175^176^^^^86^179^[REPLACE] s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^177^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REMOVE]^s1.setTickRadius ( 0.99 ) ;^177^^^^^86^179^[REMOVE] ^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^177^^^^^86^179^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testEquals [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^StandardDialScale s2 = new StandardDialScale (  ) ;^185^^^^^184^191^[REPLACE] StandardDialScale s1 = new StandardDialScale (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[ADD]^^185^^^^^184^191^[ADD] StandardDialScale s1 = new StandardDialScale (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^StandardDialScale s1 = new StandardDialScale (  ) ;^186^^^^^184^191^[REPLACE] StandardDialScale s2 = new StandardDialScale (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^187^^^^^184^191^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[ADD]^int h1 = s1.hashCode (  ) ;^187^188^^^^184^191^[ADD] assertTrue ( s1.equals ( s2 )  ) ; int h1 = s1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^int h1 = s1 .clone (  )  ;^188^^^^^184^191^[REPLACE] int h1 = s1.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^int h2 = s1.clone (  ) ;^189^^^^^184^191^[REPLACE] int h2 = s2.hashCode (  ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertEquals ( s1, s2 ) ;^190^^^^^184^191^[REPLACE] assertEquals ( h1, h2 ) ;^[METHOD] testHashCode [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  int h1  h2  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^StandardDialScale s2 = new StandardDialScale (  ) ;^198^^^^^196^226^[REPLACE] StandardDialScale s1 = new StandardDialScale (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^StandardDialScale s2 = true;^199^^^^^196^226^[REPLACE] StandardDialScale s2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[ADD]^s2 =  ( StandardDialScale )  s1.clone (  ) ;^200^201^202^^^196^226^[ADD] try { s2 =  ( StandardDialScale )  s1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s2 =  ( StandardDialScale )  in.readObject (  ) ; ;^201^^^^^196^226^[REPLACE] s2 =  ( StandardDialScale )  s1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1  ==  s1 ) ;^206^^^^^196^226^[REPLACE] assertTrue ( s1 != s2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[ADD]^^206^207^^^^196^226^[ADD] assertTrue ( s1 != s2 ) ; assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1.getClass (  )   ||  s2.getClass (  )  ) ;^207^^^^^196^226^[REPLACE] assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s2.getClass (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^[REPLACE] assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1.setExtent (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^[REPLACE] assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertFalse ( s1.equals ( s2 )  ) ;^208^^^^^196^226^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^208^^^^^196^226^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s1 =  new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 )  ;^211^^^^^196^226^[REPLACE] s1 = new StandardDialScale (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s1.setExtent ( 1.0d ) ;^212^^^^^196^226^[REPLACE] s1.setExtent ( 123.4 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^213^214^^^^196^226^[REPLACE] s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s1.setMajorTickPaint ( new BasicStroke ( 2.0f )  ) ;^215^^^^^196^226^[REPLACE] s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[ADD]^^215^216^^^^196^226^[ADD] s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ; s2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s2 = true;^216^^^^^196^226^[REPLACE] s2 = null;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[ADD]^s2 =  ( StandardDialScale )  s1.clone (  ) ;^217^218^219^^^196^226^[ADD] try { s2 =  ( StandardDialScale )  s1.clone (  ) ; }^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^s2 =  ( StandardDialScale )  in.readObject (  ) ; ;^218^^^^^196^226^[REPLACE] s2 =  ( StandardDialScale )  s1.clone (  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1  ==  s2 ) ;^223^^^^^196^226^[REPLACE] assertTrue ( s1 != s2 ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1.setExtent (  )   !=  s2.getClass (  )  ) ;^224^^^^^196^226^[REPLACE] assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s2.getClass (  )  == s2.getClass (  )  ) ;^224^^^^^196^226^[REPLACE] assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1.getClass (  )  == s1.getClass (  )  ) ;^224^^^^^196^226^[REPLACE] assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1.setMajorTickPaint ( s2 )  ) ;^225^^^^^196^226^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REMOVE]^s1.setTickRadius ( 0.99 ) ;^225^^^^^196^226^[REMOVE] ^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^assertTrue ( s1 .getClass (  )   ) ;^225^^^^^196^226^[REPLACE] assertTrue ( s1.equals ( s2 )  ) ;^[METHOD] testCloning [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  StandardDialScale s1  s2  [TYPE]  CloneNotSupportedException e 
[REPLACE]^StandardDialScale s2 = new StandardDialScale (  ) ;^234^^^^^232^276^[REPLACE] StandardDialScale s1 = new StandardDialScale (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^^234^^^^^232^276^[ADD] StandardDialScale s1 = new StandardDialScale (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^StandardDialScale s2 = false;^235^^^^^232^276^[REPLACE] StandardDialScale s2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( s1 ) ;out.close (  ) ;^237^238^239^240^241^232^276^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( s1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 =  ( StandardDialScale )  s1.clone (  ) ; ;^245^^^^^232^276^[REPLACE] s2 =  ( StandardDialScale )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^^245^246^^^^232^276^[ADD] s2 =  ( StandardDialScale )  in.readObject (  ) ; in.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^238^^^^^232^276^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^239^^^^^232^276^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^243^244^^^^232^276^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^243^244^^^^232^276^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertEquals ( h1, h2 ) ;^251^^^^^232^276^[REPLACE] assertEquals ( s1, s2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1 =  new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 )  ;^254^^^^^232^276^[REPLACE] s1 = new StandardDialScale (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setExtent ( 1.0d ) ;^255^^^^^232^276^[REPLACE] s1.setExtent ( 123.4 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^^255^^^^^232^276^[ADD] s1.setExtent ( 123.4 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^256^257^^^^232^276^[REPLACE] s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s1.setMajorTickPaint ( new BasicStroke ( 2.0f )  ) ;^258^^^^^232^276^[REPLACE] s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 = this;^259^^^^^232^276^[REPLACE] s2 = null;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;ObjectOutput out = new ObjectOutputStream ( buffer ) ;out.writeObject ( s1 ) ;out.close (  ) ;^261^262^263^264^265^232^276^[ADD] try { ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ; ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( s1 ) ; out.close (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^s2 =  ( StandardDialScale )  s1.clone (  ) ; ;^269^^^^^232^276^[REPLACE] s2 =  ( StandardDialScale )  in.readObject (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ObjectOutput out = new ObjectOutputStream ( buffer ) ;^262^^^^^232^276^[REPLACE] ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ByteArrayOutputStream buffer = new ByteArrayOutputStream (  ) ;^263^^^^^232^276^[REPLACE] ObjectOutput out = new ObjectOutputStream ( buffer ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^^263^264^^^^232^276^[ADD] ObjectOutput out = new ObjectOutputStream ( buffer ) ; out.writeObject ( s1 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.ByteArrayOutputStream (  )  )  ) ;^267^268^^^^232^276^[REPLACE] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[ADD]^^267^268^^^^232^276^[ADD] ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
[REPLACE]^assertEquals ( h1, h2 ) ;^275^^^^^232^276^[REPLACE] assertEquals ( s1, s2 ) ;^[METHOD] testSerialization [TYPE] void [PARAMETER] [CLASS] StandardDialScaleTests   [TYPE]  boolean false  true  [TYPE]  ObjectOutput out  [TYPE]  ByteArrayOutputStream buffer  [TYPE]  ObjectInput in  [TYPE]  Exception e  [TYPE]  StandardDialScale s1  s2 
