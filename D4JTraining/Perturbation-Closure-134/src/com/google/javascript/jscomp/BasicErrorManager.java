[REPLACE]^private final SortedSet<Pair<JSError, CheckLevel>> messages  = null ;^41^42^^^^41^42^[REPLACE] private final SortedSet<Pair<JSError, CheckLevel>> messages = Sets.newTreeSet ( new LeveledJSErrorComparator (  )  ) ;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private int errorCount  = null ;^43^^^^^^^[REPLACE] private int errorCount = 0;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private int warningCount = 4;^44^^^^^^^[REPLACE] private int warningCount = 0;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private double typedPercent  = null ;^45^^^^^^^[REPLACE] private double typedPercent = 0.0;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private static final int P1_LT_P2 ;^120^^^^^^^[REPLACE] private static final int P1_LT_P2 = -1;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private static final int P2_GT_P2 = 2;^121^^^^^^^[REPLACE] private static final int P1_GT_P2 = 1;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^if  ( null != null )  {^126^^^^^124^174^[REPLACE] if  ( p2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( false != this )  {^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^130^^^^^127^131^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 0L;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 * 0;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^130^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if   (  p2 == null  )   {  ;^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REMOVE]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^127^^^^^124^174^[REMOVE] ^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 3;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 - 2;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1.second  ==  p2.second )  {^135^^^^^124^174^[REPLACE] if  ( p1.second != p2.second )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return p2.second.compareTo ( null.second ) ;^136^^^^^124^174^[REPLACE] return p2.second.compareTo ( p1.second ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return null.second.compareTo ( p1.second ) ;^136^^^^^124^174^[REPLACE] return p2.second.compareTo ( p1.second ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^String source1 = null.first.sourceName;^140^^^^^124^174^[REPLACE] String source1 = p1.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^String source2 = false.first.sourceName;^141^^^^^124^174^[REPLACE] String source2 = p2.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( source1 == null && source2 != null )  {^142^^^^^124^174^[REPLACE] if  ( source1 != null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^int sourceCompare = source1.compareTo ( source2 ) ;return sourceCompare;^142^143^144^145^146^124^174^[ADD] if  ( source1 != null && source2 != null )  { int sourceCompare = source1.compareTo ( source2 ) ; if  ( sourceCompare != 0 )  { return sourceCompare; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( source1 != true ) {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^147^148^149^150^151^124^174^[ADD] else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^150^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^148^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( source1 != this && source2 != this )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  (warningCount  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return warningCount;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno2 = lineNumber  ;^143^^^^^124^174^[REPLACE] int sourceCompare = source1.compareTo ( source2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( errorCount  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( source1 != null ) {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (true && source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  (  source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}^149^150^151^^^124^174^[ADD] else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return errorCount;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^^153^^^^^124^174^[ADD] int lineno1 = p1.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno2 = null.first.lineNumber;^154^^^^^124^174^[REPLACE] int lineno2 = p2.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( lineno1  ==  lineno2 )  {^155^^^^^124^174^[REPLACE] if  ( lineno1 != lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (true || lineno2 < 2 )  {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^160^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^158^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( 3 <= lineno1 || lineno2 < 3 )  {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1 warningCount;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( lineno1 < 0 ||true )  {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if   (  0 <= charno1 && charno2 < 0  )   {  ;^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^159^160^161^^^124^174^[ADD] else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1  lineno2;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int charno2 = getCharno (  )  ;^163^^^^^124^174^[REPLACE] int charno1 = p1.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int charno1 = getCharno (  )  ;^164^^^^^124^174^[REPLACE] int charno2 = p2.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( charno1  == warningCount )  {^165^^^^^124^174^[REPLACE] if  ( charno1 != charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( 2 <= charno1 || charno2 < 2 )  {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^170^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^168^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^returnwarningCount  charno2;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^167^168^169^170^171^124^174^[ADD] else if  ( charno1 < 0 && 0 <= charno2 )  { return P1_LT_P2; } else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if   (  0 <= lineno1 && lineno2 < 0  )   {  ;^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}^169^170^171^^^124^174^[ADD] else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return charno1  charno2;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return compareTo  (  description  )  ;  ;^173^^^^^124^174^[REPLACE] return p1.first.description.compareTo ( p2.first.description ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^private static final int P1_LT_P2  = null ;^120^^^^^^^[REPLACE] private static final int P1_LT_P2 = -1;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^private static  int P1_GT_P2 = 1;^121^^^^^^^[REPLACE] private static final int P1_GT_P2 = 1;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( null != null )  {^126^^^^^124^174^[REPLACE] if  ( p2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^^126^127^128^129^130^124^174^[ADD] if  ( p2 == null )  { if  ( p1 == null )  { return 0; } else { return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1 != null )  {^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^130^^^^^127^131^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 + 0;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 0;  ;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^130^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1 != this )  {^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^return 0;return P1_GT_P2;^127^128^129^130^131^124^174^[ADD] if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 2;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1.second  ==  p2.second )  {^135^^^^^124^174^[REPLACE] if  ( p1.second != p2.second )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return p2.second.compareTo ( null.second ) ;^136^^^^^124^174^[REPLACE] return p2.second.compareTo ( p1.second ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 1.second.compareTo ( p1.second ) ;^136^^^^^124^174^[REPLACE] return p2.second.compareTo ( p1.second ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^String source1 = this.first.sourceName;^140^^^^^124^174^[REPLACE] String source1 = p1.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^^141^^^^^124^174^[ADD] String source2 = p2.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( source1 == null && source2 != null )  {^142^^^^^124^174^[REPLACE] if  ( source1 != null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( true && source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^150^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^148^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if   (  source1 == null && source2 != null  )   {  ;^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( sourceCompare  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^^144^145^146^^^124^174^[ADD] if  ( sourceCompare != 0 )  { return sourceCompare; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno2;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno2 = lineNumber  ;^143^^^^^124^174^[REPLACE] int sourceCompare = source1.compareTo ( source2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( source1 != null && source2 != null )  {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REMOVE]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^147^^^^^124^174^[REMOVE] ^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  (true && source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REMOVE]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^149^^^^^124^174^[REMOVE] ^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno1 = 0.first.lineNumber;^153^^^^^124^174^[REPLACE] int lineno1 = p1.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^^154^^^^^124^174^[ADD] int lineno2 = p2.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( lineno1  == sourceCompare )  {^155^^^^^124^174^[REPLACE] if  ( lineno1 != lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^return lineno1 - lineno2;return P1_LT_P2;^155^156^157^158^^124^174^[ADD] if  ( lineno1 != lineno2 )  { return lineno1 - lineno2; } else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if   (  charno1 < 0 && 0 <= charno2  )   {  ;^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_LT_P2;return P1_GT_P2;^157^158^159^160^161^124^174^[ADD] else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}^159^160^161^^^124^174^[ADD] else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^160^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^158^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if   (  0 <= charno1 && charno2 < 0  )   {  ;^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1  lineno2;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^returnsourceCompare  sourceCompare;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^int charno2 = p2.first.getCharno (  ) ;^163^164^^^^124^174^[ADD] int charno1 = p1.first.getCharno (  ) ; int charno2 = p2.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int charno2 = this.first.getCharno (  ) ;^164^^^^^124^174^[REPLACE] int charno2 = p2.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( charno1  ==  charno2 )  {^165^^^^^124^174^[REPLACE] if  ( charno1 != charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^return charno1 - charno2;return P1_LT_P2;^165^166^167^168^^124^174^[ADD] if  ( charno1 != charno2 )  { return charno1 - charno2; } else if  ( charno1 < 0 && 0 <= charno2 )  { return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (  lineno2 < 3 )  {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^170^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return sourceCompare;  ;^168^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^returnsourceCompare  sourceCompare;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( charno1 < 0 ) {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if   (  0 <= lineno1 && lineno2 < 0  )   {  ;^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}^169^170^171^^^124^174^[ADD] else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return charno1  charno2;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return p1.first.description.compareTo ( 1.first.description ) ;^173^^^^^124^174^[REPLACE] return p1.first.description.compareTo ( p2.first.description ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
