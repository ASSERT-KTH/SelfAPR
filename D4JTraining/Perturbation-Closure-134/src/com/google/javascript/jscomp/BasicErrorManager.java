[REPLACE]^private  SortedSet<Pair<JSError, CheckLevel>> messages = Sets.newTreeSet ( new LeveledJSErrorComparator (  )  ) ;^41^42^^^^41^42^[REPLACE] private final SortedSet<Pair<JSError, CheckLevel>> messages = Sets.newTreeSet ( new LeveledJSErrorComparator (  )  ) ;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private  short  errorCount = 0 * 3;^43^^^^^^^[REPLACE] private int errorCount = 0;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private  long  warningCount = 0L;^44^^^^^^^[REPLACE] private int warningCount = 0;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private double typedPercent ;^45^^^^^^^[REPLACE] private double typedPercent = 0.0;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private static final int P1_LT_P2  = null ;^120^^^^^^^[REPLACE] private static final int P1_LT_P2 = -1;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^private static final  long  P1_GT_P2 = 1;^121^^^^^^^[REPLACE] private static final int P1_GT_P2 = 1;^ [CLASS] BasicErrorManager LeveledJSErrorComparator  
[REPLACE]^if  ( sourceCompare != 0 )  {^48^^^^^47^55^[REPLACE] if  ( messages.add ( Pair.of ( error, level )  )  )  {^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[ADD]^^48^49^50^51^52^47^55^[ADD] if  ( messages.add ( Pair.of ( error, level )  )  )  { if  ( level == CheckLevel.ERROR )  { errorCount++; } else if  ( level == CheckLevel.WARNING )  { warningCount++;^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[REPLACE]^if  ( level  !=  CheckLevel.ERROR )  {^49^^^^^47^55^[REPLACE] if  ( level == CheckLevel.ERROR )  {^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[REPLACE]^}  else {^51^^^^^47^55^[REPLACE] } else if  ( level == CheckLevel.WARNING )  {^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[REPLACE]^}  if  ( level  !=  CheckLevel.WARNING )  {^51^^^^^47^55^[REPLACE] } else if  ( level == CheckLevel.WARNING )  {^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[REPLACE]^}  if  ( level  &&  CheckLevel.WARNING )  {^51^^^^^47^55^[REPLACE] } else if  ( level == CheckLevel.WARNING )  {^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[ADD]^}   warningCount++;^51^52^53^^^47^55^[ADD] else if  ( level == CheckLevel.WARNING )  { warningCount++; }^[METHOD] report [TYPE] void [PARAMETER] CheckLevel level JSError error [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  CheckLevel level  [TYPE]  JSError error 
[REPLACE]^for  ( Pair<JSError, CheckLevel> message : messages )  { println ( message.second, message.first ) ;^58^^^^^57^62^[REPLACE] for  ( Pair<JSError, CheckLevel> message : messages )  {^[METHOD] generateReport [TYPE] void [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair message 
[REPLACE]^return p1.first.description.compareTo ( p2.first.description ) ;^61^^^^^57^62^[REPLACE] printSummary (  ) ;^[METHOD] generateReport [TYPE] void [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair message 
[REPLACE]^return toArray ( CheckLevel.WARNING ) ;^76^^^^^75^77^[REPLACE] return errorCount;^[METHOD] getErrorCount [TYPE] int [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount 
[REPLACE]^return toArray ( CheckLevel.WARNING ) ;^80^^^^^79^81^[REPLACE] return warningCount;^[METHOD] getWarningCount [TYPE] int [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount 
[REPLACE]^return toArray ( CheckLevel.WARNING ) ;^84^^^^^83^85^[REPLACE] return toArray ( CheckLevel.ERROR ) ;^[METHOD] getErrors [TYPE] JSError[] [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount 
[REPLACE]^return toArray ( CheckLevel.ERROR ) ;^88^^^^^87^89^[REPLACE] return toArray ( CheckLevel.WARNING ) ;^[METHOD] getWarnings [TYPE] JSError[] [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount 
[REPLACE]^this.typedPercent =  null;^92^^^^^91^93^[REPLACE] this.typedPercent = typedPercent;^[METHOD] setTypedPercent [TYPE] void [PARAMETER] double typedPercent [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount 
[REPLACE]^return toArray ( CheckLevel.WARNING ) ;^96^^^^^95^97^[REPLACE] return typedPercent;^[METHOD] getTypedPercent [TYPE] double [PARAMETER] [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount 
[REPLACE]^List<JSError> errors = new ArrayList<JSError> ( messages.add (  )  ) ;^100^^^^^99^107^[REPLACE] List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[METHOD] toArray [TYPE] JSError[] [PARAMETER] CheckLevel level [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  double typedPercent  [TYPE]  CheckLevel level  [TYPE]  List errors  [TYPE]  SortedSet messages  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair p 
[ADD]^^100^^^^^99^107^[ADD] List<JSError> errors = new ArrayList<JSError> ( messages.size (  )  ) ;^[METHOD] toArray [TYPE] JSError[] [PARAMETER] CheckLevel level [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  double typedPercent  [TYPE]  CheckLevel level  [TYPE]  List errors  [TYPE]  SortedSet messages  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair p 
[REPLACE]^if  ( p.second  ||  level )  {^102^^^^^99^107^[REPLACE] if  ( p.second == level )  {^[METHOD] toArray [TYPE] JSError[] [PARAMETER] CheckLevel level [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  double typedPercent  [TYPE]  CheckLevel level  [TYPE]  List errors  [TYPE]  SortedSet messages  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair p 
[REPLACE]^errors.toArray ( p.first ) ;^103^^^^^99^107^[REPLACE] errors.add ( p.first ) ;^[METHOD] toArray [TYPE] JSError[] [PARAMETER] CheckLevel level [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  double typedPercent  [TYPE]  CheckLevel level  [TYPE]  List errors  [TYPE]  SortedSet messages  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair p 
[REPLACE]^for  ( Pair<JSError, CheckLevel> message : messages )  { println ( message.second, message.first ) ;^101^^^^^99^107^[REPLACE] for  ( Pair<JSError, CheckLevel> p : messages )  {^[METHOD] toArray [TYPE] JSError[] [PARAMETER] CheckLevel level [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  double typedPercent  [TYPE]  CheckLevel level  [TYPE]  List errors  [TYPE]  SortedSet messages  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair p 
[REPLACE]^return errors .printSummary (  )  ;^106^^^^^99^107^[REPLACE] return errors.toArray ( new JSError[errors.size (  ) ] ) ;^[METHOD] toArray [TYPE] JSError[] [PARAMETER] CheckLevel level [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  boolean false  true  [TYPE]  double typedPercent  [TYPE]  CheckLevel level  [TYPE]  List errors  [TYPE]  SortedSet messages  [TYPE]  int P1_GT_P2  P1_LT_P2  errorCount  warningCount  [TYPE]  Pair p 
[REPLACE]^if  ( null != null )  {^126^^^^^124^174^[REPLACE] if  ( p2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1 != null )  {^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^130^^^^^127^131^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 - 1;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 4;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^130^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1 != false )  {^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 * 3;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return 0L;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1.second  ==  p2.second )  {^135^^^^^124^174^[REPLACE] if  ( p1.second != p2.second )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return   p1.second   ;^136^^^^^124^174^[REPLACE] return p2.second.compareTo ( p1.second ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^String source2 = p2.first.sourceName;^140^^^^^124^174^[REPLACE] String source1 = p1.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^^140^141^^^^124^174^[ADD] String source1 = p1.first.sourceName; String source2 = p2.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^String source2 = 0.first.sourceName;^141^^^^^124^174^[REPLACE] String source2 = p2.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( source1 == null && source2 != null )  {^142^^^^^124^174^[REPLACE] if  ( source1 != null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( source1 != null ) {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^149^150^151^^^124^174^[ADD] else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^150^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_GT_P2;^148^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( source1 != null && source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( warningCount  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^^144^145^146^^^124^174^[ADD] if  ( sourceCompare != 0 )  { return sourceCompare; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int charno1 = p1.first.getCharno (  ) ;^143^^^^^124^174^[REPLACE] int sourceCompare = source1.compareTo ( source2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( sourceCompare  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^return sourceCompare;^144^145^146^^^124^174^[ADD] if  ( sourceCompare != 0 )  { return sourceCompare; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return errorCount;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( source1 != false && source2 != false )  {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^147^148^149^150^151^124^174^[ADD] else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  (  source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( source1 != null && source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return warningCount;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno1 = null.first.lineNumber;^153^^^^^124^174^[REPLACE] int lineno1 = p1.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno2 = null.first.lineNumber;^154^^^^^124^174^[REPLACE] int lineno2 = p2.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( lineno1  == warningCount )  {^155^^^^^124^174^[REPLACE] if  ( lineno1 != lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  (  0 <= lineno2 )  {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_LT_P2;return P1_GT_P2;^157^158^159^160^161^124^174^[ADD] else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( 0 + 2 <= lineno1 ) {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^159^160^161^^^124^174^[ADD] else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^160^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_GT_P2;^158^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( 0 <= lineno1 ) {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1 -warningCount;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REMOVE]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^157^^^^^124^174^[REMOVE] ^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1  &  lineno2;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int charno1 = null.first.getCharno (  ) ;^163^^^^^124^174^[REPLACE] int charno1 = p1.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^int charno2 = p2.first.getCharno (  ) ;^163^164^^^^124^174^[ADD] int charno1 = p1.first.getCharno (  ) ; int charno2 = p2.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^int charno2 = true.first.getCharno (  ) ;^164^^^^^124^174^[REPLACE] int charno2 = p2.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  (warningCount  ==  charno2 )  {^165^^^^^124^174^[REPLACE] if  ( charno1 != charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (  sourceCompare < 3 )  {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^170^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_GT_P2;^168^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[ADD]^}^169^170^171^^^124^174^[ADD] else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return charno1 -warningCount;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( warningCount < 0 || 0 <= charno2 )  {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( 0 <= warningCount || charno2 < 0 )  {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (  charno2 < 3 )  {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^returnwarningCount - charno2;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^return p1.first.  false.first.description   ;^173^^^^^124^174^[REPLACE] return p1.first.description.compareTo ( p2.first.description ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] BasicErrorManager LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^private static final int P1_LT_P2  = null ;^120^^^^^^^[REPLACE] private static final int P1_LT_P2 = -1;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^private static final  long  P4_GT_P2 = 4;^121^^^^^^^[REPLACE] private static final int P1_GT_P2 = 1;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  SortedSet messages  [TYPE]  double typedPercent  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  errorCount  lineno1  lineno2  sourceCompare  warningCount  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p2 != null )  {^126^^^^^124^174^[REPLACE] if  ( p2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1 != this )  {^127^^^^^124^174^[REPLACE] if  ( p1 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^130^^^^^127^131^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 >> 2;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 / 4;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^130^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^return 0;return P1_GT_P2;^127^128^129^130^131^124^174^[ADD] if  ( p1 == null )  { return 0; } else { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 + 0;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return 0 * 4;^128^^^^^124^174^[REPLACE] return 0;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( p1.second  ==  p2.second )  {^135^^^^^124^174^[REPLACE] if  ( p1.second != p2.second )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return   p1.second   ;^136^^^^^124^174^[REPLACE] return p2.second.compareTo ( p1.second ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^String source1 = null.first.sourceName;^140^^^^^124^174^[REPLACE] String source1 = p1.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^String source1 = p1.first.sourceName;^141^^^^^124^174^[REPLACE] String source2 = p2.first.sourceName;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( source1 == null ) {^142^^^^^124^174^[REPLACE] if  ( source1 != null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^147^^^^^124^174^[REPLACE] } else if  ( source1 == null && source2 != null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  (  source2 != true )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}^149^150^151^^^124^174^[ADD] else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^150^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_GT_P2;^148^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REMOVE]^if  (  ( 0 <= charno1 )  &&  ( charno2 < 0 )  )  {     return P1_GT_P2; }^149^^^^^124^174^[REMOVE] ^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( sourceCompare  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^^144^145^146^^^124^174^[ADD] if  ( sourceCompare != 0 )  { return sourceCompare; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno1;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return lineno2;^145^^^^^124^174^[REPLACE] return sourceCompare;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int charno1 = p1.first.getCharno (  ) ;^143^^^^^124^174^[REPLACE] int sourceCompare = source1.compareTo ( source2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  (lineno2  ==  0 )  {^144^^^^^124^174^[REPLACE] if  ( sourceCompare != 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_LT_P2;return P1_GT_P2;^147^148^149^150^151^124^174^[ADD] else if  ( source1 == null && source2 != null )  { return P1_LT_P2; } else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (  source2 != null )  {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^149^150^151^^^124^174^[ADD] else if  ( source1 != null && source2 == null )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( source1 != false ) {^149^^^^^124^174^[REPLACE] } else if  ( source1 != null && source2 == null )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno1 = this.first.lineNumber;^153^^^^^124^174^[REPLACE] int lineno1 = p1.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int lineno2 = null.first.lineNumber;^154^^^^^124^174^[REPLACE] int lineno2 = p2.first.lineNumber;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  ( lineno1  ==  lineno2 )  {^155^^^^^124^174^[REPLACE] if  ( lineno1 != lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^157^158^159^160^161^124^174^[ADD] else if  ( lineno1 < 0 && 0 <= lineno2 )  { return P1_LT_P2; } else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  (true || lineno2 < 0 )  {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^160^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_GT_P2;^158^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^returnsourceCompare - lineno2;^156^^^^^124^174^[REPLACE] return lineno1 - lineno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^} else if  ( lineno1 < 4 ) {^157^^^^^124^174^[REPLACE] } else if  ( lineno1 < 0 && 0 <= lineno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (  lineno2 < 0 )  {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}^159^160^161^^^124^174^[ADD] else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( 0 <= lineno1 ||true )  {^159^^^^^124^174^[REPLACE] } else if  ( 0 <= lineno1 && lineno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^159^160^161^^^124^174^[ADD] else if  ( 0 <= lineno1 && lineno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int charno1 = 0.first.getCharno (  ) ;^163^^^^^124^174^[REPLACE] int charno1 = p1.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^int charno2 = this.first.getCharno (  ) ;^164^^^^^124^174^[REPLACE] int charno2 = p2.first.getCharno (  ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^if  (sourceCompare  ==  charno2 )  {^165^^^^^124^174^[REPLACE] if  ( charno1 != charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  (  true )  {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( 4 <= charno1 ) {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}^169^170^171^^^124^174^[ADD] else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_LT_P2;^170^^^^^124^174^[REPLACE] return P1_GT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return P1_GT_P2;^168^^^^^124^174^[REPLACE] return P1_LT_P2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  else {^169^^^^^124^174^[REPLACE] } else if  ( 0 <= charno1 && charno2 < 0 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return charno1  ;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^}  if  ( charno1 < 0 ) {^167^^^^^124^174^[REPLACE] } else if  ( charno1 < 0 && 0 <= charno2 )  {^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[ADD]^}   return P1_GT_P2;^169^170^171^^^124^174^[ADD] else if  ( 0 <= charno1 && charno2 < 0 )  { return P1_GT_P2; }^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^returnsourceCompare - charno2;^166^^^^^124^174^[REPLACE] return charno1 - charno2;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
[REPLACE]^return p1.first.  p2.first.description   ;^173^^^^^124^174^[REPLACE] return p1.first.description.compareTo ( p2.first.description ) ;^[METHOD] compare [TYPE] int [PARAMETER] CheckLevel> p1 CheckLevel> p2 [CLASS] LeveledJSErrorComparator   [TYPE]  String source1  source2  [TYPE]  boolean false  true  [TYPE]  int P1_GT_P2  P1_LT_P2  charno1  charno2  lineno1  lineno2  sourceCompare  [TYPE]  Pair p1  p2 
