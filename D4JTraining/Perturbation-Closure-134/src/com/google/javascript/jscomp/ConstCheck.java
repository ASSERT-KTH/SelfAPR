[REPLACE]^static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR  = null ;^38^39^40^41^^38^41^[REPLACE] static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR = DiagnosticType.error ( "JSC_CONSTANT_REASSIGNED_VALUE_ERROR", "constant {0} assigned a value more than once" ) ;^ [CLASS] ConstCheck  
[REPLACE]^private  AbstractCompiler compiler;^43^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ConstCheck  
[REPLACE]^if  ( parent != null && parent.getType (  )  != Token.VAR && n.hasChildren (  )  )  {^67^68^69^^^64^122^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.VAR && n.hasChildren (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if   (  initializedConstants.contains  (  var  )    )   {  ;^72^^^^^67^79^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( null )  )  {^73^^^^^67^79^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String parentame = n.getType (  ) ;^70^^^^^67^79^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^71^^^^^67^79^[ADD] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( isConstant ( this )  )  {^72^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( null )  )  {^73^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^reportError ( t, n, name ) ;initializedConstants.add ( var ) ;^73^74^75^76^77^64^122^[ADD] if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( this ) ;^76^^^^^73^77^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REMOVE]^initializedConstants.contains ( var )  ;^76^^^^^73^77^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^reportError ( t, parent, name ) ;^74^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants .add ( var )   )  {^73^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( null ) ;^76^^^^^73^77^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( lhs.getType (  )   ) {^95^^^^^64^122^[REPLACE] if  ( lhs.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if   (  initializedConstants.contains  (  var  )    )   {  ;^98^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.contains ( null )  )  {^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.add ( null ) ;^102^^^^^99^103^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^102^^^^^99^103^[ADD] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^reportError ( t, parent, name ) ;^100^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^initializedConstants.contains ( var )  ;^102^^^^^99^103^[REPLACE] initializedConstants.add ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^traverse ( compiler, root, this )  ;^100^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = lhs.getType (  ) ;^96^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  )  ;^97^^^^^64^122^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( initializedConstants.add ( var )  )  {^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if   (  parent != null && parent.getType  (    )   == Token.VAR &&  ;^99^^^^^64^122^[REPLACE] if  ( initializedConstants.contains ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^reportError ( t, n, name ) ;initializedConstants.add ( var ) ;^99^100^101^102^103^64^122^[ADD] if  ( initializedConstants.contains ( var )  )  { reportError ( t, n, name ) ; } else { initializedConstants.add ( var ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if  ( lhs.getType (  )   &&  Token.NAME )  {^112^^^^^64^122^[REPLACE] if  ( lhs.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^112^113^114^115^116^64^122^[ADD] if  ( lhs.getType (  )  == Token.NAME )  { String name = lhs.getString (  ) ; Scope.Var var = t.getScope (  ) .getVar ( name ) ; if  ( isConstant ( var )  )  { reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^if   (  initializedConstants.contains  (  var  )    )   {  ;^115^^^^^64^122^[REPLACE] if  ( isConstant ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^traverse ( compiler, root, this )  ;^116^^^^^64^122^[REPLACE] reportError ( t, n, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = lhs.getType (  ) ;^113^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^114^^^^^64^122^[ADD] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String parentame = n.getString (  ) ;^70^^^^^64^122^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  )  ;^71^^^^^64^122^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^Node lhs = parent.getFirstChild (  ) ;^94^^^^^64^122^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  )  ;^96^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[ADD]^^111^^^^^64^122^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
[REPLACE]^String name = lhs .getFirstChild (  )  ;^113^^^^^64^122^[REPLACE] String name = lhs.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ConstCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  Set initializedConstants  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType CONST_REASSIGNED_VALUE_ERROR  [TYPE]  Var var  [TYPE]  Node lhs  n  parent  [TYPE]  String name 
