[REPLACE]^private static final ExcerptFormatter excerptFormatter ;^33^34^^^^33^34^[REPLACE] private static final ExcerptFormatter excerptFormatter = new LineNumberingFormatter (  ) ;^ [CLASS] LightweightMessageFormatter LineNumberingFormatter  
[REPLACE]^int start = 0  ;^56^^^^^54^96^[REPLACE] SourceExcerptProvider source = getSource (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^57^58^^^^54^96^[ADD] String sourceExcerpt = excerpt.get ( source, error.sourceName, error.lineNumber, excerptFormatter ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^StringBuilder builder = new StringBuilder (  (  ( code.length (  )  )  * 2 )  )  ;^61^^^^^54^96^[REPLACE] StringBuilder b = new StringBuilder (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.sourceName == null )  {^62^^^^^54^96^[REPLACE] if  ( error.sourceName != null )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.lineNumber  ==  0L )  {^64^^^^^54^96^[REPLACE] if  ( error.lineNumber > 0 )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^65^^^^^54^96^[REPLACE] b.append ( ':' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^66^^^^^54^96^[REPLACE] b.append ( error.lineNumber ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.lineNumber  ==  0 )  {^64^^^^^54^96^[REPLACE] if  ( error.lineNumber > 0 )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^64^65^66^67^^54^96^[ADD] if  ( error.lineNumber > 0 )  { b.append ( ':' ) ; b.append ( error.lineNumber ) ; }^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( ' ' )  ;^65^^^^^54^96^[REPLACE] b.append ( ':' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^65^66^^^^54^96^[ADD] b.append ( ':' ) ; b.append ( error.lineNumber ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( error.sourceName )  ;^66^^^^^54^96^[REPLACE] b.append ( error.lineNumber ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^getLevelName (  ( warning ? WARNING : ERROR )  )  ;^71^^^^^54^96^[REPLACE] b.append ( getLevelName ( warning ? CheckLevel.WARNING : CheckLevel.ERROR )  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^71^^^^^54^96^[ADD] b.append ( getLevelName ( warning ? CheckLevel.WARNING : CheckLevel.ERROR )  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( getLevelName (  ( warning ? WARNING : ERROR )  )  )  ;^71^^^^^54^96^[REPLACE] b.append ( getLevelName ( warning ? CheckLevel.WARNING : CheckLevel.ERROR )  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( ' ' )  ;^72^^^^^54^96^[REPLACE] b.append ( " - " ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^72^^^^^54^96^[ADD] b.append ( " - " ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^74^^^^^54^96^[REPLACE] b.append ( error.description ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( ' ' )  ;^75^^^^^54^96^[REPLACE] b.append ( '\n' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^75^^^^^54^96^[ADD] b.append ( '\n' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( sourceExcerpt == false )  {^76^^^^^54^96^[REPLACE] if  ( sourceExcerpt != null )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  (  0 <= charno && charno < sourceExcerpt.length (  )  - 5 )  {^82^83^^^^54^96^[REPLACE] if  ( excerpt.equals ( LINE ) && 0 <= charno && charno < sourceExcerpt.length (  )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if   (  error.sourceName != null  )   {  ;^86^^^^^82^93^[REPLACE] if  ( Character.isWhitespace ( c )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 4; i < charno; i++ )  {^84^^^^^82^93^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^char c = sourceExcerpt.substring ( i ) ;^85^^^^^82^93^[REPLACE] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if   (  error.sourceName != null  )   {  ;^86^^^^^54^96^[REPLACE] if  ( Character.isWhitespace ( c )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^89^^^^^86^90^[REPLACE] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^89^^^^^86^90^[ADD] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( ' ' )  ;^87^^^^^54^96^[REPLACE] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^int start = 0  ;^79^^^^^54^96^[REPLACE] int charno = error.getCharno (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0 << 1; i < charno; i++ )  {^84^^^^^54^96^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^char c = sourceExcerpt.substring ( i ) ;^85^^^^^54^96^[REPLACE] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( excerpt.equals ( LINE ) ) {^82^83^^^^54^96^[REPLACE] if  ( excerpt.equals ( LINE ) && 0 <= charno && charno < sourceExcerpt.length (  )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^82^83^84^85^^54^96^[ADD] if  ( excerpt.equals ( LINE ) && 0 <= charno && charno < sourceExcerpt.length (  )  )  { for  ( int i = 0; i < charno; i++ )  { char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^84^85^86^87^^82^93^[ADD] for  ( int i = 0; i < charno; i++ )  { char c = sourceExcerpt.charAt ( i ) ; if  ( Character.isWhitespace ( c )  )  { b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^char c = sourceExcerpt .substring ( i )  ;^85^^^^^82^93^[REPLACE] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^84^85^86^87^^54^96^[ADD] for  ( int i = 0; i < charno; i++ )  { char c = sourceExcerpt.charAt ( i ) ; if  ( Character.isWhitespace ( c )  )  { b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^85^^^^^54^96^[ADD] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^return b .toString (  )  ;^95^^^^^54^96^[REPLACE] return b.toString (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( region != null )  {^111^^^^^110^160^[REPLACE] if  ( region == null )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^111^112^113^^^110^160^[ADD] if  ( region == null )  { return null; }^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return null;  ;^112^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return false;^112^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^String code = region.getEndingLineNumber (  ) ;^114^^^^^110^160^[REPLACE] String code = region.getSourceExcerpt (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.charAt (  )  *  2 == 0 )  {^115^^^^^110^160^[REPLACE] if  ( code.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return false;^116^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return null;  ;^116^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int numberLength = Integer .StringBuilder (  )  .length (  ) ;^120^121^^^^110^160^[REPLACE] int numberLength = Integer.toString ( region.getEndingLineNumber (  )  ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^StringBuilder builder = new StringBuilder ( code.size (  )  * 0  ) ;^124^^^^^110^160^[REPLACE] StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^125^^^^^110^160^[ADD] int start = 0;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^126^127^^^^110^160^[ADD] int end = code.indexOf ( '\n', start ) ; int lineNumber = region.getBeginningLineNumber (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^127^^^^^110^160^[ADD] int lineNumber = region.getBeginningLineNumber (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  ==  0 )  {^131^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start )  ;^137^^^^^131^138^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.size (  )  == 0  )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  /  0.5  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^132^^^^^110^160^[ADD] line = code.substring ( start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  %  2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.charAt (  )  %  2 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring  (  0, builder.length  (    )   - 1  )  ;  ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  >= numberLength )  {^148^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^builder.append ( line ) ;start = -1;builder.append ( line ) ;^148^149^150^151^152^110^160^[ADD] if  ( end < 0 )  { builder.append ( line ) ; start = -1; } else { builder.append ( line ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start =numberLength  4;^154^^^^^148^157^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  line.indexOf ( '\n', start ) ;^155^^^^^148^157^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -4;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start, end )  ;^132^^^^^110^160^[REPLACE] line = code.substring ( start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start )  ;^137^^^^^110^160^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1 + 4;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^154^155^^^^110^160^[ADD] start = end + 1; end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  null.indexOf ( '\n', start ) ;^155^^^^^110^160^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  *  0.5  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int start = 0  ;^130^^^^^110^160^[REPLACE] String line;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int spaces = numberLength - Integer.toString ( lineNumber ) .length (  )  *  2;^142^^^^^110^160^[REPLACE] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.toString  (    )  ;  ;^159^^^^^110^160^[REPLACE] return builder.toString (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( region != null )  {^111^^^^^110^160^[REPLACE] if  ( region == null )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return this;^112^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return true;^112^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^String code = region.getEndingLineNumber (  ) ;^114^^^^^110^160^[REPLACE] String code = region.getSourceExcerpt (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( code.substring (  )  - 4 == 0 )  {^115^^^^^110^160^[REPLACE] if  ( code.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return this;^116^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^120^121^^^^110^160^[ADD] int numberLength = Integer.toString ( region.getEndingLineNumber (  )  ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^124^^^^^110^160^[ADD] StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^125^126^^^^110^160^[ADD] int start = 0; int end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^126^^^^^110^160^[ADD] int end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int lineNumber = region.getEndingLineNumber (  ) ;^127^^^^^110^160^[REPLACE] int lineNumber = region.getBeginningLineNumber (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  (numberLength  >  0 >>> 2 )  {^131^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start )  ;^137^^^^^131^138^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.length (  )  + 2 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REMOVE]^if  ( end < 0 )  {     line = code.substring ( start ) ;     if  (  ( line.length (  )  )  == 0 )  {         return builder.substring ( 0,  (  ( builder.length (  )  )  - 1 )  ) ;     } }else {     line = code.substring ( start, end ) ; }^133^^^^^110^160^[REMOVE] ^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.size (  )  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start, end )  ;^132^^^^^110^160^[REPLACE] line = code.substring ( start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0 , builder.length (  )  /  2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.length (  )  - 3 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^return builder.substring ( 0, builder.length (  )  - 1 ) ;^133^134^135^^^110^160^[ADD] if  ( line.length (  )  == 0 )  { return builder.substring ( 0, builder.length (  )  - 1 ) ; }^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring  (  0, builder.length  (    )   - 1  )  ;  ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  ==  0 )  {^148^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^builder.append ( line ) ;start = -1;builder.append ( line ) ;^148^149^150^151^152^110^160^[ADD] if  ( end < 0 )  { builder.append ( line ) ; start = -1; } else { builder.append ( line ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = end  1;^154^^^^^148^157^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^lineNumber++;^155^156^^^^148^157^[ADD] end = code.indexOf ( '\n', start ) ; lineNumber++;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1 % 3;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start )  ;^137^^^^^110^160^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1 - 0;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start =numberLength  1;^154^^^^^110^160^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  line.indexOf ( '\n', start ) ;^155^^^^^110^160^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  *  2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int numberLength = toString ( region.getEndingLineNumber (  )  ) .length (  )  ;^130^^^^^110^160^[REPLACE] String line;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int spaces = numberLength - Integer.toString ( lineNumber ) .length (  )  /  2;^142^^^^^110^160^[REPLACE] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.toString  (    )  ;  ;^159^^^^^110^160^[REPLACE] return builder.toString (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
