[REPLACE]^private  AbstractCompiler compiler;^43^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  
[REPLACE]^private  AstChangeProxy changeProxy;^62^^^^^^^[REPLACE] private final AstChangeProxy changeProxy;^ [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  
[REPLACE]^private final Result result  = null ;^63^^^^^^^[REPLACE] private final Result result = new Result (  ) ;^ [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  
[REPLACE]^private  Result result;^124^^^^^^^[REPLACE] private final Result result;^ [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener  
[REPLACE]^this.compiler =  null;^46^^^^^45^47^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result 
[REPLACE]^this.changeProxy  =  this.changeProxy ;^70^^^^^69^73^[REPLACE] this.changeProxy = new AstChangeProxy (  ) ;^[METHOD] <init> [TYPE] RemoveConstantExpressions$RemoveConstantRValuesCallback() [PARAMETER] [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result 
[REPLACE]^this.changeProxy .replaceWith ( true , this )  ;^71^72^^^^69^73^[REPLACE] this.changeProxy.registerListener ( new ReportCodeHasChangedListener ( result )  ) ;^[METHOD] <init> [TYPE] RemoveConstantExpressions$RemoveConstantRValuesCallback() [PARAMETER] [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result 
[REPLACE]^this.result =  null;^127^^^^^126^128^[REPLACE] this.result = result;^[METHOD] <init> [TYPE] Result) [PARAMETER] Result result [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result 
[REPLACE]^List<Node> subexpressions = Lists.newArrayList (  ) ;^51^^^^^50^54^[REPLACE] RemoveConstantRValuesCallback cb = new RemoveConstantRValuesCallback (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverse ( false, root, cb ) ;^52^^^^^50^54^[REPLACE] NodeTraversal.traverse ( null, root, cb ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node externs  root 
[REPLACE]^cb.getResult (  )  .Result (  )  ;^53^^^^^50^54^[REPLACE] cb.getResult (  ) .notifyCompiler ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node externs  root 
[REPLACE]^cb .getSideEffectNodes ( externs )  .notifyCompiler ( compiler ) ;^53^^^^^50^54^[REPLACE] cb.getResult (  ) .notifyCompiler ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  RemoveConstantRValuesCallback cb  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node externs  root 
[REPLACE]^if  ( node.getType (  )   ==  Token.EXPR_RESULT )  {^85^^^^^84^93^[REPLACE] if  ( node.getType (  )  != Token.EXPR_RESULT )  {^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[ADD]^return;^85^86^87^^^84^93^[ADD] if  ( node.getType (  )  != Token.EXPR_RESULT )  { return; }^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^return result;^86^^^^^84^93^[REPLACE] return;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^Node exprBody = parent.getFirstChild (  ) ;^89^^^^^84^93^[REPLACE] Node exprBody = node.getFirstChild (  ) ;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^90^^^^^84^93^[REPLACE] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[ADD]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^90^91^92^^^84^93^[ADD] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  { changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ; }^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^changeProxy.replaceWith ( exprBody, node, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^[REPLACE] changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( parent )  ) ;^91^^^^^84^93^[REPLACE] changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^List<Node> replacements = Lists.newArrayList (  ) ;^99^^^^^98^112^[REPLACE] List<Node> subexpressions = Lists.newArrayList (  ) ;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^NodeTraversal.traverse ( this, node, new GatherSideEffectSubexpressionsCallback ( this,^100^101^102^103^^98^112^[REPLACE] NodeTraversal.traverse ( null, node, new GatherSideEffectSubexpressionsCallback ( null,^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^List<Node> subexpressions = Lists.newArrayList (  ) ;^107^^^^^98^112^[REPLACE] List<Node> replacements = Lists.newArrayList (  ) ;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^List<Node> subexpressions = Lists.newArrayList (  ) ;^108^^^^^98^112^[REPLACE] for  ( Node subexpression : subexpressions )  {^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[ADD]^^108^109^110^^^98^112^[ADD] for  ( Node subexpression : subexpressions )  { replacements.add ( new Node ( Token.EXPR_RESULT, subexpression )  ) ; }^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^return null;^111^^^^^98^112^[REPLACE] return replacements;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^return;^115^^^^^114^116^[REPLACE] return result;^[METHOD] getResult [TYPE] Result [PARAMETER] [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result 
[REPLACE]^result.changed = false;^131^^^^^130^132^[REPLACE] result.changed = true;^[METHOD] nodeRemoved [TYPE] void [PARAMETER] Node node [CLASS] RemoveConstantExpressions RemoveConstantRValuesCallback ReportCodeHasChangedListener   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node 
[REPLACE]^private  AstChangeProxy changeProxy;^62^^^^^^^[REPLACE] private final AstChangeProxy changeProxy;^[METHOD] nodeRemoved [TYPE] void [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node 
[REPLACE]^private  Result result = new Result (  ) ;^63^^^^^^^[REPLACE] private final Result result = new Result (  ) ;^[METHOD] nodeRemoved [TYPE] void [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node 
[REPLACE]^this.changeProxy  =  this.changeProxy ;^70^^^^^69^73^[REPLACE] this.changeProxy = new AstChangeProxy (  ) ;^[METHOD] <init> [TYPE] RemoveConstantExpressions$RemoveConstantRValuesCallback() [PARAMETER] [CLASS] RemoveConstantRValuesCallback   [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  boolean false  true 
[REPLACE]^this.changeProxy .replaceWith ( null , null )  ;^71^72^^^^69^73^[REPLACE] this.changeProxy.registerListener ( new ReportCodeHasChangedListener ( result )  ) ;^[METHOD] <init> [TYPE] RemoveConstantExpressions$RemoveConstantRValuesCallback() [PARAMETER] [CLASS] RemoveConstantRValuesCallback   [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  boolean false  true 
[REPLACE]^if  ( node.getType (  )   ==  Token.EXPR_RESULT )  {^85^^^^^84^93^[REPLACE] if  ( node.getType (  )  != Token.EXPR_RESULT )  {^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^return result;^86^^^^^84^93^[REPLACE] return;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^Node exprBody = parent.getType (  ) ;^89^^^^^84^93^[REPLACE] Node exprBody = node.getFirstChild (  ) ;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^90^^^^^84^93^[REPLACE] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  {^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[ADD]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^90^91^92^^^84^93^[ADD] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( exprBody )  )  { changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ; }^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^changeProxy.replaceWith ( node, node, getSideEffectNodes ( exprBody )  ) ;^91^^^^^84^93^[REPLACE] changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^changeProxy.replaceWith ( parent, node, getSideEffectNodes ( parent )  ) ;^91^^^^^84^93^[REPLACE] changeProxy.replaceWith ( parent, node, getSideEffectNodes ( exprBody )  ) ;^[METHOD] trySimplify [TYPE] void [PARAMETER] Node parent Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node exprBody  node  parent 
[REPLACE]^List<Node> replacements = Lists.newArrayList (  ) ;^99^^^^^98^112^[REPLACE] List<Node> subexpressions = Lists.newArrayList (  ) ;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^NodeTraversal.traverse ( this, node, new GatherSideEffectSubexpressionsCallback ( this,^100^101^102^103^^98^112^[REPLACE] NodeTraversal.traverse ( null, node, new GatherSideEffectSubexpressionsCallback ( null,^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^List<Node> subexpressions = Lists.newArrayList (  ) ;^107^^^^^98^112^[REPLACE] List<Node> replacements = Lists.newArrayList (  ) ;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^List<Node> subexpressions = Lists.newArrayList (  ) ;^108^^^^^98^112^[REPLACE] for  ( Node subexpression : subexpressions )  {^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^return null;^111^^^^^98^112^[REPLACE] return replacements;^[METHOD] getSideEffectNodes [TYPE] List [PARAMETER] Node node [CLASS] RemoveConstantRValuesCallback   [TYPE]  List replacements  subexpressions  [TYPE]  boolean false  true  [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  Node node  subexpression 
[REPLACE]^return;^115^^^^^114^116^[REPLACE] return result;^[METHOD] getResult [TYPE] Result [PARAMETER] [CLASS] RemoveConstantRValuesCallback   [TYPE]  AstChangeProxy changeProxy  [TYPE]  Result result  [TYPE]  boolean false  true 
[REPLACE]^this.result =  null;^127^^^^^126^128^[REPLACE] this.result = result;^[METHOD] <init> [TYPE] Result) [PARAMETER] Result result [CLASS] ReportCodeHasChangedListener   [TYPE]  Result result  [TYPE]  boolean false  true 
[ADD]^^127^^^^^126^128^[ADD] this.result = result;^[METHOD] <init> [TYPE] Result) [PARAMETER] Result result [CLASS] ReportCodeHasChangedListener   [TYPE]  Result result  [TYPE]  boolean false  true 
[REPLACE]^result.changed = false;^131^^^^^130^132^[REPLACE] result.changed = true;^[METHOD] nodeRemoved [TYPE] void [PARAMETER] Node node [CLASS] ReportCodeHasChangedListener   [TYPE]  Result result  [TYPE]  Node node  [TYPE]  boolean false  true 
