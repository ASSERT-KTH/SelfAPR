[REPLACE]^private  Set<String> parameters;^327^^^^^^^[REPLACE] private final Set<String> parameters;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private boolean sideEffectSeen ;^329^^^^^^^[REPLACE] private boolean sideEffectSeen = false;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private Set<String> parametersReferenced ;^330^^^^^^^[REPLACE] private Set<String> parametersReferenced = Sets.newHashSet (  ) ;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private int loopsEntered ;^331^^^^^^^[REPLACE] private int loopsEntered = 0;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^this.parameters =  this;^334^^^^^333^336^[REPLACE] this.parameters = parameters;^[METHOD] <init> [TYPE] Set) [PARAMETER] String> parameters String> locals [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[ADD]^this.locals = locals;^334^335^^^^333^336^[ADD] this.parameters = parameters; this.locals = locals;^[METHOD] <init> [TYPE] Set) [PARAMETER] String> parameters String> locals [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[REPLACE]^this.locals =  null;^335^^^^^333^336^[REPLACE] this.locals = locals;^[METHOD] <init> [TYPE] Set) [PARAMETER] String> parameters String> locals [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[ADD]^^335^^^^^333^336^[ADD] this.locals = locals;^[METHOD] <init> [TYPE] Set) [PARAMETER] String> parameters String> locals [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^54^^^^^52^76^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^54^55^56^^58^52^76^[ADD] if  ( node.getType (  )  == Token.NAME )  { Node replacementTemplate = replacements.get ( node.getString (  )  ) ; if  ( replacementTemplate != null )  { Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^if  ( replacementTemplate ==parent )  {^56^^^^^52^76^[REPLACE] if  ( replacementTemplate != null )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^return replacementTemplate;^65^^^^^52^76^[REPLACE] return replacement;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacement = replacement.cloneTree (  ) ;^63^^^^^52^76^[REPLACE] Node replacement = replacementTemplate.cloneTree (  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacementTemplate = replacements .keySet (  )  ( replacementTemplate^55^^^^^52^76^[REPLACE] Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^if  (parent == this )  {^56^^^^^52^76^[REPLACE] if  ( replacementTemplate != null )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^56^57^58^59^60^52^76^[ADD] if  ( replacementTemplate != null )  {  Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacementTemplate = replacements.get ( replacementTemplate.getString (  )  ) ;^55^^^^^52^76^[REPLACE] Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^55^^^^^52^76^[ADD] Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacement = parent.cloneTree (  ) ;^63^^^^^52^76^[REPLACE] Node replacement = replacementTemplate.cloneTree (  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^63^64^^^^52^76^[ADD] Node replacement = replacementTemplate.cloneTree (  ) ; parent.replaceChild ( node, replacement ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^69^^^^^52^76^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^69^70^^72^73^52^76^[ADD] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = inject ( c, node, replacements ) ; }^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^c =  injereplacementTemplatet ( replacementTemplate, node, replareplacementTemplateements ) ;^72^^^^^52^76^[REPLACE] c = inject ( c, node, replacements ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^for  ( Node c =  node.getFirstChild (  ) ; replacementTemplate !^69^^^^^52^76^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^for  ( Node c = replacementTemplate.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^return replacementTemplate;^75^^^^^52^76^[REPLACE] return node;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Set<String> set = Sets.newHashSet (  ) ;^85^^^^^82^120^[REPLACE] LinkedHashMap<String, Node> argMap = Maps.newLinkedHashMap (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node cArg = callNode.getLastChild (  ) .getNext (  ) ;^88^^^^^82^120^[REPLACE] Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^88^^^^^82^120^[ADD] Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( callNode.getLastChild (  ) .getType (  )   ==  Token.NAME )  {^89^^^^^82^120^[REPLACE] if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^90^^^^^82^120^[REPLACE] if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^90^91^92^93^94^82^120^[ADD] if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {  Preconditions.checkNotNull ( cArg ) ; Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ; cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^90^97^[REPLACE] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^cArg =  fnArg.getNext (  ) ;^94^^^^^82^120^[REPLACE] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^94^^^^^82^120^[ADD] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( fnArg )   ) ;^96^^^^^90^97^[REPLACE] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^96^^^^^90^97^[ADD] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( callNode )   ) ;^96^^^^^90^97^[REPLACE] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( cArg == null )  {^101^^^^^82^120^[REPLACE] if  ( cArg != null )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^argMap.put ( fnArg.getString (  ) , cArg ) ;cArg = cArg.getNext (  ) ;argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^101^102^103^104^105^82^120^[ADD] if  ( cArg != null )  { argMap.put ( fnArg.getString (  ) , cArg ) ; cArg = cArg.getNext (  ) ; } else { argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^argMap.put ( fnNode.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^argMap.put ( fnArg.getString (  ) , NodeUtil .getNameReferenceCount ( fnNode , uniquePlaceholder )   ) ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^cArg =  fnArg.getNext (  ) ;^103^^^^^82^120^[REPLACE] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^103^^^^^82^120^[ADD] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  { set.add ( n.getString (  )  ) ;^100^^^^^82^120^[REPLACE] for  ( Node fnArg : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^int anonArg = 4;^111^^^^^82^120^[REPLACE] int anonArg = 0;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^while  ( cArg == null )  {^112^^^^^82^120^[REPLACE] while  ( cArg != null )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^cArg =  fnArg.getNext (  ) ;^116^^^^^82^120^[REPLACE] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String uniquePlaceholder = getUniqueAnonymousParameterName ( 0 ) ;^113^114^^^^82^120^[REPLACE] String uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^113^114^^^^82^120^[ADD] String uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^cArg =  null.getNext (  ) ;^116^^^^^82^120^[REPLACE] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String uniquePlaceholder = getUniqueAnonymousParameterName ( null ) ;^113^114^^^^82^120^[REPLACE] String uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return false;^119^^^^^82^120^[REPLACE] return argMap;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier .keySet (  )  ;^127^^^^^125^128^[REPLACE] return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[METHOD] getUniqueAnonymousParameterName [TYPE] String [PARAMETER] String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Supplier safeNameIdSupplier  [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered 
[REPLACE]^Set<String> set = Sets.newHashSet (  ) ;^140^^^^^139^144^[REPLACE] Set<String> names = getFunctionParameterSet ( fnNode ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node fnNode 
[REPLACE]^Set<String> set = Sets.newHashSet (  ) ;^141^^^^^139^144^[REPLACE] Set<String> unsafeNames = Sets.newHashSet (  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node fnNode 
[ADD]^^141^^^^^139^144^[ADD] Set<String> unsafeNames = Sets.newHashSet (  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node fnNode 
[REPLACE]^return findModifiedParameters ( fnNode, true, names, null ) ;^142^143^^^^139^144^[REPLACE] return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node fnNode 
[REPLACE]^Preconditions.checkArgument ( null == null ) ;^164^^^^^162^178^[REPLACE] Preconditions.checkArgument ( unsafe != null ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^165^^^^^162^178^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^^165^166^167^168^169^162^178^[ADD] if  ( n.getType (  )  == Token.NAME )  { if  ( names.contains ( n.getString (  )  )  )  { if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( null.contains ( n.getString (  )  )  )  {^166^^^^^162^178^[REPLACE] if  ( names.contains ( n.getString (  )  )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^^166^167^168^169^^162^178^[ADD] if  ( names.contains ( n.getString (  )  )  )  { if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( canNameValueChange ( parent, parent )  )  {^167^^^^^162^178^[REPLACE] if  ( canNameValueChange ( n, parent )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^^167^168^169^^^162^178^[ADD] if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe.contains ( n.getString (  )  ) ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REMOVE]^&& namesAfterSideEffects.contains ( argName )  )  { safe = false;^168^^^^^162^178^[REMOVE] ^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe.add ( parent.getString (  )  ) ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe .contains ( this )  ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe.add ( n .getParent (  )   ) ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( 0.contains ( n.getString (  )  )  )  {^166^^^^^162^178^[REPLACE] if  ( names.contains ( n.getString (  )  )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^unsafe.add ( n.getString (  )  ) ;^167^168^169^^^162^178^[ADD] if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe .contains ( null )  ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe.add ( parent.getParent (  )  ) ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( canNameValueChange ( n, n )  )  {^167^^^^^162^178^[REPLACE] if  ( canNameValueChange ( n, parent )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^unsafe.contains ( parent.getString (  )  ) ;^168^^^^^162^178^[REPLACE] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^^168^^^^^162^178^[ADD] unsafe.add ( n.getString (  )  ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^String name = n.getString (  ) ;^173^^^^^162^178^[REPLACE] for  ( Node c : n.children (  )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^^173^174^175^^^162^178^[ADD] for  ( Node c : n.children (  )  )  { findModifiedParameters ( c, n, names, unsafe ) ; }^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^return 0;^177^^^^^162^178^[REPLACE] return unsafe;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^int type = n.getType (  ) ;^192^^^^^191^195^[REPLACE] int type = parent.getType (  ) ;^[METHOD] canNameValueChange [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  type  [TYPE]  Node n  parent 
[REPLACE]^return   parent.getFirstChild (  )  ;^193^194^^^^191^195^[REPLACE] return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[METHOD] canNameValueChange [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  type  [TYPE]  Node n  parent 
[REPLACE]^if  ( this.isEmpty (  )  )  {^207^^^^^206^278^[REPLACE] if  ( argMap.isEmpty (  )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^return unsafe;^209^^^^^206^278^[REPLACE] return;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Preconditions.checkState ( fnNode.getType (  )   &&  Token.FUNCTION ) ;^212^^^^^206^278^[REPLACE] Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^parent.replaceChild ( node, replacement ) ;^212^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Preconditions.checkArgument ( fn      == Token.FUNCTION ) ;^212^^^^^206^278^[REPLACE] Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Node block = block.getLastChild (  ) ;^213^^^^^206^278^[REPLACE] Node block = fnNode.getLastChild (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Set<String> parameters = null.entrySet (  ) ;^215^^^^^206^278^[REPLACE] Set<String> parameters = argMap.keySet (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, fnNode ) ;^219^220^^^^206^278^[REPLACE] Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^219^220^^^^206^278^[ADD] Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( 1.contains ( argName )  )  {^225^^^^^206^278^[REPLACE] if  ( namesNeedingTemps.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( NodeUtil.mayEffectMutableState ( cArg )  ) {^232^^^^^206^278^[REPLACE] if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( NodeUtil.canBeSideEffected ( cArg )^243^^^^^206^278^[REPLACE] } else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  (  namesAfterSideEffects.add ( argName )  )  {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^if  (  (  ( isAssignmentOp ( n )  )  ||  ( type ==  ( INC )  )  )  ||  ( type ==  ( DEC )  )  )  {     Node lhs = n.getFirstChild (  ) ;     if  ( ! ( isLocalName ( lhs )  )  )  {         sideEffect = true;     } }else     if  ( type ==  ( CALL )  )  {         sideEffect = functionCallHasSideEffects ( n ) ;     }else         if  ( type ==  ( NEW )  )  {             sideEffect = constructorCallHasSideEffects ( n ) ;         }else             if  ( type ==  ( DELPROP )  )  {                 sideEffect = true;             }^247^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( references  !=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^}   String name = cArg.getString (  ) ;^250^251^252^253^254^206^278^[ADD] else if  ( references > 1 )  {  switch  ( cArg.getType (  )  )  { case Token.NAME: String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ! ( null.isExported ( name )  ) ;^255^^^^^206^278^[REPLACE] safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = false;^263^^^^^206^278^[REPLACE] safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  /  0  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^269^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String name = cArg.getParent (  ) ;^254^^^^^206^278^[REPLACE] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^254^^^^^206^278^[ADD] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^263^^^^^206^278^[ADD] safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  - 2 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String name = cArg .getParent (  )  ;^254^^^^^206^278^[REPLACE] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^249^^^^^247^272^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  <=  1 >>> 3 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^255^^^^^206^278^[ADD] safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^254^255^^^^206^278^[ADD] String name = cArg.getString (  ) ; safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^249^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^255^256^^^^206^278^[ADD] safe = ! ( convention.isExported ( name )  ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^263^264^^^^206^278^[ADD] safe = true; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  *  0.5  < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^246^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^246^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  else {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  (type  <  1 - 2 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^if  (  ( canBeSideEffected ( cArg )  )  &&  ( namesAfterSideEffects.contains ( argName )  )  )  {     safe = false; }else     if  ( references > 1 )  {         switch  ( cArg.getType (  )  )  {             case NAME :                 String name = cArg.getString (  ) ;                 safe = ! ( convention.isExported ( name )  ) ;                 break;             case NULL :             case VOID :             case THIS :             case FALSE :             case TRUE :             case NUMBER :                 safe = true;                 break;             case STRING :                 safe =  ( cArg.getString (  ) .length (  )  )  < 2;                 break;             default :                 safe = false;                 break;         }     }^250^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^266^267^^^^206^278^[ADD] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^269^270^^^^206^278^[ADD] safe = false; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^255^256^^^^206^278^[ADD] safe = ! ( convention.isExported ( name )  ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  + 3 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  else {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  /  2 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^242^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  else {^243^^^^^206^278^[REPLACE] } else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^}   safe = false;^243^244^^246^247^206^278^[ADD] else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {  safe = false; } else if  ( NodeUtil.canBeSideEffected ( cArg )^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( NodeUtil.canBeSideEffected ( cArg ) ) {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  ==  4 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  %  0.5  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  - 4 < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  *  0  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^269^270^^^^206^278^[ADD] safe = false; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^249^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  (  namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  + 4 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^safe = ! ( convention.isExported ( name )  ) ;^254^255^^^^206^278^[ADD] String name = cArg.getString (  ) ; safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  %  0.5  < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  >=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  %  2 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( safe )  {^274^^^^^206^278^[REPLACE] if  ( !safe )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^namesNeedingTemps.contains ( argName ) ;^275^^^^^206^278^[REPLACE] namesNeedingTemps.add ( argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^&& namesAfterSideEffects.contains ( argName )  )  { safe = false;^275^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^242^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .size (  )  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^266^267^^^^206^278^[ADD] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Set<String> set = Sets.newHashSet (  ) ;^223^^^^^206^278^[REPLACE] for  ( Map.Entry<String, Node> entry : argMap.entrySet (  )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String argName = this .getValue (  )  ;^224^^^^^206^278^[REPLACE] String argName = entry.getKey (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^224^^^^^206^278^[ADD] String argName = entry.getKey (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Node cArg = null.getKey (  ) ;^228^^^^^206^278^[REPLACE] Node cArg = entry.getValue (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^228^229^^^^206^278^[ADD] Node cArg = entry.getValue (  ) ; boolean safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^boolean safe = false;^229^^^^^206^278^[REPLACE] boolean safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^int references = NodeUtil.getNameReferenceCount ( fnNode, argName ) ;^230^^^^^206^278^[REPLACE] int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Set<String> locals =   parameters   ;^293^^^^^289^303^[REPLACE] Set<String> locals = Sets.newHashSet ( parameters ) ;^[METHOD] findParametersReferencedAfterSideEffect [TYPE] Set [PARAMETER] String> parameters Node root [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  ReferencedAfterSideEffect collector  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node root 
[REPLACE]^gatherLocalNames ( root, this ) ;^294^^^^^289^303^[REPLACE] gatherLocalNames ( root, locals ) ;^[METHOD] findParametersReferencedAfterSideEffect [TYPE] Set [PARAMETER] String> parameters Node root [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  ReferencedAfterSideEffect collector  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node root 
[REPLACE]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( 1, locals ) ;^296^297^^^^289^303^[REPLACE] ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[METHOD] findParametersReferencedAfterSideEffect [TYPE] Set [PARAMETER] String> parameters Node root [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  ReferencedAfterSideEffect collector  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node root 
[REPLACE]^NodeUtil .isLoopStructure ( root )  ;^298^299^300^301^^289^303^[REPLACE] NodeUtil.visitPostOrder ( root, collector, collector ) ;^[METHOD] findParametersReferencedAfterSideEffect [TYPE] Set [PARAMETER] String> parameters Node root [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  ReferencedAfterSideEffect collector  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node root 
[ADD]^^298^299^300^^^289^303^[ADD] NodeUtil.visitPostOrder ( root, collector,^[METHOD] findParametersReferencedAfterSideEffect [TYPE] Set [PARAMETER] String> parameters Node root [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  ReferencedAfterSideEffect collector  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node root 
[REPLACE]^return collector .ReferencedAfterSideEffect ( 1 , null )  ;^302^^^^^289^303^[REPLACE] return collector.getResults (  ) ;^[METHOD] findParametersReferencedAfterSideEffect [TYPE] Set [PARAMETER] String> parameters Node root [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  ReferencedAfterSideEffect collector  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node root 
[REPLACE]^return loopsEntered != 0;^339^^^^^338^340^[REPLACE] return parametersReferenced;^[METHOD] getResults [TYPE] Set [PARAMETER] [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  (   node    )  {^345^^^^^343^353^[REPLACE] if  ( NodeUtil.isLoopStructure ( node )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^return ! ( sideEffectSeen && parameters.add (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^[REPLACE] return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^return true ;^356^^^^^355^357^[REPLACE] return loopsEntered != 0;^[METHOD] inLoop [TYPE] boolean [PARAMETER] [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( NodeUtil.isLoopStructure ( node )  )  {^361^^^^^359^389^[REPLACE] if  ( NodeUtil.isLoopStructure ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  && !sideEffectSeen )  {^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REMOVE]^if  ( parameters.contains ( name )  )  {     parametersReferenced.add ( name ) ; }^363^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced .contains ( this )  ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  (  !sideEffectSeen )  {^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^363^364^^^367^359^389^[ADD] if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced.size (  ) ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( sideEffectSeen )  {^371^^^^^359^389^[REPLACE] if  ( !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^371^372^373^374^375^359^389^[ADD] if  ( !sideEffectSeen )  {  if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^373^^^^^359^389^[REPLACE] if  ( hasNonLocalSideEffect ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^sideEffectSeen = true;^373^374^375^^^359^389^[ADD] if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^sideEffectSeen = false;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^sideEffect = true; ;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  ) {^380^^^^^359^389^[REPLACE] if  ( inLoop (  )  || sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced.contains ( name ) ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^String name = n.getParent (  ) ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( parameters.add ( name )  )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^384^385^386^^^359^389^[ADD] if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced .contains ( null )  ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REMOVE]^if  ( !safe )  {     namesNeedingTemps.add ( argName ) ; }^384^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^String name = n .getParent (  )  ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( parameters .clear (  )   )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^boolean sideEffect = true;^395^^^^^394^416^[REPLACE] boolean sideEffect = false;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^int type = n.getNext (  ) ;^396^^^^^394^416^[REPLACE] int type = n.getType (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^396^^^^^394^416^[ADD] int type = n.getType (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n ) ) {^399^400^401^^^394^416^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  &&  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^412^^^^^394^416^[ADD] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ; ;^410^^^^^394^416^[REPLACE] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^410^^^^^394^416^[ADD] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; ;^408^^^^^394^416^[REPLACE] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^408^^^^^394^416^[ADD] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  ||  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  (references  ||  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( isLocalName ( lhs )  )  {^404^^^^^394^416^[REPLACE] if  ( !isLocalName ( lhs )  )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^405^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^405^^^^^394^416^[ADD] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^Node lhs = n .getLastChild (  )  ;^402^^^^^394^416^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^402^^^^^394^416^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REMOVE]^if  ( argMap.isEmpty (  )  )  {     return ; }^404^^^^^394^416^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = true;^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  (references  &&  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REMOVE]^if  ( ! ( isLocalName ( lhs )  )  )  {     sideEffect = true; }^411^^^^^394^416^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffectSeen = true; ;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  &&  Token.NEW )  {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^Node lhs = n.getLastChild (  ) ;^402^^^^^394^416^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^return true;^415^^^^^394^416^[REPLACE] return sideEffect;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^422^^^^^421^427^[REPLACE] if  ( NodeUtil.isName ( node )  )  {^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^return locals .clear (  )  ;^424^^^^^421^427^[REPLACE] return locals.contains ( name ) ;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^String name = node.getParent (  ) ;^423^^^^^421^427^[REPLACE] String name = node.getString (  ) ;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^return locals.add ( name ) ;^424^^^^^421^427^[REPLACE] return locals.contains ( name ) ;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^return true;^426^^^^^421^427^[REPLACE] return false;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node node 
[REPLACE]^Preconditions.checkState ( n.getType (  )   ==  Token.FUNCTION ) ;^434^^^^^433^446^[REPLACE] Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^434^^^^^433^446^[REPLACE] Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[ADD]^^434^^^^^433^446^[ADD] Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^435^^^^^433^446^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^switch  ( n.getString (  ) .getType (  )  )  {^436^^^^^433^446^[REPLACE] switch  ( n.getParent (  ) .getType (  )  )  {^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^names.add ( n.getParent (  )  ) ;^439^^^^^433^446^[REPLACE] names.add ( n.getString (  )  ) ;^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^names.add ( n .getParent (  )   ) ;^439^^^^^433^446^[REPLACE] names.add ( n.getString (  )  ) ;^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^443^^^^^433^446^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^Set<String> locals = Sets.newHashSet ( parameters ) ;^444^^^^^433^446^[REPLACE] gatherLocalNames ( c, names ) ;^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  ;^443^^^^^433^446^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^for  ( Node c = n.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] gatherLocalNames [TYPE] void [PARAMETER] Node n String> names [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node c  n 
[REPLACE]^Set<String> set = Sets .newHashSet (  )  ;^452^^^^^451^457^[REPLACE] Set<String> set = Sets.newHashSet (  ) ;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  { set.add ( n.getString (  )  ) ;^453^^^^^451^457^[REPLACE] for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^return null;^456^^^^^451^457^[REPLACE] return set;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private  Set<String> parameters;^327^^^^^^^[REPLACE] private final Set<String> parameters;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private boolean sideEffectSeen ;^329^^^^^^^[REPLACE] private boolean sideEffectSeen = false;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private Set<String> parametersReferenced  = null ;^330^^^^^^^[REPLACE] private Set<String> parametersReferenced = Sets.newHashSet (  ) ;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private int loopsEntered  = null ;^331^^^^^^^[REPLACE] private int loopsEntered = 0;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^this.parameters =  null;^334^^^^^333^336^[REPLACE] this.parameters = parameters;^[METHOD] <init> [TYPE] Set) [PARAMETER] String> parameters String> locals [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[REPLACE]^this.locals =  null;^335^^^^^333^336^[REPLACE] this.locals = locals;^[METHOD] <init> [TYPE] Set) [PARAMETER] String> parameters String> locals [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[REPLACE]^return loopsEntered != 0;^339^^^^^338^340^[REPLACE] return parametersReferenced;^[METHOD] getResults [TYPE] Set [PARAMETER] [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( node )  )  {^345^^^^^343^353^[REPLACE] if  ( NodeUtil.isLoopStructure ( node )  )  {^[METHOD] apply [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered  [TYPE]  Node node 
[ADD]^loopsEntered++;^345^346^347^^^343^353^[ADD] if  ( NodeUtil.isLoopStructure ( node )  )  { loopsEntered++; }^[METHOD] apply [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered  [TYPE]  Node node 
[REPLACE]^return ! ( sideEffectSeen && parameters.add (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^[REPLACE] return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered  [TYPE]  Node node 
[REPLACE]^return true ;^356^^^^^355^357^[REPLACE] return loopsEntered != 0;^[METHOD] inLoop [TYPE] boolean [PARAMETER] [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int loopsEntered 
[REPLACE]^if  ( NodeUtil.isLoopStructure ( node )  )  {^361^^^^^359^389^[REPLACE] if  ( NodeUtil.isLoopStructure ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  && !sideEffectSeen )  {^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced.size (  ) ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^363^364^^^367^359^389^[ADD] if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced .contains ( this )  ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^371^^^^^359^389^[REPLACE] if  ( !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^373^^^^^359^389^[REPLACE] if  ( hasNonLocalSideEffect ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REMOVE]^if  ( ! ( isLocalName ( lhs )  )  )  {     sideEffect = true; }^373^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^sideEffect = true; ;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^sideEffectSeen = false;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^374^^^^^359^389^[ADD] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  && sideEffectSeen )  {^380^^^^^359^389^[REPLACE] if  ( inLoop (  )  || sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   ||  Token.NAME )  {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^String name = n.getString (  ) ;parametersReferenced.add ( name ) ;^382^383^384^385^386^359^389^[ADD] if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced.contains ( name ) ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^String name = n.getType (  ) ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( parameters .clear (  )   )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^384^385^386^^^359^389^[ADD] if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^String name = n .getFirstChild (  )  ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^383^^^^^359^389^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( parameters.add ( name )  )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^parametersReferenced.add ( name ) ;^384^385^386^^^359^389^[ADD] if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^boolean sideEffect = true;^395^^^^^394^416^[REPLACE] boolean sideEffect = false;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^int type = n.getString (  ) ;^396^^^^^394^416^[REPLACE] int type = n.getType (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n ) ) {^399^400^401^^^394^416^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REMOVE]^if  ( type ==  ( CALL )  )  {     sideEffect = functionCallHasSideEffects ( n ) ; }else     if  ( type ==  ( NEW )  )  {         sideEffect = constructorCallHasSideEffects ( n ) ;     }else         if  ( type ==  ( DELPROP )  )  {             sideEffect = true;         }^399^^^^^394^416^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( type  !=  Token.CALL )  {^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  (loopsEntered  ||  Token.NEW )  {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( type  &&  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffectSeen = true; ;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^412^^^^^394^416^[ADD] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ; ;^410^^^^^394^416^[REPLACE] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( loopsEntered  !=  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; ;^408^^^^^394^416^[REPLACE] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( type  ||  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = true;^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^410^^^^^394^416^[ADD] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( isLocalName ( lhs )  )  {^404^^^^^394^416^[REPLACE] if  ( !isLocalName ( lhs )  )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^sideEffect = true;^404^405^406^^^394^416^[ADD] if  ( !isLocalName ( lhs )  )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^405^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^Node lhs = n.getString (  ) ;^402^^^^^394^416^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^402^^^^^394^416^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^405^^^^^394^416^[ADD] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  !=  Token.CALL )  {^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^407^408^409^410^^394^416^[ADD] else if  ( type == Token.CALL )  { sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ; } else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REMOVE]^if  ( type ==  ( CALL )  )  {     sideEffect = functionCallHasSideEffects ( n ) ; }else     if  ( type ==  ( NEW )  )  {         sideEffect = constructorCallHasSideEffects ( n ) ;     }else         if  ( type ==  ( DELPROP )  )  {             sideEffect = true;         }^409^^^^^394^416^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  ||  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^408^^^^^394^416^[ADD] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;sideEffect = true;^409^410^411^412^413^394^416^[ADD] else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  &&  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^return true;^415^^^^^394^416^[REPLACE] return sideEffect;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^422^^^^^421^427^[REPLACE] if  ( NodeUtil.isName ( node )  )  {^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  type  [TYPE]  Node node 
[REPLACE]^return locals .clear (  )  ;^424^^^^^421^427^[REPLACE] return locals.contains ( name ) ;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  type  [TYPE]  Node node 
[REPLACE]^String name = node .getFirstChild (  )  ;^423^^^^^421^427^[REPLACE] String name = node.getString (  ) ;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  type  [TYPE]  Node node 
[REPLACE]^return true;^426^^^^^421^427^[REPLACE] return false;^[METHOD] isLocalName [TYPE] boolean [PARAMETER] Node node [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  type  [TYPE]  Node node 
