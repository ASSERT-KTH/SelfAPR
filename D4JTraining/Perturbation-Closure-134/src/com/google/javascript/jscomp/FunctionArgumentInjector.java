[REPLACE]^private  Set<String> parameters;^327^^^^^^^[REPLACE] private final Set<String> parameters;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private  Set<String> locals;^328^^^^^^^[REPLACE] private final Set<String> locals;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private boolean sideEffectSeen  = null ;^329^^^^^^^[REPLACE] private boolean sideEffectSeen = false;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private Set<String> parametersReferenced ;^330^^^^^^^[REPLACE] private Set<String> parametersReferenced = Sets.newHashSet (  ) ;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^private int loopsEntered  = null ;^331^^^^^^^[REPLACE] private int loopsEntered = 0;^ [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^54^^^^^53^76^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REMOVE]^if  (  ( callNode.getFirstChild (  ) .getType (  )  )  !=  ( NAME )  )  {     if  ( isFunctionObjectCall ( callNode )  )  {         checkNotNull ( cArg ) ;         checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  ) ;         cArg = cArg.getNext (  ) ;     }else {         checkState (  ( ! ( isFunctionObjectApply ( callNode )  )  )  ) ;     } }^54^^^^^53^76^[REMOVE] ^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^if  ( replacementTemplate ==replacement )  {^56^^^^^53^76^[REPLACE] if  ( replacementTemplate != null )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^56^57^58^59^60^53^76^[ADD] if  ( replacementTemplate != null )  {  Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^return replacement;  ;^65^^^^^53^76^[REPLACE] return replacement;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacement = parent.children (  ) ;^63^^^^^53^76^[REPLACE] Node replacement = replacementTemplate.cloneTree (  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacementTemplate = null.get ( node.getParent (  )  ) ;^55^^^^^53^76^[REPLACE] Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^63^^^^^53^76^[ADD] Node replacement = replacementTemplate.cloneTree (  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^if  ( parentTemplate == null )  {^56^^^^^53^76^[REPLACE] if  ( replacementTemplate != null )  {^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^return replacementTemplate;^65^^^^^53^76^[REPLACE] return replacement;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^Node replacement = replacement.cloneTree (  ) ;^63^^^^^53^76^[REPLACE] Node replacement = replacementTemplate.cloneTree (  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^55^^^^^53^76^[ADD] Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[ADD]^^69^70^^72^73^53^76^[ADD] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = inject ( c, node, replacements ) ; }^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^c =  injereplacementTemplatet ( replacementTemplate, node, replareplacementTemplateements ) ;^72^^^^^53^76^[REPLACE] c = inject ( c, node, replacements ) ;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^return replacementTemplate;^75^^^^^53^76^[REPLACE] return node;^[METHOD] inject [TYPE] Node [PARAMETER] Node node Node parent Node> replacements [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Map replacements  [TYPE]  int loopsEntered  [TYPE]  Node c  node  parent  replacement  replacementTemplate 
[REPLACE]^String> unsafeNames = newHashSet (  )  ;^85^^^^^82^120^[REPLACE] LinkedHashMap<String, Node> argMap = Maps.newLinkedHashMap (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^88^^^^^82^120^[ADD] Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( callNode.getFirstChild (  ) .getType (  )   ==  Token.NAME )  {^89^^^^^82^120^[REPLACE] if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^90^^^^^82^120^[REPLACE] if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^90^97^[REPLACE] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkState ( !NodeUtil.isAssignmentOp ( fnNode )  ) ;^96^^^^^90^97^[REPLACE] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^94^^^^^82^120^[ADD] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^c = c.getNext (  )  ;^94^^^^^82^120^[REPLACE] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^90^^^^^82^120^[REPLACE] if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkArgument ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^90^97^[REPLACE] Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( cArg == null )  {^101^^^^^82^120^[REPLACE] if  ( cArg != null )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^argMap.put ( fnArg.getParent (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^cArg.getString (  )  ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^isFunctionObjectCall ( callNode )  ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^c = c.getNext (  )  ;^103^^^^^82^120^[REPLACE] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^if  ( cArg == this )  {^101^^^^^82^120^[REPLACE] if  ( cArg != null )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^argMap.put ( fnNode.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^argMap.put ( fnNode.getParent (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^argMap.put ( fnArg.getString (  ) , NodeUtil .getNameReferenceCount ( callNode , uniquePlaceholder )   ) ;^105^^^^^101^106^[REPLACE] argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^103^^^^^82^120^[ADD] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Node c  ;^100^^^^^82^120^[REPLACE] for  ( Node fnArg : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^int anonArg = 0 + 4;^111^^^^^82^120^[REPLACE] int anonArg = 0;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[ADD]^^116^^^^^82^120^[ADD] cArg = cArg.getNext (  ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^String uniquePlaceholder = getUniqueAnonymousParameterName ( null ) ;^113^114^^^^82^120^[REPLACE] String uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^return argMap;  ;^119^^^^^82^120^[REPLACE] return argMap;^[METHOD] getFunctionCallParameterMap [TYPE] LinkedHashMap [PARAMETER] Node fnNode Node callNode String> safeNameIdSupplier [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  Node cArg  callNode  fnArg  fnNode  [TYPE]  Supplier safeNameIdSupplier  [TYPE]  String uniquePlaceholder  [TYPE]  int anonArg  loopsEntered  [TYPE]  LinkedHashMap argMap 
[REPLACE]^Preconditions.checkArgument ( null == null ) ;^164^^^^^163^178^[REPLACE] Preconditions.checkArgument ( unsafe != null ) ;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^165^^^^^163^178^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( names.add ( n.getString (  )  )  )  {^166^^^^^163^178^[REPLACE] if  ( names.contains ( n.getString (  )  )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^167^^^^^163^178^[REPLACE] if  ( canNameValueChange ( n, parent )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[ADD]^^173^174^175^^^163^178^[ADD] for  ( Node c : n.children (  )  )  { findModifiedParameters ( c, n, names, unsafe ) ; }^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^Node n  ;^173^^^^^163^178^[REPLACE] for  ( Node c : n.children (  )  )  {^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^return null;^177^^^^^163^178^[REPLACE] return unsafe;^[METHOD] findModifiedParameters [TYPE] Set [PARAMETER] Node n Node parent String> names String> unsafe [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  [TYPE]  Node c  n  parent 
[REPLACE]^if  ( this.isEmpty (  )  )  {^207^^^^^206^278^[REPLACE] if  ( argMap.isEmpty (  )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^return;  ;^209^^^^^206^278^[REPLACE] return;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  )  ;^212^^^^^206^278^[REPLACE] Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^212^^^^^206^278^[ADD] Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Preconditions.checkArgument ( block.getType (  )  == Token.FUNCTION ) ;^212^^^^^206^278^[REPLACE] Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Node cArg = callNode.getFirstChild (  ) .getNext (  )  ;^213^^^^^206^278^[REPLACE] Node block = fnNode.getLastChild (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Set<String> parameters = null.keySet (  ) ;^215^^^^^206^278^[REPLACE] Set<String> parameters = argMap.keySet (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( null, block ) ;^219^220^^^^206^278^[REPLACE] Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( namesNeedingTemps .clear (  )   )  {^225^^^^^206^278^[REPLACE] if  ( namesNeedingTemps.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^225^226^227^^^206^278^[ADD] if  ( namesNeedingTemps.contains ( argName )  )  { continue; }^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( NodeUtil.mayEffectMutableState ( cArg )  || true )  {^232^^^^^206^278^[REPLACE] if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  else {^243^^^^^206^278^[REPLACE] } else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) || namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^}   safe = false;^247^248^249^250^^206^278^[ADD] else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  { safe = false; } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( type  <  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^255^256^^^^206^278^[ADD] safe = ! ( convention.isExported ( name )  ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = false;^263^^^^^206^278^[REPLACE] safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  - 3 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true  ;^269^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^254^^^^^206^278^[ADD] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ! ( null.isExported ( name )  ) ;^255^^^^^206^278^[REPLACE] safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^266^^^^^206^278^[ADD] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^269^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^254^255^^^^206^278^[ADD] String name = cArg.getString (  ) ; safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^249^^^^^247^272^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  == type )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^263^264^^^^206^278^[ADD] safe = true; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  /  0.5  < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String argName = entry.getKey (  )  ;^254^^^^^206^278^[REPLACE] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^249^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  + 2 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^246^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  else {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( type  !=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^255^256^^^^206^278^[ADD] safe = ! ( convention.isExported ( name )  ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String name = cArg .getParent (  )  ;^254^^^^^206^278^[REPLACE] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^266^267^^^^206^278^[ADD] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String name = cArg.getParent (  ) ;^254^^^^^206^278^[REPLACE] String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( type  ==  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .size (  )  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^246^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^269^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^242^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^243^^^^^206^278^[REPLACE] } else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^if  (  ( canBeSideEffected ( cArg )  )  &&  ( namesAfterSideEffects.contains ( argName )  )  )  {     safe = false; }else     if  ( references > 1 )  {         switch  ( cArg.getType (  )  )  {             case NAME :                 String name = cArg.getString (  ) ;                 safe = ! ( convention.isExported ( name )  ) ;                 break;             case NULL :             case VOID :             case THIS :             case FALSE :             case TRUE :             case NUMBER :                 safe = true;                 break;             case STRING :                 safe =  ( cArg.getString (  ) .length (  )  )  < 2;                 break;             default :                 safe = false;                 break;         }     }^243^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  (type  !=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^if  (  ( canBeSideEffected ( cArg )  )  &&  ( namesAfterSideEffects.contains ( argName )  )  )  {     safe = false; }else     if  ( references > 1 )  {         switch  ( cArg.getType (  )  )  {             case NAME :                 String name = cArg.getString (  ) ;                 safe = ! ( convention.isExported ( name )  ) ;                 break;             case NULL :             case VOID :             case THIS :             case FALSE :             case TRUE :             case NUMBER :                 safe = true;                 break;             case STRING :                 safe =  ( cArg.getString (  ) .length (  )  )  < 2;                 break;             default :                 safe = false;                 break;         }     }^250^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true  ;^249^^^^^247^272^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  else {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .size (  )  < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  - 4 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true  ;^246^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( type  >=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  /  0  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^249^^^^^247^272^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  < type )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^263^^^^^206^278^[ADD] safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^266^267^^^^206^278^[ADD] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( safe )  {^274^^^^^206^278^[REPLACE] if  ( !safe )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^274^275^276^^^206^278^[ADD] if  ( !safe )  { namesNeedingTemps.add ( argName ) ; }^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^namesNeedingTemps.contains ( argName ) ;^275^^^^^206^278^[REPLACE] namesNeedingTemps.add ( argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REMOVE]^( namesAfterSideEffects.contains ( argName )  )  ;^275^^^^^206^278^[REMOVE] ^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( null.add ( argName )  )  {^225^^^^^206^278^[REPLACE] if  ( namesNeedingTemps.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( NodeUtil.mayEffectMutableState ( cArg )  || references > 0 )  {^232^^^^^206^278^[REPLACE] if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^243^^^^^206^278^[REPLACE] } else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^}   safe = false;^243^244^^246^247^206^278^[ADD] else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {  safe = false; } else if  ( NodeUtil.canBeSideEffected ( cArg )^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( NodeUtil.canBeSideEffected ( cArg ) || namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^206^278^[REPLACE] } else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( references  <  4 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  /  2 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  (type  ==  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^249^^^^^206^278^[ADD] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^263^264^^^^206^278^[ADD] safe = true; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  %  2 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( references  >= type )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  - 5 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  *  0.5  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^269^270^^^^206^278^[ADD] safe = false; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  <=  1L )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^}   String name = cArg.getString (  ) ;^250^251^252^253^254^206^278^[ADD] else if  ( references > 1 )  {  switch  ( cArg.getType (  )  )  { case Token.NAME: String name = cArg.getString (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^255^^^^^206^278^[ADD] safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  + 4 < 2 ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true  ;^249^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = false  ;^263^^^^^206^278^[REPLACE] safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  %  0  < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true;^242^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  ( references  >=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^}  if  (type  <=  1 )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^safe = ! ( convention.isExported ( name )  ) ;^254^255^^^^206^278^[ADD] String name = cArg.getString (  ) ; safe = ! ( convention.isExported ( name )  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^break;^269^270^^^^206^278^[ADD] safe = false; break;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^} else if  ( references  >=  1L )  {^250^^^^^206^278^[REPLACE] } else if  ( references > 1 )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  - 4 < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if  ( !true )  {^274^^^^^206^278^[REPLACE] if  ( !safe )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^namesNeedingTemps.contains ( argName )  ;^275^^^^^206^278^[REPLACE] namesNeedingTemps.add ( argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe = true  ;^242^^^^^206^278^[REPLACE] safe = false;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^224^^^^^206^278^[ADD] String argName = entry.getKey (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^Node cArg = callNode.getFirstChild (  ) .getNext (  )  ;^228^^^^^206^278^[REPLACE] Node cArg = entry.getValue (  ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^229^230^^^^206^278^[ADD] boolean safe = true; int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^^230^^^^^206^278^[ADD] int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^safe =  ( cArg.getString (  ) .length (  )  + 5 < 0  ) ;^266^^^^^206^278^[REPLACE] safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^String> unsafeNames = newHashSet (  )  ;^223^^^^^206^278^[REPLACE] for  ( Map.Entry<String, Node> entry : argMap.entrySet (  )  )  {^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[ADD]^boolean safe = true;^228^229^^^^206^278^[ADD] Node cArg = entry.getValue (  ) ; boolean safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^boolean safe = false;^229^^^^^206^278^[REPLACE] boolean safe = true;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^int references = NodeUtil.getNameReferenceCount ( fnNode, argName ) ;^230^^^^^206^278^[REPLACE] int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[METHOD] maybeAddTempsForCallArguments [TYPE] void [PARAMETER] Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Entry entry  [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  Node block  cArg  fnNode  [TYPE]  CodingConvention convention  [TYPE]  String argName  name  [TYPE]  Map argMap  [TYPE]  int anonArg  loopsEntered  references  type 
[REPLACE]^if   (  NodeUtil.isLoopStructure  (  node  )    )   {  ;^361^^^^^359^389^[REPLACE] if  ( NodeUtil.isLoopStructure ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if   (  inLoop  (    )   || sideEffectSeen  )   {  ;^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REMOVE]^if  ( parameters.contains ( name )  )  {     parametersReferenced.add ( name ) ; }^363^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced.size (  ) ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REMOVE]^( namesAfterSideEffects.contains ( argName )  )  ;^367^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  ) {^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^( parametersReferenced.size (  )  )  ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^367^^^^^359^389^[ADD] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( sideEffectSeen )  {^371^^^^^359^389^[REPLACE] if  ( !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^371^372^373^374^375^359^389^[ADD] if  ( !sideEffectSeen )  {  if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^373^^^^^359^389^[REPLACE] if  ( hasNonLocalSideEffect ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^374^^^^^359^389^[ADD] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^373^374^375^^^359^389^[ADD] if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^sideEffect = true  ;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  &&false )  {^380^^^^^359^389^[REPLACE] if  ( inLoop (  )  || sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if   (  node.getType  (    )   == Token.NAME  )   {  ;^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced .contains ( this )  ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REMOVE]^( namesAfterSideEffects.contains ( argName )  )  ;^385^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^383^^^^^359^389^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced .contains ( null )  ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^385^^^^^359^389^[ADD] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( parameters .clear (  )   )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^parametersReferenced.add ( name ) ;^384^385^386^^^359^389^[ADD] if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^String name = n .getParent (  )  ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^if  ( parameters.add ( name )  )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^parametersReferenced.contains ( name ) ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[REPLACE]^String name = cArg.getString (  )  ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node n 
[ADD]^^395^396^^^^394^416^[ADD] boolean sideEffect = false; int type = n.getType (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^int type = parent.getType (  )  ;^396^^^^^394^416^[REPLACE] int type = n.getType (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n ) && type == Token.INC && type == Token.DEC )  {^399^400^401^^^394^416^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if   (  type == Token.NEW  )   {  ;^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     switch  ( n.getParent (  ) .getType (  )  )  {         case VAR :         case CATCH :             names.add ( n.getString (  )  ) ;     } }^407^^^^^394^416^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if   (  type == Token.DELPROP  )   {  ;^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffectSeen = true  ;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = functionCallHasSideEffects ( n )  ;^410^^^^^394^416^[REPLACE] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( references  ||  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^}^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^410^^^^^394^416^[ADD] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^412^^^^^394^416^[ADD] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = constructorCallHasSideEffects ( n )  ;^408^^^^^394^416^[REPLACE] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( type  !=  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( isLocalName ( lhs )  )  {^404^^^^^399^413^[REPLACE] if  ( !isLocalName ( lhs )  )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^405^^^^^399^413^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^Node lhs = n .getLastChild (  )  ;^402^^^^^399^413^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( isLocalName ( lhs )  )  {^404^^^^^394^416^[REPLACE] if  ( !isLocalName ( lhs )  )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^405^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( references  !=  Token.NEW )  {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = true;^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^^408^^^^^394^416^[ADD] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  (references  ||  Token.NEW )  {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = true;^409^410^411^412^413^394^416^[ADD] else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  (references  !=  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( references  &&  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffectSeen = true  ;^405^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^Node lhs = n.getLastChild (  ) ;^402^^^^^394^416^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^return sideEffectSeen;^415^^^^^394^416^[REPLACE] return sideEffect;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node lhs  n 
[REPLACE]^private  Set<String> locals;^328^^^^^^^[REPLACE] private final Set<String> locals;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private boolean sideEffectSeen  = null ;^329^^^^^^^[REPLACE] private boolean sideEffectSeen = false;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private Set<String> parametersReferenced  = null ;^330^^^^^^^[REPLACE] private Set<String> parametersReferenced = Sets.newHashSet (  ) ;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^private int loopsEntered ;^331^^^^^^^[REPLACE] private int loopsEntered = 0;^[METHOD] getFunctionParameterSet [TYPE] Set [PARAMETER] Node fnNode [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  [TYPE]  boolean false  safe  sideEffect  sideEffectSeen  true  [TYPE]  int anonArg  loopsEntered  references  type  [TYPE]  Node fnNode  n 
[REPLACE]^if   (  NodeUtil.isLoopStructure  (  node  )    )   {  ;^361^^^^^359^389^[REPLACE] if  ( NodeUtil.isLoopStructure ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( inLoop (  )  &&sideEffectSeen )  {^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced.size (  ) ;^367^^^^^359^389^[REPLACE] parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( sideEffectSeen )  {^363^^^^^359^389^[REPLACE] if  ( !inLoop (  )  && !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^363^364^^^367^359^389^[ADD] if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( sideEffectSeen )  {^371^^^^^359^389^[REPLACE] if  ( !sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^373^^^^^359^389^[REPLACE] if  ( hasNonLocalSideEffect ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^sideEffectSeen = false;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^sideEffect = true  ;^374^^^^^359^389^[REPLACE] sideEffectSeen = true;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  (false (  )  && sideEffectSeen )  {^380^^^^^359^389^[REPLACE] if  ( inLoop (  )  || sideEffectSeen )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   ) {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( parameters.add ( name )  )  {^384^^^^^359^389^[REPLACE] if  ( parameters.contains ( name )  )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced.contains ( name ) ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^String name = node.getString (  )  ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced.clear (  )  ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REMOVE]^( parameters.size (  )  )  ;^385^^^^^359^389^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^String name = n.getType (  ) ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^382^^^^^359^389^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^382^383^384^385^386^359^389^[ADD] if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^385^^^^^359^389^[ADD] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^String name = n .getFirstChild (  )  ;^383^^^^^359^389^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^parametersReferenced.add ( name ) ;^384^385^386^^^359^389^[ADD] if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^parametersReferenced .contains ( null )  ;^385^^^^^359^389^[REPLACE] parametersReferenced.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[ADD]^^383^^^^^359^389^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffectSeen  true  [TYPE]  String name  [TYPE]  int loopsEntered  [TYPE]  Node n 
[REPLACE]^boolean sideEffect = true;^395^^^^^394^416^[REPLACE] boolean sideEffect = false;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^396^^^^^394^416^[ADD] int type = n.getType (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n ) ) {^399^400^401^^^394^416^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^399^400^401^402^^394^416^[ADD] if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  { Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  ||  Token.CALL )  {^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  !=  Token.NEW )  {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = true;^409^410^411^412^413^394^416^[ADD] else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  else {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = functionCallHasSideEffects ( n )  ;^410^^^^^394^416^[REPLACE] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( loopsEntered  !=  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffectSeen = true  ;^412^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = constructorCallHasSideEffects ( n )  ;^408^^^^^394^416^[REPLACE] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( type  ||  Token.NEW )  {^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;sideEffect = true;^409^410^411^412^413^394^416^[ADD] else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^412^^^^^394^416^[ADD] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( loopsEntered  &&  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^}   sideEffect = true;^411^412^413^^^394^416^[ADD] else if  ( type == Token.DELPROP )  { sideEffect = true; }^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( isLocalName ( lhs )  )  {^404^^^^^399^413^[REPLACE] if  ( !isLocalName ( lhs )  )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REMOVE]^if  ( hasNonLocalSideEffect ( n )  )  {     sideEffectSeen = true; }^404^^^^^399^413^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^405^^^^^399^413^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^Node lhs = n.getString (  ) ;^402^^^^^399^413^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^if  ( isLocalName ( lhs )  )  {^404^^^^^394^416^[REPLACE] if  ( !isLocalName ( lhs )  )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^sideEffect = false;^405^^^^^394^416^[REPLACE] sideEffect = true;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if  ( type  ) {^407^^^^^394^416^[REPLACE] } else if  ( type == Token.CALL )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^} else if   (  type == Token.DELPROP  )   {  ;^409^^^^^394^416^[REPLACE] } else if  ( type == Token.NEW )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  ( type  !=  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  (loopsEntered  !=  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REMOVE]^if  ( ! ( isLocalName ( lhs )  )  )  {     sideEffect = true; }^411^^^^^394^416^[REMOVE] ^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^}  if  (loopsEntered  ||  Token.DELPROP )  {^411^^^^^394^416^[REPLACE] } else if  ( type == Token.DELPROP )  {^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^408^^^^^394^416^[ADD] sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^410^^^^^394^416^[ADD] sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[ADD]^^402^^^^^394^416^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
[REPLACE]^return true;^415^^^^^394^416^[REPLACE] return sideEffect;^[METHOD] hasNonLocalSideEffect [TYPE] boolean [PARAMETER] Node n [CLASS] ReferencedAfterSideEffect   [TYPE]  Set locals  parameters  parametersReferenced  [TYPE]  boolean false  sideEffect  sideEffectSeen  true  [TYPE]  int loopsEntered  type  [TYPE]  Node lhs  n 
