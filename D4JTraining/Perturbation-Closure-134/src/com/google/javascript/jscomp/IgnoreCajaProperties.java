[REPLACE]^AbstractCompiler compiler;^39^^^^^^^[REPLACE] final AbstractCompiler compiler;^ [CLASS] IgnoreCajaProperties Traversal  
[REPLACE]^if  ( n.getType (  )  == Token.FOR || n.getChildCount (  )  == 3 )  {^58^^^^^56^130^[REPLACE] if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^Node body = n.getLastChild (  ) ;n.removeChild ( body ) ;Node key = n.getFirstChild (  ) ;n.removeChild ( key ) ;^58^59^60^61^62^56^130^[ADD] if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  { Node body = n.getLastChild (  ) ; n.removeChild ( body ) ; Node key = n.getFirstChild (  ) ; n.removeChild ( key ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( key.getType (  )   &&  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^70^71^^^^56^130^[ADD] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^70^108^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, parent, new Node (^80^81^82^83^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, key, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, null, new Node (^80^81^82^83^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, key, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^99^100^101^102^103^56^130^[ADD] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node body = n.getFirstChild (  ) ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^61^^^^^56^130^[ADD] Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_"  counter ) ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node ifBody  ;^66^^^^^56^130^[REPLACE] Node assignment;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node assignment  ;^67^^^^^56^130^[REPLACE] Node ifBody;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^111^112^113^^^56^130^[ADD] Node newBody = new Node ( Token.BLOCK, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( key.getType (  )   !=  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = n.getFirstChild (  )  ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = parent.getFirstChild (  ) ;^61^^^^^56^130^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^63^64^^^^56^130^[ADD] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^67^68^^70^^56^130^[ADD] Node ifBody;  if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( n.getType (  )  == Token.FOR || n.getChildCount (  )  == 2 )  {^58^^^^^56^130^[REPLACE] if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^58^59^60^61^62^56^130^[ADD] if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  { Node body = n.getLastChild (  ) ; n.removeChild ( body ) ; Node key = n.getFirstChild (  ) ; n.removeChild ( key ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( key.getType (  )   !=  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^70^108^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, parent, new Node (^80^81^82^83^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, key, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = n.getFirstChild (  )  ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^n.removeChild ( key ) ;^61^62^^^^56^130^[ADD] Node key = n.getFirstChild (  ) ; n.removeChild ( key ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node.newString ( Token.NAME,this  counter ) ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node ifBody  ;^66^^^^^56^130^[REPLACE] Node assignment;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node assignment  ;^67^^^^^56^130^[REPLACE] Node ifBody;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^70^71^^^^56^130^[ADD] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^99^100^101^102^103^70^108^[ADD] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, null, new Node (^80^81^82^83^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, key, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node body = parent.getLastChild (  ) ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = parent.getLastChild (  ) ;^61^^^^^56^130^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node.newString ( Token.NAME, null  counter ) ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^66^^^^^56^130^[ADD] Node assignment;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^67^68^^70^^56^130^[ADD] Node ifBody;  if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
