[REPLACE]^private String sourceFile ;^44^^^^^^^[REPLACE] private String sourceFile = null;^ [CLASS] SourceInformationAnnotator  
[REPLACE]^if  ( sourceFile == null )  {^53^^^^^51^84^[REPLACE] if  ( sourceFile != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^53^54^55^^^51^84^[ADD] if  ( sourceFile != null )  { n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n .putProp ( sourceFile )  ;^54^^^^^51^84^[REPLACE] n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if   (  key.getType  (    )   == Token.STRING  )   {  ;^61^^^^^51^84^[REPLACE] if  ( propNode.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^61^62^63^^^51^84^[ADD] if  ( propNode.getType (  )  == Token.STRING )  { n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  )  ;^62^^^^^51^84^[REPLACE] n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n.putProp ( Node.ORIGINALNAME_PROP, parent.getString (  )  ) ;^62^^^^^51^84^[REPLACE] n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( parent.getType (  )   &&  Token.STRING )  {^76^^^^^51^84^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if   (  propNode.getType  (    )   == Token.STRING  )   {  ;^77^^^^^51^84^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^^77^78^79^^^51^84^[ADD] if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  )  ;^78^^^^^51^84^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key.putProp ( Node.ORIGINALNAME_PROP, parent .isQuotedString (  )   ) ;^78^^^^^51^84^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^77^^^^^51^84^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key.putProp ( Node.ORIGINALNAME_PROP, parent.getString (  )  ) ;^78^^^^^51^84^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n.getString (  )  ;^78^^^^^51^84^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key =  parent.getNext (  ) .getNext (  )  )  {^73^^^^^51^84^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^Node key = n.getFirstChild (  )  ;^60^^^^^51^84^[REPLACE] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^Node propNode = n.getFirstChild (  ) .getNext (  )  ;^72^^^^^51^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
