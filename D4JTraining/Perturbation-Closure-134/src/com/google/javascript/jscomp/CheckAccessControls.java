[REPLACE]^static final DiagnosticType DEPRECATED_NAME  = null ;^50^51^52^^^50^52^[REPLACE] static final DiagnosticType DEPRECATED_NAME = DiagnosticType.disabled ( "JSC_DEPRECATED_VAR", "Variable {0} has been deprecated." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static final DiagnosticType DEPRECATED_NAME_REASON  = null ;^54^55^56^^^54^56^[REPLACE] static final DiagnosticType DEPRECATED_NAME_REASON = DiagnosticType.disabled ( "JSC_DEPRECATED_VAR_REASON", "Variable {0} has been deprecated: {1}" ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^final DiagnosticType DEPRECATED_PROP = DiagnosticType.disabled ( "JSC_DEPRECATED_PROP", "Property {0} of type {1} has been deprecated." ) ;^58^59^60^^^58^60^[REPLACE] static final DiagnosticType DEPRECATED_PROP = DiagnosticType.disabled ( "JSC_DEPRECATED_PROP", "Property {0} of type {1} has been deprecated." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static  DiagnosticType DEPRECATED_PROP_REASON = DiagnosticType.disabled ( "JSC_DEPRECATED_PROP_REASON", "Property {0} of type {1} has been deprecated: {2}" ) ;^62^63^64^^^62^64^[REPLACE] static final DiagnosticType DEPRECATED_PROP_REASON = DiagnosticType.disabled ( "JSC_DEPRECATED_PROP_REASON", "Property {0} of type {1} has been deprecated: {2}" ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static final DiagnosticType DEPRECATED_CLASS  = null ;^66^67^68^^^66^68^[REPLACE] static final DiagnosticType DEPRECATED_CLASS = DiagnosticType.disabled ( "JSC_DEPRECATED_CLASS", "Class {0} has been deprecated." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static final DiagnosticType DEPRECATED_CLASS_REASON  = null ;^70^71^72^^^70^72^[REPLACE] static final DiagnosticType DEPRECATED_CLASS_REASON = DiagnosticType.disabled ( "JSC_DEPRECATED_CLASS_REASON", "Class {0} has been deprecated: {1}" ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS = DiagnosticType.disabled ( "JSC_BAD_PRIVATE_GLOBAL_ACCESS", "Access to private variable {0} not allowed outside file {1}." ) ;^74^75^76^77^^74^77^[REPLACE] static final DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS = DiagnosticType.disabled ( "JSC_BAD_PRIVATE_GLOBAL_ACCESS", "Access to private variable {0} not allowed outside file {1}." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static  DiagnosticType BAD_PRIVATE_PROPERTY_ACCESS = DiagnosticType.disabled ( "JSC_BAD_PRIVATE_PROPERTY_ACCESS", "Access to private property {0} of {1} not allowed here." ) ;^79^80^81^82^^79^82^[REPLACE] static final DiagnosticType BAD_PRIVATE_PROPERTY_ACCESS = DiagnosticType.disabled ( "JSC_BAD_PRIVATE_PROPERTY_ACCESS", "Access to private property {0} of {1} not allowed here." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static final DiagnosticType BAD_PROTECTED_PROPERTY_ACCESS ;^84^85^86^87^^84^87^[REPLACE] static final DiagnosticType BAD_PROTECTED_PROPERTY_ACCESS = DiagnosticType.disabled ( "JSC_BAD_PROTECTED_PROPERTY_ACCESS", "Access to protected property {0} of {1} not allowed here." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static final DiagnosticType PRIVATE_OVERRIDE  = null ;^89^90^91^92^^89^92^[REPLACE] static final DiagnosticType PRIVATE_OVERRIDE = DiagnosticType.disabled ( "JSC_PRIVATE_OVERRIDE", "Overriding private property of {0}." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^static final DiagnosticType VISIBILITY_MISMATCH  = null ;^94^95^96^97^^94^97^[REPLACE] static final DiagnosticType VISIBILITY_MISMATCH = DiagnosticType.disabled ( "JSC_VISIBILITY_MISMATCH", "Overriding {0} property of {1} with {2} property." ) ;^ [CLASS] CheckAccessControls  
[REPLACE]^private  AbstractCompiler compiler;^99^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CheckAccessControls  
[REPLACE]^private int deprecatedDepth  = null ;^103^^^^^^^[REPLACE] private int deprecatedDepth = 0;^ [CLASS] CheckAccessControls  
[REPLACE]^private int methodDepth ;^104^^^^^^^[REPLACE] private int methodDepth = 0;^ [CLASS] CheckAccessControls  
[REPLACE]^private JSType currentClass = true;^105^^^^^^^[REPLACE] private JSType currentClass = null;^ [CLASS] CheckAccessControls  
[REPLACE]^if  ( parent.getType (  )   !=  Token.ASSIGN )  {^151^^^^^150^178^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  && parent.getType (  )  == Token.NAME )  {^172^173^^^^150^178^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  || parent.getType (  )  == Token.NAME )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^}   return normalizeClassType ( n.getJSType (  )  ) ;^172^173^174^175^^150^178^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  || parent.getType (  )  == Token.NAME )  { return normalizeClassType ( n.getJSType (  )  ) ; }^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return parentormalizeClassType ( n.getJSType (  )  ) ;^174^^^^^172^175^[REPLACE] return normalizeClassType ( n.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType  (  n.getJSType  (    )    )  ;  ;^174^^^^^150^178^[REPLACE] return normalizeClassType ( n.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^153^^^^^150^178^[REPLACE] if  ( lValue.isQualifiedName (  )  )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( lValue.getType (  )   &&  Token.GETPROP )  {^154^^^^^150^178^[REPLACE] if  ( lValue.getType (  )  == Token.GETPROP )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType  (  n.getJSType  (    )    )  ;  ;^169^^^^^154^170^[REPLACE] return normalizeClassType ( lValue.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( lValueType == false ) {^157^^^^^150^178^[REPLACE] if  ( lValueType != null && lValueType.isConstructor (  )  )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^157^158^^160^^150^178^[ADD] if  ( lValueType != null && lValueType.isConstructor (  )  )  {  return  (  ( FunctionType )  lValueType ) .getInstanceType (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType  (  lValue.getFirstChild  (    )  .getJSType  (    )    )  ;  ;^164^^^^^157^165^[REPLACE] return normalizeClassType ( lValue.getFirstChild (  ) .getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return  (  ( FunctionType )  lValueType ) .getJSType (  ) ;^160^^^^^150^178^[REPLACE] return  (  ( FunctionType )  lValueType ) .getInstanceType (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return  (  ( FunctionType )  lValueType )  .getJSType (  )  ;^160^^^^^150^178^[REPLACE] return  (  ( FunctionType )  lValueType ) .getInstanceType (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType  (  lValue.getFirstChild  (    )  .getJSType  (    )    )  ;  ;^164^^^^^150^178^[REPLACE] return normalizeClassType ( lValue.getFirstChild (  ) .getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSType type = n.getJSType (  )  ;^156^^^^^150^178^[REPLACE] JSType lValueType = lValue.getJSType (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType ( lValue.getLastChild (  ) .getJSType (  )  ) ;^164^^^^^157^165^[REPLACE] return normalizeClassType ( lValue.getFirstChild (  ) .getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType  (  n.getJSType  (    )    )  ;  ;^169^^^^^150^178^[REPLACE] return normalizeClassType ( lValue.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType ( lValue.getType (  )  ) ;^169^^^^^154^170^[REPLACE] return normalizeClassType ( lValue.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( lValueType == null && lValueType.isConstructor (  )  )  {^157^^^^^150^178^[REPLACE] if  ( lValueType != null && lValueType.isConstructor (  )  )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType ( lValue.getFirstChild (  )  .getType (  )   ) ;^164^^^^^150^178^[REPLACE] return normalizeClassType ( lValue.getFirstChild (  ) .getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSType lValueType = lValue .getType (  )  ;^156^^^^^150^178^[REPLACE] JSType lValueType = lValue.getJSType (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Node n = t.getScopeRoot (  )  ;^152^^^^^150^178^[REPLACE] Node lValue = parent.getFirstChild (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  lValueType.isConstructor (  )  )  {^157^^^^^150^178^[REPLACE] if  ( lValueType != null && lValueType.isConstructor (  )  )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType ( lValue.getLastChild (  ) .getJSType (  )  ) ;^164^^^^^150^178^[REPLACE] return normalizeClassType ( lValue.getFirstChild (  ) .getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^156^^^^^150^178^[ADD] JSType lValueType = lValue.getJSType (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return normalizeClassType ( lValue.getType (  )  ) ;^169^^^^^150^178^[REPLACE] return normalizeClassType ( lValue.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( lValue.getType (  )   !=  Token.GETPROP )  {^154^^^^^150^178^[REPLACE] if  ( lValue.getType (  )  == Token.GETPROP )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass == null && lValueType.isConstructor (  )  )  {^157^^^^^150^178^[REPLACE] if  ( lValueType != null && lValueType.isConstructor (  )  )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( lValueType == null ) {^157^^^^^150^178^[REPLACE] if  ( lValueType != null && lValueType.isConstructor (  )  )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  else {^172^173^^^^150^178^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  || parent.getType (  )  == Token.NAME )  {^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return parentormalizeClassType ( n.getType (  )  ) ;^174^^^^^172^175^[REPLACE] return normalizeClassType ( n.getJSType (  )  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^152^^^^^150^178^[ADD] Node lValue = parent.getFirstChild (  ) ;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return null;  ;^177^^^^^150^178^[REPLACE] return null;^[METHOD] getClassOfMethod [TYPE] JSType [PARAMETER] Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node lValue  n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSType type = parent.getJSType (  ) ;^223^^^^^222^241^[REPLACE] JSType type = n.getJSType (  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( type == false )  {^225^^^^^222^241^[REPLACE] if  ( type != null )  {^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  shouldEmitDeprecationWarning ( t, n, parent )  )  {^228^229^^^^222^241^[REPLACE] if  ( deprecationInfo != null && shouldEmitDeprecationWarning ( t, n, parent )  )  {^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo.isEmpty (  )  )  {^231^^^^^228^239^[REPLACE] if  ( !deprecationInfo.isEmpty (  )  )  {^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^231^^^^^222^241^[REPLACE] if  ( !deprecationInfo.isEmpty (  )  )  {^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^231^232^233^234^^222^241^[ADD] if  ( !deprecationInfo.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS_REASON, type.toString (  ) , deprecationInfo )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, parent, DEPRECATED_CLASS, type.toString (  )  )  ) ;^236^237^^^^231^238^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS, type.toString (  )  )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^236^237^^^^231^238^[ADD] compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS, type.toString (  )  )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, n, DEPRECATED_CLASS, lValueType.toString (  )  )  ) ;^237^^^^^231^238^[REPLACE] JSError.make ( t, n, DEPRECATED_CLASS, type.toString (  )  )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS_REASON, lValueType.getJSDocInfo (  ) , deprecationInfo )  ) ;^232^233^234^^^222^241^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS_REASON, type.toString (  ) , deprecationInfo )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, n, DEPRECATED_CLASS_REASON, type.getJSDocInfo (  ) , deprecationInfo )  ) ;^233^234^^^^222^241^[REPLACE] JSError.make ( t, n, DEPRECATED_CLASS_REASON, type.toString (  ) , deprecationInfo )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^type.getJSDocInfo (  ) , deprecationInfo )  ) ;^234^^^^^222^241^[REPLACE] type.toString (  ) , deprecationInfo )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^String deprecationInfo = getPropertyDeprecationInfo ( objectType, propertyName )  ;^226^^^^^222^241^[REPLACE] String deprecationInfo = getTypeDeprecationInfo ( type ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo == null && shouldEmitDeprecationWarning ( t, n, parent )  )  {^228^229^^^^222^241^[REPLACE] if  ( deprecationInfo != null && shouldEmitDeprecationWarning ( t, n, parent )  )  {^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^228^229^^231^232^222^241^[ADD] if  ( deprecationInfo != null && shouldEmitDeprecationWarning ( t, n, parent )  )  { if  ( !deprecationInfo.isEmpty (  )  )  { compiler.report (^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo.isEmpty (  )  )  {^231^^^^^222^241^[REPLACE] if  ( !deprecationInfo.isEmpty (  )  )  {^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, parent, DEPRECATED_CLASS, type.toString (  )  )  ) ;^237^^^^^231^238^[REPLACE] JSError.make ( t, n, DEPRECATED_CLASS, type.toString (  )  )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS_REASON, lValueType.toString (  ) , deprecationInfo )  ) ;^232^233^234^^^222^241^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_CLASS_REASON, type.toString (  ) , deprecationInfo )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, parent, DEPRECATED_CLASS_REASON, type.toString (  ) , deprecationInfo )  ) ;^233^234^^^^222^241^[REPLACE] JSError.make ( t, n, DEPRECATED_CLASS_REASON, type.toString (  ) , deprecationInfo )  ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^String deprecationInfo = getTypeDeprecationInfo ( lValueType ) ;^226^^^^^222^241^[REPLACE] String deprecationInfo = getTypeDeprecationInfo ( type ) ;^[METHOD] checkConstructorDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( parent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.VAR && parent.getType (  )  == Token.NEW )  {^248^249^^^^246^268^[REPLACE] if  ( parent.getType (  )  == Token.FUNCTION || parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.NEW )  {^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^250^^^^^248^251^[REPLACE] return;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^250^^^^^246^268^[REPLACE] return;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^253^254^^^^246^268^[ADD] Scope.Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ; JSDocInfo docInfo = var == null ? null : var.getJSDocInfo (  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^254^^^^^246^268^[ADD] JSDocInfo docInfo = var == null ? null : var.getJSDocInfo (  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  docInfo.isDeprecated (  )  && shouldEmitDeprecationWarning ( t, n, parent )  )  {^256^257^^^^246^268^[REPLACE] if  ( docInfo != null && docInfo.isDeprecated (  )  && shouldEmitDeprecationWarning ( t, n, parent )  )  {^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^256^257^^259^260^246^268^[ADD] if  ( docInfo != null && docInfo.isDeprecated (  )  && shouldEmitDeprecationWarning ( t, n, parent )  )  { if  ( docInfo.getDeprecationReason (  )  != null )  { compiler.report (^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.getDeprecationReason (  )  == null )  {^259^^^^^256^267^[REPLACE] if  ( docInfo.getDeprecationReason (  )  != null )  {^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^259^260^261^262^^256^267^[ADD] if  ( docInfo.getDeprecationReason (  )  != null )  { compiler.report ( JSError.make ( t, n, DEPRECATED_NAME_REASON, n.getString (  ) , docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info.getDeprecationReason  (    )   != null  )   {  ;^259^^^^^246^268^[REPLACE] if  ( docInfo.getDeprecationReason (  )  != null )  {^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^259^260^261^262^^246^268^[ADD] if  ( docInfo.getDeprecationReason (  )  != null )  { compiler.report ( JSError.make ( t, n, DEPRECATED_NAME_REASON, n.getString (  ) , docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError .make ( t , parent , DEPRECATED_NAME_REASON )   ) ;^264^265^^^^259^266^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_NAME, n.getString (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, n, DEPRECATED_NAME, n.getParent (  )  )  ) ;^265^^^^^259^266^[REPLACE] JSError.make ( t, n, DEPRECATED_NAME, n.getString (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, parent, DEPRECATED_NAME, n.getString (  )  )  ) ;^265^^^^^259^266^[REPLACE] JSError.make ( t, n, DEPRECATED_NAME, n.getString (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, parent, DEPRECATED_NAME_REASON, n.getParent (  ) , docInfo.getDeprecationReason (  )  )  ) ;^260^261^262^^^246^268^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_NAME_REASON, n.getString (  ) , docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, n, DEPRECATED_NAME_REASON, n.getParent (  ) , docInfo.getDeprecationReason (  )  )  ) ;^261^262^^^^246^268^[REPLACE] JSError.make ( t, n, DEPRECATED_NAME_REASON, n.getString (  ) , docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, parent, DEPRECATED_NAME_REASON, n.getString (  ) , docInfo.getDeprecationReason (  )  )  ) ;^261^262^^^^246^268^[REPLACE] JSError.make ( t, n, DEPRECATED_NAME_REASON, n.getString (  ) , docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^docInfo.isDeprecated (  )  )  ) ;^262^^^^^246^268^[REPLACE] docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^262^^^^^246^268^[ADD] docInfo.getDeprecationReason (  )  )  ) ;^[METHOD] checkNameDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( parent.getType (  )   ||  Token.NEW )  {^276^^^^^274^303^[REPLACE] if  ( parent.getType (  )  == Token.NEW )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^277^^^^^274^303^[REPLACE] return;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^280^281^^^^274^303^[ADD] ObjectType objectType = ObjectType.cast ( dereference ( n.getFirstChild (  ) .getJSType (  )  )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^282^^^^^274^303^[ADD] String propertyName = n.getLastChild (  ) .getString (  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  objectType == null  )   {  ;^284^^^^^274^303^[REPLACE] if  ( objectType != null )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^284^285^286^^288^274^303^[ADD] if  ( objectType != null )  { String deprecationInfo = getPropertyDeprecationInfo ( objectType, propertyName ) ; if  ( deprecationInfo != null &&^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo == null && shouldEmitDeprecationWarning ( t, n, parent )  )  {^288^289^^^^274^303^[REPLACE] if  ( deprecationInfo != null && shouldEmitDeprecationWarning ( t, n, parent )  )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^288^289^^291^292^274^303^[ADD] if  ( deprecationInfo != null && shouldEmitDeprecationWarning ( t, n, parent )  )  { if  ( !deprecationInfo.isEmpty (  )  )  { compiler.report (^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo.isEmpty (  )  )  {^291^^^^^288^301^[REPLACE] if  ( !deprecationInfo.isEmpty (  )  )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo.isEmpty (  )  )  {^291^^^^^274^303^[REPLACE] if  ( !deprecationInfo.isEmpty (  )  )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , false )  )  ) ;^297^298^299^^^291^300^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , false )  )  ) ;^298^299^^^^291^300^[REPLACE] JSError.make ( t, n, DEPRECATED_PROP, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  ;^299^^^^^291^300^[REPLACE] validator.getReadableJSTypeName ( n.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REMOVE]^( parent.getFirstChild (  )  )  ;^299^^^^^291^300^[REMOVE] ^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( parent .getLastChild (  )  , true )  )  ) ;^299^^^^^291^300^[REPLACE] validator.getReadableJSTypeName ( n.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , false ) , deprecationInfo )  ) ;^292^293^294^295^^274^303^[REPLACE] compiler.report ( JSError.make ( t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , true ) , deprecationInfo )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^292^293^294^^^274^303^[ADD] compiler.report ( JSError.make ( t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , true ) ,^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , false ) , deprecationInfo )  ) ;^293^294^295^^^274^303^[REPLACE] JSError.make ( t, n, DEPRECATED_PROP_REASON, propertyName, validator.getReadableJSTypeName ( n.getFirstChild (  ) , true ) , deprecationInfo )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( n.getFirstChild (  ) , false ) , deprecationInfo )  ) ;^294^295^^^^274^303^[REPLACE] validator.getReadableJSTypeName ( n.getFirstChild (  ) , true ) , deprecationInfo )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^294^295^^^^274^303^[ADD] validator.getReadableJSTypeName ( n.getFirstChild (  ) , true ) , deprecationInfo )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( parent.getFirstChild (  ) , true ) , deprecationInfo )  ) ;^294^295^^^^274^303^[REPLACE] validator.getReadableJSTypeName ( n.getFirstChild (  ) , true ) , deprecationInfo )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( deprecationInfo == false && shouldEmitDeprecationWarning ( t, n, parent )  )  {^288^289^^^^274^303^[REPLACE] if  ( deprecationInfo != null && shouldEmitDeprecationWarning ( t, n, parent )  )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^291^^^^^288^301^[REPLACE] if  ( !deprecationInfo.isEmpty (  )  )  {^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( parent.getLastChild (  ) , true )  )  ) ;^299^^^^^291^300^[REPLACE] validator.getReadableJSTypeName ( n.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^String deprecationInfo = getPropertyDeprecationInfo ( objectType, deprecationInfo ) ;^285^286^^^^274^303^[REPLACE] String deprecationInfo = getPropertyDeprecationInfo ( objectType, propertyName ) ;^[METHOD] checkPropertyDeprecation [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  String deprecationInfo  propertyName  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^311^^^^^310^330^[ADD] Var var = t.getScope (  ) .getVar ( name.getString (  )  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( var == null )  {^312^^^^^310^330^[REPLACE] if  ( var != null )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^JSDocInfo docInfo = var.getJSDocInfo (  ) ;Visibility visibility = docInfo.getVisibility (  ) ;^312^313^314^^316^310^330^[ADD] if  ( var != null )  { JSDocInfo docInfo = var.getJSDocInfo (  ) ; if  ( docInfo != null )  { Visibility visibility = docInfo.getVisibility (  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo == null )  {^314^^^^^310^330^[REPLACE] if  ( docInfo != null )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^314^315^316^317^^310^330^[ADD] if  ( docInfo != null )  {  Visibility visibility = docInfo.getVisibility (  ) ; if  ( visibility == Visibility.PRIVATE &&^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( visibility == Visibility.PRIVATE ) {^317^318^^^^310^330^[REPLACE] if  ( visibility == Visibility.PRIVATE && !t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo .toString (  )   || isValidPrivateConstructorAccess ( parent )  )  {^319^320^^^^317^327^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^321^^^^^317^327^[REPLACE] return;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.isConstructor (  )  || isValidPrivateConstructorAccess ( parent )  )  {^319^320^^^^310^330^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^319^320^321^322^^310^330^[ADD] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  { return; }^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^321^^^^^319^322^[REPLACE] return;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^321^^^^^310^330^[REPLACE] return;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Visibility visibility = docInfo.getSourceName (  ) ;^316^^^^^310^330^[REPLACE] Visibility visibility = docInfo.getVisibility (  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  )  )  {^317^318^^^^310^330^[REPLACE] if  ( visibility == Visibility.PRIVATE && !t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.isConstructor (  )  || isValidPrivateConstructorAccess ( parent )  )  {^319^320^^^^317^327^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSDocInfo info = type.getOwnPropertyJSDocInfo ( prop )  ;^313^^^^^310^330^[REPLACE] JSDocInfo docInfo = var.getJSDocInfo (  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^316^^^^^310^330^[ADD] Visibility visibility = docInfo.getVisibility (  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo == false )  {^314^^^^^310^330^[REPLACE] if  ( docInfo != null )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( visibility == Visibility.PRIVATE && t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  )  )  {^317^318^^^^310^330^[REPLACE] if  ( visibility == Visibility.PRIVATE && !t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.isConstructor (  )  ) {^319^320^^^^317^327^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REMOVE]^if  ( isDeprecatedFunction ( n, parent )  )  {      ( deprecatedDepth ) ++; }^319^^^^^317^327^[REMOVE] ^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^313^^^^^310^330^[ADD] JSDocInfo docInfo = var.getJSDocInfo (  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Visibility visibility = docInfo .getSourceName (  )  ;^316^^^^^310^330^[REPLACE] Visibility visibility = docInfo.getVisibility (  ) ;^[METHOD] checkNameVisibility [TYPE] void [PARAMETER] NodeTraversal t Node name Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Var var  [TYPE]  Node name  parent  [TYPE]  Visibility visibility  [TYPE]  JSDocInfo docInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^339^340^^^^338^430^[ADD] ObjectType objectType = ObjectType.cast ( dereference ( getprop.getFirstChild (  ) .getJSType (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^341^^^^^338^430^[ADD] String propertyName = getprop.getLastChild (  ) .getString (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( objectType == null )  {^343^^^^^338^430^[REPLACE] if  ( objectType != null )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( true )  {^352^^^^^338^430^[REPLACE] if  ( isOverride )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^objectType =  null.getImplicitPrototype (  ) ;^353^^^^^338^430^[REPLACE] objectType = objectType.getImplicitPrototype (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo == null && docInfo .getSourceName (  )   != Visibility.INHERITED )  {^359^360^^^^338^430^[REPLACE] if  ( docInfo != null && docInfo.getVisibility (  )  != Visibility.INHERITED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( objectType != null )  {^365^^^^^338^430^[REPLACE] if  ( objectType == null )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^367^^^^^338^430^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^374^^^^^338^430^[REPLACE] if  ( isOverride )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^396^^^^^374^428^[REPLACE] if  ( sameInput )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  else {^399^400^^^^374^428^[REPLACE] } else if  ( visibility == Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  else {^414^^^^^374^428^[REPLACE] } else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^}^414^415^^^^374^428^[ADD] else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != null || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , false )  )  ) ;^422^423^424^425^^374^428^[REPLACE] JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , false )  )  ) ;^424^425^^^^374^428^[REPLACE] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^getprop.getLastChild (  ) , true )  )  ) ;^425^^^^^374^428^[REPLACE] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != false || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError .make ( t , parent , BAD_PRIVATE_PROPERTY_ACCESS , propertyName )  ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^421^422^423^424^^374^428^[REPLACE] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop.getLastChild (  ) , false )  )  ) ;^424^425^^^^374^428^[REPLACE] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.isConstructor (  )  || isValidPrivateConstructorAccess ( parent )  )  {^401^402^^^^399^427^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REMOVE]^if  ( isDeprecatedFunction ( n, parent )  )  {      ( deprecatedDepth ) ++; }^401^^^^^399^427^[REMOVE] ^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^403^^^^^401^404^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^403^^^^^399^427^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( overridingInfo.isConstructor (  )  ) {^401^402^^^^374^428^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler .getTypeValidator (  )  ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^421^422^423^424^^374^428^[REPLACE] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^424^425^^^^374^428^[ADD] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getLastChild (  ) , false )  )  ) ;^422^423^424^425^^374^428^[REPLACE] JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop .getLastChild (  )  , false )  )  ) ;^424^425^^^^374^428^[REPLACE] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^( parent.getFirstChild (  )  )  ;^425^^^^^374^428^[REPLACE] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^403^^^^^374^428^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^398^^^^^374^428^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( visibility != Visibility.PRIVATE && ( currentClass == this ) {^399^400^^^^374^428^[REPLACE] } else if  ( visibility == Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^} else if  ( visibility  ||  Visibility.PROTECTED )  {^414^^^^^374^428^[REPLACE] } else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError .make ( t , getprop , PRIVATE_OVERRIDE , propertyName )  ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^421^422^423^424^^374^428^[REPLACE] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != true ) {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.isConstructor (  )  || isValidPrivateConstructorAccess ( parent )  )  {^401^402^^^^374^428^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REMOVE]^if  ( isDeprecatedFunction ( n, parent )  )  {      ( deprecatedDepth ) ++; }^401^^^^^374^428^[REMOVE] ^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( visibility  ||  Visibility.PROTECTED )  {^414^^^^^374^428^[REPLACE] } else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^getprop .getLastChild (  )  , true )  )  ) ;^425^^^^^374^428^[REPLACE] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  !currentClass.isSubtype ( ownerType )  )  {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^420^421^422^423^424^374^428^[ADD] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  { compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( visibility == Visibility.PRIVATE ) {^384^^^^^338^430^[REPLACE] if  ( visibility == Visibility.PRIVATE && !sameInput )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^384^385^386^387^388^338^430^[ADD] if  ( visibility == Visibility.PRIVATE && !sameInput )  { compiler.report ( JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.toString (  )  )  ) ; } else if  ( overridingVisibility != Visibility.INHERITED &&^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^} else if  ( overridingVisibility != Visibility.INHERITED || overridingVisibility != visibility )  {^388^389^^^^338^430^[REPLACE] } else if  ( overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, overridingVisibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^390^391^392^393^^388^394^[REPLACE] compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.cast (  ) , overridingVisibility.name (  )  )  ) ;^391^392^393^^^388^394^[REPLACE] JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^391^392^393^^^388^394^[ADD] JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^392^393^^^^388^394^[ADD] visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^visibility.name (  ) , objectType.cast (  ) , overridingVisibility.name (  )  )  ) ;^392^393^^^^388^394^[REPLACE] visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^cast ( dereference ( n.getFirstChild (  ) .getJSType (  )  )  )  ;^393^^^^^388^394^[REPLACE] overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^393^^^^^388^394^[ADD] overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^objectType .getJSDocInfo (  )   )  ) ;^387^^^^^338^430^[REPLACE] objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler .getTypeValidator (  )  , overridingVisibility.name (  )  )  ) ;^390^391^392^393^^388^394^[REPLACE] compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^390^391^392^^^388^394^[ADD] compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) ,^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop, VISIBILITY_MISMATCH, overridingVisibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^391^392^393^^^388^394^[REPLACE] JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSDocInfo info = type.getJSDocInfo (  )  ;^377^^^^^338^430^[REPLACE] JSDocInfo overridingInfo = parent.getJSDocInfo (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Visibility overridingVisibility = overridingInfo != null ? Visibility.INHERITED : overridingInfo.getVisibility (  ) ;^378^379^^^^338^430^[REPLACE] Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( visibility == Visibility.PRIVATE && sameInput )  {^384^^^^^338^430^[REPLACE] if  ( visibility == Visibility.PRIVATE && !sameInput )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  else {^388^389^^^^338^430^[REPLACE] } else if  ( overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.cast (  ) , overridingVisibility.name (  )  )  ) ;^390^391^392^393^^388^394^[REPLACE] compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError .make ( t , parent , BAD_PRIVATE_PROPERTY_ACCESS )   ) ;^385^386^387^^^338^430^[REPLACE] compiler.report ( JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType .getJSDocInfo (  )   )  ) ;^386^387^^^^338^430^[REPLACE] JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^objectType.cast (  )  )  ) ;^387^^^^^338^430^[REPLACE] objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , visibility.name (  )  )  ) ;^390^391^392^393^^388^394^[REPLACE] compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^visibility.name (  ) , objectType .getJSDocInfo (  )  , overridingVisibility.name (  )  )  ) ;^392^393^^^^388^394^[REPLACE] visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^396^^^^^338^430^[REPLACE] if  ( sameInput )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^396^397^398^399^^338^430^[ADD] if  ( sameInput )  {  return; } else if  ( visibility == Visibility.PRIVATE &&^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  else {^399^400^^^^338^430^[REPLACE] } else if  ( visibility == Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( visibility  ) {^414^^^^^338^430^[REPLACE] } else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^}^414^415^^^^338^430^[ADD] else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != true || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , false )  )  ) ;^422^423^424^425^^338^430^[REPLACE] JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , false )  )  ) ;^424^425^^^^338^430^[REPLACE] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^getprop .getLastChild (  )  , true )  )  ) ;^425^^^^^338^430^[REPLACE] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != this || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler .getTypeValidator (  )  ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^421^422^423^424^^338^430^[REPLACE] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  isValidPrivateConstructorAccess ( parent )  )  {^401^402^^^^399^427^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^401^402^403^404^^399^427^[ADD] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  { return; }^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo.isConstructor (  )  || isValidPrivateConstructorAccess ( parent )  )  {^401^402^^^^338^430^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  else {^414^^^^^338^430^[REPLACE] } else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != null || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError .make ( t , parent , DEPRECATED_CLASS , propertyName )  ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^421^422^423^424^^338^430^[REPLACE] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^( parent.getFirstChild (  )  )  ;^425^^^^^338^430^[REPLACE] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != true ) {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^421^422^423^^^338^430^[ADD] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName,^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getLastChild (  ) , false )  )  ) ;^422^423^424^425^^338^430^[REPLACE] JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^425^^^^^338^430^[ADD] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^403^^^^^338^430^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return;  ;^398^^^^^338^430^[REPLACE] return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( visibility != Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  {^399^400^^^^338^430^[REPLACE] } else if  ( visibility == Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^420^421^422^423^424^338^430^[ADD] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  { compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^getprop.getLastChild (  ) , true )  )  ) ;^425^^^^^338^430^[REPLACE] getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^401^402^403^404^^338^430^[ADD] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  { return; }^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != null || !currentClass .isUnknownType (  )   )  {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != false || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^424^425^^^^338^430^[ADD] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^objectType =  null.getImplicitPrototype (  )  )  {^357^^^^^338^430^[REPLACE] objectType = objectType.getImplicitPrototype (  )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^docInfo =  null.getOwnPropertyJSDocInfo ( propertyName ) ;^358^^^^^338^430^[REPLACE] docInfo = objectType.getOwnPropertyJSDocInfo ( propertyName ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^boolean isOverride = t.inGlobalScope (  )  ;^346^347^348^^^338^430^[REPLACE] boolean isOverride = t.inGlobalScope (  )  && parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == getprop;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^for  ( ; objectType != null;^355^356^^^^338^430^[ADD] JSDocInfo docInfo = null; for  ( ; objectType != null;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^boolean sameInput = t.getInput (  ) .getName (  )  .getName (  )  ;^370^371^^^^338^430^[REPLACE] boolean sameInput = t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^372^373^^^^338^430^[ADD] Visibility visibility = docInfo.getVisibility (  ) ; JSType ownerType = normalizeClassType ( objectType ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSType type = n.getJSType (  )  ;^373^^^^^338^430^[REPLACE] JSType ownerType = normalizeClassType ( objectType ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSDocInfo overridingInfo = parent.getString (  ) ;^377^^^^^338^430^[REPLACE] JSDocInfo overridingInfo = parent.getJSDocInfo (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Visibility overridingVisibility  =  overridingInfo.getVisibility (  ) ;^378^379^^^^338^430^[REPLACE] Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  info != null && info.isDeprecated  (    )    )   {  ;^352^^^^^338^430^[REPLACE] if  ( isOverride )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo == null && docInfo.getVisibility (  )  != Visibility.INHERITED )  {^359^360^^^^338^430^[REPLACE] if  ( docInfo != null && docInfo.getVisibility (  )  != Visibility.INHERITED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( objectType != false )  {^365^^^^^338^430^[REPLACE] if  ( objectType == null )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^374^375^^377^378^338^430^[ADD] if  ( isOverride )  {  JSDocInfo overridingInfo = parent.getJSDocInfo (  ) ; Visibility overridingVisibility = overridingInfo == null ?^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( true )  {^396^^^^^374^428^[REPLACE] if  ( sameInput )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^422^423^424^^^374^428^[ADD] JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REMOVE]^n.getJSType (  )  ;^425^^^^^374^428^[REMOVE] ^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != true || !currentClass.isSubtype ( ownerType )  )  {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^421^422^423^^^374^428^[ADD] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName,^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( docInfo .toString (  )   || isValidPrivateConstructorAccess ( parent )  )  {^401^402^^^^399^427^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  !currentClass.differsFrom ( ownerType )  )  {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler.report ( JSError .make ( t , parent , BAD_PRIVATE_GLOBAL_ACCESS , propertyName )  ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^421^422^423^424^^374^428^[REPLACE] compiler.report ( JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName (^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != null ) {^420^^^^^374^428^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( overridingInfo.isConstructor (  )  || isValidPrivateConstructorAccess ( parent )  )  {^401^402^^^^374^428^[REPLACE] if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  sameInput )  {^384^^^^^338^430^[REPLACE] if  ( visibility == Visibility.PRIVATE && !sameInput )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.cast (  )  )  ) ;^386^387^^^^338^430^[REPLACE] JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^386^387^^^^338^430^[ADD] JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^type.toString (  )  ;^387^^^^^338^430^[REPLACE] objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( overridingVisibility != Visibility.INHERITED || overridingVisibility != visibility )  {^388^389^^^^338^430^[REPLACE] } else if  ( overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^}^388^389^390^391^392^338^430^[ADD] else if  ( overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility )  { compiler.report ( JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) ,^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^377^^^^^338^430^[ADD] JSDocInfo overridingInfo = parent.getJSDocInfo (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Visibility overridingVisibility  =  Visibility.INHERITED ;^378^379^^^^338^430^[REPLACE] Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^compiler .getTypeValidator (  )   ) ;^385^386^387^^^338^430^[REPLACE] compiler.report ( JSError.make ( t, getprop, PRIVATE_OVERRIDE, objectType.toString (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError.make ( t, getprop, VISIBILITY_MISMATCH, overridingVisibility.name (  ) , objectType.cast (  ) , overridingVisibility.name (  )  )  ) ;^391^392^393^^^388^394^[REPLACE] JSError.make ( t, getprop, VISIBILITY_MISMATCH, visibility.name (  ) , objectType.toString (  ) , overridingVisibility.name (  )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop.getLastChild (  ) , false )  )  ) ;^424^425^^^^338^430^[REPLACE] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( visibility  !=  Visibility.PROTECTED )  {^414^^^^^338^430^[REPLACE] } else if  ( visibility == Visibility.PROTECTED )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != this ) {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^}  if  ( visibility != Visibility.PRIVATE && ( currentClass == null ) {^399^400^^^^338^430^[REPLACE] } else if  ( visibility == Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^}   return;^399^400^401^402^403^338^430^[ADD] else if  ( visibility == Visibility.PRIVATE && ( currentClass == null || ownerType.differsFrom ( currentClass )  )  )  { if  ( docInfo.isConstructor (  )  && isValidPrivateConstructorAccess ( parent )  )  { return;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( currentClass != null ) {^420^^^^^338^430^[REPLACE] if  ( currentClass == null || !currentClass.isSubtype ( ownerType )  )  {^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^validator.getReadableJSTypeName ( getprop .getLastChild (  )  , false )  )  ) ;^424^425^^^^338^430^[REPLACE] validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSError .make ( t , parent , VISIBILITY_MISMATCH , propertyName )   )  ) ;^422^423^424^425^^338^430^[REPLACE] JSError.make ( t, getprop,  BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName ( getprop.getFirstChild (  ) , true )  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^357^358^^^^338^430^[ADD] objectType = objectType.getImplicitPrototype (  )  )  { docInfo = objectType.getOwnPropertyJSDocInfo ( propertyName ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSDocInfo info = type.getJSDocInfo (  )  ;^355^^^^^338^430^[REPLACE] JSDocInfo docInfo = null;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^boolean sameInput = t.getInput (  ) .getName (  ) .equals ( overridingInfo.getSourceName (  )  ) ;^370^371^^^^338^430^[REPLACE] boolean sameInput = t.getInput (  ) .getName (  ) .equals ( docInfo.getSourceName (  )  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^Visibility visibility = docInfo.getSourceName (  ) ;^372^^^^^338^430^[REPLACE] Visibility visibility = docInfo.getVisibility (  ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^373^^^^^338^430^[ADD] JSType ownerType = normalizeClassType ( objectType ) ;^[METHOD] checkPropertyVisibility [TYPE] void [PARAMETER] NodeTraversal t Node getprop Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType objectType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  isOverride  sameInput  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node getprop  parent  [TYPE]  Visibility overridingVisibility  visibility  [TYPE]  String propertyName  [TYPE]  JSDocInfo docInfo  overridingInfo  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  !t.inGlobalScope  (    )    )   {  ;^463^^^^^457^477^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  (  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  || n.getType (  )  == Token.NEW )  )  {^464^465^^^^457^477^[REPLACE] if  ( ! (  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  || n.getType (  )  == Token.NEW )  )  {^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return true;^466^^^^^464^467^[REPLACE] return false;^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return false;  ;^466^^^^^457^477^[REPLACE] return false;^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  (  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  ) {^464^465^^^^457^477^[REPLACE] if  ( ! (  ( parent.getType (  )  == Token.CALL && parent.getFirstChild (  )  == n )  || n.getType (  )  == Token.NEW )  )  {^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return true;^466^^^^^457^477^[REPLACE] return false;^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  n == parent.getFirstChild (  )  || NodeUtil.isAssignmentOp ( parent )  )  {^471^472^^^^457^477^[REPLACE] if  ( n.getType (  )  == Token.GETPROP && n == parent.getFirstChild (  )  && NodeUtil.isAssignmentOp ( parent )  )  {^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return true;^473^^^^^471^474^[REPLACE] return false;^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return false;  ;^473^^^^^457^477^[REPLACE] return false;^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return !canAccessDeprecatedTypes  (  t  )  ;  ;^476^^^^^457^477^[REPLACE] return !canAccessDeprecatedTypes ( t ) ;^[METHOD] shouldEmitDeprecationWarning [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  Node n  parent  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( ownerType != null )  {^523^^^^^522^542^[REPLACE] if  ( type == null )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return true;^524^^^^^522^542^[REPLACE] return null;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return false;^524^^^^^522^542^[REPLACE] return null;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^JSDocInfo info = ownerType.getJSDocInfo (  ) ;^527^^^^^522^542^[REPLACE] JSDocInfo info = type.getJSDocInfo (  ) ;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (  info.isDeprecated (  )  )  {^528^^^^^522^542^[REPLACE] if  ( info != null && info.isDeprecated (  )  )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^528^529^530^531^^522^542^[ADD] if  ( info != null && info.isDeprecated (  )  )  { if  ( info.getDeprecationReason (  )  != null )  { return info.getDeprecationReason (  ) ; }^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( info.getDeprecationReason (  )  == false )  {^529^^^^^522^542^[REPLACE] if  ( info.getDeprecationReason (  )  != null )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return info .isDeprecated (  )  ;^530^^^^^522^542^[REPLACE] return info.getDeprecationReason (  ) ;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return  ;^532^^^^^522^542^[REPLACE] return "";^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( info.getDeprecationReason (  )  == null )  {^529^^^^^522^542^[REPLACE] if  ( info.getDeprecationReason (  )  != null )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^529^530^531^^^522^542^[ADD] if  ( info.getDeprecationReason (  )  != null )  { return info.getDeprecationReason (  ) ; }^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return info.isDeprecated (  ) ;^530^^^^^522^542^[REPLACE] return info.getDeprecationReason (  ) ;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^534^^^^^522^542^[ADD] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if   (  objectType == null  )   {  ;^535^^^^^522^542^[REPLACE] if  ( objType != null )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  ( implicitProto == null )  {^537^^^^^522^542^[REPLACE] if  ( implicitProto != null )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[ADD]^^537^538^539^^^522^542^[ADD] if  ( implicitProto != null )  { return getTypeDeprecationInfo ( implicitProto ) ; }^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return getTypeDeprecationInfo ( objType ) ;^538^^^^^522^542^[REPLACE] return getTypeDeprecationInfo ( implicitProto ) ;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^ObjectType implicitProto = objType.toString (  ) ;^536^^^^^522^542^[REPLACE] ObjectType implicitProto = objType.getImplicitPrototype (  ) ;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^if  (objType == null )  {^537^^^^^522^542^[REPLACE] if  ( implicitProto != null )  {^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
[REPLACE]^return false;^541^^^^^522^542^[REPLACE] return null;^[METHOD] getTypeDeprecationInfo [TYPE] String [PARAMETER] JSType type [CLASS] CheckAccessControls   [TYPE]  TypeValidator validator  [TYPE]  ObjectType implicitProto  objType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSType currentClass  lValueType  ownerType  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  [TYPE]  JSDocInfo info  [TYPE]  int deprecatedDepth  methodDepth 
