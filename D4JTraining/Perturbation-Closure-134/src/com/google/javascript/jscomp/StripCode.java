[REPLACE]^private  Set<String> stripTypePrefixes;^52^^^^^^^[REPLACE] private final Set<String> stripTypePrefixes;^ [CLASS] StripCode Strip  
[REPLACE]^final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^56^57^58^^^56^58^[REPLACE] static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^ [CLASS] StripCode Strip  
[REPLACE]^switch  ( parent.getNext (  )  )  {^97^^^^^96^133^[REPLACE] switch  ( n.getType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveCall ( t, n, parent )  ;^99^^^^^96^133^[REPLACE] removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveCall ( t, n, parent )  ;^103^^^^^96^133^[REPLACE] maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[ADD]^^103^^^^^96^133^[ADD] maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^maybeEliminateExpressionByName ( t, n, parent )  ;^118^^^^^96^133^[REPLACE] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[ADD]^^118^^^^^96^133^[ADD] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^( key.getType (  )  )  ;^122^^^^^96^133^[REPLACE] maybeRemoveCall ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[ADD]^break;^122^123^^^^96^133^[ADD] maybeRemoveCall ( t, n, parent ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^eliminateKeysWithStripNamesFromObjLit ( t, parent ) ;^126^^^^^96^133^[REPLACE] eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^maybeEliminateAssignmentByLvalueName ( t, n, parent )  ;^130^^^^^96^133^[REPLACE] maybeEliminateExpressionByName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[ADD]^break;^130^131^^^^96^133^[ADD] maybeEliminateExpressionByName ( t, n, parent ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( nameNode.getLastChild (  )  )  )  {^149^150^^^^145^163^[REPLACE] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^152^153^^^^149^156^[ADD] Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^nameNode =  parent.getNext (  )  )  {^147^^^^^145^163^[REPLACE] nameNode = nameNode.getNext (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^for  ( Node parentameNode = n.getLastChild (  ) ; nameNode != null;^146^^^^^145^163^[REPLACE] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^String name = parent.getParent (  ) ;^148^^^^^145^163^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Var var = scope.getVar ( name )  ;^152^^^^^145^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( n.hasChildren (  )  )  {^158^^^^^145^163^[REPLACE] if  ( !n.hasChildren (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^145^163^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REMOVE]^maybeRemoveCall ( t, n, parent )  ;^160^^^^^145^163^[REMOVE] ^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^compiler.getCodingConvention (  ) ;^161^^^^^145^163^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  gramps  )    )   {  ;^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = n.getNext (  )  ;^198^^^^^173^258^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  (  type != Token.GETELEM || type != Token.CALL )  {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestorChild =  parent;^209^^^^^173^258^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^210^^^^^173^258^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^Node ancestorChild = parent;^193^194^^^^173^258^[ADD] Node ancestor = parent.getParent (  ) ; Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestorChild = n;^194^^^^^173^258^[REPLACE] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^198^^^^^173^258^[ADD] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^202^^^^^173^258^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( type != Token.GETPROP || type != Token.GETELEM || type != Token.CALL )  {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^203^204^205^206^207^173^258^[ADD] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  classes != null  )   {  ;^228^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   !=  n )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( ancestorChild, parent ) ;^245^^^^^229^247^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^246^^^^^229^247^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  ancestor  )    )   {  ;^231^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = n.getParent (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^233^^^^^173^258^[ADD] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = n.getParent (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node propNode = n.getLastChild (  )  ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getNext (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^230^^^^^173^258^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = n.getNext (  )  ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   &&  n )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithEmpty ( n, parent )  ;^245^^^^^229^247^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^231^232^233^234^235^173^258^[ADD] if  ( NodeUtil.isExpressionNode ( gramps )  )  {  Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ; compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^replaceWithEmpty ( gramps, greatGramps ) ;^233^234^^^^173^258^[ADD] Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^252^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithEmpty ( n, parent )  ;^253^^^^^173^258^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^254^^^^^173^258^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestorChild =  null;^209^^^^^173^258^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestor = n.getNext (  ) ;^193^^^^^173^258^[REPLACE] Node ancestor = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^int type = ancestor .getString (  )  ;^202^^^^^173^258^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = n .getNext (  )  ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^233^234^^^^173^258^[ADD] Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getParent (  ) ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^274^^^^^270^285^[ADD] Node lvalue = n.getFirstChild (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if   (  nameEndsWithFieldNameToStrip  (  expression  )   || qualifiedNameBeginsWithStripType  (  expression  )    )   {  ;^275^276^^^^270^285^[REPLACE] if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^275^276^277^278^279^270^285^[ADD] if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( n )  )  {^277^^^^^270^285^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^278^^^^^270^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if   (  classes != null  )   {  ;^328^^^^^324^359^[REPLACE] if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^328^329^^^^324^359^[ADD] if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( ancestor.getFirstChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  gramps  )    )   {  ;^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = n.getParent (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( type != Token.GETPROP ) {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestorChild =  parent;^354^^^^^324^359^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^355^^^^^324^359^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node rvalue = n.getNext (  )  ;^333^^^^^324^359^[REPLACE] Node ancestor = parent;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^334^335^^^^324^359^[ADD] Node ancestorChild = n; int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int ancestorLevel = 4;^335^^^^^324^359^[REPLACE] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = n .getNext (  )  ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^347^^^^^324^359^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^337^338^339^340^^324^359^[ADD] if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil .removeChild ( ancestorChild )   )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^341^342^343^344^345^324^359^[ADD] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^343^344^^^^324^359^[ADD] Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( type != Token.GETPROP || type != Token.GETELEM || type != Token.CALL )  {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^354^355^^^^324^359^[ADD] ancestorChild = ancestor; ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^334^^^^^324^359^[ADD] Node ancestorChild = n;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^335^^^^^324^359^[ADD] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = parent.getNext (  ) ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node key = next.getFirstChild (  ) ;^373^^^^^368^387^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^[REPLACE] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^375^376^377^378^379^368^387^[ADD] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  { Node value = key.getNext (  ) ; Node next = value.getNext (  ) ; n.removeChild ( key ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  next.getNext (  ) .getNext (  ) ;^384^^^^^375^385^[REPLACE] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^381^382^^^^375^385^[ADD] key = next; compiler.reportCodeChange (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^377^378^^^^375^385^[ADD] Node value = key.getNext (  ) ; Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node next = value.getParent (  ) ;^378^^^^^375^385^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^381^^^^^368^387^[ADD] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  next.getNext (  ) .getNext (  ) ;^384^^^^^368^387^[REPLACE] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = next .getParent (  )  ;^377^^^^^368^387^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node next = value .getParent (  )  ;^378^^^^^368^387^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node function = parent.getFirstChild (  ) ;^483^^^^^474^509^[REPLACE] Node function = n.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( function != false ) {^484^^^^^474^509^[REPLACE] if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^489^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  (  parent.getType (  )  != Token.NAME )  {^492^^^^^474^509^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( gramps != null && gramps.removeChild (  )  != Token.VAR )  {^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^500^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return false;  ;^500^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^493^^^^^474^509^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( gramps != null && gramps.getType (  )  != Token.VAR )  {^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^494^495^^^^474^509^[ADD] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node gramps = parent .getNext (  )  ;^493^^^^^474^509^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^504^^^^^474^509^[ADD] Node callee = function.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  && qualifiedNameBeginsWithStripType ( callee )  && actsOnStripType ( t, n ) ;^505^506^507^508^^474^509^[REPLACE] return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^SubclassRelationship classes = compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^539^540^^^^538^557^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( classes == null )  {^541^^^^^538^557^[REPLACE] if  ( classes != null )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if   (  qualifiedNameBeginsWithStripType  (  classes.superclassName  )    )   {  ;^544^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return true;  ;^545^^^^^538^557^[REPLACE] return true;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if   (  qualifiedNameBeginsWithStripType  (  classes.subclassName  )    )   {  ;^550^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[ADD]^^551^552^^^^538^557^[ADD] t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return false;^545^^^^^538^557^[REPLACE] return true;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[ADD]^return true;^544^545^546^^^538^557^[ADD] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[ADD]^^550^551^552^553^^538^557^[ADD] if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return true;^556^^^^^538^557^[REPLACE] return false;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( stripNameSuffixes.contains ( name )  ) {^567^568^^^^566^590^[REPLACE] if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;  ;^569^^^^^567^570^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^569^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  (  ( name.size (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^[REPLACE] if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;^573^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;  ;^573^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^[REPLACE] String lcName = name.toLowerCase (  ) ;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( lcName.startsWith ( name.toLowerCase (  )  )  )  {^578^^^^^566^590^[REPLACE] if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^579^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^for  ( String name : stripNamePrefixes )  {^577^^^^^566^590^[REPLACE] for  ( String stripName : stripNamePrefixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^[REPLACE] if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^^577^578^579^580^^566^590^[ADD] for  ( String stripName : stripNamePrefixes )  { if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( name.endsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^[REPLACE] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^return true;^584^585^586^^^566^590^[ADD] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;  ;^585^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^for  ( String name : stripNameSuffixes )  {^583^^^^^566^590^[REPLACE] for  ( String stripName : stripNameSuffixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^585^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^String type  ;^583^^^^^566^590^[REPLACE] for  ( String stripName : stripNameSuffixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;^589^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^switch  ( parent.getType (  )  )  {^97^^^^^96^133^[REPLACE] switch  ( n.getType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^97^98^99^^^96^133^[ADD] switch  ( n.getType (  )  )  { case Token.VAR: removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^removeVarDeclarationsByNameOrRvalue ( t, n, n ) ;^99^^^^^96^133^[REPLACE] removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^99^100^^^^96^133^[ADD] removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveCall ( t, n, parent )  ;^103^^^^^96^133^[REPLACE] maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeEliminateExpressionByName ( t, n, parent )  ;^118^^^^^96^133^[REPLACE] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^118^^^^^96^133^[ADD] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^( key.getType (  )  )  ;^122^^^^^96^133^[REPLACE] maybeRemoveCall ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveCall ( t, n, parent )  ;^126^^^^^96^133^[REPLACE] eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeEliminateAssignmentByLvalueName ( t, n, parent )  ;^130^^^^^96^133^[REPLACE] maybeEliminateExpressionByName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^145^163^[REPLACE] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^149^150^^152^153^145^163^[ADD] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  { Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Var var = scope.getVar ( name )  ;^152^^^^^149^156^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^nameNode =  parent.getNext (  )  )  {^147^^^^^145^163^[REPLACE] nameNode = nameNode.getNext (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode != null;^146^^^^^145^163^[REPLACE] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^String name = n.getString (  )  ;^148^^^^^145^163^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( nameNode , false )  ;^152^^^^^145^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( n.hasChildren (  )  )  {^158^^^^^145^163^[REPLACE] if  ( !n.hasChildren (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^145^163^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^compiler .getCodingConvention (  )  ;^161^^^^^145^163^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  gramps  )    )   {  ;^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancParent = parent.getParent (  ) ;^198^^^^^173^258^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( type != Token.GETPROP || type != Token.GETELEM || type != Token.CALL )  {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^203^204^205^206^207^173^258^[ADD] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^maybeRemoveCall ( t, n, parent )  ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestorChild =  parent;^209^^^^^173^258^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^210^^^^^173^258^[ADD] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestor = n.getParent (  ) ;^193^^^^^173^258^[REPLACE] Node ancestor = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestorChild = n;^194^^^^^173^258^[REPLACE] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^202^^^^^173^258^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^198^199^^^^173^258^[ADD] Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  (  type != Token.GETELEM || type != Token.CALL )  {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  classes != null  )   {  ;^228^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   ) {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( n, greatGramps ) ;^245^^^^^229^247^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^245^^^^^229^247^[ADD] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^246^^^^^229^247^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  ancestor  )    )   {  ;^231^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^231^232^233^234^235^173^258^[ADD] if  ( NodeUtil.isExpressionNode ( gramps )  )  {  Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ; compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^^^^^231^242^[ADD] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = gramps.getNext (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^230^^^^^173^258^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node propNode = n.getLastChild (  )  ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^233^234^^^^173^258^[ADD] Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = parent.getNext (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getNext (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   !=  n )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^Node gramps = parent.getParent (  ) ;Node greatGramps = gramps.getParent (  ) ;^229^230^231^^233^173^258^[ADD] if  ( parent.getFirstChild (  )  == n )  { Node gramps = parent.getParent (  ) ; if  ( NodeUtil.isExpressionNode ( gramps )  )  { Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REMOVE]^scope.getVar ( name )  ;^246^^^^^229^247^[REMOVE] ^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = n.getNext (  )  ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node propNode = n.getLastChild (  )  ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if   (  classes != null  )   {  ;^252^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^replaceWithNull ( n, parent ) ;compiler.reportCodeChange (  ) ;^252^253^254^255^^173^258^[ADD] if  ( isReferenceToRemovedVar ( t, n )  )  { replaceWithNull ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( ancestorChild, parent ) ;^253^^^^^173^258^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^254^^^^^173^258^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^210^^^^^173^258^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node propNode = n.getLastChild (  )  ;^193^^^^^173^258^[REPLACE] Node ancestor = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^194^^^^^173^258^[ADD] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^198^^^^^173^258^[ADD] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = n.getParent (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^239^^^^173^258^[ADD] Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node lvalue = parent.getFirstChild (  ) ;^274^^^^^270^285^[REPLACE] Node lvalue = n.getFirstChild (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  ) {^275^276^^^^270^285^[REPLACE] if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^275^276^277^278^279^270^285^[ADD] if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  { if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  gramps  )    )   {  ;^277^^^^^270^285^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^Node gramps = parent.getParent (  ) ;replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^277^278^279^280^281^270^285^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^278^279^^^^270^285^[ADD] Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if   (  classes != null  )   {  ;^328^^^^^324^359^[REPLACE] if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( ancestor.removeChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = parent.getParent (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  (  type != Token.GETELEM || type != Token.CALL )  {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestorChild =  parent;^354^^^^^324^359^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^355^^^^^324^359^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestor = n;^333^^^^^324^359^[REPLACE] Node ancestor = parent;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestorChild = parent;^334^^^^^324^359^[REPLACE] Node ancestorChild = n;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int ancestorLevel = 4;^335^^^^^324^359^[REPLACE] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = parent.getType (  ) ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( ancestor.getFirstChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^337^338^339^340^^324^359^[ADD] if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^break;^338^339^^^^324^359^[ADD] replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( type != Token.GETPROP || type != Token.GETELEM || type != Token.CALL )  {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^351^352^^^^348^353^[ADD] replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^354^355^^^^324^359^[ADD] ancestorChild = ancestor; ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node rvalue = n.getNext (  )  ;^333^^^^^324^359^[REPLACE] Node ancestor = parent;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = ancestor.getNext (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^373^^^^^368^387^[ADD] Node key = n.getFirstChild (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^[REPLACE] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[ADD]^^384^^^^^375^385^[ADD] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  n;^381^^^^^375^385^[REPLACE] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = next.getParent (  ) ;^377^^^^^375^385^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node propNode = n.getLastChild (  )  ;^378^^^^^375^385^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  n;^381^^^^^368^387^[REPLACE] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  next.getNext (  ) .getNext (  ) ;^384^^^^^368^387^[REPLACE] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = next .getParent (  )  ;^377^^^^^368^387^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node propNode = n.getLastChild (  )  ;^378^^^^^368^387^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[ADD]^^483^^^^^474^509^[ADD] Node function = n.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( n != null || function.getType (  )  != Token.GETPROP )  {^484^^^^^474^509^[REPLACE] if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^489^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return false;  ;^489^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( parent != null && parent.getType (  )  != Token.NAME )  {^492^^^^^474^509^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if   (  parent != null && parent.getType  (    )   == Token.NAME  )   {  ;^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^500^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^493^^^^^474^509^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( gramps != null && gramps.removeChild (  )  != Token.VAR )  {^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^494^495^^^^474^509^[ADD] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node gramps = n.getNext (  ) ;^493^^^^^474^509^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node callee = n.getFirstChild (  ) ;^504^^^^^474^509^[REPLACE] Node callee = function.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  && qualifiedNameBeginsWithStripType ( callee )  && actsOnStripType ( t, n ) ;^505^506^507^508^^474^509^[REPLACE] return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^SubclassRelationship classes = compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^539^540^^^^538^557^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( classes == null )  {^541^^^^^538^557^[REPLACE] if  ( classes != null )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if   (  qualifiedNameBeginsWithStripType  (  classes.superclassName  )    )   {  ;^544^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return false;^545^^^^^538^557^[REPLACE] return true;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if   (  qualifiedNameBeginsWithStripType  (  classes.subclassName  )    )   {  ;^550^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^t .getScope (  )  ;^551^552^^^^538^557^[REPLACE] t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return true;^556^^^^^538^557^[REPLACE] return false;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( stripNameSuffixes.contains ( stripName )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^[REPLACE] if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return false;^569^^^^^567^570^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return true;  ;^569^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  (  ( name.size (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^[REPLACE] if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return true;^573^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^[REPLACE] String lcName = name.toLowerCase (  ) ;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if   (  lcName.endsWith  (  stripName.toLowerCase  (    )    )    )   {  ;^578^^^^^566^590^[REPLACE] if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return false;^579^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[ADD]^^577^578^579^580^^566^590^[ADD] for  ( String stripName : stripNamePrefixes )  { if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^578^^^^^566^590^[REPLACE] if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^String type  ;^577^^^^^566^590^[REPLACE] for  ( String stripName : stripNamePrefixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  ( lcName.endsWith ( name .equals ( null )   )  )  {^584^^^^^566^590^[REPLACE] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[ADD]^return true;^584^585^586^^^566^590^[ADD] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return false;^585^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  ( name.endsWith ( stripName.toLowerCase (  )  )  )  {^584^^^^^566^590^[REPLACE] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[ADD]^^583^584^585^586^^566^590^[ADD] for  ( String stripName : stripNameSuffixes )  { if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return true;^589^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
