[REPLACE]^boolean statementNeedsEnded  = null ;^33^^^^^^^[REPLACE] boolean statementNeedsEnded = false;^ [CLASS] CodeConsumer  
[REPLACE]^boolean statementStarted  = null ;^34^^^^^^^[REPLACE] boolean statementStarted = false;^ [CLASS] CodeConsumer  
[REPLACE]^boolean sawFunction  = null ;^35^^^^^^^[REPLACE] boolean sawFunction = false;^ [CLASS] CodeConsumer  
[REPLACE]^return false;^82^^^^^81^83^[REPLACE] return true;^[METHOD] continueProcessing [TYPE] boolean [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^106^^^^^105^107^[REPLACE] append ( "{" ) ;^[METHOD] appendBlockStart [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^110^^^^^109^111^[REPLACE] append ( "}" ) ;^[METHOD] appendBlockEnd [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^117^^^^^116^118^[REPLACE] maybeCutLine (  ) ;^[METHOD] maybeLineBreak [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^if  ( x < 0 && prev == '-' )  {^130^^^^^129^138^[REPLACE] if  ( statementNeedsEnded )  {^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REMOVE]^if  ( statementNeedsEnded )  {     append ( ";" ) ;     maybeLineBreak (  ) ;     endLine (  ) ;     statementNeedsEnded = false; }^130^^^^^129^138^[REMOVE] ^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^131^^^^^129^138^[REPLACE] append ( ";" ) ;^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^132^^^^^129^138^[REPLACE] maybeLineBreak (  ) ;^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^134^^^^^129^138^[REPLACE] appendBlockStart (  ) ;^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^136^^^^^129^138^[REPLACE] endLine (  ) ;^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[ADD]^^136^137^^^^129^138^[ADD] endLine (  ) ; statementNeedsEnded = false;^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^statementNeedsEnded = true;^137^^^^^129^138^[REPLACE] statementNeedsEnded = false;^[METHOD] beginBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^endBlock ( true ) ;^141^^^^^140^142^[REPLACE] endBlock ( false ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^145^^^^^144^150^[REPLACE] appendBlockEnd (  ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^if  ( true )  {^146^^^^^144^150^[REPLACE] if  ( statementContext )  {^[METHOD] endBlock [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^endLine (  ) ;^146^147^148^^^144^150^[ADD] if  ( statementContext )  { endLine (  ) ; }^[METHOD] endBlock [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^147^^^^^144^150^[REPLACE] endLine (  ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^^147^^^^^144^150^[ADD] endLine (  ) ;^[METHOD] endBlock [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^statementNeedsEnded = true;^149^^^^^144^150^[REPLACE] statementNeedsEnded = false;^[METHOD] endBlock [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^add ( " " ) ;^153^^^^^152^155^[REPLACE] add ( "," ) ;^[METHOD] listSeparator [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^154^^^^^152^155^[REPLACE] maybeLineBreak (  ) ;^[METHOD] listSeparator [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REMOVE]^append ( " " ) ;^154^^^^^152^155^[REMOVE] ^[METHOD] listSeparator [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^endStatement ( true ) ;^164^^^^^163^165^[REPLACE] endStatement ( false ) ;^[METHOD] endStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^^164^^^^^163^165^[ADD] endStatement ( false ) ;^[METHOD] endStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^if  ( true )  {^168^^^^^167^175^[REPLACE] if  ( needSemiColon )  {^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^^168^169^170^171^^167^175^[ADD] if  ( needSemiColon )  { append ( ";" ) ; maybeLineBreak (  ) ; statementNeedsEnded = false;^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^}  else {^172^^^^^167^175^[REPLACE] } else if  ( statementStarted )  {^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REMOVE]^if  ( statementNeedsEnded )  {     append ( ";" ) ;     maybeLineBreak (  ) ;     endLine (  ) ;     statementNeedsEnded = false; }^172^^^^^167^175^[REMOVE] ^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^statementNeedsEnded = false;^173^^^^^167^175^[REPLACE] statementNeedsEnded = true;^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^^173^^^^^167^175^[ADD] statementNeedsEnded = true;^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^statementNeedsEnded = true;^171^^^^^167^175^[REPLACE] statementNeedsEnded = false;^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^}  if  ( statementStarted )  {^172^^^^^167^175^[REPLACE] } else if  ( statementStarted )  {^[METHOD] endStatement [TYPE] void [PARAMETER] boolean needSemiColon [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^if  ( x < 0 && prev == '-' )  {^183^^^^^181^190^[REPLACE] if  ( statementNeedsEnded )  {^[METHOD] maybeEndStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REMOVE]^if  ( needSemiColon )  {     append ( ";" ) ;     maybeLineBreak (  ) ;     statementNeedsEnded = false; }else     if  ( statementStarted )  {         statementNeedsEnded = true;     }^183^^^^^181^190^[REMOVE] ^[METHOD] maybeEndStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^statementNeedsEnded = true;^187^^^^^181^190^[REPLACE] statementNeedsEnded = false;^[METHOD] maybeEndStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^^187^^^^^181^190^[ADD] statementNeedsEnded = false;^[METHOD] maybeEndStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^statementStarted = false;^189^^^^^181^190^[REPLACE] statementStarted = true;^[METHOD] maybeEndStatement [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^endFunction ( true ) ;^193^^^^^192^194^[REPLACE] endFunction ( false ) ;^[METHOD] endFunction [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^sawFunction = false;^197^^^^^196^201^[REPLACE] sawFunction = true;^[METHOD] endFunction [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[ADD]^^197^^^^^196^201^[ADD] sawFunction = true;^[METHOD] endFunction [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^if  ( statementNeedsEnded )  {^198^^^^^196^201^[REPLACE] if  ( statementContext )  {^[METHOD] endFunction [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^199^^^^^196^201^[REPLACE] endLine (  ) ;^[METHOD] endFunction [TYPE] void [PARAMETER] boolean statementContext [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^204^^^^^203^205^[REPLACE] append ( ":" ) ;^[METHOD] beginCaseBody [TYPE] void [PARAMETER] [CLASS] CodeConsumer   [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
[REPLACE]^append ( " " ) ;^211^^^^^210^226^[REPLACE] maybeEndStatement (  ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[ADD]^^211^^^^^210^226^[ADD] maybeEndStatement (  ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^if  ( newcode.length (  )  - 1 == 0  )  {^213^^^^^210^226^[REPLACE] if  ( newcode.length (  )  == 0 )  {^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REMOVE]^if  (  ( prev == '-' )  &&  ( first == '>' )  )  {     append ( " " ) ; }^213^^^^^210^226^[REMOVE] ^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^return true;^214^^^^^210^226^[REPLACE] return;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^char c = newcode.charAt ( 4 ) ;^217^^^^^210^226^[REPLACE] char c = newcode.charAt ( 0 ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^if  (  c == '\\' )  || isWordChar ( getLastChar (  )  )  )  {^218^219^^^^210^226^[REPLACE] if  (  ( isWordChar ( c )  || c == '\\' )  && isWordChar ( getLastChar (  )  )  )  {^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[ADD]^^218^219^^^222^210^226^[ADD] if  (  ( isWordChar ( c )  || c == '\\' )  && isWordChar ( getLastChar (  )  )  )  { append ( " " ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^append ( ";" ) ;^222^^^^^210^226^[REPLACE] append ( " " ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^append ( " " ) ;^225^^^^^210^226^[REPLACE] append ( newcode ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[ADD]^^225^^^^^210^226^[ADD] append ( newcode ) ;^[METHOD] add [TYPE] void [PARAMETER] String newcode [CLASS] CodeConsumer   [TYPE]  char c  [TYPE]  boolean false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String newcode 
[REPLACE]^append ( " " ) ;^229^^^^^228^230^[REPLACE] append ( op ) ;^[METHOD] appendOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^append ( " " ) ;^233^^^^^232^260^[REPLACE] maybeEndStatement (  ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^^233^^^^^232^260^[ADD] maybeEndStatement (  ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^char first = op.charAt ( 0 * 1 ) ;^235^^^^^232^260^[REPLACE] char first = op.charAt ( 0 ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^^235^236^^^^232^260^[ADD] char first = op.charAt ( 0 ) ; char prev = getLastChar (  ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^char first = op.charAt ( 0 ) ;^236^^^^^232^260^[REPLACE] char prev = getLastChar (  ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^if  (  ( first == '+' || first == '-' )  || prev == first )  {^238^^^^^232^260^[REPLACE] if  (  ( first == '+' || first == '-' )  && prev == first )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REMOVE]^if  (  ( isLetter ( first )  )  &&  ( isWordChar ( prev )  )  )  {     append ( " " ) ; }else     if  (  ( prev == '-' )  &&  ( first == '>' )  )  {         append ( " " ) ;     }^238^^^^^232^260^[REMOVE] ^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^} else if  ( Character.isLetter ( first )  || isWordChar ( prev )  )  {^242^243^^^^232^260^[REPLACE] } else if  ( Character.isLetter ( first )  && isWordChar ( prev )  )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^}   append ( " " ) ;^242^243^^245^^232^260^[ADD] else if  ( Character.isLetter ( first )  && isWordChar ( prev )  )  { append ( " " ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^}  else {^246^^^^^232^260^[REPLACE] } else if  ( prev == '-' && first == '>' )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^}   append ( " " ) ;^246^247^248^249^^232^260^[ADD] else if  ( prev == '-' && first == '>' )  {  append ( " " ) ; }^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^append ( ";" ) ;^248^^^^^232^260^[REPLACE] append ( " " ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^append ( ";" ) ;^245^^^^^242^249^[REPLACE] append ( " " ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^append ( ";" ) ;^241^^^^^232^260^[REPLACE] append ( " " ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REMOVE]^maybeEndStatement (  ) ;^241^^^^^232^260^[REMOVE] ^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^}  if  ( Character.isLetter ( first )  || isWordChar ( prev )  )  {^242^243^^^^232^260^[REPLACE] } else if  ( Character.isLetter ( first )  && isWordChar ( prev )  )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^} else if  (  true )  {^246^^^^^232^260^[REPLACE] } else if  ( prev == '-' && first == '>' )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^} else if  ( prev == '-' ) {^246^^^^^232^260^[REPLACE] } else if  ( prev == '-' && first == '>' )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REMOVE]^if  (  ( newcode.length (  )  )  == 0 )  {     return ; }^246^^^^^232^260^[REMOVE] ^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^appendOp ( op, statementStarted ) ;^252^^^^^232^260^[REPLACE] appendOp ( op, binOp ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^^252^^^^^232^260^[ADD] appendOp ( op, binOp ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^if  ( statementStarted )  {^257^^^^^232^260^[REPLACE] if  ( binOp )  {^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^maybeCutLine (  ) ;^257^258^259^^^232^260^[ADD] if  ( binOp )  { maybeCutLine (  ) ; }^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^append ( " " ) ;^258^^^^^232^260^[REPLACE] maybeCutLine (  ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[ADD]^^258^^^^^232^260^[ADD] maybeCutLine (  ) ;^[METHOD] addOp [TYPE] void [PARAMETER] String op boolean binOp [CLASS] CodeConsumer   [TYPE]  char first  prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  String op 
[REPLACE]^char first = op.charAt ( 0 ) ;^265^^^^^262^288^[REPLACE] char prev = getLastChar (  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[ADD]^^265^^^^^262^288^[ADD] char prev = getLastChar (  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^if  ( x < 0 - 1 || prev == '-' )  {^266^^^^^262^288^[REPLACE] if  ( x < 0 && prev == '-' )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add ( "," ) ;^267^^^^^262^288^[REPLACE] add ( " " ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^while  ( mantissa / 2 * Math.pow ( 2, exp + 1 )   &&  mantissa )  {^275^^^^^262^288^[REPLACE] while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )  == value )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 4;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^if  (  ( long )  x  &&  x )  {^270^^^^^262^288^[REPLACE] if  (  ( long )  x == x )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[ADD]^^270^271^272^273^^262^288^[ADD] if  (  ( long )  x == x )  { long value =  ( long )  x; long mantissa = value; int exp = 0;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add ( Long.toString ( value )  ) ;^286^^^^^270^287^[REPLACE] add ( String.valueOf ( x )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add (   x    ) ;^286^^^^^270^287^[REPLACE] add ( String.valueOf ( x )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^while  ( mantissa / 10 *   exp + 1     &&  value )  {^275^^^^^262^288^[REPLACE] while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )  == value )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[ADD]^^275^276^^^^262^288^[ADD] while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )  == value )  { mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 10L;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^if  ( x  <  100 )  {^274^^^^^262^288^[REPLACE] if  ( x >= 100 )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[ADD]^^274^275^276^277^278^262^288^[ADD] if  ( x >= 100 )  { while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )  == value )  { mantissa /= 10; exp++; }^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )   &&  value )  {^275^^^^^262^288^[REPLACE] while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )  == value )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 10 + 1;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 10 << 4;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^if  ( exp  <  2 )  {^280^^^^^262^288^[REPLACE] if  ( exp > 2 )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add ( Long.toString ( mantissa )  ) ;^283^^^^^280^284^[REPLACE] add ( Long.toString ( value )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add (   value    ) ;^283^^^^^280^284^[REPLACE] add ( Long.toString ( value )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add ( Long.toString ( mantissa )   !=  "E"  !=  Integer.toString ( exp )  ) ;^281^^^^^262^288^[REPLACE] add ( Long.toString ( mantissa )  + "E" + Integer.toString ( exp )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REMOVE]^add ( Long.toString ( value )  ) ;^281^^^^^262^288^[REMOVE] ^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add ( Long.toString ( value )  + "E" + Integer.toString ( exp )  ) ;^281^^^^^262^288^[REPLACE] add ( Long.toString ( mantissa )  + "E" + Integer.toString ( exp )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add ( Long.toString ( mantissa )  + "E" +   mantissa    + "E" + Integer.^281^^^^^262^288^[REPLACE] add ( Long.toString ( mantissa )  + "E" + Integer.toString ( exp )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[ADD]^^281^^^^^262^288^[ADD] add ( Long.toString ( mantissa )  + "E" + Integer.toString ( exp )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 0;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^int exp = 0;^271^^^^^262^288^[REPLACE] long value =  ( long )  x;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^long mantissa = mantissa;^272^^^^^262^288^[REPLACE] long mantissa = value;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^int exp = 2;^273^^^^^262^288^[REPLACE] int exp = 0;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[ADD]^^273^^^^^262^288^[ADD] int exp = 0;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^if  ( x  <=  100L )  {^274^^^^^262^288^[REPLACE] if  ( x >= 100 )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^while  ( mantissa / 3 * Math.pow ( 3, exp + 1 )   ||  value )  {^275^^^^^262^288^[REPLACE] while  ( mantissa / 10 * Math.pow ( 10, exp + 1 )  == value )  {^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 10 * 1;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REMOVE]^endFunction ( false ) ;^283^^^^^280^284^[REMOVE] ^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^add (   value    + "E" + Integer.^281^^^^^262^288^[REPLACE] add ( Long.toString ( mantissa )  + "E" + Integer.toString ( exp )  ) ;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^mantissa /= 10 + 0;^276^^^^^262^288^[REPLACE] mantissa /= 10;^[METHOD] addNumber [TYPE] void [PARAMETER] double x [CLASS] CodeConsumer   [TYPE]  char prev  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true  [TYPE]  double x  [TYPE]  long mantissa  value  [TYPE]  int exp 
[REPLACE]^return  ( ch == '_' || ch == '$' || Character.isLetter ( ch )  ) ;^291^292^293^^^290^294^[REPLACE] return  ( ch == '_' || ch == '$' || Character.isLetterOrDigit ( ch )  ) ;^[METHOD] isWordChar [TYPE] boolean [PARAMETER] char ch [CLASS] CodeConsumer   [TYPE]  char ch  [TYPE]  boolean binOp  false  needSemiColon  sawFunction  statementContext  statementNeedsEnded  statementStarted  true 
