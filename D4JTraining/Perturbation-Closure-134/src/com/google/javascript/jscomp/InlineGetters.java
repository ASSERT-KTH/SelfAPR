[REPLACE]^private static  Logger logger = Logger.getLogger ( InlineGetters.class.getName (  )  ) ;^56^57^^^^56^57^[REPLACE] private static final Logger logger = Logger.getLogger ( InlineGetters.class.getName (  )  ) ;^ [CLASS] InlineGetters InlineTrivialAccessors 1  
[REPLACE]^final MethodCompilerPass.SignatureStore DUMMY_SIGNATURE_STORE = new MethodCompilerPass.SignatureStore (  )  {^282^283^^^^282^296^[REPLACE] static final MethodCompilerPass.SignatureStore DUMMY_SIGNATURE_STORE = new MethodCompilerPass.SignatureStore (  )  {^ [CLASS] InlineGetters InlineTrivialAccessors 1  
[REPLACE]^if  ( externMethods.contains ( callName )  && nonMethodProperties.contains ( callName )  )  {^71^72^^^^70^109^[REPLACE] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^71^72^73^74^^70^109^[ADD] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return;  ;^73^^^^^71^74^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return;  ;^73^^^^^70^109^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^76^^^^^70^109^[ADD] Collection<Node> definitions = methodDefinitions.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( definitions == null || definitions.size (  )  /  2 == 0 )  {^77^^^^^70^109^[REPLACE] if  ( definitions == null || definitions.size (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^return;^77^78^79^^^70^109^[ADD] if  ( definitions == null || definitions.size (  )  == 0 )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^return;  ;^78^^^^^70^109^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^Node firstDefinition = definitions.iterator (  ) .checkTreeEqualsSilent (  ) ;^83^^^^^70^109^[REPLACE] Node firstDefinition = definitions.iterator (  ) .next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  (  allDefinitionsEquivalent ( definitions )  )  {^86^^^^^70^109^[REPLACE] if  ( definitions.size (  )  == 1 || allDefinitionsEquivalent ( definitions )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^86^87^88^^90^70^109^[ADD] if  ( definitions.size (  )  == 1 || allDefinitionsEquivalent ( definitions )  )  {  if  ( !argsMayHaveSideEffects ( callNode )  )  { Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Method '"  callName  "' has conflicting definitions." ) ;^107^^^^^86^108^[REPLACE] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( argsMayHaveSideEffects ( callNode )  )  {^88^^^^^70^109^[REPLACE] if  ( !argsMayHaveSideEffects ( callNode )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( returned == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^91^92^93^94^95^70^109^[ADD] if  ( returned != null )  { if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining empty method: "  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^inlineEmptyMethod ( t, parent, callNode ) ;^102^103^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineEmptyMethod ( t, parent, returned ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( isPropertyTree ( parent )  )  {^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^92^93^94^95^^70^109^[ADD] if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if   (  isEmptyMethod  (  firstDefinition  )   && !NodeUtil.mayHaveSideEffects  (  callNode.getFirstChild  (    )    )    )   {  ;^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^}   logger.fine ( "Inlining constant accessor: " + callName ) ;inlineConstReturn ( parent, callNode, returned ) ;^95^96^97^98^99^70^109^[ADD] else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^fine (  ( "Inlining property accessor: " + callName )  )  ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^97^98^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, callNode, firstDefinition ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining property accessor: "  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( parent, returned, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( NodeUtil.getStringValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, callNode, parent ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if   (  definitions == null || definitions.size  (    )   == 0  )   {  ;^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( firstDefinition, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( returned, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^98^^^^^95^99^[ADD] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( returned.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^Node returned = returnedExpression ( returned ) ;^90^^^^^70^109^[REPLACE] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( parent == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  else {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^fine (  ( "Inlining property accessor: " + callName )  )  ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineEmptyMethod ( t, returned, callNode ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^97^^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( returned, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^logger .getLogger ( callName )  ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( parent, callNode, firstDefinition ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, parent, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^}  else {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( parent, parent, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^isPropertyTree ( returned )  ;^97^^^^^95^99^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if   (  NodeUtil.isLiteralValue  (  returned  )   && !NodeUtil.mayHaveSideEffects  (  callNode.getFirstChild  (    )    )    )   {  ;^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^90^^^^^70^109^[ADD] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( returned ==parent )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^}   logger.fine ( "Inlining empty method: " + callName ) ;inlineEmptyMethod ( t, parent, callNode ) ;^100^101^102^103^104^70^109^[ADD] else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^inlineConstReturn ( parent, callNode, returned )  ;^103^^^^^100^104^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlineConstReturn ( parent, returned, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^fine (  ( "Inlining constant accessor: " + callName )  )  ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( parent, callNode, parent ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^compiler.reportCodeChange (  )  ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^103^^^^^100^104^[ADD] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^Node expectedBlock = getMethodBlock ( fn )  ;^90^^^^^70^109^[REPLACE] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  (parent == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REMOVE]^isPropertyTree ( returned )  ;^102^^^^^100^104^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[ADD]^^94^^^^^70^109^[ADD] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^inlinePropertyReturn ( firstDefinition, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^} else if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil .isLiteralValue ( callNode )   )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName  [TYPE]  Logger logger 
[REPLACE]^if  ( expectedGetprop.getType (  )   ==  Token.GETPROP )  {^123^^^^^122^138^[REPLACE] if  ( expectedGetprop.getType (  )  != Token.GETPROP )  {^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^124^^^^^122^138^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^Node leftChild = retVal.getFirstChild (  ) ;^127^^^^^122^138^[REPLACE] Node leftChild = expectedGetprop.getFirstChild (  ) ;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^if  ( leftChild.getType (  )  != Token.THIS || !isPropertyTree ( leftChild )  )  {^128^129^^^^122^138^[REPLACE] if  ( leftChild.getType (  )  != Token.THIS && !isPropertyTree ( leftChild )  )  {^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^130^^^^^128^131^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^130^^^^^122^138^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[ADD]^^133^^^^^122^138^[ADD] Node retVal = leftChild.getNext (  ) ;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^if  ( NodeUtil.getStringValue ( retVal )  != this  )  {^134^^^^^122^138^[REPLACE] if  ( NodeUtil.getStringValue ( retVal )  == null )  {^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return true;^135^^^^^122^138^[REPLACE] return false;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^return false;^137^^^^^122^138^[REPLACE] return true;^[METHOD] isPropertyTree [TYPE] boolean [PARAMETER] Node expectedGetprop [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedGetprop  leftChild  retVal 
[REPLACE]^Node returned = returnedExpression ( firstDefinition )  ;^158^^^^^157^173^[REPLACE] Node expectedBlock = getMethodBlock ( fn ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if   (  !expectedReturn.hasOneChild  (    )    )   {  ;^159^^^^^157^173^[REPLACE] if  ( !expectedBlock.hasOneChild (  )  )  {^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return null;  ;^160^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return this;^160^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^Node leftChild = expectedGetprop.getFirstChild (  )  ;^163^^^^^157^173^[REPLACE] Node expectedReturn = expectedBlock.getFirstChild (  ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if  ( expectedReturn.getType (  )   ==  Token.RETURN )  {^164^^^^^157^173^[REPLACE] if  ( expectedReturn.getType (  )  != Token.RETURN )  {^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return true;^165^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if  ( !expectedReturn.newNumber (  )  )  {^168^^^^^157^173^[REPLACE] if  ( !expectedReturn.hasOneChild (  )  )  {^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[ADD]^return null;^168^169^170^^^157^173^[ADD] if  ( !expectedReturn.hasOneChild (  )  )  { return null; }^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return this;^169^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return null;  ;^169^^^^^157^173^[REPLACE] return null;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^return fn.getFirstChild (  ) ;^172^^^^^157^173^[REPLACE] return expectedReturn.getLastChild (  ) ;^[METHOD] returnedExpression [TYPE] Node [PARAMETER] Node fn [CLASS] InlineGetters InlineTrivialAccessors 1   [TYPE]  SignatureStore DUMMY_SIGNATURE_STORE  [TYPE]  boolean false  true  [TYPE]  Logger logger  [TYPE]  Node expectedBlock  expectedReturn  fn 
[REPLACE]^if  ( externMethods.contains ( callName )  && nonMethodProperties.contains ( callName )  )  {^71^72^^^^70^109^[REPLACE] if  ( externMethods.contains ( callName )  || nonMethodProperties.contains ( callName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^return;  ;^73^^^^^71^74^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^return;  ;^73^^^^^70^109^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^76^^^^^70^109^[ADD] Collection<Node> definitions = methodDefinitions.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( definitions == null || definitions.size (  )  + 5 == 0 )  {^77^^^^^70^109^[REPLACE] if  ( definitions == null || definitions.size (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^return;  ;^78^^^^^70^109^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^83^^^^^70^109^[ADD] Node firstDefinition = definitions.iterator (  ) .next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( definitions.size (  )  - 4 == 1 || allDefinitionsEquivalent ( definitions )  )  {^86^^^^^70^109^[REPLACE] if  ( definitions.size (  )  == 1 || allDefinitionsEquivalent ( definitions )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Method '"  callName  "' has conflicting definitions." ) ;^107^^^^^86^108^[REPLACE] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^107^^^^^86^108^[ADD] logger.fine ( "Method '" + callName + "' has conflicting definitions." ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( argsMayHaveSideEffects ( callNode )  )  {^88^^^^^70^109^[REPLACE] if  ( !argsMayHaveSideEffects ( callNode )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  (parent == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  else {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining empty method: "  callName ) ;^102^^^^^100^104^[REPLACE] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^definitions.iterator (  )  ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if   (  definitions == null || definitions.size  (    )   == 0  )   {  ;^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if   (  isEmptyMethod  (  firstDefinition  )   && !NodeUtil.mayHaveSideEffects  (  callNode.getFirstChild  (    )    )    )   {  ;^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^fine (  ( "Inlining property accessor: " + callName )  )  ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, callNode, firstDefinition ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining property accessor: "  callName ) ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( firstDefinition, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^}   logger.fine ( "Inlining constant accessor: " + callName ) ;inlineConstReturn ( parent, callNode, returned ) ;^95^96^97^98^99^70^109^[ADD] else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^logger.fine ( "Inlining constant accessor: "  callName ) ;^97^^^^^95^99^[REPLACE] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( firstDefinition, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^98^^^^^95^99^[ADD] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^logger.fine ( "Inlining property accessor: " + callName ) ;inlinePropertyReturn ( parent, callNode, returned ) ;^92^93^94^95^^70^109^[ADD] if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, returned, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, callNode, firstDefinition ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  else {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, callNode, parent ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if   (  NodeUtil.isLiteralValue  (  returned  )   && !NodeUtil.mayHaveSideEffects  (  callNode.getFirstChild  (    )    )    )   {  ;^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineEmptyMethod ( t, returned, callNode ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^Node returned = returnedExpression ( returned ) ;^90^^^^^70^109^[REPLACE] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  (parent == true )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^91^92^93^94^95^70^109^[ADD] if  ( returned != null )  { if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  (  NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^}   logger.fine ( "Inlining empty method: " + callName ) ;inlineEmptyMethod ( t, parent, callNode ) ;^100^101^102^103^104^70^109^[ADD] else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  { logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineEmptyMethod ( t, parent, returned ) ;^103^^^^^100^104^[REPLACE] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  ( isPropertyTree ( firstDefinition )  )  {^92^^^^^70^109^[REPLACE] if  ( isPropertyTree ( returned )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^92^93^94^95^^70^109^[ADD] if  ( isPropertyTree ( returned )  )  { logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ; } else if  ( NodeUtil.isLiteralValue ( returned )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^inlineConstReturn ( parent, callNode, returned ) ;^97^98^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ; inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^inlinePropertyReturn ( parent, callNode, returned ) ;^93^94^^^^70^109^[ADD] logger.fine ( "Inlining property accessor: " + callName ) ; inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( returned, callNode, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^fine (  ( "Inlining empty method: " + callName )  )  ;^93^^^^^70^109^[REPLACE] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^93^^^^^70^109^[ADD] logger.fine ( "Inlining property accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  (returned == null )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^} else if  ( isEmptyMethod ( firstDefinition )  && NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlineConstReturn ( parent, parent, returned ) ;^98^^^^^95^99^[REPLACE] inlineConstReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REMOVE]^( allDefinitionsEquivalent ( definitions )  )  ;^97^^^^^95^99^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( returned, callNode, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^94^^^^^70^109^[ADD] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( isEmptyMethod ( firstDefinition )  ) {^100^101^^^^70^109^[REPLACE] } else if  ( isEmptyMethod ( firstDefinition )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^102^^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^Node firstDefinition = definitions.iterator (  ) .next (  )  ;^90^^^^^70^109^[REPLACE] Node returned = returnedExpression ( firstDefinition ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^if  (parent == this )  {^91^^^^^70^109^[REPLACE] if  ( returned != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^103^^^^^100^104^[ADD] inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, returned, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^}  if  ( NodeUtil.isLiteralValue ( returned )  ) {^95^96^^^^70^109^[REPLACE] } else if  ( NodeUtil.isLiteralValue ( returned )  && !NodeUtil.mayHaveSideEffects ( callNode.getFirstChild (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REMOVE]^( allDefinitionsEquivalent ( definitions )  )  ;^93^^^^^70^109^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[REPLACE]^inlinePropertyReturn ( parent, parent, returned ) ;^94^^^^^70^109^[REPLACE] inlinePropertyReturn ( parent, callNode, returned ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^97^^^^^95^99^[ADD] logger.fine ( "Inlining constant accessor: " + callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
[ADD]^^102^103^^^^100^104^[ADD] logger.fine ( "Inlining empty method: " + callName ) ; inlineEmptyMethod ( t, parent, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] InlineTrivialAccessors   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  firstDefinition  parent  returned  [TYPE]  Collection definitions  [TYPE]  String callName 
