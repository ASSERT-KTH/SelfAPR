[REPLACE]^final Set<String> externMethods  = null ;^40^^^^^^^[REPLACE] final Set<String> externMethods = Sets.newHashSet (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^Set<String> externMethodsWithoutSignatures = Sets.newHashSet (  ) ;^43^^^^^^^[REPLACE] final Set<String> externMethodsWithoutSignatures = Sets.newHashSet (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^final Set<String> nonMethodProperties ;^46^^^^^^^[REPLACE] final Set<String> nonMethodProperties = Sets.newHashSet (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^final Multimap<String, Node> methodDefinitions ;^48^49^^^^48^49^[REPLACE] final Multimap<String, Node> methodDefinitions = HashMultimap.create (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^externMethods .contains ( true )  ;^68^^^^^67^83^[REPLACE] externMethods.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^externMethodsWithoutSignatures.contains ( name )  ;^69^^^^^67^83^[REPLACE] externMethodsWithoutSignatures.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^getSignatureStore (  ) .removeSignature (  ) ;^70^^^^^67^83^[REPLACE] getSignatureStore (  ) .reset (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^getSignatureStore (  ) .reset (  )  ;^70^^^^^67^83^[REPLACE] getSignatureStore (  ) .reset (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^( key.getType (  )  )  ;^71^^^^^67^83^[REPLACE] methodDefinitions.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^if  ( externs == false )  {^73^^^^^67^83^[REPLACE] if  ( externs != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverseRoots ( compiler, externs, new GetExternMethods (  )  ) ;^74^^^^^67^83^[REPLACE] NodeTraversal.traverse ( compiler, externs, new GetExternMethods (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[ADD]^^78^^^^^67^83^[ADD] List<Node> externsAndJs = Lists.newArrayList ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^( key.getType (  )  )  ;^80^^^^^67^83^[REPLACE] compiler, Lists.newArrayList ( externs, root ) , new GatherSignatures (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverseRoots ( compiler, null, getActingCallback (  )  ) ;^81^82^^^^67^83^[REPLACE] NodeTraversal.traverseRoots ( compiler, externsAndJs, getActingCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[ADD]^^81^82^^^^67^83^[ADD] NodeTraversal.traverseRoots ( compiler, externsAndJs, getActingCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^( key.getType (  )  )  ;^82^^^^^67^83^[REPLACE] compiler, externsAndJs, getActingCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^boolean signatureAdded = true;^102^^^^^101^134^[REPLACE] boolean signatureAdded = false;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( node.getType (  )   ) {^104^^^^^101^134^[REPLACE] if  ( node.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^}  if  ( node.getType (  )   ||  Token.NAME )  {^108^^^^^101^134^[REPLACE] } else if  ( node.getType (  )  == Token.NAME )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^}   String functionName = node.getString (  ) ;Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^108^109^^111^112^101^134^[ADD] else if  ( node.getType (  )  == Token.NAME )  {  String functionName = node.getString (  ) ; Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( v != this  )  {^114^^^^^101^134^[REPLACE] if  ( v == null )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^114^115^116^117^118^101^134^[ADD] if  ( v == null )  { if  ( compiler.isIdeMode (  )  )  { return; } else { throw new IllegalStateException (^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if   (  dest.getType  (    )   == Token.STRING && parent.getType  (    )   == Token.ASSIGN  )   {  ;^115^^^^^101^134^[REPLACE] if  ( compiler.isIdeMode (  )  )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^118^119^^^^115^120^[ADD] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^return;  ;^116^^^^^101^134^[REPLACE] return;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^return ;^118^119^^^^101^134^[REPLACE] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^return ;^118^119^^^^115^120^[REPLACE] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( function != null ) {^124^125^^^^101^134^[REPLACE] if  ( function != null && function.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^signatureAdded = false;^127^^^^^124^128^[REPLACE] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^signatureAdded = false;^127^^^^^101^134^[REPLACE] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^String functionName = function.getString (  ) ;^111^^^^^101^134^[REPLACE] String functionName = node.getString (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Scope.Var v = t.getSourceName (  ) .getVar ( functionName ) ;^112^^^^^101^134^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node key = n.getFirstChild (  )  ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( v != null )  {^114^^^^^101^134^[REPLACE] if  ( v == null )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^115^116^117^118^119^101^134^[ADD] if  ( compiler.isIdeMode (  )  )  { return; } else { throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( function != null && function.getType (  )  != Token.FUNCTION )  {^124^125^^^^101^134^[REPLACE] if  ( function != null && function.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Scope.Var v = t.getScope (  ) .getVar ( name ) ;^112^^^^^101^134^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^123^^^^^101^134^[ADD] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^107^^^^^101^134^[ADD] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^}  if  ( node.getType (  )   &&  Token.NAME )  {^108^^^^^101^134^[REPLACE] } else if  ( node.getType (  )  == Token.NAME )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( v != this )  {^114^^^^^101^134^[REPLACE] if  ( v == null )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^127^^^^^101^134^[ADD] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^112^^^^^101^134^[ADD] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node function = 0.getInitialValue (  ) ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^118^119^^^^101^134^[ADD] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^124^125^126^127^128^101^134^[ADD] if  ( function != null && function.getType (  )  == Token.FUNCTION )  { addSignature ( name, function, v.getInputName (  )  ) ; signatureAdded = true; }^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^signatureAdded = false;^107^^^^^101^134^[REPLACE] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^String functionName = node .getParent (  )  ;^111^^^^^101^134^[REPLACE] String functionName = node.getString (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Scope.Var v = t.getScope (  ) .equals ( functionName ) ;^112^^^^^101^134^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node function = v.getInputName (  ) ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( !true )  {^131^^^^^101^134^[REPLACE] if  ( !signatureAdded )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^nonMethodProperties .contains ( null )  ;^132^^^^^101^134^[REPLACE] nonMethodProperties.add ( name ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( dest.getType (  )   ==  Token.STRING )  {^158^^^^^152^201^[REPLACE] if  ( dest.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^return;  ;^159^^^^^152^201^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n || n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^170^171^172^^^152^201^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n && n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^170^171^172^173^^152^201^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n && n.getNext (  ) .getType (  )  == Token.FUNCTION )  { addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  .addSignature ( name , dest , name )  ;^175^^^^^170^177^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  ) .reset (  )  ;^175^^^^^170^177^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures.contains ( name ) ;^176^^^^^170^177^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( parentame, n.getNext (  ) , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, n .getParent (  )  , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, n.getNext (  ) , t.getScope (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  (   Token.STRING )  {^187^^^^^152^201^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^Node value = key.getNext (  ) ;String name = key.getString (  ) ;addSignature ( name, value, t.getSourceName (  )  ) ;^187^188^189^190^191^152^201^[ADD] if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; String name = key.getString (  ) ; if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^addSignature ( name, value, t.getSourceName (  )  ) ;getSignatureStore (  ) .removeSignature ( name ) ;externMethodsWithoutSignatures.add ( name ) ;^190^191^192^193^194^152^201^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ; } else { getSignatureStore (  ) .removeSignature ( name ) ; externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^( key.getType (  )  )  ;^193^^^^^190^195^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^193^^^^^190^195^[ADD] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  ) .reset (  )  ;^193^^^^^190^195^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures.clear (  )  ;^194^^^^^190^195^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, value, t.getScope (  )  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getNext (  ) ;^188^^^^^152^201^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^189^^^^^152^201^[ADD] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^193^194^^^^190^195^[ADD] getSignatureStore (  ) .removeSignature ( name ) ; externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures.contains ( name ) ;^194^^^^^190^195^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, function, v.getInputName (  )  )  ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^186^187^188^^^152^201^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^156^^^^^152^201^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String functionName = node.getString (  )  ;^162^^^^^152^201^[REPLACE] String name = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node function = v.getInitialValue (  )  ;^185^^^^^152^201^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^188^^^^^152^201^[ADD] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getParent (  ) ;^189^^^^^152^201^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^215^^^^^209^247^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if   (  dest.getType  (    )   == Token.STRING && parent.getType  (    )   == Token.ASSIGN  )   {  ;^216^^^^^209^247^[REPLACE] if  ( dest.getString (  ) .equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^227^228^229^230^^216^231^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  { addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^processPrototypeParent ( t, value ) ;^217^^^^^209^247^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^227^228^^^^209^247^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^node.getString (  )  ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REMOVE]^( key.getType (  )  )  ;^229^^^^^227^230^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( dest.getParent (  ) .equals ( "prototype" )  )  {^216^^^^^209^247^[REPLACE] if  ( dest.getString (  ) .equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( value.getType (  )  == Token.ASSIGN ) {^227^228^^^^209^247^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( key.getString (  ) , value, t )  ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^229^^^^^227^230^[ADD] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^240^^^^^209^247^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^Node value = key.getNext (  ) ;addPossibleSignature ( key.getString (  ) , value, t ) ;^240^241^242^243^^209^247^[ADD] if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; addPossibleSignature ( key.getString (  ) , value, t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = key.getParent (  ) ;^241^^^^^209^247^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^239^240^241^^^209^247^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node key = n.getFirstChild (  )  ;^213^^^^^209^247^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^for  ( Node key = parent.getFirstChild (  ) ;^238^^^^^209^247^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node key = n.getFirstChild (  )  ;^241^^^^^209^247^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getType (  )  == Token.ASSIGN )  {^271^272^^^^254^279^[REPLACE] if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node assignee = n.getFirstChild (  ) .getNext (  ) ;^273^^^^^271^276^[REPLACE] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^268^^^^^254^279^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node parent = parent.getParent (  ) .getParent (  ) ;^269^^^^^254^279^[REPLACE] Node parent = n.getParent (  ) .getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node assignee = n.getFirstChild (  ) .getNext (  ) ;^273^^^^^254^279^[REPLACE] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^if  ( dest.getType (  )   ==  Token.STRING )  {^158^^^^^152^201^[REPLACE] if  ( dest.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^return;  ;^159^^^^^152^201^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n || n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^170^171^172^^^152^201^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n && n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  ;^175^^^^^170^177^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^175^^^^^170^177^[ADD] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^n.getNext (  )  ;^175^^^^^170^177^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  ;^176^^^^^170^177^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( parentame, n.getNext (  ) , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( parentame, n .getType (  )  , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^getSignatureStore (  )  ;^173^^^^^170^177^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if   (  dest.getType  (    )   != Token.STRING  )   {  ;^187^^^^^152^201^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  ;^193^^^^^190^195^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^n.getNext (  )  ;^193^^^^^190^195^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^n.getNext (  )  ;^193^^^^^190^195^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  ;^194^^^^^190^195^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, n.getNext (  ) , t.getSourceName (  )  )  ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^getSignatureStore (  )  ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^String name = key.getString (  ) ;^188^189^^^^152^201^[ADD] Node value = key.getNext (  ) ; String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^189^^^^^152^201^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, parent, t.getSourceName (  )  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^key !=  null; parent^186^^^^^152^201^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node key = n.getFirstChild (  )  ;^156^^^^^152^201^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getType (  ) ;^162^^^^^152^201^[REPLACE] String name = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^185^186^187^188^189^152^201^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getType (  ) ;^188^^^^^152^201^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( dest.getType (  )   &&  Token.STRING )  {^215^^^^^209^247^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if   (  dest.getType  (    )   == Token.STRING && parent.getType  (    )   == Token.ASSIGN  )   {  ;^216^^^^^209^247^[REPLACE] if  ( dest.getString (  ) .equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^processPrototypeParent ( t, parent ) ;^216^217^218^^^209^247^[ADD] if  ( dest.getString (  ) .equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == parent )  {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^processPrototypeParent ( t, value ) ;^217^^^^^209^247^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  {^227^228^^^^209^247^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^227^228^229^230^^209^247^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  { addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^key.getNext (  )  ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN ) {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^227^228^229^230^^216^231^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  { addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^n.getNext (  )  ;^217^^^^^209^247^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getParent (  ) , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if   (  dest.getType  (    )   == Token.STRING  )   {  ;^240^^^^^209^247^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^240^241^242^243^^209^247^[ADD] if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; addPossibleSignature ( key.getString (  ) , value, t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node key = n.getFirstChild (  )  ;^241^^^^^209^247^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^239^240^241^^^209^247^[ADD] key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^213^^^^^209^247^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^238^239^240^241^242^209^247^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; addPossibleSignature ( key.getString (  ) , value, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = parent.getParent (  ) ;^241^^^^^209^247^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING || parent.getType (  )  == Token.ASSIGN )  {^271^272^^^^254^279^[REPLACE] if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[ADD]^^273^^^^^271^276^[ADD] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^268^^^^^254^279^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[ADD]^^269^^^^^254^279^[ADD] Node parent = n.getParent (  ) .getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[ADD]^^273^^^^^254^279^[ADD] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
