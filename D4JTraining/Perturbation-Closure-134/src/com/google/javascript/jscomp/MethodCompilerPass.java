[REPLACE]^final Set<String> externMethods  = null ;^40^^^^^^^[REPLACE] final Set<String> externMethods = Sets.newHashSet (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^final Set<String> externMethodsWithoutSignatures ;^43^^^^^^^[REPLACE] final Set<String> externMethodsWithoutSignatures = Sets.newHashSet (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^final Set<String> nonMethodProperties ;^46^^^^^^^[REPLACE] final Set<String> nonMethodProperties = Sets.newHashSet (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^final Multimap<String, Node> methodDefinitions ;^48^49^^^^48^49^[REPLACE] final Multimap<String, Node> methodDefinitions = HashMultimap.create (  ) ;^ [CLASS] MethodCompilerPass GetExternMethods GatherSignatures  
[REPLACE]^this.compiler =  null;^64^^^^^63^65^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true 
[REPLACE]^String name = dest.getString (  ) ;^68^^^^^67^83^[REPLACE] externMethods.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^externMethodsWithoutSignatures .contains ( this )  ;^69^^^^^67^83^[REPLACE] externMethodsWithoutSignatures.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^getSignatureStore (  ) .removeSignature (  ) ;^70^^^^^67^83^[REPLACE] getSignatureStore (  ) .reset (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^70^^^^^67^83^[REPLACE] getSignatureStore (  ) .reset (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^methodDefinitions .contains ( this )  ;^71^^^^^67^83^[REPLACE] methodDefinitions.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^if  ( externs == null )  {^73^^^^^67^83^[REPLACE] if  ( externs != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverseRoots ( compiler, externs, new GetExternMethods (  )  ) ;^74^^^^^67^83^[REPLACE] NodeTraversal.traverse ( compiler, externs, new GetExternMethods (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^Node parent = n.getParent (  ) .getParent (  ) ;^78^^^^^67^83^[REPLACE] List<Node> externsAndJs = Lists.newArrayList ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal .traverseRoots ( compiler , null , 0 )   ) ;^79^80^^^^67^83^[REPLACE] NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , new GatherSignatures (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^getSignatureStore (  ) .removeSignature ( name ) ;^80^^^^^67^83^[REPLACE] compiler, Lists.newArrayList ( externs, root ) , new GatherSignatures (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REMOVE]^Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^80^^^^^67^83^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverseRoots ( compiler, null, getActingCallback (  )  ) ;^81^82^^^^67^83^[REPLACE] NodeTraversal.traverseRoots ( compiler, externsAndJs, getActingCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^List<Node> externsAndJs = Lists.newArrayList ( externs, root ) ;^82^^^^^67^83^[REPLACE] compiler, externsAndJs, getActingCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  List externsAndJs  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^boolean signatureAdded = true;^102^^^^^101^134^[REPLACE] boolean signatureAdded = false;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( node.getType (  )   !=  Token.FUNCTION )  {^104^^^^^101^134^[REPLACE] if  ( node.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^}  else {^108^^^^^101^134^[REPLACE] } else if  ( node.getType (  )  == Token.NAME )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^}   String functionName = node.getString (  ) ;Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^108^109^^111^112^101^134^[ADD] else if  ( node.getType (  )  == Token.NAME )  {  String functionName = node.getString (  ) ; Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( v != this )  {^114^^^^^101^134^[REPLACE] if  ( v == null )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^115^^^^^101^134^[REPLACE] if  ( compiler.isIdeMode (  )  )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^return ;^118^119^^^^115^120^[REPLACE] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^return ;^118^119^^^^101^134^[REPLACE] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^return;"VarCheck should have caught this undefined function" ) ;^115^116^117^118^119^101^134^[ADD] if  ( compiler.isIdeMode (  )  )  { return; } else { throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( node != null ) {^124^125^^^^101^134^[REPLACE] if  ( function != null && function.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^124^125^126^127^128^101^134^[ADD] if  ( function != null && function.getType (  )  == Token.FUNCTION )  { addSignature ( name, function, v.getInputName (  )  ) ; signatureAdded = true; }^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^signatureAdded = false;^127^^^^^124^128^[REPLACE] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^127^^^^^124^128^[ADD] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^signatureAdded = false;^127^^^^^101^134^[REPLACE] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^String functionName = function.getString (  ) ;^111^^^^^101^134^[REPLACE] String functionName = node.getString (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Scope.Var v = t .getSourceName (  )  .getVar ( functionName ) ;^112^^^^^101^134^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node function = null.getInputName (  ) ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^118^119^^^^101^134^[ADD] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( v != null )  {^114^^^^^101^134^[REPLACE] if  ( v == null )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( function != false ) {^124^125^^^^101^134^[REPLACE] if  ( function != null && function.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^String functionName = function.getParent (  ) ;^111^^^^^101^134^[REPLACE] String functionName = node.getString (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Scope.Var v = t.getScope (  ) .getVar ( name ) ;^112^^^^^101^134^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node function = this.getInitialValue (  ) ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^signatureAdded = false;^107^^^^^101^134^[REPLACE] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^}  if  ( node.getType (  )   &&  Token.NAME )  {^108^^^^^101^134^[REPLACE] } else if  ( node.getType (  )  == Token.NAME )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( v != true )  {^114^^^^^101^134^[REPLACE] if  ( v == null )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^118^119^^^^115^120^[ADD] throw new IllegalStateException ( "VarCheck should have caught this undefined function" ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( function != null && function.getType (  )  != Token.FUNCTION )  {^124^125^^^^101^134^[REPLACE] if  ( function != null && function.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^112^^^^^101^134^[ADD] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node function = true.getInitialValue (  ) ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^123^^^^^101^134^[ADD] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^114^115^116^117^118^101^134^[ADD] if  ( v == null )  { if  ( compiler.isIdeMode (  )  )  { return; } else { throw new IllegalStateException (^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( function != null ) {^124^125^^^^101^134^[REPLACE] if  ( function != null && function.getType (  )  == Token.FUNCTION )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^127^^^^^101^134^[ADD] signatureAdded = true;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Scope.Var v = t.getSourceName (  ) .getVar ( functionName ) ;^112^^^^^101^134^[REPLACE] Scope.Var v = t.getScope (  ) .getVar ( functionName ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^Node function = false.getInitialValue (  ) ;^123^^^^^101^134^[REPLACE] Node function = v.getInitialValue (  ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( !true )  {^131^^^^^101^134^[REPLACE] if  ( !signatureAdded )  {^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^nonMethodProperties.contains ( functionName ) ;^132^^^^^101^134^[REPLACE] nonMethodProperties.add ( name ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[ADD]^^132^^^^^101^134^[ADD] nonMethodProperties.add ( name ) ;^[METHOD] addPossibleSignature [TYPE] void [PARAMETER] String name Node node NodeTraversal t [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  signatureAdded  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node function  node  [TYPE]  String functionName  name 
[REPLACE]^if  ( externMethodsWithoutSignatures.add ( fnSourceName )  )  {^137^^^^^136^143^[REPLACE] if  ( externMethodsWithoutSignatures.contains ( name )  )  {^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[ADD]^^137^138^139^^^136^143^[ADD] if  ( externMethodsWithoutSignatures.contains ( name )  )  { return; }^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[REPLACE]^getSignatureStore (  ) .removeSignature ( name, function, fnSourceName ) ;^141^^^^^136^143^[REPLACE] getSignatureStore (  ) .addSignature ( name, function, fnSourceName ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[REPLACE]^getSignatureStore (  ) .removeSignature ( name ) ;^141^^^^^136^143^[REPLACE] getSignatureStore (  ) .addSignature ( name, function, fnSourceName ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[ADD]^^141^142^^^^136^143^[ADD] getSignatureStore (  ) .addSignature ( name, function, fnSourceName ) ; methodDefinitions.put ( name, function ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[REPLACE]^nonMethodProperties.add ( name ) ;^142^^^^^136^143^[REPLACE] methodDefinitions.put ( name, function ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[ADD]^^142^^^^^136^143^[ADD] methodDefinitions.put ( name, function ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String name Node function String fnSourceName [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  String fnSourceName  name  [TYPE]  boolean false  true  [TYPE]  Node function 
[REPLACE]^if  ( dest.getType (  )   ==  Token.STRING )  {^158^^^^^152^201^[REPLACE] if  ( dest.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^return;^158^159^160^^^152^201^[ADD] if  ( dest.getType (  )  != Token.STRING )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == parent || n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^170^171^172^^^152^201^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n && n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^compiler, Lists.newArrayList ( externs, root ) , new GatherSignatures (  )  ) ;^175^^^^^170^177^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures.contains ( name ) ;^176^^^^^170^177^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, n .getParent (  )  , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( parentame, n.getParent (  ) , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^173^^^^^170^177^[ADD] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, n.getNext (  ) , t.getScope (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^187^^^^^152^201^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^187^188^189^190^191^152^201^[ADD] if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; String name = key.getString (  ) ; if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     Node value = key.getNext (  ) ;     String name = key.getString (  ) ;     if  (  ( value.getType (  )  )  ==  ( FUNCTION )  )  {         addSignature ( name, value, t.getSourceName (  )  ) ;     }else {         getSignatureStore (  ) .removeSignature ( name ) ;         externMethodsWithoutSignatures.add ( name ) ;     }     externMethods.add ( name ) ; }^190^^^^^152^201^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^compiler, Lists.newArrayList ( externs, root ) , new GatherSignatures (  )  ) ;^193^^^^^190^195^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^193^^^^^190^195^[ADD] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures .contains ( 0 )  ;^194^^^^^190^195^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, node, t.getSourceName (  )  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, value, t.getScope (  )  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getParent (  ) ;^188^^^^^152^201^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = key .getParent (  )  ;^189^^^^^152^201^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^189^^^^^152^201^[ADD] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures .contains ( this )  ;^194^^^^^190^195^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, parent, t.getSourceName (  )  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^191^^^^^152^201^[ADD] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^for  ( Node parent = parent.getFirstChild (  ) ;^185^^^^^152^201^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^187^^^^^185^198^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^Node value = key.getNext (  ) ;String name = key.getString (  ) ;addSignature ( name, value, t.getSourceName (  )  ) ;^187^188^189^190^191^185^198^[ADD] if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; String name = key.getString (  ) ; if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^190^^^^^185^198^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^190^191^192^193^194^185^198^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ; } else { getSignatureStore (  ) .removeSignature ( name ) ; externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^compiler, Lists.newArrayList ( externs, root ) , new GatherSignatures (  )  ) ;^193^^^^^185^198^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethodsWithoutSignatures .contains ( null )  ;^194^^^^^185^198^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, value, t .getScope (  )   ) ;^191^^^^^185^198^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, value, t.getScope (  )  ) ;^191^^^^^185^198^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent .getParent (  )  ;^188^^^^^185^198^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = key .getParent (  )  ;^189^^^^^185^198^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^189^^^^^185^198^[ADD] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^addSignature ( name, value, t.getSourceName (  )  ) ;getSignatureStore (  ) .removeSignature ( name ) ;externMethodsWithoutSignatures.add ( name ) ;^190^191^192^193^194^185^198^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ; } else { getSignatureStore (  ) .removeSignature ( name ) ; externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^getSignatureStore (  ) .removeSignature ( name ) ;^194^^^^^185^198^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, node, t.getSourceName (  )  ) ;^191^^^^^185^198^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getNext (  ) ;^188^^^^^185^198^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^String name = key.getString (  ) ;^188^189^^^^185^198^[ADD] Node value = key.getNext (  ) ; String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^189^^^^^185^198^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^key !=  null; parent^186^^^^^152^201^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^156^^^^^152^201^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^156^^^^^152^201^[ADD] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^162^^^^^152^201^[REPLACE] String name = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^for  ( Node key = parent.getFirstChild (  ) ;^185^^^^^152^201^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^185^186^187^188^189^152^201^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getNext (  ) ;^188^^^^^152^201^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( dest.getType (  )   !=  Token.STRING )  {^215^^^^^209^247^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^216^^^^^209^247^[REPLACE] if  ( dest.getString (  ) .equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^216^217^218^^^209^247^[ADD] if  ( dest.getString (  ) .equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getNext (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent.getParent (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( dest.getString (  ) .equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ;^217^^^^^209^247^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^227^228^^^^209^247^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^227^228^229^230^^209^247^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  { addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^229^^^^^227^230^[ADD] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent .getParent (  )  , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent.getParent (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getParent (  ) , n.getNext (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent .getParent (  )  , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^processPrototypeParent ( t, value ) ;^217^^^^^209^247^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^217^^^^^209^247^[ADD] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^240^^^^^209^247^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = parent.getParent (  ) ;^241^^^^^209^247^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^241^242^^^^209^247^[ADD] Node value = key.getNext (  ) ; addPossibleSignature ( key.getString (  ) , value, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^for  ( Node parent = n.getFirstChild (  ) ;^238^^^^^209^247^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^238^239^240^241^242^209^247^[ADD] for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  { if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; addPossibleSignature ( key.getString (  ) , value, t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^240^^^^^238^244^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = parent.getNext (  ) ;^241^^^^^238^244^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^key !=  null; parent^239^^^^^209^247^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node dest = parent.getString (  ) .getNext (  ) ;^213^^^^^209^247^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^for  ( Node key = n.getString (  ) ;^238^^^^^209^247^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING ) {^271^272^^^^254^279^[REPLACE] if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node assignee = parent.getString (  ) .getNext (  ) ;^273^^^^^254^279^[REPLACE] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[ADD]^^273^^^^^254^279^[ADD] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node dest = n .getString (  )  .getNext (  ) ;^268^^^^^254^279^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node parent = parent.getParent (  ) .getParent (  ) ;^269^^^^^254^279^[REPLACE] Node parent = n.getParent (  ) .getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node assignee = n.getFirstChild (  ) .getVar (  ) ;^273^^^^^254^279^[REPLACE] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] MethodCompilerPass GetExternMethods GatherSignatures   [TYPE]  Multimap methodDefinitions  [TYPE]  AbstractCompiler compiler  [TYPE]  Set externMethods  externMethodsWithoutSignatures  nonMethodProperties  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^if  ( dest.getType (  )   ==  Token.STRING )  {^158^^^^^152^201^[REPLACE] if  ( dest.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n || n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^170^171^172^^^152^201^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n && n.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^170^171^172^173^^152^201^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n && n.getNext (  ) .getType (  )  == Token.FUNCTION )  { addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethods.add ( name ) ;^175^^^^^170^177^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^externMethods.add ( name ) ;^175^^^^^170^177^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethods.add ( name ) ;^176^^^^^170^177^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, n.getType (  ) , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( parentame, n.getNext (  ) , t.getSourceName (  )  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^switch  ( n.getType (  )  )  { case Token.GETPROP:^173^^^^^170^177^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node dest = n.getFirstChild (  ) .getNext (  ) ;^173^^^^^170^177^[REPLACE] addSignature ( name, n.getNext (  ) , t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^187^^^^^152^201^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^190^^^^^152^201^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethods.add ( name ) ;^193^^^^^190^195^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^externMethods.add ( name ) ;^193^^^^^190^195^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethods.add ( name ) ;^194^^^^^190^195^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^194^^^^^190^195^[ADD] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = key.getString (  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^191^^^^^152^201^[ADD] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getNext (  ) ;^188^^^^^152^201^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getType (  ) ;^189^^^^^152^201^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^189^^^^^152^201^[ADD] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^^190^191^192^193^194^152^201^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ; } else { getSignatureStore (  ) .removeSignature ( name ) ; externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, parent, t.getSourceName (  )  ) ;^191^^^^^152^201^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^for  ( Nodeparent = n.getFirstChild (  ) ;^185^^^^^152^201^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^187^^^^^185^198^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   &&  Token.FUNCTION )  {^190^^^^^185^198^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^addSignature ( name, value, t.getSourceName (  )  ) ;getSignatureStore (  ) .removeSignature ( name ) ;externMethodsWithoutSignatures.add ( name ) ;^190^191^192^193^194^185^198^[ADD] if  ( value.getType (  )  == Token.FUNCTION )  { addSignature ( name, value, t.getSourceName (  )  ) ; } else { getSignatureStore (  ) .removeSignature ( name ) ; externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethods.add ( name ) ;^193^^^^^185^198^[REPLACE] getSignatureStore (  ) .removeSignature ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^externMethods.add ( name ) ;^194^^^^^185^198^[REPLACE] externMethodsWithoutSignatures.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^addSignature ( name, parent, t.getSourceName (  )  ) ;^191^^^^^185^198^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = key.getString (  ) ;^191^^^^^185^198^[REPLACE] addSignature ( name, value, t.getSourceName (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REMOVE]^String name = key.getString (  ) ;^191^^^^^185^198^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getNext (  ) ;^188^^^^^185^198^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[ADD]^String name = key.getString (  ) ;^188^189^^^^185^198^[ADD] Node value = key.getNext (  ) ; String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = key .getFirstChild (  )  ;^189^^^^^185^198^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( value.getType (  )   ||  Token.FUNCTION )  {^190^^^^^185^198^[REPLACE] if  ( value.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent.getType (  ) ;^188^^^^^185^198^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^189^^^^^185^198^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^key !=  null; null^186^^^^^152^201^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^156^^^^^152^201^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^162^^^^^152^201^[REPLACE] String name = dest.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^for  ( Node key = parent.getFirstChild (  ) ;^185^^^^^152^201^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^Node value = parent .getType (  )  ;^188^^^^^152^201^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^189^^^^^152^201^[REPLACE] String name = key.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GetExternMethods   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value  [TYPE]  String name 
[REPLACE]^if  ( dest .getString (  )    !=  Token.STRING )  {^215^^^^^209^247^[REPLACE] if  ( dest.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getString (  ) .equals ( "prototype" )  )  {^216^^^^^209^247^[REPLACE] if  ( dest.getString (  ) .equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^processPrototypeParent ( t, parent ) ;^216^217^218^^^209^247^[ADD] if  ( dest.getString (  ) .equals ( "prototype" )  )  { processPrototypeParent ( t, parent ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getFirstChild (  )  == n )  {^227^228^^^^216^231^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^227^228^229^230^^216^231^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  { addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getNext (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent.getNext (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^processPrototypeParent ( t, value ) ;^217^^^^^209^247^[REPLACE] processPrototypeParent ( t, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == n )  {^227^228^^^^209^247^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REMOVE]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     if  ( dest.getString (  ) .equals ( "prototype" )  )  {         processPrototypeParent ( t, parent ) ;     }else {         if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {             addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;         }     } }^227^^^^^209^247^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getString (  ) , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( parent.getParent (  ) , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , parent.getParent (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^216^^^^^209^247^[REPLACE] if  ( dest.getString (  ) .equals ( "prototype" )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REMOVE]^if  (  ( dest.getType (  )  )  ==  ( STRING )  )  {     if  ( dest.getString (  ) .equals ( "prototype" )  )  {         processPrototypeParent ( t, parent ) ;     }else {         if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == n )  )  {             addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;         }     } }^227^^^^^216^231^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n .getParent (  )  , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^^229^^^^^216^231^[ADD] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getParent (  ) , n.getNext (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n.getParent (  ) , t ) ;^229^^^^^216^231^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getParent (  ) , n.getNext (  ) , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^addPossibleSignature ( dest.getString (  ) , n .getParent (  )  , t ) ;^229^^^^^227^230^[REPLACE] addPossibleSignature ( dest.getString (  ) , n.getNext (  ) , t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( key.getType (  )   &&  Token.STRING )  {^240^^^^^209^247^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = parent.getNext (  ) ;^241^^^^^209^247^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^for  ( Nodeparent = n.getFirstChild (  ) ;^238^^^^^209^247^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  ( key.getType (  )   ||  Token.STRING )  {^240^^^^^238^244^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[ADD]^Node value = key.getNext (  ) ;addPossibleSignature ( key.getString (  ) , value, t ) ;^240^241^242^243^^238^244^[ADD] if  ( key.getType (  )  == Token.STRING )  { Node value = key.getNext (  ) ; addPossibleSignature ( key.getString (  ) , value, t ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = key .getParent (  )  ;^241^^^^^238^244^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node value = parent.getNext (  ) ;^241^^^^^238^244^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^key !=  null; parent^239^^^^^209^247^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^Node dest = parent.getFirstChild (  ) .getNext (  ) ;^213^^^^^209^247^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^for  ( Node key = parent.getFirstChild (  ) ;^238^^^^^209^247^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node dest  key  n  parent  value 
[REPLACE]^if  (  parent.getType (  )  == Token.ASSIGN )  {^271^272^^^^254^279^[REPLACE] if  ( dest.getType (  )  == Token.STRING && parent.getType (  )  == Token.ASSIGN )  {^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node assignee = n.getFirstChild (  ) .getNext (  ) ;^273^^^^^254^279^[REPLACE] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[ADD]^^273^^^^^254^279^[ADD] Node assignee = parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node dest = parent.getString (  ) .getNext (  ) ;^268^^^^^254^279^[REPLACE] Node dest = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
[REPLACE]^Node parent = parent.getParent (  ) .getParent (  ) ;^269^^^^^254^279^[REPLACE] Node parent = n.getParent (  ) .getParent (  ) ;^[METHOD] processPrototypeParent [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] GatherSignatures   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignee  dest  n  parent 
