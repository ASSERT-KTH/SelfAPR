[REPLACE]^final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^33^34^^^^33^34^[REPLACE] static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^static  DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "Unmatched {1} - {0} not in the same block" ) ;^36^37^^^^36^37^[REPLACE] static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "Unmatched {1} - {0} not in the same block" ) ;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^final  double  sourceName;^41^^^^^^^[REPLACE] final String sourceName;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^Node ancestorBlock;^52^^^^^^^[REPLACE] final Node ancestorBlock;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^private  String endMarkerName;^69^^^^^^^[REPLACE] private final String endMarkerName;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^if  (  parent.getType (  )  != Token.CALL )  {^97^^^^^96^158^[REPLACE] if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REMOVE]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     ancestorBlock = ancestor;     break; }^97^^^^^96^158^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^return;  ;^98^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if   (  !endMarkerName.equals  (  n.getString  (    )    )    )   {  ;^101^^^^^96^158^[REPLACE] if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor  ;^109^^^^^96^158^[REPLACE] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^106^107^108^109^110^101^117^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^101^117^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor  ;^109^^^^^101^117^[REPLACE] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^endMarkerAncestorBlockChild = ancestor  ;^112^^^^^101^117^[REPLACE] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = root.getString (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^112^^^^^101^117^[ADD] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^104^^^^^101^117^[REPLACE] Node ancestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlock = this;^105^^^^^101^117^[REPLACE] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = root.getType (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^break;^109^110^^^^101^117^[ADD] ancestorBlock = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = parent.getType (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^106^^^^^101^117^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = ancestor.getString (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( !endMarkerName.equals ( removedNode.getString (  )  )  )  {^119^^^^^96^158^[REPLACE] if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^return;^119^120^121^^^96^158^[ADD] if  ( !endMarkerName.equals ( n.getString (  )  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^return;  ;^120^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if   (  n.getType  (    )   != Token.NAME || parent.getType  (    )   != Token.CALL  )   {  ;^123^^^^^96^158^[REPLACE] if  ( startMarkerStack.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^return;  ;^126^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^StartMarker startMarker  ;^129^^^^^96^158^[REPLACE] StartMarker startMarker = startMarkerStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlockChild = n  ;^131^^^^^96^158^[REPLACE] Node endMarkerAncestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT ) {^134^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REMOVE]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     ancestorBlock = ancestor;     break; }^134^^^^^96^158^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( ancestor  == node )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^135^136^137^138^139^96^158^[ADD] if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^return;  ;^139^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  (root  ==  startMarker.ancestorBlock )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^for  ( Node ancestor : n.getType (  )  )  {^132^^^^^96^158^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( ancestor  ==  startMarker.ancestorBlock )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor  ;^143^^^^^96^158^[REPLACE] endMarkerAncestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = root.getType (  ) ;^133^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^132^133^134^135^^96^158^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.SCRIPT || type == Token.BLOCK )  { if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = removedNode.getString (  ) ;^133^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^146^147^^^^96^158^[ADD] Node block = new Node ( Token.BLOCK ) ; block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^block.setIsSyntheticBlock ( false ) ;^147^^^^^96^158^[REPLACE] block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^147^^^^^96^158^[ADD] block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^startMarker.ancestorBlock .removeChildAfter ( ancestorBlock )  ;^148^149^^^^96^158^[REPLACE] startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^148^149^^^^96^158^[ADD] startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node removedNode = this;^150^^^^^96^158^[REPLACE] Node removedNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^removedNode =  null.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^96^158^[REPLACE] removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^compiler.report (  ) ;^157^^^^^96^158^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^157^^^^^96^158^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^String sourceName;^41^^^^^^^[REPLACE] final String sourceName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StartMarker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node node;^44^^^^^^^[REPLACE] final Node node;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StartMarker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlockChild;^49^^^^^^^[REPLACE] final Node ancestorBlockChild;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StartMarker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlock;^52^^^^^^^[REPLACE] final Node ancestorBlock;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StartMarker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  (  parent.getType (  )  != Token.CALL )  {^97^^^^^96^158^[REPLACE] if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^return;  ;^98^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if   (  !endMarkerName.equals  (  n.getString  (    )    )    )   {  ;^101^^^^^96^158^[REPLACE] if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^break;^109^110^^^^96^158^[ADD] ancestorBlock = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^for  ( Node parent : n.getType (  )  )  {^106^^^^^101^117^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^108^^^^^101^117^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^ancestorBlock = ancestor;break;^108^109^110^111^^101^117^[ADD] if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor  ;^109^^^^^101^117^[REPLACE] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^112^^^^^101^117^[ADD] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = removedNode .getString (  )  ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^endMarkerAncestorBlockChild = ancestor  ;^112^^^^^101^117^[REPLACE] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^104^^^^^101^117^[REPLACE] Node ancestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^105^^^^^101^117^[ADD] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^106^^^^^101^117^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = removedNode.getType (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^ancestorBlock = ancestor;break;^108^109^110^111^^96^158^[ADD] if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor  ;^109^^^^^96^158^[REPLACE] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = parent.getType (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node ancestorBlockChild = removedNode;^104^^^^^101^117^[REPLACE] Node ancestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node ancestorBlock = this;^105^^^^^101^117^[REPLACE] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = ancestor.getString (  ) ;^107^^^^^101^117^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( !endMarkerName.equals ( parent.getString (  )  )  )  {^119^^^^^96^158^[REPLACE] if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^return;  ;^120^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if   (  n.getType  (    )   != Token.NAME || parent.getType  (    )   != Token.CALL  )   {  ;^123^^^^^96^158^[REPLACE] if  ( startMarkerStack.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^123^124^125^126^127^96^158^[ADD] if  ( startMarkerStack.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^return;  ;^126^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^129^^^^^96^158^[REPLACE] StartMarker startMarker = startMarkerStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^131^^^^^96^158^[ADD] Node endMarkerAncestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( ancestor  ==  startMarker.ancestorBlock )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^135^136^137^138^139^96^158^[ADD] if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^return;  ;^139^^^^^96^158^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT ) {^134^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REMOVE]^if  (  ( type ==  ( SCRIPT )  )  ||  ( type ==  ( BLOCK )  )  )  {     ancestorBlock = ancestor;     break; }^134^^^^^96^158^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( removedNode  ==  removedNode )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^143^^^^^96^158^[ADD] endMarkerAncestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = ancestor.getString (  ) ;^133^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor  ;^143^^^^^96^158^[REPLACE] endMarkerAncestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^132^^^^^96^158^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = removedNode.getType (  ) ;^133^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = null  ;^146^^^^^96^158^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^block.setIsSyntheticBlock ( false ) ;^147^^^^^96^158^[REPLACE] block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^startMarker.ancestorBlock .removeChildAfter ( ancestorBlockChild )  ;^148^149^^^^96^158^[REPLACE] startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = this;^150^^^^^96^158^[REPLACE] Node removedNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^153^154^^^^96^158^[ADD] removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ; block.addChildToBack ( removedNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^compiler.report (  ) ;^157^^^^^96^158^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^157^^^^^96^158^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
