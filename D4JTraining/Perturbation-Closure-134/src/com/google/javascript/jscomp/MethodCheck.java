[REPLACE]^private  CheckLevel level;^45^^^^^^^[REPLACE] private final CheckLevel level;^ [CLASS] MethodCheck CheckUsage Store  
[REPLACE]^final Multimap<String,FunctionInfo> methodSignatures ;^48^49^^^^48^49^[REPLACE] final Multimap<String,FunctionInfo> methodSignatures = HashMultimap.create (  ) ;^ [CLASS] MethodCheck CheckUsage Store  
[REPLACE]^final MethodCompilerPass.SignatureStore signatureCallback ;^51^^^^^^^[REPLACE] final MethodCompilerPass.SignatureStore signatureCallback = new Store (  ) ;^ [CLASS] MethodCheck CheckUsage Store  
[REPLACE]^if  ( signatures.isEmpty (  )  )  {^54^^^^^53^56^[REPLACE] super ( compiler ) ;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level 
[REPLACE]^this.level =  null;^55^^^^^53^56^[REPLACE] this.level = level;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel level [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  CheckLevel level 
[REPLACE]^if  (   callName    )  {^66^^^^^65^80^[REPLACE] if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^Collection<FunctionInfo> signatures = methodSignatures .put ( callName )  ;^70^^^^^65^80^[REPLACE] Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^if  ( null.isEmpty (  )  )  {^72^^^^^65^80^[REPLACE] if  ( signatures.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^79^^^^^65^80^[REPLACE] FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  CheckLevel level  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^return;^85^^^^^84^86^[REPLACE] return new CheckUsage (  ) ;^[METHOD] getActingCallback [TYPE] Callback [PARAMETER] [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  boolean false  true  [TYPE]  CheckLevel level 
[REPLACE]^methodSignatures.put ( functionName, FunctionCheck .checkCall ( functionNode , functionName , null , true , level )   ) ;^100^101^^^^98^102^[REPLACE] methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String functionName Node functionNode String sourceFile [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  String functionName  sourceFile  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  Node functionNode 
[REPLACE]^FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^101^^^^^98^102^[REPLACE] FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String functionName Node functionNode String sourceFile [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  String functionName  sourceFile  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  Node functionNode 
[ADD]^^101^^^^^98^102^[ADD] FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String functionName Node functionNode String sourceFile [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  String functionName  sourceFile  [TYPE]  boolean false  true  [TYPE]  CheckLevel level  [TYPE]  Node functionNode 
[REPLACE]^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^108^^^^^105^111^[REPLACE] if  ( methodSignatures.containsKey ( functionName )  )  {^[METHOD] removeSignature [TYPE] void [PARAMETER] String functionName [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  CheckLevel level 
[REPLACE]^methodSignatures .clear (  )  ;^109^^^^^105^111^[REPLACE] methodSignatures.removeAll ( functionName ) ;^[METHOD] removeSignature [TYPE] void [PARAMETER] String functionName [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  CheckLevel level 
[REPLACE]^if  ( signatures.isEmpty (  )  )  {^114^^^^^113^115^[REPLACE] methodSignatures.clear (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] MethodCheck CheckUsage Store   [TYPE]  Multimap methodSignatures  [TYPE]  SignatureStore signatureCallback  [TYPE]  boolean false  true  [TYPE]  CheckLevel level 
[REPLACE]^if  (   callName    )  {^66^^^^^65^80^[REPLACE] if  ( externMethodsWithoutSignatures.contains ( callName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] CheckUsage   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[ADD]^return;^66^67^68^^^65^80^[ADD] if  ( externMethodsWithoutSignatures.contains ( callName )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] CheckUsage   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[ADD]^^70^^^^^65^80^[ADD] Collection<FunctionInfo> signatures = methodSignatures.get ( callName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] CheckUsage   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^if  ( null.isEmpty (  )  )  {^72^^^^^65^80^[REPLACE] if  ( signatures.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] CheckUsage   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REMOVE]^if  ( externMethodsWithoutSignatures.contains ( callName )  )  {     return ; }^72^^^^^65^80^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] CheckUsage   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^FunctionCheck.checkCall ( callNode, callName, null, t, level ) ;^79^^^^^65^80^[REPLACE] FunctionCheck.checkCall ( callNode, callName, signatures, t, level ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node callNode Node parent String callName [CLASS] CheckUsage   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  parent  [TYPE]  Collection signatures  [TYPE]  String callName 
[REPLACE]^methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^100^101^^^^98^102^[REPLACE] methodSignatures.put ( functionName, FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String functionName Node functionNode String sourceFile [CLASS] Store   [TYPE]  boolean false  true  [TYPE]  Node functionNode  [TYPE]  String functionName  sourceFile 
[REPLACE]^FunctionCheck.createFunctionInfo ( compiler, functionNode, functionName )  ) ;^101^^^^^98^102^[REPLACE] FunctionCheck.createFunctionInfo ( compiler, functionNode, sourceFile )  ) ;^[METHOD] addSignature [TYPE] void [PARAMETER] String functionName Node functionNode String sourceFile [CLASS] Store   [TYPE]  boolean false  true  [TYPE]  Node functionNode  [TYPE]  String functionName  sourceFile 
[REPLACE]^if  ( methodSignatures.removeAll ( functionName )  )  {^108^^^^^105^111^[REPLACE] if  ( methodSignatures.containsKey ( functionName )  )  {^[METHOD] removeSignature [TYPE] void [PARAMETER] String functionName [CLASS] Store   [TYPE]  boolean false  true  [TYPE]  String functionName 
[REPLACE]^methodSignatures.containsKey ( functionName ) ;^109^^^^^105^111^[REPLACE] methodSignatures.removeAll ( functionName ) ;^[METHOD] removeSignature [TYPE] void [PARAMETER] String functionName [CLASS] Store   [TYPE]  boolean false  true  [TYPE]  String functionName 
[REPLACE]^methodSignatures .removeAll ( null )  ;^114^^^^^113^115^[REPLACE] methodSignatures.clear (  ) ;^[METHOD] reset [TYPE] void [PARAMETER] [CLASS] Store   [TYPE]  boolean false  true 
