[REPLACE]^private static final String PROTOTYPE_PROPERTY ;^33^^^^^^^[REPLACE] private static final String PROTOTYPE_PROPERTY = "prototype";^ [CLASS] GenerateExports  
[REPLACE]^private  AbstractCompiler compiler;^35^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] GenerateExports  
[REPLACE]^private  String exportSymbolFunction;^37^^^^^^^[REPLACE] private final String exportSymbolFunction;^ [CLASS] GenerateExports  
[REPLACE]^private  String exportPropertyFunction;^39^^^^^^^[REPLACE] private final String exportPropertyFunction;^ [CLASS] GenerateExports  
[REPLACE]^Preconditions .checkArgument (  )  ;^49^^^^^47^56^[REPLACE] Preconditions.checkNotNull ( compiler ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^Preconditions .checkArgument (  )  ;^50^^^^^47^56^[REPLACE] Preconditions.checkNotNull ( exportSymbolFunction ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^exportSymbolFunction   ;^51^^^^^47^56^[REPLACE] Preconditions.checkNotNull ( exportPropertyFunction ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[ADD]^^51^^^^^47^56^[ADD] Preconditions.checkNotNull ( exportPropertyFunction ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^this.compiler =  null;^53^^^^^47^56^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[ADD]^^53^54^^^^47^56^[ADD] this.compiler = compiler; this.exportSymbolFunction = exportSymbolFunction;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^this.exportSymbolFunction =  exportPropertyFunction;^54^^^^^47^56^[REPLACE] this.exportSymbolFunction = exportSymbolFunction;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[ADD]^^54^55^^^^47^56^[ADD] this.exportSymbolFunction = exportSymbolFunction; this.exportPropertyFunction = exportPropertyFunction;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^this.exportPropertyFunction =  exportSymbolFunction;^55^^^^^47^56^[REPLACE] this.exportPropertyFunction = exportPropertyFunction;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[ADD]^^55^^^^^47^56^[ADD] this.exportPropertyFunction = exportPropertyFunction;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction String exportPropertyFunction [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  exportPropertyFunction  exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^GenerateNodeContext context = entry.getValue (  ) ;^60^^^^^59^123^[REPLACE] FindExportableNodes findExportableNodes = new FindExportableNodes ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^Map<String, GenerateNodeContext> exports = findExportableNodes .getExports (  ) ;^61^^^^^59^123^[REPLACE] NodeTraversal.traverse ( compiler, root, findExportableNodes ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^if  ( node.getType (  )   &&  Token.GETPROP )  {^78^^^^^59^123^[REPLACE] if  ( node.getType (  )  == Token.GETPROP )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP || getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^80^81^^^^59^123^[REPLACE] if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^80^81^82^83^^59^123^[ADD] if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^grandparent =  root.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^80^83^[REPLACE] grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^82^83^^^^80^83^[ADD] grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^parent =  null.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^59^123^[REPLACE] parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^79^80^81^82^83^59^123^[ADD] parent = node.getFirstChild (  ) .getQualifiedName (  ) ; if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  { grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^grandparent =  null.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^59^123^[REPLACE] grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP ) {^80^81^^^^59^123^[REPLACE] if  ( node.getFirstChild (  ) .getType (  )  == Token.GETPROP && getPropertyName ( node.getFirstChild (  )  ) .equals ( PROTOTYPE_PROPERTY )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^if  (  exports .entrySet (  )   )  {^87^^^^^59^123^[REPLACE] if  ( grandparent != null && exports.containsKey ( grandparent )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^87^88^89^90^91^59^123^[ADD] if  ( grandparent != null && exports.containsKey ( grandparent )  )  { useExportSymbol = false; } else if  ( parent != null && exports.containsKey ( parent )  )  { useExportSymbol = false; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^}  if  ( parent == this ) {^89^^^^^59^123^[REPLACE] } else if  ( parent != null && exports.containsKey ( parent )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^}   useExportSymbol = false;^89^90^91^^^59^123^[ADD] else if  ( parent != null && exports.containsKey ( parent )  )  { useExportSymbol = false; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^useExportSymbol = true;^90^^^^^59^123^[REPLACE] useExportSymbol = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^useExportSymbol = true;^88^^^^^59^123^[REPLACE] useExportSymbol = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^}  else {^89^^^^^59^123^[REPLACE] } else if  ( parent != null && exports.containsKey ( parent )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^90^^^^^59^123^[ADD] useExportSymbol = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^if  ( true )  {^94^^^^^59^123^[REPLACE] if  ( useExportSymbol )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^call =  new Node ( Token.CALL, new Node[] {^105^106^^^^94^115^[REPLACE] call = new Node ( Token.CALL, new Node[] {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^String property = getPropertyName ( root ) ;^104^^^^^94^115^[REPLACE] String property = getPropertyName ( node ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^call =  new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, null.getNode (  ) , export )  ) ;^96^97^98^^^59^123^[REPLACE] call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, context.getNode (  ) , export )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^parent =  root.getFirstChild (  ) .getQualifiedName (  ) ;^79^^^^^59^123^[REPLACE] parent = node.getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^grandparent =  root.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^82^^^^^59^123^[REPLACE] grandparent = node.getFirstChild (  ) .getFirstChild (  ) .getQualifiedName (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^88^^^^^59^123^[ADD] useExportSymbol = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^call =  new Node ( Token.CALL, new Node[] {^105^106^^^^59^123^[REPLACE] call = new Node ( Token.CALL, new Node[] {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^105^106^107^^^59^123^[ADD] call = new Node ( Token.CALL, new Node[] { NodeUtil.newQualifiedNameNode ( exportPropertyFunction,^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^for  ( Map.Entry<String, GenerateNodeContext> entry : exports.entrySet (  )  )  { String export = entry.getKey (  ) ;^65^^^^^59^123^[REPLACE] for  ( Map.Entry<String, GenerateNodeContext> entry : exports.entrySet (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^65^66^67^^^59^123^[ADD] for  ( Map.Entry<String, GenerateNodeContext> entry : exports.entrySet (  )  )  { String export = entry.getKey (  ) ; GenerateNodeContext context = entry.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^String export = null.getKey (  ) ;^66^^^^^59^123^[REPLACE] String export = entry.getKey (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^GenerateNodeContext context = null .getKey (  )  ;^67^^^^^59^123^[REPLACE] GenerateNodeContext context = entry.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^String parent = this;^74^^^^^59^123^[REPLACE] String parent = null;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^String grandparent = true;^75^^^^^59^123^[REPLACE] String grandparent = null;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^Node node = context.getScriptNode (  ) .getFirstChild (  ) ;^77^^^^^59^123^[REPLACE] Node node = context.getNode (  ) .getFirstChild (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^boolean useExportSymbol = false;^86^^^^^59^123^[REPLACE] boolean useExportSymbol = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^String grandparent = null;^93^^^^^59^123^[REPLACE] Node call;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^String property = getPropertyName ( root ) ;^104^^^^^59^123^[REPLACE] String property = getPropertyName ( node ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^104^^^^^59^123^[ADD] String property = getPropertyName ( node ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[REPLACE]^Node node = context.getNode (  ) .getFirstChild (  ) ;^117^^^^^59^123^[REPLACE] Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^117^^^^^59^123^[ADD] Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  true  useExportSymbol  [TYPE]  Node call  expression  externs  node  root  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  FindExportableNodes findExportableNodes  [TYPE]  Map exports  [TYPE]  GenerateNodeContext context 
[ADD]^^126^127^^^^125^128^[ADD] NodeTraversal.traverse ( compiler, node, new CodingConventionAnnotator ( compiler )  ) ;^[METHOD] annotate [TYPE] void [PARAMETER] Node node [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   !=  Token.GETPROP ) ;^137^^^^^136^139^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[METHOD] getPropertyName [TYPE] String [PARAMETER] Node node [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^Preconditions.checkArgument ( node.newString (  )  == Token.GETPROP ) ;^137^^^^^136^139^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[METHOD] getPropertyName [TYPE] String [PARAMETER] Node node [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  boolean false  true  [TYPE]  Node node 
[REMOVE]^Preconditions.checkNotNull ( exportSymbolFunction ) ;^137^^^^^136^139^[REMOVE] ^[METHOD] getPropertyName [TYPE] String [PARAMETER] Node node [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return node.getFirstChild (  ) .getString (  ) ;^138^^^^^136^139^[REPLACE] return node.getLastChild (  ) .getString (  ) ;^[METHOD] getPropertyName [TYPE] String [PARAMETER] Node node [CLASS] GenerateExports   [TYPE]  AbstractCompiler compiler  [TYPE]  String PROTOTYPE_PROPERTY  export  exportPropertyFunction  exportSymbolFunction  grandparent  parent  property  [TYPE]  boolean false  true  [TYPE]  Node node 
