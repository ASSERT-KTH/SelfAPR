[REPLACE]^private  DiGraphNode<N, ControlFlowGraph.Branch> entry;^43^^^^^^^[REPLACE] private final DiGraphNode<N, ControlFlowGraph.Branch> entry;^ [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback  
[REPLACE]^Node parent = parent.getParent (  ) ;^150^^^^^149^194^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.getConditionExpression ( parent )  )  {^181^^^^^149^194^[REPLACE] if  ( NodeUtil.isForIn ( parent )  )  {^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[ADD]^^181^182^183^184^185^149^194^[ADD] if  ( NodeUtil.isForIn ( parent )  )  { return n == parent.getLastChild (  ) ; } else { return NodeUtil.getConditionExpression ( parent )  != n; }^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return NodeUtil.getConditionExpression ( parent )   ;^184^^^^^181^185^[REPLACE] return NodeUtil.getConditionExpression ( parent )  != n;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return n == parent.getLastChild  (    )  ;  ;^182^^^^^149^194^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return false;^156^^^^^149^194^[REPLACE] return true;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^returparent n  ;^165^^^^^149^194^[REPLACE] return n != parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return false ;^171^^^^^149^194^[REPLACE] return NodeUtil.getConditionExpression ( parent )  != n;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return n  &&  parent.getLastChild (  ) ;^182^^^^^149^194^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^returparent NodeUtil.getConditionExpression ( parent )   ;^184^^^^^149^194^[REPLACE] return NodeUtil.getConditionExpression ( parent )  != n;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return false ;^190^^^^^149^194^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return true;^192^^^^^149^194^[REPLACE] return false;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
