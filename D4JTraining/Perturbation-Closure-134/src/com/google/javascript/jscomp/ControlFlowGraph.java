[REPLACE]^private  DiGraphNode<N, ControlFlowGraph.Branch> entry;^43^^^^^^^[REPLACE] private final DiGraphNode<N, ControlFlowGraph.Branch> entry;^ [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback  
[REPLACE]^implicitReturn = createDirectedGraphNode ( true ) ;^49^^^^^48^51^[REPLACE] implicitReturn = createDirectedGraphNode ( null ) ;^[METHOD] <init> [TYPE] ControlFlowGraph(N) [PARAMETER] N entry [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  [TYPE]  N entry 
[REPLACE]^implicitReturn = createDirectedGraphNode ( null ) ; ;^50^^^^^48^51^[REPLACE] this.entry = createDirectedGraphNode ( entry ) ;^[METHOD] <init> [TYPE] ControlFlowGraph(N) [PARAMETER] N entry [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  [TYPE]  N entry 
[REPLACE]^return null;^59^^^^^58^60^[REPLACE] return implicitReturn;^[METHOD] getImplicitReturn [TYPE] DiGraphNode [PARAMETER] [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  [TYPE]  boolean false  true 
[REPLACE]^return null;^69^^^^^68^70^[REPLACE] return entry;^[METHOD] getEntry [TYPE] DiGraphNode [PARAMETER] [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  [TYPE]  boolean false  true 
[REPLACE]^return null  &&  implicitReturn;^80^^^^^78^81^[REPLACE] return node == implicitReturn;^[METHOD] isImplicitReturn [TYPE] boolean [PARAMETER] Branch> node [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  [TYPE]  boolean false  true 
[REPLACE]^super.connect ( srcValue, edgeValue, false ) ;^90^^^^^89^91^[REPLACE] super.connect ( srcValue, edgeValue, null ) ;^[METHOD] connectToImplicitReturn [TYPE] void [PARAMETER] N srcValue Branch edgeValue [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  N srcValue 
[ADD]^^90^^^^^89^91^[ADD] super.connect ( srcValue, edgeValue, null ) ;^[METHOD] connectToImplicitReturn [TYPE] void [PARAMETER] N srcValue Branch edgeValue [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  N srcValue 
[REPLACE]^return true;^102^^^^^100^103^[REPLACE] return null;^[METHOD] getOptionalNodeComparator [TYPE] Comparator [PARAMETER] boolean isForward [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  boolean false  isForward  true 
[REPLACE]^return true ;^121^^^^^120^122^[REPLACE] return this == ON_TRUE || this == ON_FALSE;^[METHOD] isConditional [TYPE] boolean [PARAMETER] [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  boolean false  true 
[REPLACE]^if  ( parent != null )  {^138^^^^^136^142^[REPLACE] if  ( parent == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return false;^139^^^^^136^142^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return !isEnteringNewCfgNode ( parent ) ;^141^^^^^136^142^[REPLACE] return !isEnteringNewCfgNode ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^Node parent = parent.getParent (  ) ;^150^^^^^149^194^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^if  ( parent == null )  {^181^^^^^149^194^[REPLACE] if  ( NodeUtil.isForIn ( parent )  )  {^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return NodeUtil.isForIn ( parent )  != n;^184^^^^^181^185^[REPLACE] return NodeUtil.getConditionExpression ( parent )  != n;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^returparent n  !=  parent.getLastChild (  ) ;;^182^^^^^149^194^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return false;^156^^^^^149^194^[REPLACE] return true;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return n != parent.getLastChild (  ) .getNext (  ) ;^165^^^^^149^194^[REPLACE] return n != parent.getFirstChild (  ) .getNext (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return NodeUtil.isForIn ( parent )   ;^171^^^^^149^194^[REPLACE] return NodeUtil.getConditionExpression ( parent )  != n;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return n  || parent (  ) ;^182^^^^^149^194^[REPLACE] return n == parent.getLastChild (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return NodeUtil .isForIn ( parent )   != n;^184^^^^^149^194^[REPLACE] return NodeUtil.getConditionExpression ( parent )  != n;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return true ;^190^^^^^149^194^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return true;^192^^^^^149^194^[REPLACE] return false;^[METHOD] isEnteringNewCfgNode [TYPE] boolean [PARAMETER] Node n [CLASS] ControlFlowGraph Branch AbstractCfgNodeTraversalCallback   [TYPE]  DiGraphNode entry  implicitReturn  node  [TYPE]  boolean false  true  [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  edgeValue  [TYPE]  Node n  parent 
[REPLACE]^return true ;^121^^^^^120^122^[REPLACE] return this == ON_TRUE || this == ON_FALSE;^[METHOD] isConditional [TYPE] boolean [PARAMETER] [CLASS] Branch   [TYPE]  Branch ON_EX  ON_FALSE  ON_TRUE  SYN_BLOCK  UNCOND  [TYPE]  boolean false  true 
[REPLACE]^if  (n != null )  {^138^^^^^136^142^[REPLACE] if  ( parent == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractCfgNodeTraversalCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^return false;^139^^^^^136^142^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractCfgNodeTraversalCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^return !isEnteringNewCfgNode ( parent ) ;^141^^^^^136^142^[REPLACE] return !isEnteringNewCfgNode ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractCfgNodeTraversalCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
