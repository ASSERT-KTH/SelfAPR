[REPLACE]^static final DiagnosticType SUSPICIOUS_SEMICOLON  = null ;^36^37^38^^^36^38^[REPLACE] static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning ( "JSC_SUSPICIOUS_SEMICOLON", "If this if/for/while really shouldn't have a body, use {}" ) ;^ [CLASS] CheckAccidentalSemicolon  
[REPLACE]^private  CheckLevel level;^40^^^^^^^[REPLACE] private final CheckLevel level;^ [CLASS] CheckAccidentalSemicolon  
[REPLACE]^child =  parent.getFirstChild (  ) .getNext (  ) ;^50^^^^^46^74^[REPLACE] child = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^child =  NodeUtil.getLoopCodeBlock ( null ) ;^55^^^^^46^74^[REPLACE] child = NodeUtil.getLoopCodeBlock ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^return;  ;^59^^^^^46^74^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( child.hasChildren (  )  )  )  {^65^^^^^46^74^[REPLACE] if  (  ( child.getType (  )  == Token.BLOCK )  &&  ( !child.hasChildren (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^if   (    (  child.getType  (    )   == Token.BLOCK  )   &&   (  !child.hasChildren  (    )    )    )   {  ;^68^^^^^46^74^[REPLACE] if  ( child.wasEmptyNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^t.getCompiler (  )  .getNext (  )  ;^69^70^^^^46^74^[REPLACE] t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^JSError.make ( t, parent, level, SUSPICIOUS_SEMICOLON )  ) ;^70^^^^^46^74^[REPLACE] JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^t.getCompiler (  ) .report ( JSError.make ( t, parent, level, SUSPICIOUS_SEMICOLON )  ) ;^69^70^^^^46^74^[REPLACE] t.getCompiler (  ) .report ( JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^t.getCompiler (  ) .report ( make ( t, n, level, SUSPICIOUS_SEMICOLON )  )  ;^70^^^^^46^74^[REPLACE] JSError.make ( t, n, level, SUSPICIOUS_SEMICOLON )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
[REPLACE]^for  ( ; child !=  null; null^64^^^^^46^74^[REPLACE] for  ( ; child != null; child = child.getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckAccidentalSemicolon   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SUSPICIOUS_SEMICOLON  [TYPE]  CheckLevel level  [TYPE]  Node child  n  parent 
