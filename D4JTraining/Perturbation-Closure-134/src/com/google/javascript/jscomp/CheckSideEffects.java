[REPLACE]^final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "JSC_USELESS_CODE", "Suspicious code. {0}" ) ;^39^40^41^^^39^41^[REPLACE] static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning ( "JSC_USELESS_CODE", "Suspicious code. {0}" ) ;^ [CLASS] CheckSideEffects  
[REPLACE]^if  ( parent.getType (  )  == Token.EMPTY && n.getType (  )  == Token.COMMA )  {^54^55^^^^49^105^[REPLACE] if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^54^55^56^57^^49^105^[ADD] if  ( n.getType (  )  == Token.EMPTY || n.getType (  )  == Token.COMMA )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^56^^^^^54^57^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^56^^^^^49^105^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( n !=n ) return;^59^60^^^^49^105^[REPLACE] if  ( parent == null ) return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^59^60^^62^^49^105^[ADD] if  ( parent == null ) return; int pt = parent.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^60^^^^^49^105^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^int pt = n.getType (  ) ;^62^^^^^49^105^[REPLACE] int pt = parent.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  (   Token.COMMA )  {^63^^^^^49^105^[REPLACE] if  ( pt == Token.COMMA )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REMOVE]^if  ( n ==  ( parent.getLastChild (  )  )  )  {     for  ( Node an : parent.getAncestors (  )  )  {         int ancestorType = an.getType (  ) ;         if  ( ancestorType ==  ( COMMA )  )              continue;                  if  (  ( ancestorType !=  ( EXPR_RESULT )  )  &&  ( ancestorType !=  ( BLOCK )  )  )              return ;         else             break;              } }^63^^^^^49^105^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^}  if  ( pt != Token.EXPR_RESULT || pt != Token.BLOCK )  {^76^^^^^49^105^[REPLACE] } else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^}^76^77^78^79^^49^105^[ADD] else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  { if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( pt == Token.FOR || parent.getChildCount (  )  == 4 || ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^49^105^[REPLACE] if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^83^^^^^77^84^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^83^^^^^49^105^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( ancestorType == Token.FOR || parent.getChildCount (  )  == 0 || ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^49^105^[REPLACE] if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( n  ) {^64^^^^^49^105^[REPLACE] if  ( n == parent.getLastChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^64^65^66^67^68^49^105^[ADD] if  ( n == parent.getLastChild (  )  )  { for  ( Node an : parent.getAncestors (  )  )  { int ancestorType = an.getType (  ) ; if  ( ancestorType == Token.COMMA ) continue;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( ancestorType  ||  Token.COMMA ) continue;^67^68^^^^49^105^[REPLACE] if  ( ancestorType == Token.COMMA ) continue;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( pt != Token.EXPR_RESULT || ancestorType != Token.BLOCK ) return;^69^70^71^^^49^105^[REPLACE] if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^69^70^71^72^73^49^105^[ADD] if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return; else break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^71^^^^^49^105^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^71^^^^^64^75^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^int ancestorType = an.getType (  )  ;^65^^^^^64^75^[REPLACE] for  ( Node an : parent.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^66^^^^^64^75^[ADD] int ancestorType = an.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( ancestorType  !=  Token.COMMA ) continue;^67^68^^^^49^105^[REPLACE] if  ( ancestorType == Token.COMMA ) continue;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( ancestorType != Token.EXPR_RESULT || ancestorType != Token.BLOCK ) return;^69^70^71^^^49^105^[REPLACE] if  ( ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK ) return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^for  ( Node parent : parent.getAncestors (  )  )  {^65^^^^^64^75^[REPLACE] for  ( Node an : parent.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^int parentcestorType = an.getType (  ) ;^66^^^^^64^75^[REPLACE] int ancestorType = an.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( n  ||  n .getFirstChild (  )   )  {^64^^^^^49^105^[REPLACE] if  ( n == parent.getLastChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( pt  ||  Token.COMMA ) continue;^67^68^^^^49^105^[REPLACE] if  ( ancestorType == Token.COMMA ) continue;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^65^66^67^68^69^64^75^[ADD] for  ( Node an : parent.getAncestors (  )  )  { int ancestorType = an.getType (  ) ; if  ( ancestorType == Token.COMMA ) continue; if  ( ancestorType != Token.EXPR_RESULT &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( pt  !=  Token.COMMA ) continue;^67^68^^^^49^105^[REPLACE] if  ( ancestorType == Token.COMMA ) continue;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^}  else {^76^^^^^49^105^[REPLACE] } else if  ( pt != Token.EXPR_RESULT && pt != Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( pt == Token.FOR || parent.getChildCount (  )  == 4 || ( parent == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^77^78^79^^^49^105^[REPLACE] if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( pt == Token.FOR ) {^77^78^79^^^49^105^[REPLACE] if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^77^78^79^^^49^105^[ADD] if  ( pt == Token.FOR && parent.getChildCount (  )  == 4 && ( n == parent.getFirstChild (  )  || n == parent.getFirstChild (  ) .getNext (  ) .getNext (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^for  ( Node n : parent.getAncestors (  )  )  {^65^^^^^64^75^[REPLACE] for  ( Node an : parent.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^83^^^^^64^75^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^int parentcestorType = an.getLastChild (  ) ;^66^^^^^64^75^[REPLACE] int ancestorType = an.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  (  NodeUtil.mayHaveSideEffects ( n )  )  {^86^87^^^^49^105^[REPLACE] if  ( NodeUtil.isSimpleOperatorType ( n.getType (  )  )  || !NodeUtil.mayHaveSideEffects ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  (  n.getJSDocInfo (  )  == this )  {^88^^^^^86^104^[REPLACE] if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^}  else {^92^^^^^86^104^[REPLACE] } else if  ( NodeUtil.isExpressionNode ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^}   return;^92^93^94^95^^86^104^[ADD] else if  ( NodeUtil.isExpressionNode ( n )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^94^^^^^86^104^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^91^^^^^86^104^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^}  if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^86^104^[REPLACE] } else if  ( NodeUtil.isExpressionNode ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( parent.getType (  )   !=  Token.STRING )  {^98^^^^^86^104^[REPLACE] if  ( n.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^msg ;^99^^^^^86^104^[REPLACE] msg = "Is there a missing '+' on the previous line?";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^int ancestorType = an.getType (  )  ;^97^^^^^86^104^[REPLACE] String msg = "This code lacks side-effects. Is there a bug?";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  == true )  {^88^^^^^49^105^[REPLACE] if  ( n.isQualifiedName (  )  && n.getJSDocInfo (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^}  if  ( NodeUtil .isSimpleOperatorType (  )   )  {^92^^^^^49^105^[REPLACE] } else if  ( NodeUtil.isExpressionNode ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^94^^^^^49^105^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^return;  ;^91^^^^^49^105^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^} else if  ( NodeUtil.isExpressionNode ( parent )  )  {^92^^^^^49^105^[REPLACE] } else if  ( NodeUtil.isExpressionNode ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REMOVE]^if  (  (  ( n.getType (  )  )  ==  ( EMPTY )  )  ||  (  ( n.getType (  )  )  ==  ( COMMA )  )  )  {     return ; }^92^^^^^49^105^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^if  ( parent .getLastChild (  )    ||  Token.STRING )  {^98^^^^^49^105^[REPLACE] if  ( n.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[REPLACE]^msg  =  msg ;^99^^^^^49^105^[REPLACE] msg = "Is there a missing '+' on the previous line?";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
[ADD]^^97^^^^^49^105^[ADD] String msg = "This code lacks side-effects. Is there a bug?";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CheckSideEffects   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType USELESS_CODE_ERROR  [TYPE]  CheckLevel level  [TYPE]  Node an  n  parent  [TYPE]  String msg  [TYPE]  int ancestorType  pt 
