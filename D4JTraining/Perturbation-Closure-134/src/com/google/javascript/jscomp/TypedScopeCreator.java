[REPLACE]^static final DiagnosticType MALFORMED_TYPEDEF  = null ;^84^85^86^87^^84^87^[REPLACE] static final DiagnosticType MALFORMED_TYPEDEF = DiagnosticType.warning ( "JSC_MALFORMED_TYPEDEF", "Typedef for {0} does not have any type information" ) ;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^static final DiagnosticType ENUM_INITIALIZER  = null ;^89^90^91^92^^89^92^[REPLACE] static final DiagnosticType ENUM_INITIALIZER = DiagnosticType.warning ( "JSC_ENUM_INITIALIZER_NOT_ENUM", "enum initializer must be an object literal or an enum" ) ;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^static  DiagnosticType CONSTRUCTOR_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_CONSTRUCTOR_EXPECTED", "Constructor expected as first argument" ) ;^94^95^96^97^^94^97^[REPLACE] static final DiagnosticType CONSTRUCTOR_EXPECTED = DiagnosticType.warning ( "JSC_REFLECT_CONSTRUCTOR_EXPECTED", "Constructor expected as first argument" ) ;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private  AbstractCompiler compiler;^99^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private  TypeValidator validator;^100^^^^^^^[REPLACE] private final TypeValidator validator;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private  JSTypeRegistry typeRegistry;^102^^^^^^^[REPLACE] private final JSTypeRegistry typeRegistry;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private Map<ObjectType, ObjectType> delegateProxyMap  = null ;^103^^^^^^^[REPLACE] private Map<ObjectType, ObjectType> delegateProxyMap = Maps.newHashMap (  ) ;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^Scope scope;^237^^^^^^^[REPLACE] final Scope scope;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private String sourceName  = null ;^242^^^^^^^[REPLACE] private String sourceName = null;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private  List<Node> nonExternFunctions = Lists.newArrayList (  ) ;^734^^^^^^^[REPLACE] private final List<Node> nonExternFunctions = Lists.newArrayList (  ) ;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private final List<StubDeclaration> stubDeclarations ;^742^743^^^^742^743^[REPLACE] private final List<StubDeclaration> stubDeclarations = Lists.newArrayList (  ) ;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private  Node node;^1171^^^^^^^[REPLACE] private final Node node;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^private   char  ownerName;^1173^^^^^^^[REPLACE] private final String ownerName;^ [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder  
[REPLACE]^JSType jsType = null  ;^125^^^^^121^157^[REPLACE] Scope newScope = null;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( parent != null )  {^126^^^^^121^157^[REPLACE] if  ( parent == null )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^152^^^^^126^154^[ADD] newScope = new Scope ( parent, root ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( type == null ) {^139^^^^^121^157^[REPLACE] if  ( type != null && type instanceof FunctionType )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( !fnThisType.hasOwnProperty (  )  )  {^142^^^^^121^157^[REPLACE] if  ( !fnThisType.isUnknownType (  )  )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^142^143^144^145^^121^157^[ADD] if  ( !fnThisType.isUnknownType (  )  )  { NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ; }^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^121^157^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry )  ;^140^^^^^121^157^[REPLACE] FunctionType fnType =  ( FunctionType )  type;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getPrototype (  ) ;^141^^^^^121^157^[REPLACE] ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^142^^^^^121^157^[REPLACE] if  ( !fnThisType.isUnknownType (  )  )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, functionNode .getFirstChild (  )  , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^121^157^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^143^144^^^^121^157^[ADD] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root.getFirstChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^121^157^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( type == this && type instanceof FunctionType )  {^139^^^^^126^151^[REPLACE] if  ( type != null && type instanceof FunctionType )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( !fnThisType.hasOwnProperty (  )  )  {^142^^^^^126^151^[REPLACE] if  ( !fnThisType.isUnknownType (  )  )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^142^143^144^145^^126^151^[ADD] if  ( !fnThisType.isUnknownType (  )  )  { NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ; }^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( thisType )  ) ;^143^144^^^^126^151^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root.getFirstChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^126^151^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^143^144^^^^126^151^[ADD] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry )  ;^140^^^^^126^151^[REPLACE] FunctionType fnType =  ( FunctionType )  type;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType .getPrototype (  )  ;^141^^^^^126^151^[REPLACE] ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( fnThisType.isUnknownType (  )  )  {^142^^^^^126^151^[REPLACE] if  ( !fnThisType.isUnknownType (  )  )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^126^151^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, functionNode.getFirstChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^126^151^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^138^^^^^126^151^[ADD] JSType type = functionNode.getJSType (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^141^^^^^126^151^[ADD] ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^128^^^^^126^151^[ADD] newScope = createInitialScope ( root ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder ( scope ) ;^130^^^^^126^151^[REPLACE] GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder ( newScope ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node n = stub.node  ;^137^^^^^126^151^[REPLACE] for  ( Node functionNode : scopeBuilder.nonExternFunctions )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = root.getJSType (  ) ;^138^^^^^126^151^[REPLACE] JSType type = functionNode.getJSType (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( type == this && type instanceof FunctionType )  {^139^^^^^121^157^[REPLACE] if  ( type != null && type instanceof FunctionType )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( !fnThisType .isInstanceType (  )   )  {^142^^^^^121^157^[REPLACE] if  ( !fnThisType.isUnknownType (  )  )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( thisType )  ) ;^143^144^^^^121^157^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^140^^^^^121^157^[ADD] FunctionType fnType =  ( FunctionType )  type;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType .getPrototype (  )  ;^141^^^^^121^157^[REPLACE] ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( type == null && type instanceof FunctionType )  {^139^^^^^126^151^[REPLACE] if  ( type != null && type instanceof FunctionType )  {^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root .getFirstChild (  )  , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^143^144^^^^126^151^[REPLACE] NodeTraversal.traverse ( compiler, functionNode.getLastChild (  ) , scopeBuilder.new CollectProperties ( fnThisType )  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = getObjectSlot ( ownerName )  ;^141^^^^^126^151^[REPLACE] ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = root.setJSType (  ) ;^138^^^^^126^151^[REPLACE] JSType type = functionNode.getJSType (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getPrototype (  ) ;^141^^^^^126^151^[REPLACE] ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^newScope =  new Scope ( null, root ) ;^152^^^^^126^151^[REPLACE] newScope = new Scope ( parent, root ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^137^138^139^140^141^126^151^[ADD] for  ( Node functionNode : scopeBuilder.nonExternFunctions )  { JSType type = functionNode.getJSType (  ) ; if  ( type != null && type instanceof FunctionType )  { FunctionType fnType =  ( FunctionType )  type; ObjectType fnThisType = fnType.getTypeOfThis (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^138^^^^^126^151^[REPLACE] JSType type = functionNode.getJSType (  ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.createNullableType ( newScope ) ;^155^^^^^121^157^[REPLACE] typeRegistry.resolveTypesInScope ( newScope ) ;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return newScope;  ;^156^^^^^121^157^[REPLACE] return newScope;^[METHOD] createScope [TYPE] Scope [PARAMETER] Node root Scope parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node functionNode  node  root  [TYPE]  FunctionType fnType  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  GlobalScopeBuilder scopeBuilder  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Scope s = new Scope ( node, compiler ) ;^165^^^^^164^194^[REPLACE] Scope s = new Scope ( root, compiler ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, ARRAY_FUNCTION_TYPE ) ;^166^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, ARRAY_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, BOOLEAN_OBJECT_FUNCTION_TYPE ) ;^167^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, BOOLEAN_OBJECT_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^167^^^^^164^194^[ADD] declareNativeFunctionType ( s, BOOLEAN_OBJECT_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, DATE_FUNCTION_TYPE ) ;^168^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, DATE_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, ERROR_FUNCTION_TYPE ) ;^169^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, EVAL_ERROR_FUNCTION_TYPE ) ;^170^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, EVAL_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( s, BOOLEAN_OBJECT_FUNCTION_TYPE )  ;^171^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, FUNCTION_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^171^^^^^164^194^[ADD] declareNativeFunctionType ( s, FUNCTION_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( s, BOOLEAN_OBJECT_FUNCTION_TYPE )  ;^172^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, NUMBER_OBJECT_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, OBJECT_FUNCTION_TYPE ) ;^173^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, OBJECT_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, RANGE_ERROR_FUNCTION_TYPE ) ;^174^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, RANGE_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, REFERENCE_ERROR_FUNCTION_TYPE ) ;^175^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, REFERENCE_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.getNativeType ( NO_TYPE )  ;^176^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, REGEXP_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^declareNativeFunctionType ( s, STRING_OBJECT_FUNCTION_TYPE ) ;^176^177^^^^164^194^[ADD] declareNativeFunctionType ( s, REGEXP_FUNCTION_TYPE ) ; declareNativeFunctionType ( s, STRING_OBJECT_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, STRING_OBJECT_FUNCTION_TYPE ) ;^177^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, STRING_OBJECT_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, SYNTAX_ERROR_FUNCTION_TYPE ) ;^178^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, SYNTAX_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( scope, TYPE_ERROR_FUNCTION_TYPE ) ;^179^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, TYPE_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^declareNativeFunctionType ( s, URI_ERROR_FUNCTION_TYPE ) ;^179^180^^^^164^194^[ADD] declareNativeFunctionType ( s, TYPE_ERROR_FUNCTION_TYPE ) ; declareNativeFunctionType ( s, URI_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( s, BOOLEAN_OBJECT_FUNCTION_TYPE )  ;^180^^^^^164^194^[REPLACE] declareNativeFunctionType ( s, URI_ERROR_FUNCTION_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeValueType ( scope, "undefined", VOID_TYPE ) ;^181^^^^^164^194^[REPLACE] declareNativeValueType ( s, "undefined", VOID_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeValueType ( scope, "goog.typedef", NO_TYPE ) ;^186^^^^^164^194^[REPLACE] declareNativeValueType ( s, "goog.typedef", NO_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeValueType ( scope, "ActiveXObject", NO_OBJECT_TYPE ) ;^191^^^^^164^194^[REPLACE] declareNativeValueType ( s, "ActiveXObject", NO_OBJECT_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^191^^^^^164^194^[ADD] declareNativeValueType ( s, "ActiveXObject", NO_OBJECT_TYPE ) ;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^193^^^^^164^194^[REPLACE] return s;^[METHOD] createInitialScope [TYPE] Scope [PARAMETER] Node root [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node functionNode  node  root  [TYPE]  String ownerName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType ownerVarType = ownerVar.getType (  )  ;^278^^^^^277^321^[REPLACE] JSType jsType = null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^Node objNode = node.getType (  )  != Token.GETPROP ? node .getLastChild (  )   : false;^279^280^^^^277^321^[REPLACE] Node objNode = node.getType (  )  == Token.GETPROP ? node.getFirstChild (  )  : null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info == null )  {^281^^^^^277^321^[REPLACE] if  ( info != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^281^282^283^284^285^277^321^[ADD] if  ( info != null )  { if  ( info.hasType (  )  )  { jsType = info.getType (  ) .evaluate ( scope ) ; } else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  { String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^282^^^^^277^321^[REPLACE] if  ( info.hasType (  )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration  (  info  )    )   {  ;^284^^^^^277^321^[REPLACE] } else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^return null;^288^289^290^^^277^321^[ADD] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  { return null; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return false;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( root == null )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (  objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^303^304^305^306^^277^321^[ADD] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { builder.inferThisType ( info, objNode.getFirstChild (  )  ) ; searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   ||  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^searchedForThisType = false;^309^^^^^277^321^[REPLACE] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^searchedForThisType = false;^306^^^^^303^310^[REPLACE] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode .getJSType (  )    !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^searchedForThisType = false;^306^^^^^277^321^[REPLACE] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( root.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .equals (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  ( objNode.getType (  )   ||  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^309^^^^^277^321^[ADD] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^306^^^^^303^310^[ADD] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  else {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( searchedForThisType )  {^313^^^^^277^321^[REPLACE] if  ( !searchedForThisType )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder.inferThisType ( info,  ( Node )  false ) ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^314^^^^^277^321^[ADD] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^jsType =  null.buildAndRegister (  ) ;^317^^^^^277^321^[REPLACE] jsType = builder.buildAndRegister (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String variableName = n.getQualifiedName (  )  ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, parent, sourceName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^boolean searchedForThisType = true;^301^^^^^277^321^[REPLACE] boolean searchedForThisType = false;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (  typeRegistry.getType ( fnName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return null;  ;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode == true )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^302^303^304^305^306^277^321^[ADD] if  ( objNode != null )  { if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { builder.inferThisType ( info, objNode.getFirstChild (  )  ) ; searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .getString (  ) .inferReturnType ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  ( objNode.getType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.setJSType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^}   builder.inferThisType ( info, objNode.getJSType (  )  ) ;searchedForThisType = true;^307^308^309^310^^277^321^[ADD] else if  ( objNode.getType (  )  == Token.THIS )  { builder.inferThisType ( info, objNode.getJSType (  )  ) ; searchedForThisType = true; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP || objNode.getFirstChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String fnName = root.isQualifiedName (  ) ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, ownerName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^283^^^^^277^321^[ADD] jsType = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^284^^^^^277^321^[REPLACE] } else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (root == null )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP ) {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^builder.inferThisType ( info,  ( Node )  null ) ;^313^314^315^^^277^321^[ADD] if  ( !searchedForThisType )  { builder.inferThisType ( info,  ( Node )  null ) ; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return true;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String fnName = root.getQualifiedName (  ) ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( sourceName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return this;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode == null )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   ) {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^}   searchedForThisType = true;^307^308^309^310^^277^321^[ADD] else if  ( objNode.getType (  )  == Token.THIS )  { builder.inferThisType ( info, objNode.getJSType (  )  ) ; searchedForThisType = true; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( !true )  {^313^^^^^277^321^[REPLACE] if  ( !searchedForThisType )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^jsType =  null.getType (  ) .evaluate ( scope ) ;^283^^^^^277^321^[REPLACE] jsType = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^292^293^294^^^277^321^[ADD] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^jsType = info.getType (  ) .evaluate ( scope ) ;String fnName = node.getQualifiedName (  ) ;^282^283^284^285^^277^321^[ADD] if  ( info.hasType (  )  )  { jsType = info.getType (  ) .evaluate ( scope ) ; } else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  { String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.getType ( sourceName )  == true )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (root == false )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  firstChild.getType  (    )   == Token.GETPROP && firstChild.getLastChild  (    )  .getString  (    )  .equals  (  "prototype"  )    )   {  ;^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   &&  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^317^^^^^277^321^[ADD] jsType = builder.buildAndRegister (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  value != null  )   {  ;^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  (   Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder.inferThisType ( info,  ( Node )  true ) ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String fnName = parent.isQualifiedName (  ) ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info .hasEnumParameterType (  )   && typeRegistry.getType ( fnName )  == true )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP || objNode.getLastChild (  )  .getType (  )  .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( root.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder .inferThisType ( info )  ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^301^^^^^277^321^[ADD] boolean searchedForThisType = false;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.declareType ( fnName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  ( objNode.setJSType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder.inferThisType ( info,  ( Node )  this ) ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^285^286^^288^289^277^321^[ADD] String fnName = node.getQualifiedName (  ) ;  if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  { return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, root, sourceName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return jsType;  ;^320^^^^^277^321^[REPLACE] return jsType;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  Node firstChild  functionNode  maybeOwner  n  node  objNode  parent  root  [TYPE]  String fnName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^Preconditions.checkState (ownerName == null ) ;^334^^^^^333^401^[REPLACE] Preconditions.checkState ( sourceName != null ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^336^^^^^333^401^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( n.getChildCount (  )   !=  1 * 2 )  {^344^^^^^333^401^[REPLACE] if  ( n.getChildCount (  )  > 1 )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node n = stub.node  ;^353^^^^^344^356^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( info == null )  {^345^^^^^333^401^[REPLACE] if  ( info != null )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  )  ;^347^^^^^333^401^[REPLACE] compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^for  ( Node rvalue : n.children (  )  )  {^349^^^^^344^352^[REPLACE] for  ( Node name : n.children (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node n = stub.node  ;^349^^^^^344^352^[REPLACE] for  ( Node name : n.children (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null  )   {  ;^345^^^^^333^401^[REPLACE] if  ( info != null )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler .getTypeRegistry (  )  ;^347^^^^^333^401^[REPLACE] compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^347^^^^^333^401^[ADD] compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, MULTIPLE_VAR_DEF )  ) ;^347^^^^^333^401^[REPLACE] compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^369^^^^^333^401^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( parent.getFirstChild (  ) , n, functionType ) ;^370^^^^^333^401^[REPLACE] defineSlot ( n.getFirstChild (  ) , n, functionType ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^370^^^^^333^401^[ADD] defineSlot ( n.getFirstChild (  ) , n, functionType ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^( parent.getFirstChild (  )  )  ;^370^^^^^333^401^[REPLACE] defineSlot ( n.getFirstChild (  ) , n, functionType ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( rvalue.getType (  )  != Token.FUNCTION || info != null && info.isConstructor (  )  )  {^387^388^^^^333^401^[REPLACE] if  ( rvalue.getType (  )  == Token.FUNCTION || info != null && info.isConstructor (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^387^388^389^390^^333^401^[ADD] if  ( rvalue.getType (  )  == Token.FUNCTION || info != null && info.isConstructor (  )  )  { getFunctionType ( lvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( info == null && info.hasEnumParameterType (  )  )  {^391^^^^^333^401^[REPLACE] } else if  ( info != null && info.hasEnumParameterType (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^lvalue .getJSType (  )  .evaluate ( scope )  )  ) ;^392^393^394^^^333^401^[REPLACE] lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .setJSType ( scope )  )  ) ;^393^394^^^^333^401^[REPLACE] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^getEnumType ( rvalue.isQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^393^394^^^^333^401^[REPLACE] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^393^394^395^^^333^401^[ADD] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^info.getEnumParameterType (  ) .setJSType ( scope )  )  ) ;^394^^^^^333^401^[REPLACE] info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^info.hasEnumParameterType (  ) .evaluate ( scope )  )  ) ;^394^^^^^333^401^[REPLACE] info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^getFunctionType ( rvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ;^389^390^^^^387^395^[REPLACE] getFunctionType ( lvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^lvalue ) ;^389^390^391^392^393^387^395^[ADD] getFunctionType ( lvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ; } else if  ( info != null && info.hasEnumParameterType (  )  )  { lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue,^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info .hasEnumParameterType (  )  .evaluate ( scope )  )  ) ;^392^393^394^^^333^401^[REPLACE] lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^392^393^394^^^333^401^[ADD] lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^393^394^395^^^333^401^[ADD] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^getEnumType ( rvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^393^394^^^^333^401^[REPLACE] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^( info.hasEnumParameterType (  )  )  ;^394^^^^^333^401^[REPLACE] info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^349^350^351^^^344^352^[ADD] for  ( Node name : n.children (  )  )  { defineName ( name, n, parent, name.getJSDocInfo (  )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^info =  ( info == null )  ? info : rvalue.getJSDocInfo (  ) ;^386^^^^^344^352^[REPLACE] info =  ( info != null )  ? info : rvalue.getJSDocInfo (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node catchName = parent .getLastChild (  )  ;^339^^^^^344^352^[REPLACE] Node catchName = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node parentame = n.getFirstChild (  ) ;^353^^^^^344^352^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^int rootType = parent.getType (  ) ;^360^^^^^344^352^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^366^^^^^344^352^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType functionType = getFunctionType ( functionName, n, info, true ) ;^367^368^^^^344^352^[REPLACE] FunctionType functionType = getFunctionType ( functionName, n, info, null ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^384^^^^^344^352^[REPLACE] Node rvalue = n.getLastChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node lvalue = parent.getFirstChild (  ) ;^385^^^^^344^352^[REPLACE] Node lvalue = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return ;^399^^^^^344^352^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^413^^^^^412^441^[REPLACE] Node value = name.getFirstChild (  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.FUNCTION )  {^415^^^^^412^441^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( info != true )  {^424^^^^^415^440^[REPLACE] if  ( info == null )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  else {^430^^^^^415^440^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  else {^433^^^^^415^440^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, var, info ) ;^436^^^^^433^437^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( parent.getString (  ) , value, info, parent ) ;^434^^^^^415^440^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, value, info ) ;^436^^^^^415^440^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^431^432^^^^415^440^[ADD] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^436^^^^^433^437^[ADD] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( var.getString (  ) , value, info, var ) ;^434^^^^^415^440^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( value.getString (  ) , value, info, value ) ;^434^^^^^415^440^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, var, info ) ;^436^^^^^415^440^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : false;^428^429^^^^415^440^[REPLACE] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^CompilerInput input = compiler .getTypeRegistry (  )  ;^426^^^^^415^440^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( info.hasType (  )  )  {^433^^^^^415^440^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^436^^^^^415^440^[ADD] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^428^429^^^^415^440^[ADD] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getEnumType ( var.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^415^440^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = false;^423^^^^^415^440^[REPLACE] JSType type = null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^426^^^^^415^440^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String functionName = n.getFirstChild (  ) .getString (  )  ;^417^^^^^412^441^[REPLACE] String functionName = name.getString (  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^418^419^^^^412^441^[ADD] FunctionType functionType = getFunctionType ( functionName, value, info, null ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  parent == null  )   {  ;^424^^^^^412^441^[REPLACE] if  ( info == null )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^} else if   (  info != null && info.hasEnumParameterType  (    )    )   {  ;^430^^^^^412^441^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( info.isConstructor (  )  )  {^433^^^^^412^441^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, parent, info ) ;^436^^^^^433^437^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( var.getString (  ) , value, info, var ) ;^434^^^^^412^441^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^436^^^^^412^441^[ADD] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getEnumType ( null.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^412^441^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( info.hasType (  )  )  {^433^^^^^412^441^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^}   type = getFunctionType ( name.getString (  ) , value, info, name ) ;type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^433^434^435^436^437^412^441^[ADD] else if  ( info.isConstructor (  )  )  { type = getFunctionType ( name.getString (  ) , value, info, name ) ; } else { type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ; }^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, rvalue, info ) ;^436^^^^^433^437^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( rvalue.getString (  ) , value, info, rvalue ) ;^434^^^^^412^441^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getEnumType ( var.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^412^441^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^434^^^^^412^441^[ADD] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : false;^428^429^^^^412^441^[REPLACE] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^426^^^^^412^441^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  else {^430^^^^^412^441^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  else {^433^^^^^412^441^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, value, info ) ;^436^^^^^433^437^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( null.getString (  ) , value, info, null ) ;^434^^^^^412^441^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, rvalue, info ) ;^436^^^^^412^441^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getFunctionType ( parent.getString (  ) , value, info, parent ) ;^434^^^^^412^441^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^428^429^^^^412^441^[ADD] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  getEnumType ( parent.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^412^441^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String functionName = var.getString (  ) ;^417^^^^^412^441^[REPLACE] String functionName = name.getString (  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType functionType = getFunctionType ( functionName, value, info, true ) ;^418^419^^^^412^441^[REPLACE] FunctionType functionType = getFunctionType ( functionName, value, info, null ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^423^^^^^412^441^[ADD] JSType type = null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Node catchName  firstChild  functionNode  lvalue  maybeOwner  n  name  node  objNode  parent  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExtern  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^456^^^^^455^548^[ADD] FunctionType functionType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( rValue == null && rValue.isQualifiedName (  )  )  {^459^^^^^455^548^[REPLACE] if  ( rValue != null && rValue.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  var.getType (  )  instanceof FunctionType )  {^461^^^^^455^548^[REPLACE] if  ( var != null && var.getType (  )  instanceof FunctionType )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType == true ) {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( name, enumType.getElementsType (  )  )  ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( name, propType.getInstanceType (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^464^^^^^455^548^[ADD] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  (  ( FunctionType )   ( type )  )  ;^462^^^^^455^548^[REPLACE] functionType =  ( FunctionType )  var.getType (  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  functionType.isConstructor (  )  )  {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^463^464^465^^^455^548^[ADD] if  ( functionType != null && functionType.isConstructor (  )  )  { typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^462^^^^^455^548^[ADD] functionType =  ( FunctionType )  var.getType (  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return propType;^467^^^^^455^548^[REPLACE] return functionType;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( value.getQualifiedName (  )  ) ;^460^^^^^455^548^[REPLACE] Var var = scope.getVar ( rValue.getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^461^462^463^464^465^455^548^[ADD] if  ( var != null && var.getType (  )  instanceof FunctionType )  { functionType =  ( FunctionType )  var.getType (  ) ; if  ( functionType != null && functionType.isConstructor (  )  )  { typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType == null && functionType.isConstructor (  )  )  {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( sourceName, functionType.getInstanceType (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( name, propType.getPrototype (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType == false && functionType.isConstructor (  )  )  {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^463^464^465^^^455^548^[ADD] if  ( functionType != null && functionType.isConstructor (  )  )  { typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return functionType;  ;^467^^^^^455^548^[REPLACE] return functionType;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var qVar = scope.getVar ( qName )  ;^460^^^^^455^548^[REPLACE] Var var = scope.getVar ( rValue.getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^470^^^^^455^548^[ADD] Node owner = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null  )   {  ;^471^^^^^455^548^[REPLACE] if  ( lvalueNode != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^472^^^^^455^548^[ADD] owner = getPrototypePropertyOwner ( lvalueNode ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^owner =  getPrototypePropertyOwner ( value ) ;^472^^^^^455^548^[REPLACE] owner = getPrototypePropertyOwner ( lvalueNode ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node errorRoot  = root;^475^^^^^455^548^[REPLACE] Node errorRoot = rValue == null ? lvalueNode : rValue;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^476^477^^^^455^548^[ADD] boolean isFnLiteral = rValue != null && rValue.getType (  )  == Token.FUNCTION;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node errorRoot =  ( rValue == null )  ? lvalueNode : rValue  ;^478^^^^^455^548^[REPLACE] Node fnRoot = isFnLiteral ? rValue : null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node parametersNode = isFnLiteral ? var.getFirstChild (  ) .getNext (  )  : false;^479^480^^^^455^548^[REPLACE] Node parametersNode = isFnLiteral ? rValue.getFirstChild (  ) .getNext (  )  : null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType != null && info != null && info.hasType (  )  )  {^482^^^^^455^548^[REPLACE] if  ( functionType == null && info != null && info.hasType (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( type.restrictByNotNullOrUndefined (  )  )  {^487^^^^^455^548^[REPLACE] if  ( type.isFunctionType (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^functionType =  ( FunctionType )  type;functionType.setJSDocInfo ( info ) ;^487^488^489^490^^455^548^[ADD] if  ( type.isFunctionType (  )  )  { functionType =  ( FunctionType )  type; functionType.setJSDocInfo ( info ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType =  (  ( EnumType )   ( var.getType (  )  )  )  ;^488^^^^^455^548^[REPLACE] functionType =  ( FunctionType )  type;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^type =  null.restrictByNotNullOrUndefined (  ) ;^486^^^^^455^548^[REPLACE] type = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  (  ( FunctionType )   ( var.getType (  )  )  )  ;^488^^^^^455^548^[REPLACE] functionType =  ( FunctionType )  type;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^483^^^^^455^548^[ADD] JSType type = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = info .getType (  )  .evaluate ( scope ) ;^483^^^^^455^548^[REPLACE] JSType type = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType != true )  {^493^^^^^455^548^[REPLACE] if  ( functionType == null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( info != null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^494^495^^^^455^548^[REPLACE] if  ( info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( lvalueNode != this && lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^494^525^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^502^503^504^505^^494^525^[ADD] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  { Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == this )  {^506^^^^^502^524^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType == null )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^propType =  findOverriddenFunction ( thisType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^502^524^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( propType == null )  {^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( null, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^502^524^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^502^524^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = ObjectType.hasOwnProperty ( var.getType (  )  ) ;^507^^^^^502^524^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = null  ;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  functionType != null  )   {  ;^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^515^516^517^^^502^524^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^propType =  findOverriddenFunction ( null, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^502^524^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( parent.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^502^524^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( var.getNameNode (  )  ) ;^507^^^^^502^524^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType propType = this;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == this )  {^506^^^^^494^525^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (thisType == null )  {^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^propType =  findOverriddenFunction ( thisType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^494^525^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( propType == null )  {^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^514^515^516^517^518^494^525^[ADD] if  ( propType != null )  { functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^494^525^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( var.getNameNode (  )  ) ;^507^^^^^494^525^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType propType = this;^508^^^^^494^525^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( thisType == null )  {^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^509^510^511^512^^494^525^[ADD] if  ( ownerType != null )  { propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  functionType != null  )   {  ;^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( var.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^494^525^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^508^^^^^494^525^[ADD] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( lvalueNode != this && lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^455^548^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^502^503^504^505^^455^548^[ADD] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  { Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  parent == null  )   {  ;^506^^^^^502^524^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( thisType == null )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType == null )  {^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^510^511^^^^502^524^[ADD] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (thisType == null )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^504^505^^^^502^524^[ADD] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^507^^^^^502^524^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == false )  {^506^^^^^455^548^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^506^507^508^509^510^455^548^[ADD] if  ( var != null )  { ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null; if  ( ownerType != null )  { propType = findOverriddenFunction (^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  functionType != null  )   {  ;^509^^^^^455^548^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^propType =  findOverriddenFunction ( thisType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^455^548^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( propType == null )  {^514^^^^^455^548^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( null, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^455^548^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^455^548^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = ObjectType.hasOwnProperty ( var.getType (  )  ) ;^507^^^^^455^548^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType propType = this;^508^^^^^455^548^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType == this )  {^509^^^^^455^548^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^514^515^516^517^518^455^548^[ADD] if  ( propType != null )  { functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( var.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^455^548^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^507^508^^^^455^548^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = null  ;^508^^^^^455^548^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( info != true || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^494^495^^^^455^548^[REPLACE] if  ( info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^494^495^^^^455^548^[ADD] if  ( info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( lvalueNode != null && lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^494^525^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( ownerName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^502^524^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( type )  )  ;^507^^^^^502^524^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType propType = true;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( parametersNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^502^524^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == null )  {^506^^^^^494^525^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType == this )  {^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (functionType == false )  {^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  new FunctionTypeBuilder ( ownerName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^494^525^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^510^511^^^^494^525^[ADD] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^507^^^^^494^525^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  functionType != null  )   {  ;^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (functionType == null )  {^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( root.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^494^525^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = ObjectType.hasOwnProperty ( var.getType (  )  ) ;^507^^^^^494^525^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^455^548^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == null )  {^506^^^^^502^524^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType == this )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType == this )  {^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType == this  )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( var.getLastChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^502^524^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^508^^^^^502^524^[ADD] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == null )  {^506^^^^^455^548^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (thisType == null )  {^509^^^^^455^548^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( propType ==functionType )  {^514^^^^^455^548^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^515^516^517^^^455^548^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^507^^^^^455^548^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType propType = true;^508^^^^^455^548^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( propType == false )  {^514^^^^^455^548^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = ObjectType .getConstructor (  )  ;^507^^^^^455^548^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType != this  )  {^528^^^^^455^548^[REPLACE] if  ( functionType == null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^528^529^530^531^532^455^548^[ADD] if  ( functionType == null )  { functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^529^530^531^^^455^548^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (var == null )  {^542^^^^^455^548^[REPLACE] if  ( rValue != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^rValue.setJSType ( functionType ) ;^542^543^544^^^455^548^[ADD] if  ( rValue != null )  { rValue.setJSType ( functionType ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^rValue.setJSType ( propType ) ;^543^^^^^455^548^[REPLACE] rValue.setJSType ( functionType ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return propType;^547^^^^^455^548^[REPLACE] return functionType;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  ownerName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType propType = thisType.hasOwnProperty ( propName ) ;^557^^^^^554^573^[REPLACE] JSType propType = ownerType.getPropertyType ( propName ) ;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^558^^^^^554^573^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^558^559^560^^^554^573^[ADD] if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType; } else {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^566^^^^^558^570^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^return  ( FunctionType )  propType;^566^567^568^^^558^570^[ADD] if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType; }^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^for  ( ObjectType iface : ownerType .getReferenceName (  )   )  {^563^564^^^^558^570^[REPLACE] for  ( ObjectType iface : ownerType.getCtorImplementedInterfaces (  )  )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^propType =  thisType.getPropertyType ( propName ) ;^565^^^^^558^570^[REPLACE] propType = iface.getPropertyType ( propName ) ;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return rhsValue.getJSType  (    )  ;  ;^567^^^^^558^570^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return rhsValue.getJSType  (    )  ;  ;^559^^^^^554^573^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^566^^^^^554^573^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return rhsValue.getJSType  (    )  ;  ;^567^^^^^554^573^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^for  ( ObjectType iface : ownerType.getReferenceName (  )  )  {^563^564^^^^560^570^[REPLACE] for  ( ObjectType iface : ownerType.getCtorImplementedInterfaces (  )  )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^propType =  thisType.getPropertyType ( propName ) ;^565^^^^^560^570^[REPLACE] propType = iface.getPropertyType ( propName ) ;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return rhsValue.getJSType  (    )  ;  ;^559^^^^^560^570^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return rhsValue.getJSType  (    )  ;  ;^567^^^^^560^570^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return true;^572^^^^^554^573^[REPLACE] return null;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType propType  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = null  ;^590^^^^^589^631^[REPLACE] EnumType enumType = null;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( value == null )  {^593^^^^^589^631^[REPLACE] if  ( value != null )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( value.getType (  )   &&  Token.OBJECTLIT )  {^594^^^^^589^631^[REPLACE] if  ( value.getType (  )  == Token.OBJECTLIT )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^594^595^596^^^589^631^[ADD] if  ( value.getType (  )  == Token.OBJECTLIT )  {  enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( value.getQualifiedName (  )  )  {^614^^^^^589^631^[REPLACE] } else if  ( value.isQualifiedName (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^}   enumType =  ( EnumType )  var.getType (  ) ;^614^615^616^617^618^589^631^[ADD] else if  ( value.isQualifiedName (  )  )  { Var var = scope.getVar ( value.getQualifiedName (  )  ) ; if  ( var != null && var.getType (  )  instanceof EnumType )  { enumType =  ( EnumType )  var.getType (  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  var != null && var.getType  (    )   instanceof FunctionType  )   {  ;^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  (  ( FunctionType )   ( type )  )  ;^617^^^^^589^631^[REPLACE] enumType =  ( EnumType )  var.getType (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^functionType =  (  ( FunctionType )   ( var.getType (  )  )  )  ;^617^^^^^589^631^[REPLACE] enumType =  ( EnumType )  var.getType (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( var.getQualifiedName (  )  ) ;^615^^^^^589^631^[REPLACE] Var var = scope.getVar ( value.getQualifiedName (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^617^^^^^589^631^[ADD] enumType =  ( EnumType )  var.getType (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( rvalue .isQualifiedName (  )   ) ;^615^^^^^589^631^[REPLACE] Var var = scope.getVar ( value.getQualifiedName (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^603^^^^^589^631^[REPLACE] if  ( enumType.hasOwnProperty ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^603^604^605^606^607^589^631^[ADD] if  ( enumType.hasOwnProperty ( keyName )  )  { compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ; } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  { compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  else {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^}   JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;enumType.defineElement ( keyName ) ;^605^606^607^608^609^589^631^[ADD] else if  ( !codingConvention.isValidEnumKey ( keyName )  )  { compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ; } else { enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType .getElementsType (  )  ;^609^^^^^605^610^[REPLACE] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.getInput ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  )  ;^607^^^^^589^631^[REPLACE] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, sourceName )  ) ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, ENUM_DUP, keyName )  ) ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^} else if  ( codingConvention.isValidEnumKey ( keyName )  )  {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType.hasOwnProperty ( keyName ) ;^609^^^^^605^610^[REPLACE] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, ENUM_NOT_CONSTANT, keyName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSError.make ( sourceName, parent, ENUM_NOT_CONSTANT, keyName )  ) ;^607^^^^^589^631^[REPLACE] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType =  typeRegistry.createEnumType ( sourceName, elementsType ) ;^596^^^^^589^631^[REPLACE] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^611^612^^^^589^631^[ADD] key = key.getNext (  ) ; key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^612^^^^^589^631^[ADD] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node key = var.getFirstChild (  ) ;^599^^^^^589^631^[REPLACE] Node key = value.getFirstChild (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String keyName = NodeUtil .isFunctionDeclaration ( key )  ;^601^^^^^589^631^[REPLACE] String keyName = NodeUtil.getStringValue ( key ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( enumType.hasOwnProperty ( sourceName )  )  {^603^^^^^589^631^[REPLACE] if  ( enumType.hasOwnProperty ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( !codingConvention.identifyTypeDefAssign ( parentName )  )  {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^609^^^^^605^610^[ADD] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, sourceName )  ) ;^607^^^^^589^631^[REPLACE] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  )  ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^604^^^^^589^631^[ADD] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^607^^^^^589^631^[ADD] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  else {^614^^^^^589^631^[REPLACE] } else if  ( value.isQualifiedName (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == false && var .getJSType (  )   instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^enumType =  ( EnumType )  var.getType (  ) ;^616^617^618^^^589^631^[ADD] if  ( var != null && var.getType (  )  instanceof EnumType )  { enumType =  ( EnumType )  var.getType (  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^616^617^618^^^589^631^[ADD] if  ( var != null && var.getType (  )  instanceof EnumType )  { enumType =  ( EnumType )  var.getType (  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^596^^^^^589^631^[ADD] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^key =  parent.getNext (  ) ;^611^^^^^589^631^[REPLACE] key = key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^key =  ( key != null )  ? null : key.getNext (  ) ;^612^^^^^589^631^[REPLACE] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String parentName = NodeUtil.isFunctionDeclaration ( key ) ;^601^^^^^589^631^[REPLACE] String keyName = NodeUtil.getStringValue ( key ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var qVar = scope.getVar ( qName )  ;^615^^^^^589^631^[REPLACE] Var var = scope.getVar ( value.getQualifiedName (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == null && var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^615^616^617^618^^589^631^[ADD] Var var = scope.getVar ( value.getQualifiedName (  )  ) ; if  ( var != null && var.getType (  )  instanceof EnumType )  { enumType =  ( EnumType )  var.getType (  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == null && var.getNameNode (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( enumType.hasOwnProperty ( parentName )  )  {^603^^^^^589^631^[REPLACE] if  ( enumType.hasOwnProperty ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType.hasOwnProperty ( sourceName ) ;^609^^^^^605^610^[REPLACE] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, ownerName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.getInput ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( codingConvention.isValidEnumKey ( keyName )  )  {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType =  typeRegistry.createEnumType ( null, elementsType ) ;^596^^^^^589^631^[REPLACE] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^key  =  this  ;^612^^^^^589^631^[REPLACE] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^599^^^^^589^631^[ADD] Node key = value.getFirstChild (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^( codingConvention.isValidEnumKey ( keyName )  )  ;^609^^^^^605^610^[REMOVE] ^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, sourceName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^functionParamBuilder.addRequiredParams ( typeRegistry.getNativeType ( U2U_CONSTRUCTOR_TYPE )  )  ;^607^^^^^589^631^[REMOVE] ^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, ownerName )  ) ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( value.isQualifiedName (  )  )  {^614^^^^^589^631^[REPLACE] } else if  ( value.isQualifiedName (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^}   Var var = scope.getVar ( value.getQualifiedName (  )  ) ;enumType =  ( EnumType )  var.getType (  ) ;^614^615^616^617^618^589^631^[ADD] else if  ( value.isQualifiedName (  )  )  { Var var = scope.getVar ( value.getQualifiedName (  )  ) ; if  ( var != null && var.getType (  )  instanceof EnumType )  { enumType =  ( EnumType )  var.getType (  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( var == false && var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^enumType =  typeRegistry.createEnumType ( propName, elementsType ) ;^596^^^^^589^631^[REPLACE] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^key  = parent.getNext (  ) ;^612^^^^^589^631^[REPLACE] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( enumType != null )  {^622^^^^^589^631^[REPLACE] if  ( enumType == null )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( scope.isGlobal (  )  )  {^624^^^^^589^631^[REPLACE] } else if  ( scope.isGlobal (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^}   typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^624^625^626^627^^589^631^[ADD] else if  ( scope.isGlobal (  )  )  { if  ( name != null && !name.isEmpty (  )  )  { typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( name == null &&true (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( sourceName, enumType.getElementsType (  )  ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^typeRegistry.getType ( relationship.superclassName )  ;^626^^^^^589^631^[REMOVE] ^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( name == null ) {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^625^626^627^^^589^631^[ADD] if  ( name != null && !name.isEmpty (  )  )  { typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( name, functionType.getInstanceType (  )  )  ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( name, enumType .defineElement ( propName )   ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^626^^^^^589^631^[ADD] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  )  ;^623^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, parent, ENUM_INITIALIZER )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( sourceName, var, ENUM_INITIALIZER )  ) ;^623^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, parent, ENUM_INITIALIZER )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^624^^^^^589^631^[REPLACE] } else if  ( scope.isGlobal (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( name == this && !name.isEmpty (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( name == false && true (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return enumType;  ;^630^^^^^589^631^[REPLACE] return enumType;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  Var var  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isExtern  isFnLiteral  searchedForThisType  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  EnumType enumType  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Preconditions.checkArgument ( inferred  |  type != null ) ;^658^^^^^657^722^[REPLACE] Preconditions.checkArgument ( inferred || type != null ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^658^^^^^657^722^[ADD] Preconditions.checkArgument ( inferred || type != null ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^661^^^^^657^722^[ADD] boolean shouldDeclareOnGlobalThis = false;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( n.getType (  )   ) {^662^^^^^657^722^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Preconditions.checkArgument ( n.getType (  )  == Token.GETPROP || ( owner.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^672^673^674^675^^662^676^[REPLACE] Preconditions.checkArgument ( n.getType (  )  == Token.GETPROP && ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^672^673^674^^^662^676^[ADD] Preconditions.checkArgument ( n.getType (  )  == Token.GETPROP && ( parent.getType (  )  == Token.ASSIGN ||^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^n .getJSType (  )   == Token.GETPROP && ( parent^673^674^675^^^662^676^[REPLACE] n.getType (  )  == Token.GETPROP && ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^( parent.setJSType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^674^675^^^^662^676^[REPLACE] ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^( value.getType (  )  )  ;^675^^^^^662^676^[REPLACE] parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^shouldDeclareOnGlobalThis = scope.isGlobal (  )  ;^668^669^670^^^657^722^[REPLACE] shouldDeclareOnGlobalThis = scope.isGlobal (  )  && ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String variableName = parent.getQualifiedName (  ) ;^677^^^^^657^722^[REPLACE] String variableName = n.getQualifiedName (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Preconditions.checkArgument ( !variableName.equals (  )  ) ;^678^^^^^657^722^[REPLACE] Preconditions.checkArgument ( !variableName.isEmpty (  )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^678^^^^^657^722^[ADD] Preconditions.checkArgument ( !variableName.isEmpty (  )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^( name.isEmpty (  )  )  ;^678^^^^^657^722^[REPLACE] Preconditions.checkArgument ( !variableName.isEmpty (  )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  scope.isDeclared  (  qName, false  )    )   {  ;^681^^^^^657^722^[REPLACE] if  ( scope.isDeclared ( variableName, false )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^Var oldVar = scope.getVar ( variableName ) ;sourceName, n, parent, oldVar, variableName, type ) ;^681^682^683^684^^657^722^[ADD] if  ( scope.isDeclared ( variableName, false )  )  { Var oldVar = scope.getVar ( variableName ) ; validator.expectUndeclaredVariable ( sourceName, n, parent, oldVar, variableName, type ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( !true )  {^686^^^^^681^721^[REPLACE] if  ( !inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^n.setJSType ( type ) ;^686^687^688^^^681^721^[ADD] if  ( !inferred )  { n.setJSType ( type ) ; }^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^n .getJSType (  )  ;^687^^^^^681^721^[REPLACE] n.setJSType ( type ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^692^^^^^681^721^[REPLACE] if  ( shouldDeclareOnGlobalThis )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^692^693^694^695^^681^721^[ADD] if  ( shouldDeclareOnGlobalThis )  { ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ; boolean isExtern = input.isExtern (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  !inferred  )   {  ;^696^^^^^681^721^[REPLACE] if  ( inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis .defineDeclaredProperty ( type , true )  ;^703^^^^^696^704^[REPLACE] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^703^^^^^696^704^[ADD] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis.defineInferredProperty   typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  ;^697^698^699^700^^681^721^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^697^698^699^^^681^721^[ADD] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  :^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.getType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^699^700^701^^^681^721^[REPLACE] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType globalThis = typeRegistry.getType ( JSTypeNative.GLOBAL_THIS ) ;^693^694^^^^681^721^[REPLACE] ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^boolean isExtern = t.getInput (  ) .isExtern (  )  ;^695^^^^^681^721^[REPLACE] boolean isExtern = input.isExtern (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ownerType.defineDeclaredProperty ( propName, valueType, isExtern )  ;^703^^^^^696^704^[REPLACE] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis .defineInferredProperty ( keyName , ownerType , true )   ;^697^698^699^700^^681^721^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! scope.isGlobal (  )  && type instanceof FunctionType )  {^709^^^^^681^721^[REPLACE] if  ( scope.isGlobal (  )  && type instanceof FunctionType )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^FunctionType fnType =  ( FunctionType )  type;FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^709^710^711^712^713^681^721^[ADD] if  ( scope.isGlobal (  )  && type instanceof FunctionType )  { FunctionType fnType =  ( FunctionType )  type; if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  { FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ; scope.declare ( variableName + ".prototype", n,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( fnType.isConstructor (  )  ) {^711^^^^^681^721^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType superClassCtor = fnType.isConstructor (  ) ;^712^^^^^681^721^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry )  ;^710^^^^^681^721^[REPLACE] FunctionType fnType =  ( FunctionType )  type;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  fnType.isInterface (  )  )  {^711^^^^^681^721^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^711^712^713^714^^681^721^[ADD] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  { FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ; scope.declare ( variableName + ".prototype", n, fnType.getPrototype (  ) , compiler.getInput ( sourceName ) ,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^689^^^^^681^721^[ADD] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^712^^^^^681^721^[ADD] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var oldVar = scope.getVar ( ownerName ) ;^682^^^^^657^722^[REPLACE] Var oldVar = scope.getVar ( variableName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  inferred  )   {  ;^686^^^^^657^722^[REPLACE] if  ( !inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^n.getJSType (  )  ;^687^^^^^657^722^[REPLACE] n.setJSType ( type ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^fnType.getTypeOfThis (  )  ;^687^^^^^657^722^[REMOVE] ^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^692^^^^^657^722^[REPLACE] if  ( shouldDeclareOnGlobalThis )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^692^693^694^695^^657^722^[ADD] if  ( shouldDeclareOnGlobalThis )  { ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ; boolean isExtern = input.isExtern (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  !inferred  )   {  ;^696^^^^^657^722^[REPLACE] if  ( inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^696^697^698^699^700^657^722^[ADD] if  ( inferred )  { globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^defineSlot ( name, var, type )  ;^703^^^^^696^704^[REMOVE] ^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis.defineInferredProperty   typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  ;^697^698^699^700^^657^722^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry .getNativeObjectType (  )   : type, isExtern ) ;^699^700^701^^^657^722^[REPLACE] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^699^700^701^^^657^722^[ADD] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType globalThis = typeRegistry.getType ( JSTypeNative.GLOBAL_THIS ) ;^693^694^^^^657^722^[REPLACE] ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^boolean isExtern = t.getInput (  ) .isExtern (  )  ;^695^^^^^657^722^[REPLACE] boolean isExtern = input.isExtern (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis.defineInferredProperty ( variableName, type, isExtern ) ;^703^^^^^696^704^[REPLACE] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis.defineDeclaredProperty ( variableName, type != null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^697^698^699^700^^657^722^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.getType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^699^700^701^^^657^722^[REPLACE] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! scope.isGlobal (  )  && type instanceof FunctionType )  {^709^^^^^657^722^[REPLACE] if  ( scope.isGlobal (  )  && type instanceof FunctionType )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^FunctionType fnType =  ( FunctionType )  type;FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^709^710^711^712^713^657^722^[ADD] if  ( scope.isGlobal (  )  && type instanceof FunctionType )  { FunctionType fnType =  ( FunctionType )  type; if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  { FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ; scope.declare ( variableName + ".prototype", n,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  fnType.isInterface (  )  )  {^711^^^^^657^722^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^711^712^713^714^^657^722^[ADD] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  { FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ; scope.declare ( variableName + ".prototype", n, fnType.getPrototype (  ) , compiler.getInput ( sourceName ) ,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType subCtor = subClass.getConstructor (  )  ;^712^^^^^657^722^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry )  ;^710^^^^^657^722^[REPLACE] FunctionType fnType =  ( FunctionType )  type;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType superClassCtor = fnType.isConstructor (  ) ;^712^^^^^657^722^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( fnType.isConstructor (  )  && fnType.isInterface (  )  )  {^711^^^^^657^722^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^712^^^^^657^722^[ADD] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^682^^^^^657^722^[ADD] Var oldVar = scope.getVar ( variableName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^CompilerInput input = compiler .getTypeRegistry (  )  ;^689^^^^^657^722^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType type  [TYPE]  Var oldVar  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  sourceName  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType fnThisType  globalThis  iface  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( relationship == null )  {^762^^^^^757^912^[REPLACE] if  ( relationship != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  superCtor != null && subCtor != null  )   {  ;^767^^^^^757^912^[REPLACE] if  ( superClass != null && subClass != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^FunctionType superCtor = superClass.getConstructor (  ) ;FunctionType subCtor = subClass.getConstructor (  ) ;^767^768^769^^^757^912^[ADD] if  ( superClass != null && subClass != null )  { FunctionType superCtor = superClass.getConstructor (  ) ; FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( relationship.type  !=  SubclassType.INHERITS )  {^771^^^^^757^912^[REPLACE] if  ( relationship.type == SubclassType.INHERITS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^validator.expectSuperType ( t, n, superClass, subClass ) ;^771^772^773^^^757^912^[ADD] if  ( relationship.type == SubclassType.INHERITS )  { validator.expectSuperType ( t, n, superClass, subClass ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^validator.expectSuperType ( t, n, superClass, superClass ) ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( superCtor == this && subCtor != this )  {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^codingConvention.applySingletonGetter ( superCtor, subCtor, relationship.type ) ;^776^777^^^^757^912^[REPLACE] codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType superCtor = subClass.getConstructor (  ) ;^768^^^^^757^912^[REPLACE] FunctionType superCtor = superClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType subCtor = superClass.getConstructor (  ) ;^769^^^^^757^912^[REPLACE] FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (   SubclassType.INHERITS )  {^771^^^^^757^912^[REPLACE] if  ( relationship.type == SubclassType.INHERITS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^validator.expectSuperType ( t, parent, superClass, subClass ) ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( functionType == null ) {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType superClass = ObjectType.hasOwnProperty ( typeRegistry.getType ( relationship.superclassName )  ) ;^763^764^^^^757^912^[REPLACE] ObjectType superClass = ObjectType.cast ( typeRegistry.getType ( relationship.superclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType subClass = ObjectType.hasOwnProperty ( typeRegistry.getType ( relationship.subclassName )  ) ;^765^766^^^^757^912^[REPLACE] ObjectType subClass = ObjectType.cast ( typeRegistry.getType ( relationship.subclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType superCtor = type.getConstructor (  ) ;^768^^^^^757^912^[REPLACE] FunctionType superCtor = superClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^769^^^^^757^912^[ADD] FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^validator.expectSuperType ( t, n, type, subClass ) ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REMOVE]^fnType.getSuperClassConstructor (  )  ;^772^^^^^757^912^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( superCtor == null && subCtor != null )  {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType superCtor = type.cast (  ) ;^768^^^^^757^912^[REPLACE] FunctionType superCtor = superClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegatorCtor = delegatorObject.getConstructor (  )  ;^769^^^^^757^912^[REPLACE] FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( relationship.type  &&  SubclassType.INHERITS )  {^771^^^^^757^912^[REPLACE] if  ( relationship.type == SubclassType.INHERITS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (  subCtor != null )  {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^775^776^777^778^^757^912^[ADD] if  ( superCtor != null && subCtor != null )  { codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^codingConvention.applySubclassRelationship ( getterType, subCtor, relationship.type ) ;^776^777^^^^757^912^[REPLACE] codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( propName == null )  {^784^^^^^757^912^[REPLACE] if  ( singletonGetterClassName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^784^785^786^787^788^757^912^[ADD] if  ( singletonGetterClassName != null )  { ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( singletonGetterClassName )  ) ; if  ( objectType != null )  { FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( objectType == this  )  {^787^^^^^757^912^[REPLACE] if  ( objectType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^FunctionType functionType = objectType.getConstructor (  ) ;^787^788^^790^791^757^912^[ADD] if  ( objectType != null )  { FunctionType functionType = objectType.getConstructor (  ) ; if  ( functionType != null )  { FunctionType getterType = new FunctionType (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( functionType == null )  {^790^^^^^757^912^[REPLACE] if  ( functionType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^791^792^793^^^757^912^[ADD] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) ,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType functionType = type.getConstructor (  ) ;^788^^^^^757^912^[REPLACE] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, this, this, new FunctionParamBuilder ( typeRegistry ) .equals (  ) , objectType, this ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, true, true, new FunctionParamBuilder ( typeRegistry ) .equals (  ) , thisType, true ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( variableName )  ) ;^785^786^^^^757^912^[REPLACE] ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( singletonGetterClassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^788^^^^^757^912^[ADD] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, false, false, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, false ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  functionType != null  )   {  ;^787^^^^^757^912^[REPLACE] if  ( objectType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (superCtor == null )  {^790^^^^^757^912^[REPLACE] if  ( functionType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, true, true, new FunctionParamBuilder ( typeRegistry ) .build (  ) , type, true ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^788^^^^^757^912^[REPLACE] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (getterType == null )  {^790^^^^^757^912^[REPLACE] if  ( functionType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, true, true, new FunctionParamBuilder ( typeRegistry ) .equals (  ) , subClass, true ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  relationship != null  )   {  ;^803^^^^^757^912^[REPLACE] if  ( delegateRelationship != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (  delegateBaseObject != null && delegateSuperObject != null )  {^811^812^813^^^757^912^[REPLACE] if  ( delegatorObject != null && delegateBaseObject != null && delegateSuperObject != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (  delegateBaseCtor != true && delegateSuperCtor != true )  {^820^821^^^^811^843^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^820^821^822^823^824^811^843^[ADD] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  { FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry ) ; functionParamBuilder.addRequiredParams (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^826^827^828^^^820^842^[ADD] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^830^831^832^^^820^842^[ADD] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegatorCtor = type.getConstructor (  ) ;^814^^^^^811^843^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateBaseCtor = type.getConstructor (  ) ;^815^816^^^^811^843^[REPLACE] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateSuperCtor = type.getConstructor (  ) ;^817^818^^^^811^843^[REPLACE] FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^826^827^828^^^811^843^[ADD] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getConstructor (  ) , true, true, true ) ;^830^831^832^833^^811^843^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorCtor == null && delegateBaseCtor != null && delegateSuperCtor != null )  {^820^821^^^^757^912^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, true, true, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( type ) , true ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.declareType ( delegateBaseObject.getReferenceName (  ) , false, false, false ) ;^830^831^832^833^^820^842^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegatorObject = ObjectType.hasOwnProperty ( typeRegistry.getType ( delegateRelationship.delegator )  ) ;^804^805^^^^757^912^[REPLACE] ObjectType delegatorObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegator )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^806^807^^^^757^912^[ADD] ObjectType delegateBaseObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegateSuperObject = ObjectType .getConstructor (  )   ) ;^808^809^810^^^757^912^[REPLACE] ObjectType delegateSuperObject = ObjectType.cast ( typeRegistry.getType ( codingConvention.getDelegateSuperclassName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegatorCtor = ownerType.getConstructor (  ) ;^814^^^^^757^912^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateBaseCtor = superClass.getConstructor (  ) ;^815^816^^^^757^912^[REPLACE] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^817^818^^^^757^912^[ADD] FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^826^827^828^^^757^912^[ADD] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , true, true, true ) ;^830^831^832^833^^757^912^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorObject == null ) {^811^812^813^^^757^912^[REPLACE] if  ( delegatorObject != null && delegateBaseObject != null && delegateSuperObject != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorCtor == false && delegateBaseCtor != false && delegateSuperCtor != false )  {^820^821^^^^811^843^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, this, this, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , this ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , this, this, this ) ;^830^831^832^833^^820^842^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateBaseCtor = delegateBaseObject.cast (  ) ;^815^816^^^^811^843^[REPLACE] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , this, this, this ) ;^830^831^832^833^^811^843^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, false, false, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , false ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( objectLiteralCast == null )  {^848^^^^^757^912^[REPLACE] if  ( objectLiteralCast != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( type == null && type.getConstructor (  )  != null )  {^851^^^^^757^912^[REPLACE] if  ( type != null && type.getConstructor (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^objectLiteralCast.objectNode.setJSType ( type ) ;CONSTRUCTOR_EXPECTED )  ) ;^851^852^853^854^855^757^912^[ADD] if  ( type != null && type.getConstructor (  )  != null )  { objectLiteralCast.objectNode.setJSType ( type ) ; } else { compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError.make ( t .getInput ( sourceName )  , n, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , parent, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError.make ( t.getInput (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^objectLiteralCast.objectNode.setJSType ( thisType ) ;^852^^^^^757^912^[REPLACE] objectLiteralCast.objectNode.setJSType ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType type = ObjectType.cast ( typeRegistry .getJSType (  )   ) ;^849^850^^^^757^912^[REPLACE] ObjectType type = ObjectType.cast ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.getInput ( JSError.make ( t.getSourceName (  ) , parent, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^objectLiteralCast.objectNode.setJSType ( superClass ) ;^852^^^^^757^912^[REPLACE] objectLiteralCast.objectNode.setJSType ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^852^^^^^757^912^[ADD] objectLiteralCast.objectNode.setJSType ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( !t .getInput ( fnName )  .isExtern (  )  )  {^861^^^^^757^912^[REPLACE] if  ( !t.getInput (  ) .isExtern (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^nonExternFunctions.add ( parent ) ;^862^^^^^757^912^[REPLACE] nonExternFunctions.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( parametersNode.getType (  )  == Token.ASSIGN && parent.getType (  )  == Token.NAME )  {^866^867^^^^757^912^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^866^867^868^869^^757^912^[ADD] if  ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.NAME )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^return;  ;^868^^^^^866^869^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( firstChild.getType (  )  == Token.GETPROP || firstChild.isQualifiedName (  )  )  {^882^883^^^^757^912^[REPLACE] if  ( firstChild.getType (  )  == Token.GETPROP && firstChild.isQualifiedName (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , var, n, firstChild.getNext (  )  ) ;^884^885^^^^882^886^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , firstChild, n, firstChild.getNext (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, parent.getString (  ) , firstChild, n, firstChild.getNext (  )  ) ;^884^885^^^^882^886^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , firstChild, n, firstChild.getNext (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^firstChild, n, firstChild .getType (  )   ) ;^885^^^^^882^886^[REPLACE] firstChild, n, firstChild.getNext (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( parent.hasOneChild (  )  )  {^897^^^^^757^912^[REPLACE] if  ( n.hasOneChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^898^^^^^757^912^[REPLACE] checkForOldStyleTypedef ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, n, n.getJSDocInfo (  )  )  ;^899^^^^^757^912^[REPLACE] checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, parent.getLastChild (  ) , n.getJSDocInfo (  )  ) ;^899^^^^^757^912^[REPLACE] checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^rvalue.getJSDocInfo (  )  ;^899^^^^^757^912^[REPLACE] checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( parent.getType (  )  == Token.EXPR_RESULT || n.isQualifiedName (  )  )  {^905^906^^^^757^912^[REPLACE] if  ( parent.getType (  )  == Token.EXPR_RESULT && n.isQualifiedName (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, n, n.getString (  )  ) ;^907^^^^^905^909^[REPLACE] checkForTypedef ( t, n, n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, parent, n.getString (  )  ) ;^907^^^^^905^909^[REPLACE] checkForTypedef ( t, n, n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^907^^^^^905^909^[ADD] checkForTypedef ( t, n, n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, parametersNode.getJSDocInfo (  ) , n, parent, this ) ;^908^^^^^905^909^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , n, parent, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, n.getString (  ) , n, parent, null ) ;^908^^^^^905^909^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , n, parent, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^return;  ;^868^^^^^757^912^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^760^761^^^^757^912^[ADD] SubclassRelationship relationship = codingConvention.getClassesDefinedByCall ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType superClass = ObjectType .getConstructor (  )  ;^763^764^^^^757^912^[REPLACE] ObjectType superClass = ObjectType.cast ( typeRegistry.getType ( relationship.superclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType subClass = ObjectType.cast ( typeRegistry .getJSType (  )   ) ;^765^766^^^^757^912^[REPLACE] ObjectType subClass = ObjectType.cast ( typeRegistry.getType ( relationship.subclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType subCtor = subClass.getConstructor (  )  ;^768^^^^^757^912^[REPLACE] FunctionType superCtor = superClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^String singletonGetterClassName = codingConvention.getDelegateRelationship ( n ) ;^782^783^^^^757^912^[REPLACE] String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^785^786^^^^757^912^[ADD] ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( singletonGetterClassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^DelegateRelationship delegateRelationship = codingConvention.getSingletonGetterClassName ( n ) ;^801^802^^^^757^912^[REPLACE] DelegateRelationship delegateRelationship = codingConvention.getDelegateRelationship ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegatorObject = ObjectType.cast ( typeRegistry .getJSType (  )   ) ;^804^805^^^^757^912^[REPLACE] ObjectType delegatorObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegator )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegateBaseObject = ObjectType.hasOwnProperty ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^806^807^^^^757^912^[REPLACE] ObjectType delegateBaseObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType subCtor = subClass.getConstructor (  )  ;^814^^^^^757^912^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^815^816^^^^757^912^[ADD] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateSuperCtor = delegateSuperObject .getPropertyType ( ownerName )  ;^817^818^^^^757^912^[REPLACE] FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, true, true, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , true ) ;^826^827^828^^^757^912^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( ownerType.getReferenceName (  ) , this, this, this ) ;^830^831^832^833^^757^912^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectLiteralCast objectLiteralCast = codingConvention.getObjectLiteralCast ( t, parent ) ;^846^847^^^^757^912^[REPLACE] ObjectLiteralCast objectLiteralCast = codingConvention.getObjectLiteralCast ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType type = ObjectType.hasOwnProperty ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ;^849^850^^^^757^912^[REPLACE] ObjectType type = ObjectType.cast ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^Node firstChild = parent.getFirstChild (  ) ;^881^^^^^757^912^[REPLACE] Node firstChild = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  SubclassRelationship relationship  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  variableName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( info != null || !info .getTypedefType (  )   )  {^922^^^^^921^948^[REPLACE] if  ( info == null || !info.hasTypedefType (  )  )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^923^^^^^921^948^[REPLACE] return;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String typedef = rValue.getQualifiedName (  ) ;^926^^^^^921^948^[REPLACE] String typedef = candidate.getQualifiedName (  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (sourceName != null )  {^927^^^^^921^948^[REPLACE] if  ( typedef == null )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^return;^927^928^929^^^921^948^[ADD] if  ( typedef == null )  { return; }^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^928^^^^^921^948^[REPLACE] return;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.declareType ( variableName ) ;^934^^^^^921^948^[REPLACE] typeRegistry.forwardDeclareType ( typedef ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType type = info.getType (  ) .evaluate ( scope )  ;^936^^^^^921^948^[REPLACE] JSType realType = info.getTypedefType (  ) .evaluate ( scope ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( realType != null )  {^937^^^^^921^948^[REPLACE] if  ( realType == null )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^937^938^939^940^941^921^948^[ADD] if  ( realType == null )  { compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ; }^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError .make ( ownerName , var )   ) ;^938^939^940^^^921^948^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^938^939^940^^^921^948^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSError.make ( t.getSourceName (  ) , var, MALFORMED_TYPEDEF, typedef )  ) ;^939^940^^^^921^948^[REPLACE] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^940^^^^^921^948^[REPLACE] t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.createEnumType ( propName, realType ) ;^943^^^^^921^948^[REPLACE] typeRegistry.declareType ( typedef, realType ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  n.getType  (    )   == Token.GETPROP  )   {  ;^944^^^^^921^948^[REPLACE] if  ( candidate.getType (  )  == Token.GETPROP )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^944^945^946^947^^921^948^[ADD] if  ( candidate.getType (  )  == Token.GETPROP )  { defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ; }^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( var, candidate.getParent (  ) , typeRegistry.getType ( NO_TYPE ) , true ) ;^945^946^^^^921^948^[REPLACE] defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^945^946^^^^921^948^[ADD] defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( rvalue, candidate .getProp (  )  , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^945^946^^^^921^948^[REPLACE] defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareNativeFunctionType ( s, ERROR_FUNCTION_TYPE )  ;^946^^^^^921^948^[REPLACE] typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^958^959^^^^956^979^[ADD] String typedef = codingConvention.identifyTypeDefAssign ( candidate ) ; if  ( typedef != null )  {^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( sourceName == this )  {^959^^^^^956^979^[REPLACE] if  ( typedef != null )  {^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( realType != null )  {^968^^^^^956^979^[REPLACE] if  ( realType == null )  {^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^968^969^970^971^972^956^979^[ADD] if  ( realType == null )  { compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ; }^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, variableName )  ) ;^969^970^971^^^956^979^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSError .make ( functionName , lvalueNode )   ) ;^970^971^^^^956^979^[REPLACE] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^971^^^^^956^979^[REPLACE] t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSDocInfo info = candidate.getString (  ) ;^965^^^^^956^979^[REPLACE] JSDocInfo info = candidate.getJSDocInfo (  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType realType = info != null ? null : info.getType (  ) .evaluate ( scope ) ;^966^967^^^^956^979^[REPLACE] JSType realType = info == null ? null : info.getType (  ) .evaluate ( scope ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^compiler.report ( JSError.make ( t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^969^970^971^^^956^979^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, variableName )  ) ;^970^971^^^^956^979^[REPLACE] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^970^971^^^^956^979^[ADD] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSDocInfo info = rValue.getJSDocInfo (  ) ;^965^^^^^956^979^[REPLACE] JSDocInfo info = candidate.getJSDocInfo (  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType realType  =  true ;^966^967^^^^956^979^[REPLACE] JSType realType = info == null ? null : info.getType (  ) .evaluate ( scope ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  parametersNode  parent  rValue  root  rvalue  value  var  [TYPE]  String fnName  functionName  keyName  name  ownerName  propName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^993^^^^^992^1091^[REPLACE] Node ownerNode = n.getFirstChild (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String variableName = n.getQualifiedName (  )  ;^994^^^^^992^1091^[REPLACE] String ownerName = ownerNode.getQualifiedName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String qName = parent.getQualifiedName (  ) ;^995^^^^^992^1091^[REPLACE] String qName = n.getQualifiedName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String functionName = n.getFirstChild (  ) .getString (  )  ;^996^^^^^992^1091^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Preconditions.checkArgument ( qName == null ;^997^^^^^992^1091^[REPLACE] Preconditions.checkArgument ( qName != null && ownerName != null ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^997^^^^^992^1091^[REMOVE] ^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( "prototype" .evaluate ( scope )   )  {^1004^^^^^992^1091^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  parent == null  )   {  ;^1006^^^^^992^1091^[REPLACE] if  ( qVar != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1006^1007^^1009^1010^992^1091^[ADD] if  ( qVar != null )  { if  ( !qVar.isTypeInferred (  )  )  { return; }^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( qVar.isTypeInferred (  )  )  {^1007^^^^^992^1091^[REPLACE] if  ( !qVar.isTypeInferred (  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1009^^^^^992^1091^[REPLACE] return;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( !qVar .getType (  )   )  {^1007^^^^^992^1091^[REPLACE] if  ( !qVar.isTypeInferred (  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var qVar = scope.undeclare ( variableName ) ;^1005^^^^^992^1091^[REPLACE] Var qVar = scope.getVar ( qName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null && value.getType  (    )   == Token.FUNCTION  )   {  ;^1007^^^^^992^1091^[REPLACE] if  ( !qVar.isTypeInferred (  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var var = scope.getVar ( rValue.getQualifiedName (  )  )  ;^1005^^^^^992^1091^[REPLACE] Var qVar = scope.getVar ( qName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType jsType = getDeclaredTypeInAnnotation ( t, member, info )  ;^1028^^^^^992^1091^[REPLACE] JSType valueType = getDeclaredGetPropType ( t, info, n, rhsValue ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( valueType != null ) {^1029^^^^^992^1091^[REPLACE] if  ( valueType == null && rhsValue != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^valueType =  null.getJSType (  ) ;^1031^^^^^992^1091^[REPLACE] valueType = rhsValue.getJSType (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( valueType != this  )  {^1034^^^^^992^1091^[REPLACE] if  ( valueType == null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( parent.getType (  )   &&  Token.EXPR_RESULT )  {^1035^^^^^992^1091^[REPLACE] if  ( parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^}  if  ( rhsValue != null ) {^1038^1039^^^^992^1091^[REPLACE] } else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^}   ObjectType ownerType = getObjectSlot ( ownerName ) ;^1038^1039^^1041^^992^1091^[ADD] else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  { ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! type instanceof FunctionType )  {^1042^^^^^1038^1053^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1042^1043^1044^1045^1046^1038^1053^[ADD] if  ( ownerType instanceof FunctionType )  { JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ; String delegateName = codingConvention.getDelegateSuperclassName (  ) ; JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^1038^1053^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1041^^^^^1038^1053^[ADD] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getType (  ) ;^1043^^^^^1038^1053^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( n )  ;^1044^^^^^1038^1053^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType  =  null ;^1045^1046^^^^1038^1053^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! ownerType instanceof FunctionType )  {^1042^^^^^992^1091^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( parametersNode, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , false ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( n, parent, typeRegistry.getType ( BOOLEAN_TYPE ) , true ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getType (  ) ;^1043^^^^^992^1091^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( n )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType  =  null ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( delegateType == null ) {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , false ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( n, parent, typeRegistry .getNativeObjectType (  )  , true ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = getObjectSlot ( qName ) ;^1041^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( type )  )  ;^1043^^^^^992^1091^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String delegateName = codingConvention .getSingletonGetterClassName ( errorRoot )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType  = variableName ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^stubDeclarations.add ( new StubDeclaration ( n, t .getInput ( singletonGetterClassName )  .isExtern (  ) , ownerName )  ) ;^1036^1037^^^^992^1091^[REPLACE] stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^input.isExtern (  )  ;^1037^^^^^992^1091^[REPLACE] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^n.setJSType ( type )  ;^1037^^^^^992^1091^[REMOVE] ^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^n, t.getSourceName (  ) .isExtern (  ) , ownerName )  ) ;^1037^^^^^992^1091^[REPLACE] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^} else if   (  rhsValue != null && rhsValue.getType  (    )   == Token.FUNCTION  )   {  ;^1038^1039^^^^992^1091^[REPLACE] } else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! ownerType instanceof FunctionType )  {^1042^^^^^1038^1053^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( delegateType == null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^1038^1053^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = getObjectSlot ( variableName ) ;^1041^^^^^1038^1053^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1045^1046^^^^1038^1053^[ADD] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1042^1043^1044^1045^1046^992^1091^[ADD] if  ( ownerType instanceof FunctionType )  { JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ; String delegateName = codingConvention.getDelegateSuperclassName (  ) ; JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1044^^^^^992^1091^[ADD] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType = variableName != null ? null : typeRegistry.getType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( n, var, typeRegistry.getType ( BOOLEAN_TYPE ) , false ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1055^^^^^992^1091^[REPLACE] return;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = getObjectSlot ( variableName ) ;^1041^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1043^^^^^992^1091^[ADD] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType  =  typeRegistry.getType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( parent.getType (  )   !=  Token.EXPR_RESULT )  {^1035^^^^^992^1091^[REPLACE] if  ( parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1035^1036^1037^1038^^992^1091^[ADD] if  ( parent.getType (  )  == Token.EXPR_RESULT )  { stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ; } else if  ( rhsValue != null &&^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^} else if  ( rhsValue != null ) {^1038^1039^^^^992^1091^[REPLACE] } else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^1041^^^^^1038^1053^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType )  .getPrototype (  )  ;^1043^^^^^1038^1053^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType = delegateName != null ? null : typeRegistry.getType ( delegateName ) ;^1045^1046^^^^1038^1053^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! thisType instanceof FunctionType )  {^1042^^^^^992^1091^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( delegateType == null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( n, parent, typeRegistry.getType ( BOOLEAN_TYPE ) , false ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String delegateName = codingConvention .getSingletonGetterClassName ( key )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType = delegateName != null ? null : typeRegistry.declareType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1041^^^^^992^1091^[ADD] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1045^1046^^^^992^1091^[ADD] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .equals (  ) , ownerName )  ) ;^1036^1037^^^^992^1091^[REPLACE] stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1037^^^^^992^1091^[ADD] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ! superClass instanceof FunctionType )  {^1042^^^^^1038^1053^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;String delegateName = codingConvention.getDelegateSuperclassName (  ) ;null : typeRegistry.getType ( delegateName ) ;^1042^1043^1044^1045^1046^1038^1053^[ADD] if  ( ownerType instanceof FunctionType )  { JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ; String delegateName = codingConvention.getDelegateSuperclassName (  ) ; JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( delegateType == parentull && ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^1038^1053^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1047^1048^1049^1050^1051^1038^1053^[ADD] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  { defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ; }^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( type )  )  ;^1043^^^^^1038^1053^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType  =  typeRegistry.getType ( delegateName ) ;^1045^1046^^^^1038^1053^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;String delegateName = codingConvention.getDelegateSuperclassName (  ) ;null : typeRegistry.getType ( delegateName ) ;^1042^1043^1044^1045^1046^992^1091^[ADD] if  ( ownerType instanceof FunctionType )  { JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ; String delegateName = codingConvention.getDelegateSuperclassName (  ) ; JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^1041^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType delegateType  =  typeRegistry.declareType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^boolean inferred = false;^1058^^^^^992^1091^[REPLACE] boolean inferred = true;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  value != null  )   {  ;^1059^^^^^992^1091^[REPLACE] if  ( info != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1061^1062^^^^992^1091^[ADD] inferred = ! ( info.hasType (  )  || info.hasEnumParameterType (  )  || FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^inferred = ! ( info.hasType (  )   &  info.hasEnumParameterType (  )   &  FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  ) ;^1061^1062^^^^992^1091^[REPLACE] inferred = ! ( info.hasType (  )  || info.hasEnumParameterType (  )  || FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  !inferred  )   {  ;^1065^^^^^992^1091^[REPLACE] if  ( inferred )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^inferred = ! ( rhsValue == false ;^1067^1068^1069^^^992^1091^[REPLACE] inferred = ! ( rhsValue != null && rhsValue.getType (  )  == Token.FUNCTION && !scope.isDeclared ( qName, false )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^inferred = ! ( rhsValue == true ;^1067^1068^1069^^^992^1091^[REPLACE] inferred = ! ( rhsValue != null && rhsValue.getType (  )  == Token.FUNCTION && !scope.isDeclared ( qName, false )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( inferred )  {^1072^^^^^992^1091^[REPLACE] if  ( !inferred )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^ObjectType ownerType = getObjectSlot ( ownerName ) ;^1072^1073^1074^^^992^1091^[ADD] if  ( !inferred )  { ObjectType ownerType = getObjectSlot ( ownerName ) ; if  ( ownerType != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType ==type )  {^1074^^^^^992^1091^[REPLACE] if  ( ownerType != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1078^1079^1080^1081^^992^1091^[ADD] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ownerType.defineDeclaredProperty ( variableName, valueType, isExtern ) ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1083^^^^^1078^1084^[ADD] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^boolean isExtern = input.isExtern (  )  ;^1077^^^^^992^1091^[REPLACE] boolean isExtern = t.getInput (  ) .isExtern (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  ( ownerType.hasOwnProperty ( variableName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^globalThis.defineDeclaredProperty ( variableName, type, isExtern )  ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^defineSlot ( name, var, type )  ;^1083^^^^^1078^1084^[REMOVE] ^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1073^^^^^992^1091^[ADD] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^boolean.equals = t.getInput (  ) .isExtern (  ) ;^1077^^^^^992^1091^[REPLACE] boolean isExtern = t.getInput (  ) .isExtern (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  functionType != null  )   {  ;^1074^^^^^992^1091^[REPLACE] if  ( ownerType != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  ( ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ownerType.defineDeclaredProperty ( sourceName, valueType, isExtern ) ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  (  ( ownerType.hasOwnProperty ( propName )  || ownerType.getPropertyType ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ownerType .defineDeclaredProperty ( ownerTypeOfThis , searchedForThisType )  ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType fnThisType = fnType.getTypeOfThis (  )  ;^1073^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( scope.isDeclared ( qName, true )  )  {^1144^^^^^1135^1165^[REPLACE] if  ( scope.isDeclared ( qName, false )  )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( ownerType == null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  {^1154^1155^^^^1135^1165^[REPLACE] if  ( ownerType != null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1154^1155^^^1158^1135^1165^[ADD] if  ( ownerType != null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  { ownerType.defineInferredProperty (^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^typeRegistry.registerPropertyOnType ownerType ) ;^1161^1162^^^^1154^1163^[REPLACE] typeRegistry.registerPropertyOnType ( propName, ownerType == null ? unknownType : ownerType ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ownerType.defineInferredProperty ( propName, type, isExtern ) ;^1158^1159^^^^1154^1163^[REPLACE] ownerType.defineInferredProperty ( propName, unknownType, isExtern ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  scope.isDeclared  (  variableName, false  )    )   {  ;^1144^^^^^1135^1165^[REPLACE] if  ( scope.isDeclared ( qName, false )  )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^continue;^1144^1145^1146^^^1135^1165^[ADD] if  ( scope.isDeclared ( qName, false )  )  { continue; }^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1161^1162^^^^1154^1163^[ADD] typeRegistry.registerPropertyOnType ( propName, ownerType == null ? unknownType : ownerType ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ownerType.defineDeclaredProperty ( propName, unknownType, isExtern ) ;^1158^1159^^^^1154^1163^[REPLACE] ownerType.defineInferredProperty ( propName, unknownType, isExtern ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1158^1159^^^^1154^1163^[ADD] ownerType.defineInferredProperty ( propName, unknownType, isExtern ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^1137^^^^^1135^1165^[REPLACE] Node n = stub.node;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node parent = parent.getParent (  ) ;^1138^^^^^1135^1165^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String qName = parent.getQualifiedName (  ) ;^1139^^^^^1135^1165^[REPLACE] String qName = n.getQualifiedName (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1140^^^^^1135^1165^[ADD] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^CompilerInput input = compiler.getInput ( sourceName )  ;^1141^^^^^1135^1165^[REPLACE] String ownerName = stub.ownerName;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1142^^^^^1135^1165^[ADD] boolean isExtern = stub.isExtern;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = getObjectSlot ( variableName ) ;^1150^^^^^1135^1165^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType unknownType = typeRegistry.getType ( UNKNOWN_TYPE ) ;^1151^^^^^1135^1165^[REPLACE] ObjectType unknownType = typeRegistry.getNativeObjectType ( UNKNOWN_TYPE ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^CompilerInput input = compiler.getInput ( sourceName )  ;^1136^^^^^1135^1165^[REPLACE] for  ( StubDeclaration stub : stubDeclarations )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1137^1138^^^^1135^1165^[ADD] Node n = stub.node; Node parent = n.getParent (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^1138^^^^^1135^1165^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^String propName = n.getLastChild (  ) .getString (  ) ;String ownerName = stub.ownerName;boolean isExtern = stub.isExtern;^1139^1140^1141^1142^^1135^1165^[ADD] String qName = n.getQualifiedName (  ) ; String propName = n.getLastChild (  ) .getString (  ) ; String ownerName = stub.ownerName; boolean isExtern = stub.isExtern;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String propName = parent.getLastChild (  ) .getString (  ) ;^1140^^^^^1135^1165^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^ObjectType ownerType = getObjectSlot ( singletonGetterClassName ) ;^1150^^^^^1135^1165^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  n  name  node  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  StubDeclaration stub  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSDocInfo info = candidate.getJSDocInfo (  )  ;^1209^^^^^1208^1230^[REPLACE] JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo (  ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( info != null || member.getType (  )  != Token.GETPROP || member.getLastChild (  ) .getType (  )  != Token.THIS )  {^1214^1215^1216^^^1208^1230^[REPLACE] if  ( info == null || member.getType (  )  != Token.GETPROP || member.getFirstChild (  ) .getType (  )  != Token.THIS )  {^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1217^^^^^1214^1218^[REPLACE] return;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1217^^^^^1208^1230^[REPLACE] return;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^member .getLastChild (  )  .setJSType ( thisType ) ;^1220^^^^^1208^1230^[REPLACE] member.getFirstChild (  ) .setJSType ( thisType ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^( parent.getFirstChild (  )  )  ;^1220^^^^^1208^1230^[REPLACE] member.getFirstChild (  ) .setJSType ( thisType ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType valueType = getDeclaredGetPropType ( t, info, n, rhsValue )  ;^1221^^^^^1208^1230^[REPLACE] JSType jsType = getDeclaredTypeInAnnotation ( t, member, info ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = member.getFirstChild (  ) ;^1222^^^^^1208^1230^[REPLACE] Node name = member.getLastChild (  ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( jsType != null && ( name.getType (  )  != Token.NAME ) {^1223^1224^^^^1208^1230^[REPLACE] if  ( jsType != null && ( name.getType (  )  == Token.NAME || name.getType (  )  == Token.STRING )  )  {^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^thisType.getPropertyType ( name.getString (  ) , jsType, f^1225^1226^1227^1228^^1223^1229^[REPLACE] thisType.defineDeclaredProperty ( name.getString (  ) , jsType, f^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^name .getType (  )  , jsType, f }^1226^1227^1228^1229^^1223^1229^[REPLACE] name.getString (  ) , jsType, f }^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  JSDocInfo info  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( n  ||  scope.getRootNode (  )  )  return;^1262^^^^^1261^1283^[REPLACE] if  ( n == scope.getRootNode (  )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1262^^^^^1261^1283^[REPLACE] if  ( n == scope.getRootNode (  )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( n.getType (  )  == Token.LP || var == scope.getRootNode (  )  )  {^1264^^^^^1261^1283^[REPLACE] if  ( n.getType (  )  == Token.LP && parent == scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1266^^^^^1261^1283^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( parent.getType (  )   ||  Token.NAME )  {^1272^^^^^1261^1283^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^return;^1272^1273^1274^^^1261^1283^[ADD] if  ( parent.getType (  )  == Token.NAME )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^return;  ;^1273^^^^^1261^1283^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  NodeTraversal t  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node fnNameNode = fnNode.getLastChild (  ) ;^1288^^^^^1286^1305^[REPLACE] Node fnNameNode = fnNode.getFirstChild (  ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^String fnName = ownerNode.getString (  ) ;^1289^^^^^1286^1305^[REPLACE] String fnName = fnNameNode.getString (  ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( fnName.isEmpty (  )  )  {^1290^^^^^1286^1305^[REPLACE] if  ( !fnName.isEmpty (  )  )  {^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( fnVar != null ||^1292^1293^1294^1295^^1286^1305^[REPLACE] if  ( fnVar == null ||^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( fnNameNode, owner, fnNode.getJSType (  ) , true ) ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^n.getJSType (  )  ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Var qVar = scope.getVar ( qName )  ;^1291^^^^^1286^1305^[REPLACE] Scope.Var fnVar = scope.getVar ( fnName ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( ownerNode, fnNode, fnNode.getJSType (  ) , true ) ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1300^^^^^1292^1301^[ADD] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( fnNameNode, objNode, fnNode.getJSType (  ) , false ) ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Scope.Var fnVar = scope.getVar ( qName ) ;^1291^^^^^1286^1305^[REPLACE] Scope.Var fnVar = scope.getVar ( fnName ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^declareArguments ( parametersNode ) ;^1304^^^^^1286^1305^[REPLACE] declareArguments ( fnNode ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1304^^^^^1286^1305^[ADD] declareArguments ( fnNode ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Var fnVar  [TYPE]  Node candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1311^^^^^1310^1329^[ADD] Node astParameters = functionNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node body = owner.getNext (  ) ;^1312^^^^^1310^1329^[REPLACE] Node body = astParameters.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1313^^^^^1310^1329^[ADD] FunctionType functionType =  ( FunctionType )  functionNode.getJSType (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( functionType == null )  {^1314^^^^^1310^1329^[REPLACE] if  ( functionType != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  jsDocParameter != null  )   {  ;^1316^^^^^1310^1329^[REPLACE] if  ( jsDocParameters != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( jsDocParameter == null )  {^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( astParameter, functionNode, this, true ) ;^1324^^^^^1319^1325^[REPLACE] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1322^^^^^1310^1329^[ADD] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1322^^^^^1316^1327^[ADD] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node jsDocParameter = jsDocParameters.getLastChild (  ) ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node n = stub.node  ;^1318^^^^^1316^1327^[REPLACE] for  ( Node astParameter : astParameters.children (  )  )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( jsDocParameter == false )  {^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1319^1320^1321^1322^^1310^1329^[ADD] if  ( jsDocParameter != null )  { defineSlot ( astParameter, functionNode, jsDocParameter.getJSType (  ) , true ) ; jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( astParameter, functionNode, false, true ) ;^1324^^^^^1319^1325^[REPLACE] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REMOVE]^defineSlot ( name, var, type )  ;^1324^^^^^1319^1325^[REMOVE] ^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^jsDocParameter =  null.getNext (  ) ;^1322^^^^^1310^1329^[REPLACE] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node jsDocParameter = jsDocParameters.getFirstChild (  )  ;^1315^^^^^1316^1327^[REPLACE] Node jsDocParameters = functionType.getParametersNode (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node name = n.getFirstChild (  )  ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( jsDocParameters == this )  {^1316^^^^^1310^1329^[REPLACE] if  ( jsDocParameters != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if  ( jsDocParameter ==rvalue )  {^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1324^^^^^1319^1325^[ADD] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node jsDocParameter = objNode.getLastChild (  ) ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^if   (  jsDocParameters != null  )   {  ;^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^defineSlot ( astParameter, functionNode, true, true ) ;^1324^^^^^1319^1325^[REPLACE] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^for  ( Node astParameter : astParameters.getParent (  )  )  {^1318^^^^^1316^1327^[REPLACE] for  ( Node astParameter : astParameters.children (  )  )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^jsDocParameter =  null.getNext (  ) ;^1322^^^^^1316^1327^[REPLACE] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[ADD]^^1315^^^^^1316^1327^[ADD] Node jsDocParameters = functionType.getParametersNode (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Node jsDocParameter = member.getFirstChild (  ) ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] TypedScopeCreator AbstractScopeBuilder GlobalScopeBuilder StubDeclaration CollectProperties LocalScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^Scope scope;^237^^^^^^^[REPLACE] final Scope scope;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] AbstractScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^private String sourceName = false;^242^^^^^^^[REPLACE] private String sourceName = null;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] AbstractScopeBuilder   [TYPE]  Node astParameter  astParameters  body  candidate  catchName  errorRoot  firstChild  fnNameNode  fnNode  fnRoot  functionNode  jsDocParameter  jsDocParameters  key  lvalue  lvalueNode  maybeOwner  member  n  name  node  nodeWithJsDocInfo  objNode  owner  ownerNode  parametersNode  parent  rValue  rhsValue  root  rvalue  value  var  [TYPE]  FunctionType functionType  [TYPE]  String delegateName  fnName  functionName  keyName  name  ownerName  propName  qName  singletonGetterClassName  slotName  sourceName  typedef  variableName  [TYPE]  TypeValidator validator  [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  fnThisType  globalThis  iface  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  inferred  isExtern  isFnLiteral  searchedForThisType  shouldDeclareOnGlobalThis  true  [TYPE]  Scope newScope  parent  s  scope  [TYPE]  DiagnosticType CONSTRUCTOR_EXPECTED  ENUM_INITIALIZER  MALFORMED_TYPEDEF  [TYPE]  CodingConvention codingConvention  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  Map delegateProxyMap 
[REPLACE]^JSType jsType = true;^278^^^^^277^321^[REPLACE] JSType jsType = null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^Node objNode  =  null;^279^280^^^^277^321^[REPLACE] Node objNode = node.getType (  )  == Token.GETPROP ? node.getFirstChild (  )  : null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  info == null  )   {  ;^281^^^^^277^321^[REPLACE] if  ( info != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^282^^^^^277^321^[REPLACE] if  ( info.hasType (  )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration  (  info  )    )   {  ;^284^^^^^277^321^[REPLACE] } else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return false;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode == null )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^302^303^304^305^306^277^321^[ADD] if  ( objNode != null )  { if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { builder.inferThisType ( info, objNode.getFirstChild (  )  ) ; searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^303^304^305^306^^277^321^[ADD] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  { builder.inferThisType ( info, objNode.getFirstChild (  )  ) ; searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  else {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^searchedForThisType = false;^309^^^^^277^321^[REPLACE] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^306^^^^^303^310^[ADD] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   &&  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^309^^^^^277^321^[ADD] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^searchedForThisType = false;^306^^^^^277^321^[REPLACE] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  ( objNode.getType (  )   ||  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^searchedForThisType = false;^306^^^^^303^310^[REPLACE] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  ( objNode.getType (  )   &&  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( searchedForThisType )  {^313^^^^^277^321^[REPLACE] if  ( !searchedForThisType )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^313^314^315^^^277^321^[ADD] if  ( !searchedForThisType )  { builder.inferThisType ( info,  ( Node )  null ) ; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder.inferThisType ( info,  ( Node )  false ) ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^jsType =  null.buildAndRegister (  ) ;^317^^^^^277^321^[REPLACE] jsType = builder.buildAndRegister (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return true;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String fnName = objNode .isQualifiedName (  )  ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, objNode, sourceName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^boolean searchedForThisType = true;^301^^^^^277^321^[REPLACE] boolean searchedForThisType = false;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (  typeRegistry.getType ( sourceName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^288^289^290^^^277^321^[ADD] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  { return null; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (node == null )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .getString (  ) .inferReturnType ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^}   builder.inferThisType ( info, objNode.getJSType (  )  ) ;searchedForThisType = true;^307^308^309^310^^277^321^[ADD] else if  ( objNode.getType (  )  == Token.THIS )  { builder.inferThisType ( info, objNode.getJSType (  )  ) ; searchedForThisType = true; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   ||  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  ( objNode.getType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder.inferThisType ( info,  ( Node )  true ) ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REMOVE]^compiler.report ( make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  )  ;^314^^^^^277^321^[REMOVE] ^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return this;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^285^286^^288^289^277^321^[ADD] String fnName = node.getQualifiedName (  ) ;  if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  { return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, fnName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^301^^^^^277^321^[ADD] boolean searchedForThisType = false;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^jsType =  null.getType (  ) .evaluate ( scope ) ;^283^^^^^277^321^[REPLACE] jsType = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^284^^^^^277^321^[REPLACE] } else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^}^284^285^^^^277^321^[ADD] else if  ( FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  { String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  info != null  )   {  ;^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.setJSType (  )   ||  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( !true )  {^313^^^^^277^321^[REPLACE] if  ( !searchedForThisType )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^314^^^^^277^321^[ADD] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^FunctionTypeBuilder builder = new FunctionTypeBuilder ( sourceName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^292^293^294^295^^277^321^[REPLACE] FunctionTypeBuilder builder = new FunctionTypeBuilder ( fnName, compiler, node, sourceName, scope ) .inferTemplateTypeName ( info )^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.declareType ( fnName )  == this )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^}   searchedForThisType = true;^307^308^309^310^^277^321^[ADD] else if  ( objNode.getType (  )  == Token.THIS )  { builder.inferThisType ( info, objNode.getJSType (  )  ) ; searchedForThisType = true; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^283^^^^^277^321^[ADD] jsType = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return null;  ;^289^^^^^277^321^[REPLACE] return null;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.declareType ( fnName )  == false )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode == false )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.setJSType (  )   !=  Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (  objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^}  if  ( objNode.getType (  )   ) {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^313^^^^^277^321^[REPLACE] if  ( !searchedForThisType )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^builder.inferThisType ( info,  ( Node )  null ) ;^313^314^315^^^277^321^[ADD] if  ( !searchedForThisType )  { builder.inferThisType ( info,  ( Node )  null ) ; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^builder.inferThisType ( info,  ( Node )  this ) ;^314^^^^^277^321^[REPLACE] builder.inferThisType ( info,  ( Node )  null ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String fnName = objNode.getQualifiedName (  ) ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info.isConstructor (  )  && typeRegistry.declareType ( sourceName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode.getType (  )  == Token.GETPROP ) {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( info .hasEnumParameterType (  )   && typeRegistry.getType ( fnName )  == null )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( node.getType (  )  == Token.GETPROP || objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^303^304^^^^277^321^[REPLACE] if  ( objNode.getType (  )  == Token.GETPROP && objNode.getLastChild (  ) .getString (  ) .equals ( "prototype" )  )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^} else if  (   Token.THIS )  {^307^^^^^277^321^[REPLACE] } else if  ( objNode.getType (  )  == Token.THIS )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^String variableName = n.getQualifiedName (  )  ;^285^^^^^277^321^[REPLACE] String fnName = node.getQualifiedName (  ) ;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  (  typeRegistry .getJSType (  )   == true )  {^288^^^^^277^321^[REPLACE] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^return null;^288^289^290^^^277^321^[ADD] if  ( info.isConstructor (  )  && typeRegistry.getType ( fnName )  != null )  { return null; }^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^if  ( objNode ==node )  {^302^^^^^277^321^[REPLACE] if  ( objNode != null )  {^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[ADD]^^306^^^^^277^321^[ADD] searchedForThisType = true;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^return jsType;  ;^320^^^^^277^321^[REPLACE] return jsType;^[METHOD] getDeclaredTypeInAnnotation [TYPE] JSType [PARAMETER] String sourceName Node node JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  JSType jsType  [TYPE]  boolean false  searchedForThisType  true  [TYPE]  Scope scope  [TYPE]  Node node  objNode  [TYPE]  String fnName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  FunctionTypeBuilder builder 
[REPLACE]^Preconditions.checkState ( sourceName == null ) ;^334^^^^^333^401^[REPLACE] Preconditions.checkState ( sourceName != null ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^334^^^^^333^401^[ADD] Preconditions.checkState ( sourceName != null ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^Node rvalue = n.getLastChild (  )  ;^336^^^^^333^401^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^if  ( n.getChildCount (  )   !=  1 )  {^344^^^^^333^401^[REPLACE] if  ( n.getChildCount (  )  > 1 )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^344^345^^347^348^333^401^[ADD] if  ( n.getChildCount (  )  > 1 )  { if  ( info != null )  { compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^353^^^^^344^356^[ADD] Node name = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^if  ( info == true )  {^345^^^^^333^401^[REPLACE] if  ( info != null )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^compiler.report ( make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  )  ;^347^^^^^333^401^[REPLACE] compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REMOVE]^builder.inferThisType ( info,  (  ( Node )   ( null )  )  )  ;^347^^^^^333^401^[REMOVE] ^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^349^350^351^^^344^352^[ADD] for  ( Node name : n.children (  )  )  { defineName ( name, n, parent, name.getJSDocInfo (  )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^if  ( info == this  )  {^345^^^^^333^401^[REPLACE] if  ( info != null )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^345^346^347^348^^333^401^[ADD] if  ( info != null )  {  compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, MULTIPLE_VAR_DEF )  ) ;^347^^^^^333^401^[REPLACE] compiler.report ( JSError.make ( sourceName, n, MULTIPLE_VAR_DEF )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^369^^^^^333^401^[REPLACE] if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^defineSlot ( parent.getLastChild (  ) , n, functionType ) ;^370^^^^^333^401^[REPLACE] defineSlot ( n.getFirstChild (  ) , n, functionType ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^if  (  info != null && info.isConstructor (  )  )  {^387^388^^^^333^401^[REPLACE] if  ( rvalue.getType (  )  == Token.FUNCTION || info != null && info.isConstructor (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^}  if  ( info == null && info.hasEnumParameterType (  )  )  {^391^^^^^333^401^[REPLACE] } else if  ( info != null && info.hasEnumParameterType (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^lvalue.setJSType ( getEnumType ( lvalue.isQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^392^393^394^^^333^401^[REPLACE] lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^getEnumType ( lvalue.isQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^393^394^^^^333^401^[REPLACE] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^getEnumType ( rvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^393^394^^^^333^401^[REPLACE] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^info.hasEnumParameterType (  ) .evaluate ( scope )  )  ) ;^394^^^^^333^401^[REPLACE] info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^info .hasEnumParameterType (  )  .evaluate ( scope )  )  ) ;^394^^^^^333^401^[REPLACE] info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^getFunctionType ( name.getQualifiedName (  ) , rvalue, info, lvalue ) ;^389^390^^^^387^395^[REPLACE] getFunctionType ( lvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^getFunctionType ( rvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ;^389^390^^^^387^395^[REPLACE] getFunctionType ( lvalue.getQualifiedName (  ) , rvalue, info, lvalue ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^}  if  (  info.hasEnumParameterType (  )  )  {^391^^^^^333^401^[REPLACE] } else if  ( info != null && info.hasEnumParameterType (  )  )  {^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^}   info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^391^392^393^394^395^333^401^[ADD] else if  ( info != null && info.hasEnumParameterType (  )  )  { lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^lvalue.setJSType ( getEnumType ( rvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^392^393^394^^^333^401^[REPLACE] lvalue.setJSType ( getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^393^394^395^^^333^401^[ADD] getEnumType ( lvalue.getQualifiedName (  ) , n, rvalue, info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ; }^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^394^^^^^333^401^[ADD] info.getEnumParameterType (  ) .evaluate ( scope )  )  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^info  =  rvalue.getJSDocInfo (  ) ;^386^^^^^344^352^[REPLACE] info =  ( info != null )  ? info : rvalue.getJSDocInfo (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^Node key = value.getFirstChild (  )  ;^339^^^^^344^352^[REPLACE] Node catchName = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^Node key = value.getFirstChild (  )  ;^353^^^^^344^352^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^int nameType = parent.getType (  ) ;^360^^^^^344^352^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^366^^^^^344^352^[REPLACE] String functionName = n.getFirstChild (  ) .getString (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[ADD]^^367^368^^^^344^352^[ADD] FunctionType functionType = getFunctionType ( functionName, n, info, null ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^Node rvalue = parent.getFirstChild (  ) ;^384^^^^^344^352^[REPLACE] Node rvalue = n.getLastChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^Node lvalue = parent.getFirstChild (  ) ;^385^^^^^344^352^[REPLACE] Node lvalue = n.getFirstChild (  ) ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^return ;^399^^^^^344^352^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] define [TYPE] void [PARAMETER] Node n Node parent [CLASS] AbstractScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node catchName  lvalue  n  name  parent  rvalue  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info  [TYPE]  int parentType 
[REPLACE]^Node value = var.getFirstChild (  ) ;^413^^^^^412^441^[REPLACE] Node value = name.getFirstChild (  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.FUNCTION )  {^415^^^^^412^441^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^415^416^417^418^419^412^441^[ADD] if  ( value != null && value.getType (  )  == Token.FUNCTION )  {  String functionName = name.getString (  ) ; FunctionType functionType = getFunctionType ( functionName, value, info, null ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != true )  {^424^^^^^415^440^[REPLACE] if  ( info == null )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  else {^430^^^^^415^440^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^}   info.getEnumParameterType (  ) .evaluate ( scope )  ) ;type = getFunctionType ( name.getString (  ) , value, info, name ) ;^430^431^432^433^434^415^440^[ADD] else if  ( info.hasEnumParameterType (  )  )  { type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ; } else if  ( info.isConstructor (  )  )  { type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  if  ( info.hasType (  )  )  {^433^^^^^415^440^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, null, info ) ;^436^^^^^433^437^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^434^^^^^415^440^[ADD] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getFunctionType ( var.getString (  ) , value, info, var ) ;^434^^^^^415^440^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, var, info ) ;^436^^^^^415^440^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^431^432^^^^415^440^[ADD] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  else {^433^^^^^415^440^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, var, info ) ;^436^^^^^433^437^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : this;^428^429^^^^415^440^[REPLACE] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isFnLiteral =  ( rValue != null )  &&  (  ( rValue.getType (  )  )  ==  ( FUNCTION )  )  ;^426^^^^^415^440^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  if  ( info.hasEnumParameterType (  )  )  {^430^^^^^415^440^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^436^^^^^415^440^[ADD] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getEnumType ( var.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^415^440^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^JSType type = true;^423^^^^^415^440^[REPLACE] JSType type = null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^String functionName = n.getFirstChild (  ) .getString (  )  ;^417^^^^^412^441^[REPLACE] String functionName = name.getString (  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType functionType = getFunctionType ( functionName, value, info, this ) ;^418^419^^^^412^441^[REPLACE] FunctionType functionType = getFunctionType ( functionName, value, info, null ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != null )  {^424^^^^^412^441^[REPLACE] if  ( info == null )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^424^425^426^427^428^412^441^[ADD] if  ( info == null )  {  CompilerInput input = compiler.getInput ( sourceName ) ; Preconditions.checkNotNull ( input, sourceName ) ; type = input.isExtern (  )  ?^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^} else if   (  info != null && info.hasEnumParameterType  (    )    )   {  ;^430^^^^^412^441^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^}   info.getEnumParameterType (  ) .evaluate ( scope )  ) ;type = getFunctionType ( name.getString (  ) , value, info, name ) ;^430^431^432^433^434^412^441^[ADD] else if  ( info.hasEnumParameterType (  )  )  { type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ; } else if  ( info.isConstructor (  )  )  { type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  if  ( info.hasType (  )  )  {^433^^^^^412^441^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^434^^^^^412^441^[ADD] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getFunctionType ( var.getString (  ) , value, info, var ) ;^434^^^^^412^441^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getDeclaredTypeInAnnotation ( sourceName, var, info ) ;^436^^^^^412^441^[REPLACE] type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getEnumType ( var.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^412^441^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  else {^433^^^^^412^441^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^}   type = getFunctionType ( name.getString (  ) , value, info, name ) ;type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ;^433^434^435^436^437^412^441^[ADD] else if  ( info.isConstructor (  )  )  { type = getFunctionType ( name.getString (  ) , value, info, name ) ; } else { type = getDeclaredTypeInAnnotation ( sourceName, name, info ) ; }^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^428^429^^^^412^441^[ADD] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^CompilerInput input = compiler .report (  )  ;^426^^^^^412^441^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  else {^430^^^^^412^441^[REPLACE] } else if  ( info.hasEnumParameterType (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^}  if  ( info.isConstructor (  )  )  {^433^^^^^412^441^[REPLACE] } else if  ( info.isConstructor (  )  )  {^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getEnumType ( null.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^431^432^^^^412^441^[REPLACE] type = getEnumType ( name.getString (  ) , var, value, info.getEnumParameterType (  ) .evaluate ( scope )  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  getFunctionType ( null.getString (  ) , value, info, null ) ;^434^^^^^412^441^[REPLACE] type = getFunctionType ( name.getString (  ) , value, info, name ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : true;^428^429^^^^412^441^[REPLACE] type = input.isExtern (  )  ? typeRegistry.getNativeType ( UNKNOWN_TYPE )  : null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^417^^^^^412^441^[ADD] String functionName = name.getString (  ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType functionType = getFunctionType ( functionName, value, info, false ) ;^418^419^^^^412^441^[REPLACE] FunctionType functionType = getFunctionType ( functionName, value, info, null ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^EnumType enumType = null  ;^423^^^^^412^441^[REPLACE] JSType type = null;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isFnLiteral =  ( rValue != null )  &&  (  ( rValue.getType (  )  )  ==  ( FUNCTION )  )  ;^426^^^^^412^441^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineName [TYPE] void [PARAMETER] Node name Node var Node parent JSDocInfo info [CLASS] AbstractScopeBuilder   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node name  parent  value  var  [TYPE]  FunctionType functionType  [TYPE]  String fnName  functionName  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType functionType = this;^456^^^^^455^548^[REPLACE] FunctionType functionType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( rValue == null && rValue.isQualifiedName (  )  )  {^459^^^^^455^548^[REPLACE] if  ( rValue != null && rValue.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  var.getType (  )  instanceof FunctionType )  {^461^^^^^455^548^[REPLACE] if  ( var != null && var.getType (  )  instanceof FunctionType )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( propType == null ) {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.declareType ( name, propType.getPrototype (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.declareType ( name, propType .getPrototype (  )   ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  (  ( FunctionType )   ( type )  )  ;^462^^^^^455^548^[REPLACE] functionType =  ( FunctionType )  var.getType (  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( functionType == null && functionType.isConstructor (  )  )  {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.declareType ( name, enumType.getElementsType (  )  )  ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^return propType;^467^^^^^455^548^[REPLACE] return functionType;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( parametersNode.getQualifiedName (  )  ) ;^460^^^^^455^548^[REPLACE] Var var = scope.getVar ( rValue.getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.declareType ( sourceName, functionType.getInstanceType (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^464^^^^^455^548^[ADD] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^462^^^^^455^548^[ADD] functionType =  ( FunctionType )  var.getType (  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( propType == null && functionType.isConstructor (  )  )  {^463^^^^^455^548^[REPLACE] if  ( functionType != null && functionType.isConstructor (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.createEnumType ( sourceName, functionType.getInstanceType (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.declareType ( name, functionType.getPrototype (  )  ) ;^464^^^^^455^548^[REPLACE] typeRegistry.declareType ( name, functionType.getInstanceType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( parametersNode.isQualifiedName (  )  ) ;^460^^^^^455^548^[REPLACE] Var var = scope.getVar ( rValue.getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Node owner = this;^470^^^^^455^548^[REPLACE] Node owner = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  objNode != null  )   {  ;^471^^^^^455^548^[REPLACE] if  ( lvalueNode != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^owner = getPrototypePropertyOwner ( lvalueNode ) ;^471^472^473^^^455^548^[ADD] if  ( lvalueNode != null )  { owner = getPrototypePropertyOwner ( lvalueNode ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^owner =  getPrototypePropertyOwner ( null ) ;^472^^^^^455^548^[REPLACE] owner = getPrototypePropertyOwner ( lvalueNode ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^owner =  getPrototypePropertyOwner ( rValue ) ;^472^^^^^455^548^[REPLACE] owner = getPrototypePropertyOwner ( lvalueNode ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Node fnRoot =  ( isFnLiteral )  ? rValue : null  ;^475^^^^^455^548^[REPLACE] Node errorRoot = rValue == null ? lvalueNode : rValue;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isFnLiteral = rValue == this ;^476^477^^^^455^548^[REPLACE] boolean isFnLiteral = rValue != null && rValue.getType (  )  == Token.FUNCTION;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Node fnRoot = true ? rValue : false;^478^^^^^455^548^[REPLACE] Node fnRoot = isFnLiteral ? rValue : null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^479^480^^^^455^548^[ADD] Node parametersNode = isFnLiteral ? rValue.getFirstChild (  ) .getNext (  )  : null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( functionType != null && info != null && info.hasType (  )  )  {^482^^^^^455^548^[REPLACE] if  ( functionType == null && info != null && info.hasType (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( type.restrictByNotNullOrUndefined (  )  )  {^487^^^^^455^548^[REPLACE] if  ( type.isFunctionType (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^488^489^^^^455^548^[ADD] functionType =  ( FunctionType )  type; functionType.setJSDocInfo ( info ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^type =  null.restrictByNotNullOrUndefined (  ) ;^486^^^^^455^548^[REPLACE] type = type.restrictByNotNullOrUndefined (  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  (  ( FunctionType )   ( var.getType (  )  )  )  ;^488^^^^^455^548^[REPLACE] functionType =  ( FunctionType )  type;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^JSType propType = ownerType.getPropertyType ( propName )  ;^483^^^^^455^548^[REPLACE] JSType type = info.getType (  ) .evaluate ( scope ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^487^^^^^455^548^[REPLACE] if  ( type.isFunctionType (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^enumType =  (  ( EnumType )   ( var.getType (  )  )  )  ;^488^^^^^455^548^[REPLACE] functionType =  ( FunctionType )  type;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( functionType != null )  {^493^^^^^455^548^[REPLACE] if  ( functionType == null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^494^495^^^^455^548^[REPLACE] if  ( info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^494^525^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^502^503^504^505^^494^525^[ADD] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  { Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( var == null )  {^506^^^^^502^524^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == null )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^propType =  findOverriddenFunction ( null, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^502^524^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( propType == null )  {^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^515^516^517^^^502^524^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^502^524^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( type )  )  ;^507^^^^^502^524^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^508^^^^^502^524^[ADD] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (functionType == null )  {^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^514^515^516^517^518^502^524^[ADD] if  ( propType != null )  { functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( rValue.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^502^524^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( var .getType (  )   ) ;^507^^^^^502^524^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = false;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( var == null )  {^506^^^^^494^525^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == null )  {^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^propType =  findOverriddenFunction ( null, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^494^525^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  enumType == null  )   {  ;^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^494^525^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^510^511^^^^494^525^[ADD] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( var .getType (  )   ) ;^507^^^^^494^525^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^EnumType enumType = null  ;^508^^^^^494^525^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == true )  {^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( propType == null )  {^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^515^516^517^^^494^525^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( rValue .getLastChild (  )  .getQualifiedName (  )  ) ;^504^505^^^^494^525^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^507^^^^^494^525^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = false;^508^^^^^494^525^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( lvalueNode != null && lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^455^548^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^502^503^504^505^^455^548^[ADD] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  { Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  info != null  )   {  ;^506^^^^^502^524^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == this )  {^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( null, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^502^524^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^507^^^^^502^524^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^EnumType enumType = null  ;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  enumType == null  )   {  ;^509^^^^^502^524^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  enumType == null  )   {  ;^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( rValue.getLastChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^502^524^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( var == null )  {^506^^^^^455^548^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == null )  {^509^^^^^455^548^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^509^510^511^512^^455^548^[ADD] if  ( ownerType != null )  { propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^propType =  findOverriddenFunction ( null, lvalueNode.getLastChild (  ) .getString (  )  ) ;^510^511^^^^455^548^[REPLACE] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( propType == null )  {^514^^^^^455^548^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^455^548^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^510^511^^^^455^548^[ADD] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( null, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^455^548^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^FunctionType propType = null;^507^508^^^^455^548^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = false;^508^^^^^455^548^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^515^516^517^^^455^548^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( rValue.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^455^548^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( type )  )  ;^507^^^^^455^548^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^EnumType enumType = null  ;^508^^^^^455^548^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^} else if   (  FunctionTypeBuilder.isFunctionTypeDeclaration  (  info  )    )   {  ;^494^495^^^^455^548^[REPLACE] if  ( info == null || !FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( lvalueNode != null && lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^494^525^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( var == this  )  {^506^^^^^502^524^[REPLACE] if  ( var != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^506^507^508^509^510^502^524^[ADD] if  ( var != null )  { ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null; if  ( ownerType != null )  { propType = findOverriddenFunction (^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( functionType == null )  {^514^^^^^502^524^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^FunctionType propType = null;^507^508^^^^502^524^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = true;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^510^511^^^^502^524^[ADD] propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^504^505^^^^502^524^[ADD] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = ObjectType.getPropertyType ( var.getType (  )  ) ;^507^^^^^502^524^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = this;^508^^^^^502^524^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;FunctionType propType = null;^506^507^508^509^510^494^525^[ADD] if  ( var != null )  { ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null; if  ( ownerType != null )  { propType = findOverriddenFunction (^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == this )  {^509^^^^^494^525^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( null, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^515^516^517^518^^494^525^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType fnType =  (  ( FunctionType )   ( type )  )  ;^507^^^^^494^525^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = true;^508^^^^^494^525^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^509^510^511^512^^494^525^[ADD] if  ( ownerType != null )  { propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( propType == this )  {^514^^^^^494^525^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^Var var = scope.getVar ( parametersNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^504^505^^^^494^525^[REPLACE] Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = this;^508^^^^^494^525^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  lvalueNode.getType (  )  != Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^502^503^^^^455^548^[REPLACE] if  ( lvalueNode != null && lvalueNode.getType (  )  == Token.GETPROP && lvalueNode.isQualifiedName (  )  )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^509^510^511^512^^502^524^[ADD] if  ( ownerType != null )  { propType = findOverriddenFunction ( ownerType, lvalueNode.getLastChild (  ) .getString (  )  ) ; }^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^507^508^^^^502^524^[ADD] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ; FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == true )  {^509^^^^^455^548^[REPLACE] if  ( ownerType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = ObjectType .defineDeclaredProperty ( sourceName , type , false )  ;^507^^^^^455^548^[REPLACE] ObjectType ownerType = ObjectType.cast ( var.getType (  )  ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^508^^^^^455^548^[ADD] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (functionType == null )  {^514^^^^^455^548^[REPLACE] if  ( propType != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionType propType = this;^508^^^^^455^548^[REPLACE] FunctionType propType = null;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( functionType != true )  {^528^^^^^455^548^[REPLACE] if  ( functionType == null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^528^529^530^531^532^455^548^[ADD] if  ( functionType == null )  { functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[ADD]^^529^530^531^^^455^548^[ADD] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^functionType =  new FunctionTypeBuilder ( sourceName, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^529^530^531^532^^455^548^[REPLACE] functionType = new FunctionTypeBuilder ( name, compiler, errorRoot, sourceName, scope ) .setSourceNode ( fnRoot )^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( rValue == false )  {^542^^^^^455^548^[REPLACE] if  ( rValue != null )  {^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^rValue.setJSType ( propType ) ;^543^^^^^455^548^[REPLACE] rValue.setJSType ( functionType ) ;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^return functionType;  ;^547^^^^^455^548^[REPLACE] return functionType;^[METHOD] getFunctionType [TYPE] FunctionType [PARAMETER] String name Node rValue JSDocInfo info Node lvalueNode [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType ownerType  [TYPE]  boolean false  isFnLiteral  true  [TYPE]  JSType type  [TYPE]  Scope scope  [TYPE]  Var var  [TYPE]  Node errorRoot  fnRoot  lvalueNode  owner  parametersNode  rValue  [TYPE]  FunctionType functionType  propType  [TYPE]  String fnName  functionName  name  sourceName  [TYPE]  JSDocInfo info 
[REPLACE]^JSType type = info.getType (  ) .evaluate ( scope )  ;^557^^^^^554^573^[REPLACE] JSType propType = ownerType.getPropertyType ( propName ) ;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^558^^^^^554^573^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[ADD]^return  ( FunctionType )  propType;^558^559^560^^^554^573^[ADD] if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType; } else {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^566^^^^^558^570^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[ADD]^return  ( FunctionType )  propType;^566^567^568^^^558^570^[ADD] if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType; }^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[ADD]^^563^564^565^566^567^558^570^[ADD] for  ( ObjectType iface : ownerType.getCtorImplementedInterfaces (  )  )  { propType = iface.getPropertyType ( propName ) ; if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[ADD]^^565^566^567^568^^558^570^[ADD] propType = iface.getPropertyType ( propName ) ; if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType; }^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^return getDeclaredTypeInAnnotation  (  t.getSourceName  (    )  , node, info  )  ;  ;^567^^^^^558^570^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^return getDeclaredTypeInAnnotation  (  t.getSourceName  (    )  , node, info  )  ;  ;^559^^^^^554^573^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^if  ( ! propType instanceof FunctionType )  {^566^^^^^554^573^[REPLACE] if  ( propType instanceof FunctionType )  {^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^return getDeclaredTypeInAnnotation  (  t.getSourceName  (    )  , node, info  )  ;  ;^567^^^^^554^573^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[ADD]^^563^564^565^566^567^560^570^[ADD] for  ( ObjectType iface : ownerType.getCtorImplementedInterfaces (  )  )  { propType = iface.getPropertyType ( propName ) ; if  ( propType instanceof FunctionType )  { return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^propType =  null.getPropertyType ( propName ) ;^565^^^^^560^570^[REPLACE] propType = iface.getPropertyType ( propName ) ;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^return getDeclaredTypeInAnnotation  (  t.getSourceName  (    )  , node, info  )  ;  ;^559^^^^^560^570^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^return getDeclaredTypeInAnnotation  (  t.getSourceName  (    )  , node, info  )  ;  ;^567^^^^^560^570^[REPLACE] return  ( FunctionType )  propType;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^return false;^572^^^^^554^573^[REPLACE] return null;^[METHOD] findOverriddenFunction [TYPE] FunctionType [PARAMETER] ObjectType ownerType String propName [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType iface  ownerType  [TYPE]  String fnName  functionName  name  propName  sourceName  [TYPE]  JSType propType  [TYPE]  boolean false  true  [TYPE]  Scope scope 
[REPLACE]^JSType type = null  ;^590^^^^^589^631^[REPLACE] EnumType enumType = null;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  (parent == null )  {^593^^^^^589^631^[REPLACE] if  ( value != null )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  (   Token.OBJECTLIT )  {^594^^^^^589^631^[REPLACE] if  ( value.getType (  )  == Token.OBJECTLIT )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^}  if  ( value.isQualifiedName (  )  )  {^614^^^^^589^631^[REPLACE] } else if  ( value.isQualifiedName (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if   (  var != null && var.getType  (    )   instanceof FunctionType  )   {  ;^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^617^^^^^589^631^[ADD] enumType =  ( EnumType )  var.getType (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^functionType =  (  ( FunctionType )   ( var.getType (  )  )  )  ;^617^^^^^589^631^[REPLACE] enumType =  ( EnumType )  var.getType (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^Var var = scope.getVar ( parent.getQualifiedName (  )  ) ;^615^^^^^589^631^[REPLACE] Var var = scope.getVar ( value.getQualifiedName (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^enumType =  ( EnumType )  var.getType (  ) ;^616^617^618^^^589^631^[ADD] if  ( var != null && var.getType (  )  instanceof EnumType )  { enumType =  ( EnumType )  var.getType (  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^Var var = scope.getVar ( lvalueNode.getFirstChild (  ) .getQualifiedName (  )  )  ;^615^^^^^589^631^[REPLACE] Var var = scope.getVar ( value.getQualifiedName (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( enumType.hasOwnProperty ( sourceName )  )  {^603^^^^^589^631^[REPLACE] if  ( enumType.hasOwnProperty ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^}  else {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^enumType.hasOwnProperty ( sourceName ) ;^609^^^^^605^610^[REPLACE] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^609^^^^^605^610^[ADD] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, ENUM_NOT_CONSTANT, keyName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  )  ;^607^^^^^589^631^[REPLACE] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, sourceName )  ) ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  )  ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^} else if  ( !codingConvention.isValidEnumKey ( parentName )  )  {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^enumType.hasOwnProperty ( keyName ) ;^609^^^^^605^610^[REPLACE] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, propName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^enumType =  typeRegistry.createEnumType ( propName, elementsType ) ;^596^^^^^589^631^[REPLACE] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^key =  parent.getNext (  ) ;^611^^^^^589^631^[REPLACE] key = key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^612^^^^^589^631^[ADD] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^Node key = parent.getFirstChild (  ) ;^599^^^^^589^631^[REPLACE] Node key = value.getFirstChild (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^String parentName = NodeUtil.getStringValue ( key ) ;^601^^^^^589^631^[REPLACE] String keyName = NodeUtil.getStringValue ( key ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^enumType.defineElement ( sourceName ) ;^609^^^^^605^610^[REPLACE] enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, sourceName )  ) ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^607^^^^^589^631^[ADD] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( JSError.make ( sourceName, parent, ENUM_DUP, keyName )  ) ;^604^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^} else if  ( codingConvention.isValidEnumKey ( keyName )  )  {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^}   JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;enumType.defineElement ( keyName ) ;^605^606^607^608^609^589^631^[ADD] else if  ( !codingConvention.isValidEnumKey ( keyName )  )  { compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ; } else { enumType.defineElement ( keyName ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler .getInput ( functionName )  ;^606^607^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, sourceName )  ) ;^607^^^^^589^631^[REPLACE] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( var == this && var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^functionType =  (  ( FunctionType )   ( type )  )  ;^617^^^^^589^631^[REPLACE] enumType =  ( EnumType )  var.getType (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( var == true && var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^enumType =  typeRegistry.createEnumType ( null, elementsType ) ;^596^^^^^589^631^[REPLACE] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( value.getType (  )   &&  Token.OBJECTLIT )  {^594^^^^^589^631^[REPLACE] if  ( value.getType (  )  == Token.OBJECTLIT )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^594^595^596^^^589^631^[ADD] if  ( value.getType (  )  == Token.OBJECTLIT )  {  enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^614^^^^^589^631^[REPLACE] } else if  ( value.isQualifiedName (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( var == null ) {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^604^^^^^589^631^[ADD] compiler.report ( JSError.make ( sourceName, key, ENUM_DUP, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^}  if  ( codingConvention.isValidEnumKey ( keyName )  )  {^605^^^^^589^631^[REPLACE] } else if  ( !codingConvention.isValidEnumKey ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REMOVE]^( codingConvention.isValidEnumKey ( keyName )  )  ;^609^^^^^605^610^[REMOVE] ^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^enumType =  typeRegistry.createEnumType ( sourceName, elementsType ) ;^596^^^^^589^631^[REPLACE] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^key  =  key.getNext (  ) ;^612^^^^^589^631^[REPLACE] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^Node key = value.getLastChild (  ) ;^599^^^^^589^631^[REPLACE] Node key = value.getFirstChild (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( enumType.defineElement ( keyName )  )  {^603^^^^^589^631^[REPLACE] if  ( enumType.hasOwnProperty ( keyName )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^JSError.make ( sourceName, parent, ENUM_NOT_CONSTANT, keyName )  ) ;^607^^^^^589^631^[REPLACE] JSError.make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^}  else {^614^^^^^589^631^[REPLACE] } else if  ( value.isQualifiedName (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  (  var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( var == null && var.getType (  )  instanceof EnumType )  {^616^^^^^589^631^[REPLACE] if  ( var != null && var.getType (  )  instanceof EnumType )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^596^^^^^589^631^[ADD] enumType = typeRegistry.createEnumType ( name, elementsType ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^key =  null.getNext (  ) ;^611^^^^^589^631^[REPLACE] key = key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^key =  ( key != null )  ? null : key.getNext (  ) ;^612^^^^^589^631^[REPLACE] key =  ( key == null )  ? null : key.getNext (  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if   (  propType != null  )   {  ;^622^^^^^589^631^[REPLACE] if  ( enumType == null )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^}  else {^624^^^^^589^631^[REPLACE] } else if  ( scope.isGlobal (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  (  !name.isEmpty (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^typeRegistry.declareType ( sourceName, enumType.getElementsType (  )  ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^typeRegistry.declareType ( name, enumType .defineElement ( propName )   ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( name == null && !name.isEmpty (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^625^626^627^^^589^631^[ADD] if  ( name != null && !name.isEmpty (  )  )  { typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^typeRegistry.declareType ( name, functionType.getInstanceType (  )  )  ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( make ( sourceName, key, ENUM_NOT_CONSTANT, keyName )  )  ;^623^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, parent, ENUM_INITIALIZER )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^compiler.report ( JSError .make ( fnName , parent )   ) ;^623^^^^^589^631^[REPLACE] compiler.report ( JSError.make ( sourceName, parent, ENUM_INITIALIZER )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( sourceName == null && !name.isEmpty (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^625^626^627^^^589^631^[ADD] if  ( name != null && !name.isEmpty (  )  )  { typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ; }^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^typeRegistry.declareType ( name, enumType .defineElement ( keyName )   ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[ADD]^^626^^^^^589^631^[ADD] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^if  ( name == null &&true (  )  )  {^625^^^^^589^631^[REPLACE] if  ( name != null && !name.isEmpty (  )  )  {^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^typeRegistry.declareType ( propName, enumType.getElementsType (  )  ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REMOVE]^(  ( EnumType )   ( var.getType (  )  )  )  ;^626^^^^^589^631^[REMOVE] ^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^typeRegistry.declareType ( name, enumType .defineElement ( name )   ) ;^626^^^^^589^631^[REPLACE] typeRegistry.declareType ( name, enumType.getElementsType (  )  ) ;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^return enumType;  ;^630^^^^^589^631^[REPLACE] return enumType;^[METHOD] getEnumType [TYPE] EnumType [PARAMETER] String name Node parent Node value JSType elementsType [CLASS] AbstractScopeBuilder   [TYPE]  JSType elementsType  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  EnumType enumType  [TYPE]  Var var  [TYPE]  Node key  parent  value  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName 
[REPLACE]^Preconditions.checkArgument ( true  <=  type == null ) ;^658^^^^^657^722^[REPLACE] Preconditions.checkArgument ( inferred || type != null ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^boolean shouldDeclareOnGlobalThis = true;^661^^^^^657^722^[REPLACE] boolean shouldDeclareOnGlobalThis = false;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^662^^^^^657^722^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^Preconditions.checkArgument ( n.getType (  )  == Token.GETPROP ;^672^673^674^675^^662^676^[REPLACE] Preconditions.checkArgument ( n.getType (  )  == Token.GETPROP && ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^672^673^674^^^662^676^[ADD] Preconditions.checkArgument ( n.getType (  )  == Token.GETPROP && ( parent.getType (  )  == Token.ASSIGN ||^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^n .getJSType (  )   == Token.GETPROP && ( parent^673^674^675^^^662^676^[REPLACE] n.getType (  )  == Token.GETPROP && ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^( n.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^674^675^^^^662^676^[REPLACE] ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^674^675^^^^662^676^[ADD] ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^parent .getJSType (  )   == Token.EXPR_RESULT )  ) ;^675^^^^^662^676^[REPLACE] parent.getType (  )  == Token.EXPR_RESULT )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^shouldDeclareOnGlobalThis = scope.isGlobal (  )   <  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION ) ;^668^669^670^^^657^722^[REPLACE] shouldDeclareOnGlobalThis = scope.isGlobal (  )  && ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^shouldDeclareOnGlobalThis = scope.isGlobal (  )  ;^668^669^670^^^657^722^[REPLACE] shouldDeclareOnGlobalThis = scope.isGlobal (  )  && ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.FUNCTION ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^String variableName = n.isQualifiedName (  ) ;^677^^^^^657^722^[REPLACE] String variableName = n.getQualifiedName (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^678^^^^^657^722^[REPLACE] Preconditions.checkArgument ( !variableName.isEmpty (  )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^( name.isEmpty (  )  )  ;^678^^^^^657^722^[REPLACE] Preconditions.checkArgument ( !variableName.isEmpty (  )  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REMOVE]^( codingConvention.isValidEnumKey ( keyName )  )  ;^678^^^^^657^722^[REMOVE] ^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^681^^^^^657^722^[REPLACE] if  ( scope.isDeclared ( variableName, false )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( inferred )  {^686^^^^^681^721^[REPLACE] if  ( !inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^687^^^^^681^721^[REPLACE] n.setJSType ( type ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^692^^^^^681^721^[REPLACE] if  ( shouldDeclareOnGlobalThis )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if   (  !inferred  )   {  ;^696^^^^^681^721^[REPLACE] if  ( inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^globalThis.defineDeclaredProperty ( variableName, type, true ) ;^703^^^^^696^704^[REPLACE] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^703^^^^^696^704^[ADD] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^globalThis.defineInferredProperty type,^697^698^699^700^^681^721^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^697^698^699^^^681^721^[ADD] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  :^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^typeRegistry .getNativeObjectType (  )   : type, isExtern ) ;^699^700^701^^^681^721^[REPLACE] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^699^700^701^^^681^721^[ADD] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^ObjectType globalThis = typeRegistry.getType ( JSTypeNative.GLOBAL_THIS ) ;^693^694^^^^681^721^[REPLACE] ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^boolean isFnLiteral =  ( rValue != null )  &&  (  ( rValue.getType (  )  )  ==  ( FUNCTION )  )  ;^695^^^^^681^721^[REPLACE] boolean isExtern = input.isExtern (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^globalThis.defineDeclaredProperty ( sourceName, type, isExtern ) ;^703^^^^^696^704^[REPLACE] globalThis.defineDeclaredProperty ( variableName, type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^typeRegistry.getType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^699^700^701^^^681^721^[REPLACE] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( ! scope.isGlobal (  )  && type instanceof FunctionType )  {^709^^^^^681^721^[REPLACE] if  ( scope.isGlobal (  )  && type instanceof FunctionType )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( fnType.isConstructor (  )  && fnType .isConstructor (  )   )  {^711^^^^^681^721^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^FunctionType superClassCtor = fnType .isConstructor (  )  ;^712^^^^^681^721^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^710^^^^^681^721^[ADD] FunctionType fnType =  ( FunctionType )  type;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( fnType.isConstructor (  )  && fnType.isInterface (  )  )  {^711^^^^^681^721^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^FunctionType superClassCtor = fnType.isConstructor (  ) ;^712^^^^^681^721^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^CompilerInput input = compiler .report (  )  ;^689^^^^^681^721^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^ObjectType globalThis = typeRegistry .getNativeType (  )  ;^693^694^^^^681^721^[REPLACE] ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^ObjectType ownerType = cast ( var.getType (  )  )  ;^710^^^^^681^721^[REPLACE] FunctionType fnType =  ( FunctionType )  type;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^Var oldVar = scope .declare ( propName , parent , type , input , isExtern )  ;^682^^^^^657^722^[REPLACE] Var oldVar = scope.getVar ( variableName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( !true )  {^686^^^^^657^722^[REPLACE] if  ( !inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^checkArgument (  ( inferred ||  ( type != null )  )  )  ;^687^^^^^657^722^[REPLACE] n.setJSType ( type ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if   (  n.getType  (    )   == Token.NAME  )   {  ;^692^^^^^657^722^[REPLACE] if  ( shouldDeclareOnGlobalThis )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if   (  !inferred  )   {  ;^696^^^^^657^722^[REPLACE] if  ( inferred )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^globalThis.defineInferredProperty   typeRegistry .getNativeObjectType (  )   ;^697^698^699^700^^657^722^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^697^698^699^^^657^722^[ADD] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  :^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^typeRegistry.getType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^699^700^701^^^657^722^[REPLACE] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^699^700^701^^^657^722^[ADD] typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type, isExtern ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^ObjectType globalThis = typeRegistry .getNativeType (  )  ;^693^694^^^^657^722^[REPLACE] ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^boolean isFnLiteral =  ( rValue != null )  &&  (  ( rValue.getType (  )  )  ==  ( FUNCTION )  )  ;^695^^^^^657^722^[REPLACE] boolean isExtern = input.isExtern (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^globalThis.defineInferredProperty ( variableName, type != null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^697^698^699^700^^657^722^[REPLACE] globalThis.defineInferredProperty ( variableName, type == null ? typeRegistry.getNativeType ( JSTypeNative.NO_TYPE )  : type,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( ! scope.isGlobal (  )  && type instanceof FunctionType )  {^709^^^^^657^722^[REPLACE] if  ( scope.isGlobal (  )  && type instanceof FunctionType )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  (  fnType.isInterface (  )  )  {^711^^^^^657^722^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^711^712^713^714^^657^722^[ADD] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  { FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ; scope.declare ( variableName + ".prototype", n, fnType.getPrototype (  ) , compiler.getInput ( sourceName ) ,^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^FunctionType superClassCtor = fnType.isConstructor (  ) ;^712^^^^^657^722^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^ObjectType ownerType = cast ( var.getType (  )  )  ;^710^^^^^657^722^[REPLACE] FunctionType fnType =  ( FunctionType )  type;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^FunctionType superClassCtor = fnType .isConstructor (  )  ;^712^^^^^657^722^[REPLACE] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( fnType.isConstructor (  )  && fnType.isInterface (  )  )  {^711^^^^^657^722^[REPLACE] if  ( fnType.isConstructor (  )  || fnType.isInterface (  )  )  {^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^712^^^^^657^722^[ADD] FunctionType superClassCtor = fnType.getSuperClassConstructor (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^Var oldVar = scope.getVar ( sourceName ) ;^682^^^^^657^722^[REPLACE] Var oldVar = scope.getVar ( variableName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^boolean isFnLiteral =  ( rValue != null )  &&  (  ( rValue.getType (  )  )  ==  ( FUNCTION )  )  ;^689^^^^^657^722^[REPLACE] CompilerInput input = compiler.getInput ( sourceName ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^ObjectType globalThis = typeRegistry.getType ( JSTypeNative.GLOBAL_THIS ) ;^693^694^^^^657^722^[REPLACE] ObjectType globalThis = typeRegistry.getNativeObjectType ( JSTypeNative.GLOBAL_THIS ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[ADD]^^710^^^^^657^722^[ADD] FunctionType fnType =  ( FunctionType )  type;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] AbstractScopeBuilder   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^private final List<Node> nonExternFunctions ;^734^^^^^^^[REPLACE] private final List<Node> nonExternFunctions = Lists.newArrayList (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^private final List<StubDeclaration> stubDeclarations  = null ;^742^743^^^^742^743^[REPLACE] private final List<StubDeclaration> stubDeclarations = Lists.newArrayList (  ) ;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^private  Node node;^1171^^^^^^^[REPLACE] private final Node node;^[METHOD] defineSlot [TYPE] void [PARAMETER] Node n Node parent JSType type boolean inferred [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType globalThis  [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isExtern  shouldDeclareOnGlobalThis  true  [TYPE]  Scope scope  [TYPE]  Var oldVar  [TYPE]  Node n  parent  [TYPE]  FunctionType fnType  superClassCtor  [TYPE]  String fnName  functionName  keyName  name  propName  sourceName  variableName 
[REPLACE]^if  ( relationship == null )  {^762^^^^^757^912^[REPLACE] if  ( relationship != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( type == null && subClass != null )  {^767^^^^^757^912^[REPLACE] if  ( superClass != null && subClass != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( relationship.type  ) {^771^^^^^757^912^[REPLACE] if  ( relationship.type == SubclassType.INHERITS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^validator.expectSuperType ( t, n, superClass, superClass ) ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  superClass != null && subClass != null  )   {  ;^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^codingConvention.applySubclassRelationship ( getterType, subCtor, relationship.type ) ;^776^777^^^^757^912^[REPLACE] codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  )  ;^768^^^^^757^912^[REPLACE] FunctionType superCtor = superClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType subCtor = subClass .getReferenceName (  )  ;^769^^^^^757^912^[REPLACE] FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( relationship.type  &&  SubclassType.INHERITS )  {^771^^^^^757^912^[REPLACE] if  ( relationship.type == SubclassType.INHERITS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (  getterType != null )  {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^codingConvention.applySingletonGetter ( superCtor, subCtor, relationship.type ) ;^776^777^^^^757^912^[REPLACE] codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^763^764^^^^757^912^[ADD] ObjectType superClass = ObjectType.cast ( typeRegistry.getType ( relationship.superclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType subClass = ObjectType.cast ( typeRegistry .getJSType (  )   ) ;^765^766^^^^757^912^[REPLACE] ObjectType subClass = ObjectType.cast ( typeRegistry.getType ( relationship.subclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^768^^^^^757^912^[ADD] FunctionType superCtor = superClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType superCtor = superClass.getConstructor (  )  ;^769^^^^^757^912^[REPLACE] FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  superCtor != null && subCtor != null  )   {  ;^767^^^^^757^912^[REPLACE] if  ( superClass != null && subClass != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( relationship.type  !=  SubclassType.INHERITS )  {^771^^^^^757^912^[REPLACE] if  ( relationship.type == SubclassType.INHERITS )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^codingConvention.getDelegateRelationship ( n )  ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^772^^^^^757^912^[ADD] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  (  subCtor != true )  {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^775^776^777^778^^757^912^[ADD] if  ( superCtor != null && subCtor != null )  { codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^codingConvention .applyDelegateRelationship ( delegateBaseObject , delegateBaseObject , delegateBaseObject , functionType , functionType )  ;^776^777^^^^757^912^[REPLACE] codingConvention.applySubclassRelationship ( superCtor, subCtor, relationship.type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType subCtor = superClass.getConstructor (  ) ;^769^^^^^757^912^[REPLACE] FunctionType subCtor = subClass.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^validator.expectSuperType ( t, parent, superClass, subClass ) ;^772^^^^^757^912^[REPLACE] validator.expectSuperType ( t, n, superClass, subClass ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( superCtor == false ) {^775^^^^^757^912^[REPLACE] if  ( superCtor != null && subCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( singletonGetterClassName == null )  {^784^^^^^757^912^[REPLACE] if  ( singletonGetterClassName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^784^785^786^787^788^757^912^[ADD] if  ( singletonGetterClassName != null )  { ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( singletonGetterClassName )  ) ; if  ( objectType != null )  { FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( objectType == null )  {^787^^^^^757^912^[REPLACE] if  ( objectType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^FunctionType functionType = objectType.getConstructor (  ) ;^787^788^^790^791^757^912^[ADD] if  ( objectType != null )  { FunctionType functionType = objectType.getConstructor (  ) ; if  ( functionType != null )  { FunctionType getterType = new FunctionType (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( functionType == null )  {^790^^^^^757^912^[REPLACE] if  ( functionType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^790^791^792^793^794^757^912^[ADD] if  ( functionType != null )  { FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, false, false, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, false ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType functionType = thisType .getReferenceName (  )  ;^788^^^^^757^912^[REPLACE] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, true, true, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, true ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  objectType != null  )   {  ;^790^^^^^757^912^[REPLACE] if  ( functionType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^791^792^793^^^757^912^[ADD] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) ,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType objectType = ObjectType.cast ( typeRegistry.forwardDeclareType ( ownerName )  ) ;^785^786^^^^757^912^[REPLACE] ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( singletonGetterClassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType functionType = superClass.cast (  ) ;^788^^^^^757^912^[REPLACE] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, true, true, new FunctionParamBuilder ( typeRegistry ) .evaluate (  ) , objectType, true ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( type == null )  {^787^^^^^757^912^[REPLACE] if  ( objectType != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^787^788^^790^791^757^912^[ADD] if  ( objectType != null )  { FunctionType functionType = objectType.getConstructor (  ) ; if  ( functionType != null )  { FunctionType getterType = new FunctionType (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^788^^^^^757^912^[ADD] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, this, this, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, this ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegateRelationship == this  )  {^803^^^^^757^912^[REPLACE] if  ( delegateRelationship != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^803^804^805^806^807^757^912^[ADD] if  ( delegateRelationship != null )  { ObjectType delegatorObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegator )  ) ; ObjectType delegateBaseObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorObject == true && delegateBaseObject != true && delegateSuperObject != true )  {^811^812^813^^^757^912^[REPLACE] if  ( delegatorObject != null && delegateBaseObject != null && delegateSuperObject != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^811^812^813^814^815^757^912^[ADD] if  ( delegatorObject != null && delegateBaseObject != null && delegateSuperObject != null )  { FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ; FunctionType delegateBaseCtor =^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorCtor == null ) {^820^821^^^^811^843^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, this, this, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , this ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , false, false, false ) ;^830^831^832^833^^820^842^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegatorCtor = type.getConstructor (  ) ;^814^^^^^811^843^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateBaseCtor = type.cast (  ) ;^815^816^^^^811^843^[REPLACE] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateSuperCtor = type.getConstructor (  ) ;^817^818^^^^811^843^[REPLACE] FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, this, this, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( superClass ) , this ) ;^826^827^828^^^811^843^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , false, false, false ) ;^830^831^832^833^^811^843^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorCtor == this && delegateBaseCtor != this && delegateSuperCtor != this )  {^820^821^^^^757^912^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^820^821^822^823^824^757^912^[ADD] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  { FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry ) ; functionParamBuilder.addRequiredParams (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, false, false, functionParamBuilder.build (  ) , typeRegistry.forwardDeclareType ( delegateBaseObject ) , false ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^830^831^832^^^820^842^[ADD] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegatorObject = ObjectType.hasOwnProperty ( typeRegistry.getType ( delegateRelationship.delegator )  ) ;^804^805^^^^757^912^[REPLACE] ObjectType delegatorObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegator )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^806^807^^^^757^912^[ADD] ObjectType delegateBaseObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegateSuperObject = ObjectType.hasOwnProperty ( typeRegistry.getType ( codingConvention.getDelegateSuperclassName (  )  )  ) ;^808^809^810^^^757^912^[REPLACE] ObjectType delegateSuperObject = ObjectType.cast ( typeRegistry.getType ( codingConvention.getDelegateSuperclassName (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegatorCtor = type.getConstructor (  ) ;^814^^^^^757^912^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateBaseCtor = type.getConstructor (  ) ;^815^816^^^^757^912^[REPLACE] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateSuperCtor = superClass.getConstructor (  ) ;^817^818^^^^757^912^[REPLACE] FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, true, true, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , true ) ;^826^827^828^^^757^912^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry .createNullableType ( delegateSuperObject )  ;^830^831^832^833^^757^912^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorObject == null && delegateBaseObject != null && delegateSuperObject != null )  {^811^812^813^^^757^912^[REPLACE] if  ( delegatorObject != null && delegateBaseObject != null && delegateSuperObject != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorCtor == null && delegateBaseCtor != null && delegateSuperCtor != null )  {^820^821^^^^811^843^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^820^821^822^823^824^811^843^[ADD] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  { FunctionParamBuilder functionParamBuilder = new FunctionParamBuilder ( typeRegistry ) ; functionParamBuilder.addRequiredParams (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, this, this, functionParamBuilder.addRequiredParams (  ) , typeRegistry.createNullableType ( type ) , this ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType superCtor = superClass.getConstructor (  )  ;^814^^^^^811^843^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateBaseCtor = type.getConstructor (  ) ;^815^816^^^^811^843^[REPLACE] FunctionType delegateBaseCtor = delegateBaseObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^826^827^828^^^811^843^[ADD] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( superClass.getReferenceName (  ) , false, false, false ) ;^830^831^832^833^^811^843^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( delegatorCtor == null ) {^820^821^^^^757^912^[REPLACE] if  ( delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, true, true, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , true ) ;^826^827^828^^^820^842^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , this, this, this ) ;^830^831^832^833^^820^842^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( objectLiteralCast == null )  {^848^^^^^757^912^[REPLACE] if  ( objectLiteralCast != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^848^849^850^851^852^757^912^[ADD] if  ( objectLiteralCast != null )  { ObjectType type = ObjectType.cast ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ; if  ( type != null && type.getConstructor (  )  != null )  { objectLiteralCast.objectNode.setJSType ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( type == null && type.getConstructor (  )  != null )  {^851^^^^^757^912^[REPLACE] if  ( type != null && type.getConstructor (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^851^852^853^854^855^757^912^[ADD] if  ( type != null && type.getConstructor (  )  != null )  { objectLiteralCast.objectNode.setJSType ( type ) ; } else { compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError.make ( t.getSourceName (  ) , parent, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError.make ( t.getInput (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^objectLiteralCast.objectNode.setJSType ( thisType ) ;^852^^^^^757^912^[REPLACE] objectLiteralCast.objectNode.setJSType ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^849^850^^^^757^912^[ADD] ObjectType type = ObjectType.cast ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( type == this && type.getConstructor (  )  != this )  {^851^^^^^757^912^[REPLACE] if  ( type != null && type.getConstructor (  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError .make ( firstChild , null )   ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^compiler.report ( JSError.make ( t .getInput (  )  , parent, CONSTRUCTOR_EXPECTED )  ) ;^854^855^^^^851^856^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , n, CONSTRUCTOR_EXPECTED )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^852^^^^^757^912^[ADD] objectLiteralCast.objectNode.setJSType ( type ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( !t.getSourceName (  ) .isExtern (  )  )  {^861^^^^^757^912^[REPLACE] if  ( !t.getInput (  ) .isExtern (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^nonExternFunctions.add ( parent ) ;^862^^^^^757^912^[REPLACE] nonExternFunctions.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getType (  )  == Token.NAME )  {^866^867^^^^757^912^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN || parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^return;  ;^868^^^^^866^869^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( firstChild.getType (  )  == Token.GETPROP ) {^882^883^^^^757^912^[REPLACE] if  ( firstChild.getType (  )  == Token.GETPROP && firstChild.isQualifiedName (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, n.getString (  ) , firstChild, n, firstChild.getNext (  )  ) ;^884^885^^^^882^886^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , firstChild, n, firstChild.getNext (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, parent.getJSDocInfo (  ) , firstChild, n, firstChild.getNext (  )  ) ;^884^885^^^^882^886^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , firstChild, n, firstChild.getNext (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^firstChild, n, parent .getParent (  )   ) ;^885^^^^^882^886^[REPLACE] firstChild, n, firstChild.getNext (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if   (  delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null  )   {  ;^897^^^^^757^912^[REPLACE] if  ( n.hasOneChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^897^898^899^900^^757^912^[ADD] if  ( n.hasOneChild (  )  )  { checkForOldStyleTypedef ( t, n ) ; checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForOldStyleTypedef ( t, parent ) ;^898^^^^^757^912^[REPLACE] checkForOldStyleTypedef ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, parent.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^899^^^^^757^912^[REPLACE] checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, parent .getLastChild (  )  , n.getJSDocInfo (  )  ) ;^899^^^^^757^912^[REPLACE] checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^candidate.getJSDocInfo (  )  ;^899^^^^^757^912^[REPLACE] checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( parent.getType (  )  == Token.EXPR_RESULT || n.isQualifiedName (  )  )  {^905^906^^^^757^912^[REPLACE] if  ( parent.getType (  )  == Token.EXPR_RESULT && n.isQualifiedName (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, n.getFirstChild (  ) , n.getJSDocInfo (  )  )  ;^907^^^^^905^909^[REPLACE] checkForTypedef ( t, n, n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^907^^^^^905^909^[ADD] checkForTypedef ( t, n, n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^checkForTypedef ( t, parent, n.getString (  )  ) ;^907^^^^^905^909^[REPLACE] checkForTypedef ( t, n, n.getJSDocInfo (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, n.getString (  ) , n, parent, this ) ;^908^^^^^905^909^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , n, parent, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^maybeDeclareQualifiedName ( t, parent.getString (  ) , n, parent, null ) ;^908^^^^^905^909^[REPLACE] maybeDeclareQualifiedName ( t, n.getJSDocInfo (  ) , n, parent, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^return;  ;^868^^^^^757^912^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^760^761^^^^757^912^[ADD] SubclassRelationship relationship = codingConvention.getClassesDefinedByCall ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType superClass = ObjectType.cast ( typeRegistry .getJSType (  )   ) ;^763^764^^^^757^912^[REPLACE] ObjectType superClass = ObjectType.cast ( typeRegistry.getType ( relationship.superclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType subClass = ObjectType.hasOwnProperty ( typeRegistry.getType ( relationship.subclassName )  ) ;^765^766^^^^757^912^[REPLACE] ObjectType subClass = ObjectType.cast ( typeRegistry.getType ( relationship.subclassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( parent ) ;^782^783^^^^757^912^[REPLACE] String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType objectType = ObjectType.hasOwnProperty ( typeRegistry.getType ( ownerName )  ) ;^785^786^^^^757^912^[REPLACE] ObjectType objectType = ObjectType.cast ( typeRegistry.getType ( singletonGetterClassName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType functionType = type.getConstructor (  ) ;^788^^^^^757^912^[REPLACE] FunctionType functionType = objectType.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType getterType = new FunctionType ( typeRegistry, true, true, new FunctionParamBuilder ( typeRegistry )  .evaluate ( null )  , objectType, true ) ;^791^792^793^794^^757^912^[REPLACE] FunctionType getterType = new FunctionType ( typeRegistry, null, null, new FunctionParamBuilder ( typeRegistry ) .build (  ) , objectType, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^801^802^^^^757^912^[ADD] DelegateRelationship delegateRelationship = codingConvention.getDelegateRelationship ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[ADD]^^804^805^^^^757^912^[ADD] ObjectType delegatorObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegator )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType delegateBaseObject = ObjectType.hasOwnProperty ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^806^807^^^^757^912^[REPLACE] ObjectType delegateBaseObject = ObjectType.cast ( typeRegistry.getType ( delegateRelationship.delegateBase )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegatorCtor = superClass.getConstructor (  ) ;^814^^^^^757^912^[REPLACE] FunctionType delegatorCtor = delegatorObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateSuperCtor = type.cast (  ) ;^817^818^^^^757^912^[REPLACE] FunctionType delegateSuperCtor = delegateSuperObject.getConstructor (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType findDelegate = new FunctionType ( typeRegistry, true, true, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( type ) , true ) ;^826^827^828^^^757^912^[REPLACE] FunctionType findDelegate = new FunctionType ( typeRegistry, null, null, functionParamBuilder.build (  ) , typeRegistry.createNullableType ( delegateBaseObject ) , null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , this, this, this ) ;^830^831^832^833^^757^912^[REPLACE] FunctionType delegateProxy = typeRegistry.createConstructorType ( delegateBaseObject.getReferenceName (  ) , null, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectLiteralCast objectLiteralCast = codingConvention .getDelegateSuperclassName (  )  ;^846^847^^^^757^912^[REPLACE] ObjectLiteralCast objectLiteralCast = codingConvention.getObjectLiteralCast ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^ObjectType type = ObjectType.hasOwnProperty ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ;^849^850^^^^757^912^[REPLACE] ObjectType type = ObjectType.cast ( typeRegistry.getType ( objectLiteralCast.typeName )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^Node firstChild = n.getLastChild (  ) ;^881^^^^^757^912^[REPLACE] Node firstChild = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  DelegateRelationship delegateRelationship  [TYPE]  NodeTraversal t  [TYPE]  Node firstChild  n  node  parent  [TYPE]  FunctionType delegateBaseCtor  delegateProxy  delegateSuperCtor  delegatorCtor  findDelegate  functionType  getterType  subCtor  superCtor  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  SubclassRelationship relationship  [TYPE]  String ownerName  singletonGetterClassName  [TYPE]  ObjectLiteralCast objectLiteralCast  [TYPE]  FunctionParamBuilder functionParamBuilder 
[REPLACE]^if  ( info != true || !info.hasTypedefType (  )  )  {^922^^^^^921^948^[REPLACE] if  ( info == null || !info.hasTypedefType (  )  )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^922^923^924^^^921^948^[ADD] if  ( info == null || !info.hasTypedefType (  )  )  { return; }^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^923^^^^^921^948^[REPLACE] return;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String typedef = parent.isQualifiedName (  ) ;^926^^^^^921^948^[REPLACE] String typedef = candidate.getQualifiedName (  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( singletonGetterClassName != null )  {^927^^^^^921^948^[REPLACE] if  ( typedef == null )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^return;^927^928^929^^^921^948^[ADD] if  ( typedef == null )  { return; }^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^928^^^^^921^948^[REPLACE] return;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.forwardDeclareType ( singletonGetterClassName ) ;^934^^^^^921^948^[REPLACE] typeRegistry.forwardDeclareType ( typedef ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^934^935^936^937^938^921^948^[ADD] typeRegistry.forwardDeclareType ( typedef ) ;  JSType realType = info.getTypedefType (  ) .evaluate ( scope ) ; if  ( realType == null )  { compiler.report (^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType realType = info.hasTypedefType (  ) .evaluate ( scope ) ;^936^^^^^921^948^[REPLACE] JSType realType = info.getTypedefType (  ) .evaluate ( scope ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  objectType != null  )   {  ;^937^^^^^921^948^[REPLACE] if  ( realType == null )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^compiler.report ( JSError.make ( t .getInput (  )  , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^938^939^940^^^921^948^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( t .getInput (  )  , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^939^940^^^^921^948^[REPLACE] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^940^^^^^921^948^[REPLACE] t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.declareType ( singletonGetterClassName, realType ) ;^943^^^^^921^948^[REPLACE] typeRegistry.declareType ( typedef, realType ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REMOVE]^typeRegistry.getType ( relationship.superclassName )  ;^943^^^^^921^948^[REMOVE] ^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( candidate.getType (  )   ||  Token.GETPROP )  {^944^^^^^921^948^[REPLACE] if  ( candidate.getType (  )  == Token.GETPROP )  {^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , true ) ;^945^946^^^^921^948^[REPLACE] defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^defineSlot ( candidate, candidate.getNext (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^945^946^^^^921^948^[REPLACE] defineSlot ( candidate, candidate.getParent (  ) , typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^typeRegistry.getType ( NO_TYPE ) , false ) ;^946^^^^^921^948^[REPLACE] typeRegistry.getNativeType ( NO_TYPE ) , false ) ;^[METHOD] checkForTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate JSDocInfo info [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String typedef = codingConvention.identifyTypeDefAssign ( parent ) ;^958^^^^^956^979^[REPLACE] String typedef = codingConvention.identifyTypeDefAssign ( candidate ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( typedef == this )  {^959^^^^^956^979^[REPLACE] if  ( typedef != null )  {^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^959^960^^^963^956^979^[ADD] if  ( typedef != null )  {  typeRegistry.forwardDeclareType ( typedef ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( realType != null )  {^968^^^^^956^979^[REPLACE] if  ( realType == null )  {^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^compiler.report ( JSError.make ( t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^969^970^971^^^956^979^[REPLACE] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, singletonGetterClassName )  ) ;^970^971^^^^956^979^[REPLACE] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^t .getInput (  )  , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^971^^^^^956^979^[REPLACE] t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^971^^^^^956^979^[ADD] t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo (  )  ;^965^^^^^956^979^[REPLACE] JSDocInfo info = candidate.getJSDocInfo (  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType realType  =  this  ;^966^967^^^^956^979^[REPLACE] JSType realType = info == null ? null : info.getType (  ) .evaluate ( scope ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( realType != this  )  {^968^^^^^956^979^[REPLACE] if  ( realType == null )  {^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^969^970^971^^^956^979^[ADD] compiler.report ( JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSError.make ( t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^970^971^^^^956^979^[REPLACE] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^970^971^^^^956^979^[ADD] JSError.make ( t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^t.getInput (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^971^^^^^956^979^[REPLACE] t.getSourceName (  ) , candidate, MALFORMED_TYPEDEF, typedef )  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^965^^^^^956^979^[REPLACE] JSDocInfo info = candidate.getJSDocInfo (  ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType realType = info != null ? null : info.hasType (  ) .evaluate ( scope ) ;^966^967^^^^956^979^[REPLACE] JSType realType = info == null ? null : info.getType (  ) .evaluate ( scope ) ;^[METHOD] checkForOldStyleTypedef [TYPE] void [PARAMETER] NodeTraversal t Node candidate [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  subClass  superClass  thisType  type  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType realType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  n  node  parent  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String ownerName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^Node ownerNode = parent.getFirstChild (  ) ;^993^^^^^992^1091^[REPLACE] Node ownerNode = n.getFirstChild (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String ownerName = rhsValue.getQualifiedName (  ) ;^994^^^^^992^1091^[REPLACE] String ownerName = ownerNode.getQualifiedName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^String propName = n.getLastChild (  ) .getString (  ) ;Preconditions.checkArgument ( qName != null && ownerName != null ) ;^995^996^997^^^992^1091^[ADD] String qName = n.getQualifiedName (  ) ; String propName = n.getLastChild (  ) .getString (  ) ; Preconditions.checkArgument ( qName != null && ownerName != null ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^Preconditions.checkArgument ( qName != null && ownerName != null ) ;^996^997^^^^992^1091^[ADD] String propName = n.getLastChild (  ) .getString (  ) ; Preconditions.checkArgument ( qName != null && ownerName != null ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^Preconditions.checkArgument ( true ;^997^^^^^992^1091^[REPLACE] Preconditions.checkArgument ( qName != null && ownerName != null ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( "prototype".equals ( typedef )  )  {^1004^^^^^992^1091^[REPLACE] if  ( "prototype".equals ( propName )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( qVar == true )  {^1006^^^^^992^1091^[REPLACE] if  ( qVar != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( qVar.isTypeInferred (  )  )  {^1007^^^^^992^1091^[REPLACE] if  ( !qVar.isTypeInferred (  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^1009^^^^^992^1091^[REPLACE] return;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^Var qVar = scope.getVar ( typedef ) ;^1005^^^^^992^1091^[REPLACE] Var qVar = scope.getVar ( qName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  info != null  )   {  ;^1006^^^^^992^1091^[REPLACE] if  ( qVar != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null  )   {  ;^1007^^^^^992^1091^[REPLACE] if  ( !qVar.isTypeInferred (  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1007^1008^1009^1010^^992^1091^[ADD] if  ( !qVar.isTypeInferred (  )  )  {  return; }^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^Var qVar = scope.undeclare ( qName ) ;^1005^^^^^992^1091^[REPLACE] Var qVar = scope.getVar ( qName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType jsType = getDeclaredTypeInAnnotation ( t, member, info )  ;^1028^^^^^992^1091^[REPLACE] JSType valueType = getDeclaredGetPropType ( t, info, n, rhsValue ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( valueType != null && rhsValue != null )  {^1029^^^^^992^1091^[REPLACE] if  ( valueType == null && rhsValue != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^valueType =  ownerNode.getJSType (  ) ;^1031^^^^^992^1091^[REPLACE] valueType = rhsValue.getJSType (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1031^^^^^992^1091^[ADD] valueType = rhsValue.getJSType (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( valueType != this )  {^1034^^^^^992^1091^[REPLACE] if  ( valueType == null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1034^1035^1036^1037^1038^992^1091^[ADD] if  ( valueType == null )  { if  ( parent.getType (  )  == Token.EXPR_RESULT )  { stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ; } else if  ( rhsValue != null &&^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( parent.getType (  )   !=  Token.EXPR_RESULT )  {^1035^^^^^992^1091^[REPLACE] if  ( parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^}  else {^1038^1039^^^^992^1091^[REPLACE] } else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ! ownerType instanceof FunctionType )  {^1042^^^^^1038^1053^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( delegateType == null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^1038^1053^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1041^^^^^1038^1053^[ADD] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getType (  ) ;^1043^^^^^1038^1053^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1044^^^^^1038^1053^[ADD] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType = delegateName != null ? null : typeRegistry.getType ( delegateName ) ;^1045^1046^^^^1038^1053^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ! ownerType instanceof FunctionType )  {^1042^^^^^992^1091^[REPLACE] if  ( ownerType instanceof FunctionType )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , false ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^defineSlot ( n, parent, typeRegistry .getNativeObjectType (  )  , true ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType )  .getType (  )  ;^1043^^^^^992^1091^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1044^^^^^992^1091^[ADD] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1045^1046^^^^992^1091^[ADD] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( delegateType == this && ownerTypeOfThis .restrictByNotNullOrUndefined (  )   )  {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^defineSlot ( n, ownerNode, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , false ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1049^1050^^^^1047^1051^[ADD] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1041^^^^^992^1091^[ADD] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1043^^^^^992^1091^[ADD] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( n )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType = delegateName != null ? null : typeRegistry.forwardDeclareType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , typedef )  ) ;^1036^1037^^^^992^1091^[REPLACE] stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^n, t.getInput (  )  .getType (  )  , ownerName )  ) ;^1037^^^^^992^1091^[REPLACE] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1037^^^^^992^1091^[ADD] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^n, t.getSourceName (  ) .isExtern (  ) , ownerName )  ) ;^1037^^^^^992^1091^[REPLACE] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^} else if   (  rhsValue != null && rhsValue.getType  (    )   == Token.FUNCTION  )   {  ;^1038^1039^^^^992^1091^[REPLACE] } else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( delegateType == null ) {^1047^1048^^^^1038^1053^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerVarType = ownerVar.getType (  )  ;^1041^^^^^1038^1053^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String singletonGetterClassName = codingConvention.getSingletonGetterClassName ( n )  ;^1044^^^^^1038^1053^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType  =  null ;^1045^1046^^^^1038^1053^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( delegateType == null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getType (  ) ;^1043^^^^^992^1091^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String delegateName = codingConvention .getSingletonGetterClassName ( firstChild )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^defineSlot ( n, parent, typeRegistry.getType ( BOOLEAN_TYPE ) , true ) ;^1049^1050^^^^1047^1051^[REPLACE] defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^1055^^^^^992^1091^[REPLACE] return;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = getObjectSlot ( typedef ) ;^1041^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( parent.getType (  )   ||  Token.EXPR_RESULT )  {^1035^^^^^992^1091^[REPLACE] if  ( parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( delegateType == ownerNodeull && ownerTypeOfThis.isSubtype ( delegateType )  )  {^1047^1048^^^^1038^1053^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType )  .getType (  )  ;^1043^^^^^1038^1053^[REPLACE] JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType  = typedef ;^1045^1046^^^^1038^1053^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String delegateName = codingConvention .getSingletonGetterClassName ( rhsValue )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType  = typedef ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerVarType = ownerVar.getType (  )  ;^1041^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^String delegateName = codingConvention .getSingletonGetterClassName ( n )  ;^1044^^^^^992^1091^[REPLACE] String delegateName = codingConvention.getDelegateSuperclassName (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType = delegateName != null ? null : typeRegistry.getType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^stubDeclarations.add ( new StubDeclaration ( n, t .getSourceName (  )  .isExtern (  ) , singletonGetterClassName )  ) ;^1036^1037^^^^992^1091^[REPLACE] stubDeclarations.add ( new StubDeclaration ( n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^( t.getInput (  ) .isExtern (  )  )  ;^1037^^^^^992^1091^[REPLACE] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^n, t .getSourceName (  )  .isExtern (  ) , ownerName )  ) ;^1037^^^^^992^1091^[REPLACE] n, t.getInput (  ) .isExtern (  ) , ownerName )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^}  if  ( rhsValue != null && rhsValue.getType (  )  != Token.TRUE )  {^1038^1039^^^^992^1091^[REPLACE] } else if  ( rhsValue != null && rhsValue.getType (  )  == Token.TRUE )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = getObjectSlot ( typedef ) ;^1041^^^^^1038^1053^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1045^1046^^^^1038^1053^[ADD] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1042^1043^1044^1045^1046^992^1091^[ADD] if  ( ownerType instanceof FunctionType )  { JSType ownerTypeOfThis =  (  ( FunctionType )  ownerType ) .getTypeOfThis (  ) ; String delegateName = codingConvention.getDelegateSuperclassName (  ) ; JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( delegateType == null ) {^1047^1048^^^^992^1091^[REPLACE] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1047^1048^1049^1050^1051^992^1091^[ADD] if  ( delegateType != null && ownerTypeOfThis.isSubtype ( delegateType )  )  { defineSlot ( n, parent, typeRegistry.getNativeType ( BOOLEAN_TYPE ) , true ) ; }^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType delegateType = typedef != true ? true : typeRegistry.getType ( delegateName ) ;^1045^1046^^^^992^1091^[REPLACE] JSType delegateType = delegateName == null ? null : typeRegistry.getType ( delegateName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^boolean inferred = false;^1058^^^^^992^1091^[REPLACE] boolean inferred = true;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null )  {^1059^^^^^992^1091^[REPLACE] if  ( info != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1059^1060^1061^1062^1063^992^1091^[ADD] if  ( info != null )  {  inferred = ! ( info.hasType (  )  || info.hasEnumParameterType (  )  || FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  ) ; }^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^inferred =  ( info.hasType (  )  ;^1061^1062^^^^992^1091^[REPLACE] inferred = ! ( info.hasType (  )  || info.hasEnumParameterType (  )  || FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1061^1062^^^^992^1091^[ADD] inferred = ! ( info.hasType (  )  || info.hasEnumParameterType (  )  || FunctionTypeBuilder.isFunctionTypeDeclaration ( info )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  !inferred  )   {  ;^1065^^^^^992^1091^[REPLACE] if  ( inferred )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1065^1066^1067^1068^1069^992^1091^[ADD] if  ( inferred )  {  inferred = ! ( rhsValue != null && rhsValue.getType (  )  == Token.FUNCTION && !scope.isDeclared ( qName, false )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^inferred = ! ( rhsValue == this ;^1067^1068^1069^^^992^1091^[REPLACE] inferred = ! ( rhsValue != null && rhsValue.getType (  )  == Token.FUNCTION && !scope.isDeclared ( qName, false )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^inferred = ! ( rhsValue != null || rhsValue.getType (  )  != Token.FUNCTION || !scope.isDeclared ( qName, false )  ) ;^1067^1068^1069^^^992^1091^[REPLACE] inferred = ! ( rhsValue != null && rhsValue.getType (  )  == Token.FUNCTION && !scope.isDeclared ( qName, false )  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( inferred )  {^1072^^^^^992^1091^[REPLACE] if  ( !inferred )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if   (  ownerVar != null  )   {  ;^1074^^^^^992^1091^[REPLACE] if  ( ownerType != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  ownerType.hasOwnProperty ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ownerType.defineDeclaredProperty ( typedef, valueType, isExtern ) ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isExtern = t .getSourceName (  )  .isExtern (  ) ;^1077^^^^^992^1091^[REPLACE] boolean isExtern = t.getInput (  ) .isExtern (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  ( ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( true && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ownerType.defineDeclaredProperty ( propName, ownerTypeOfThis, isExtern ) ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType ownerVarType = ownerVar.getType (  )  ;^1073^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isExtern = t.getSourceName (  ) .isExtern (  ) ;^1077^^^^^992^1091^[REPLACE] boolean isExtern = t.getInput (  ) .isExtern (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == false )  {^1074^^^^^992^1091^[REPLACE] if  ( ownerType != null )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1074^1075^^1077^1078^992^1091^[ADD] if  ( ownerType != null )  {  boolean isExtern = t.getInput (  ) .isExtern (  ) ; if  (  ( !ownerType.hasOwnProperty ( propName )  ||^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  ( ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^1078^1079^1080^1081^^992^1091^[REPLACE] if  (  ( !ownerType.hasOwnProperty ( propName )  || ownerType.isPropertyTypeInferred ( propName )  )  && (  ( isExtern && !ownerType.isNativeObjectType (  )  )  || !ownerType.isInstanceType (  )  )  )  {^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ownerType.defineInferredProperty ( propName, unknownType, isExtern )  ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ownerType.defineInferredProperty ( propName, valueType, isExtern ) ;^1083^^^^^1078^1084^[REPLACE] ownerType.defineDeclaredProperty ( propName, valueType, isExtern ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = getObjectSlot ( typedef ) ;^1073^^^^^992^1091^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isExtern = stub.isExtern  ;^1077^^^^^992^1091^[REPLACE] boolean isExtern = t.getInput (  ) .isExtern (  ) ;^[METHOD] maybeDeclareQualifiedName [TYPE] void [PARAMETER] NodeTraversal t JSDocInfo info Node n Node parent Node rhsValue [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType delegateType  ownerTypeOfThis  valueType  [TYPE]  NodeTraversal t  [TYPE]  Var qVar  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( scope.isDeclared ( qName, true )  )  {^1144^^^^^1135^1165^[REPLACE] if  ( scope.isDeclared ( qName, false )  )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^continue;^1144^1145^1146^^^1135^1165^[ADD] if  ( scope.isDeclared ( qName, false )  )  { continue; }^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^if  ( ownerType == this && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  {^1154^1155^^^^1135^1165^[REPLACE] if  ( ownerType != null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^^1154^1155^^^1158^1135^1165^[ADD] if  ( ownerType != null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  { ownerType.defineInferredProperty (^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^typeRegistry.registerPropertyOnTypeunknownType ) ;^1161^1162^^^^1154^1163^[REPLACE] typeRegistry.registerPropertyOnType ( propName, ownerType == null ? unknownType : ownerType ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^ownerType.defineInferredProperty ( typedef, unknownType, isExtern ) ;^1158^1159^^^^1154^1163^[REPLACE] ownerType.defineInferredProperty ( propName, unknownType, isExtern ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^if  ( ownerType == null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  {^1154^1155^^^^1135^1165^[REPLACE] if  ( ownerType != null && ( isExtern || ownerType.isFunctionPrototypeType (  )  )  )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^typeRegistry.declareType ownerType ) ;^1161^1162^^^^1154^1163^[REPLACE] typeRegistry.registerPropertyOnType ( propName, ownerType == null ? unknownType : ownerType ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^ownerType.defineInferredProperty ( propName, unknownType, true ) ;^1158^1159^^^^1154^1163^[REPLACE] ownerType.defineInferredProperty ( propName, unknownType, isExtern ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^Node parent = n.getParent (  )  ;^1137^^^^^1135^1165^[REPLACE] Node n = stub.node;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^Node parent = parent.getParent (  ) ;^1138^^^^^1135^1165^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^^1139^1140^1141^1142^^1135^1165^[ADD] String qName = n.getQualifiedName (  ) ; String propName = n.getLastChild (  ) .getString (  ) ; String ownerName = stub.ownerName; boolean isExtern = stub.isExtern;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^String propName = parent .getFirstChild (  )  .getString (  ) ;^1140^^^^^1135^1165^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^boolean isExtern = stub.isExtern;^1141^1142^^^^1135^1165^[ADD] String ownerName = stub.ownerName; boolean isExtern = stub.isExtern;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^boolean isExtern = t.getInput (  ) .isExtern (  )  ;^1142^^^^^1135^1165^[REPLACE] boolean isExtern = stub.isExtern;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^^1150^1151^^^^1135^1165^[ADD] ObjectType ownerType = getObjectSlot ( ownerName ) ; ObjectType unknownType = typeRegistry.getNativeObjectType ( UNKNOWN_TYPE ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^ObjectType unknownType = typeRegistry.getType ( UNKNOWN_TYPE ) ;^1151^^^^^1135^1165^[REPLACE] ObjectType unknownType = typeRegistry.getNativeObjectType ( UNKNOWN_TYPE ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^FunctionType superCtor = superClass.getConstructor (  )  ;^1136^^^^^1135^1165^[REPLACE] for  ( StubDeclaration stub : stubDeclarations )  {^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^^1138^1139^^^^1135^1165^[ADD] Node parent = n.getParent (  ) ; String qName = n.getQualifiedName (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^String ownerName = ownerNode.getQualifiedName (  )  ;^1139^^^^^1135^1165^[REPLACE] String qName = n.getQualifiedName (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^String propName = parent.getLastChild (  ) .getString (  ) ;^1140^^^^^1135^1165^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^FunctionType superCtor = superClass.getConstructor (  )  ;^1141^^^^^1135^1165^[REPLACE] String ownerName = stub.ownerName;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[REPLACE]^JSType ownerVarType = ownerVar.getType (  )  ;^1150^^^^^1135^1165^[REPLACE] ObjectType ownerType = getObjectSlot ( ownerName ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^^1151^1152^^^^1135^1165^[ADD] ObjectType unknownType = typeRegistry.getNativeObjectType ( UNKNOWN_TYPE ) ; defineSlot ( n, parent, unknownType, true ) ;^[METHOD] resolveStubDeclarations [TYPE] void [PARAMETER] [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  StubDeclaration stub  [TYPE]  Node candidate  firstChild  n  node  ownerNode  parent  rhsValue 
[ADD]^^1209^^^^^1208^1230^[ADD] JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo (  ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info != null || member.getType (  )  != Token.GETPROP || member.getFirstChild (  ) .getType (  )  != Token.THIS )  {^1214^1215^1216^^^1208^1230^[REPLACE] if  ( info == null || member.getType (  )  != Token.GETPROP || member.getFirstChild (  ) .getType (  )  != Token.THIS )  {^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1214^1215^1216^1217^1218^1208^1230^[ADD] if  ( info == null || member.getType (  )  != Token.GETPROP || member.getFirstChild (  ) .getType (  )  != Token.THIS )  { return; }^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^1217^^^^^1214^1218^[REPLACE] return;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^1217^^^^^1208^1230^[REPLACE] return;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^member.getLastChild (  ) .setJSType ( thisType ) ;^1220^^^^^1208^1230^[REPLACE] member.getFirstChild (  ) .setJSType ( thisType ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSType valueType = getDeclaredGetPropType ( t, info, n, rhsValue )  ;^1221^^^^^1208^1230^[REPLACE] JSType jsType = getDeclaredTypeInAnnotation ( t, member, info ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[ADD]^^1222^^^^^1208^1230^[ADD] Node name = member.getLastChild (  ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( jsType != this && ( name.getType (  )  != Token.NAME || name.getType (  )  == Token.STRING )  )  {^1223^1224^^^^1208^1230^[REPLACE] if  ( jsType != null && ( name.getType (  )  == Token.NAME || name.getType (  )  == Token.STRING )  )  {^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^thisType.defineDeclaredProperty ( name .getType (  )  , jsType, f^1225^1226^1227^1228^^1223^1229^[REPLACE] thisType.defineDeclaredProperty ( name.getString (  ) , jsType, f^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^name .getType (  )  , jsType, f }^1226^1227^1228^1229^^1223^1229^[REPLACE] name.getString (  ) , jsType, f }^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] GlobalScopeBuilder StubDeclaration CollectProperties   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^private  boolean isExtern;^1172^^^^^^^[REPLACE] private final boolean isExtern;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] StubDeclaration   [TYPE]  ObjectType delegateBaseObject  delegateSuperObject  delegatorObject  objectType  ownerType  subClass  superClass  thisType  type  unknownType  [TYPE]  boolean false  inferred  isExtern  true  [TYPE]  JSType jsType  [TYPE]  NodeTraversal t  [TYPE]  Node candidate  firstChild  member  n  name  node  nodeWithJsDocInfo  ownerNode  parent  rhsValue  [TYPE]  List nonExternFunctions  stubDeclarations  [TYPE]  String delegateName  ownerName  propName  qName  singletonGetterClassName  slotName  typedef  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = nodeWithJsDocInfo.getString (  ) ;^1209^^^^^1208^1230^[REPLACE] JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo (  ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^if  ( info != null || member.getType (  )  != Token.GETPROP || member.getFirstChild (  ) .getType (  )  != Token.THIS )  {^1214^1215^1216^^^1208^1230^[REPLACE] if  ( info == null || member.getType (  )  != Token.GETPROP || member.getFirstChild (  ) .getType (  )  != Token.THIS )  {^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^return;  ;^1217^^^^^1214^1218^[REPLACE] return;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^return;  ;^1217^^^^^1208^1230^[REPLACE] return;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^( member.getFirstChild (  ) .getType (  )  )  ;^1220^^^^^1208^1230^[REPLACE] member.getFirstChild (  ) .setJSType ( thisType ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^member.getLastChild (  ) .setJSType ( thisType ) ;^1220^^^^^1208^1230^[REPLACE] member.getFirstChild (  ) .setJSType ( thisType ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REMOVE]^( member.getFirstChild (  ) .getType (  )  )  ;^1220^^^^^1208^1230^[REMOVE] ^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^JSType jsType = getDeclaredTypeInAnnotation ( t, nodeWithJsDocInfo, info ) ;^1221^^^^^1208^1230^[REPLACE] JSType jsType = getDeclaredTypeInAnnotation ( t, member, info ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[ADD]^^1222^^^^^1208^1230^[ADD] Node name = member.getLastChild (  ) ;^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^if  ( jsType != null && ( name .getString (  )   != Token.NAME || name^1223^1224^^^^1208^1230^[REPLACE] if  ( jsType != null && ( name.getType (  )  == Token.NAME || name.getType (  )  == Token.STRING )  )  {^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[ADD]^^1223^1224^1225^1226^1227^1208^1230^[ADD] if  ( jsType != null && ( name.getType (  )  == Token.NAME || name.getType (  )  == Token.STRING )  )  { thisType.defineDeclaredProperty ( name.getString (  ) , jsType,^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^thisType.defineDeclaredProperty ( name .getJSDocInfo (  )  , jsType, f^1225^1226^1227^1228^^1223^1229^[REPLACE] thisType.defineDeclaredProperty ( name.getString (  ) , jsType, f^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^name.getType (  ) , jsType, f }^1226^1227^1228^1229^^1223^1229^[REPLACE] name.getString (  ) , jsType, f }^[METHOD] maybeCollectMember [TYPE] void [PARAMETER] NodeTraversal t Node member Node nodeWithJsDocInfo [CLASS] CollectProperties   [TYPE]  ObjectType thisType  [TYPE]  JSType jsType  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node member  name  nodeWithJsDocInfo 
[REPLACE]^if  ( parent  !=  scope.getRootNode (  )  )  return;^1262^^^^^1261^1283^[REPLACE] if  ( n == scope.getRootNode (  )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^1262^1263^1264^1265^1266^1261^1283^[ADD] if  ( n == scope.getRootNode (  )  )  return;  if  ( n.getType (  )  == Token.LP && parent == scope.getRootNode (  )  )  { handleFunctionInputs ( parent ) ; return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^1262^^^^^1261^1283^[REPLACE] if  ( n == scope.getRootNode (  )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )  == Token.LP || parent == scope.getRootNode (  )  )  {^1264^^^^^1261^1283^[REPLACE] if  ( n.getType (  )  == Token.LP && parent == scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^handleFunctionInputs ( parent ) ;return;^1264^1265^1266^1267^^1261^1283^[ADD] if  ( n.getType (  )  == Token.LP && parent == scope.getRootNode (  )  )  { handleFunctionInputs ( parent ) ; return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^1266^^^^^1261^1283^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )   &&  Token.NAME )  {^1272^^^^^1261^1283^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^return;  ;^1273^^^^^1261^1283^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^1288^^^^^1286^1305^[REPLACE] Node fnNameNode = fnNode.getFirstChild (  ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^String fnName = fnNode .getFirstChild (  )  ;^1289^^^^^1286^1305^[REPLACE] String fnName = fnNameNode.getString (  ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^if  ( fnName.isEmpty (  )  )  {^1290^^^^^1286^1305^[REPLACE] if  ( !fnName.isEmpty (  )  )  {^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[ADD]^Scope.Var fnVar = scope.getVar ( fnName ) ;^1290^1291^1292^^^1286^1305^[ADD] if  ( !fnName.isEmpty (  )  )  { Scope.Var fnVar = scope.getVar ( fnName ) ; if  ( fnVar == null ||^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^if  ( fnVar != null ||^1292^1293^1294^1295^^1286^1305^[REPLACE] if  ( fnVar == null ||^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[ADD]^^1292^1293^^^1296^1286^1305^[ADD] if  ( fnVar == null ||  ( fnVar.getNameNode (  )  != null &&^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , true ) ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^defineSlot ( fnNameNode, fnNameNode, fnNode.getType (  ) , false ) ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[ADD]^^1300^^^^^1292^1301^[ADD] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^String fnName = fnNameNode.getString (  )  ;^1291^^^^^1286^1305^[REPLACE] Scope.Var fnVar = scope.getVar ( fnName ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^defineSlot ( fnNameNode, fnNameNode, fnNode .getType (  )  , false ) ;^1300^^^^^1292^1301^[REPLACE] defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^Scope.Var fnVar = scope .getRootNode (  )  ;^1291^^^^^1286^1305^[REPLACE] Scope.Var fnVar = scope.getVar ( fnName ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^declareArguments ( fnNameNode ) ;^1304^^^^^1286^1305^[REPLACE] declareArguments ( fnNode ) ;^[METHOD] handleFunctionInputs [TYPE] void [PARAMETER] Node fnNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Var fnVar  [TYPE]  Node fnNameNode  fnNode  [TYPE]  String fnName 
[REPLACE]^Node astParameters = jsDocParameters.getFirstChild (  ) .getNext (  ) ;^1311^^^^^1310^1329^[REPLACE] Node astParameters = functionNode.getFirstChild (  ) .getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node body = jsDocParameters.getType (  ) ;^1312^^^^^1310^1329^[REPLACE] Node body = astParameters.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^^1313^^^^^1310^1329^[ADD] FunctionType functionType =  ( FunctionType )  functionNode.getJSType (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if  ( functionType == null )  {^1314^^^^^1310^1329^[REPLACE] if  ( functionType != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if  (jsDocParameter == null )  {^1316^^^^^1310^1329^[REPLACE] if  ( jsDocParameters != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if   (  jsDocParameters != null  )   {  ;^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^^1319^1320^1321^1322^^1310^1329^[ADD] if  ( jsDocParameter != null )  { defineSlot ( astParameter, functionNode, jsDocParameter.getJSType (  ) , true ) ; jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^defineSlot ( astParameter, jsDocParameters, false, true ) ;^1324^^^^^1319^1325^[REPLACE] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^jsDocParameter =  jsDocParameters.getNext (  ) ;^1322^^^^^1310^1329^[REPLACE] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^for  ( Node jsDocParameters : astParameters.children (  )  )  {^1318^^^^^1316^1327^[REPLACE] for  ( Node astParameter : astParameters.children (  )  )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^jsDocParameter =  functionNode.getNext (  ) ;^1322^^^^^1316^1327^[REPLACE] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node jsDocParameter = jsDocParameter.getFirstChild (  ) ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node body = astParameters.getNext (  )  ;^1318^^^^^1316^1327^[REPLACE] for  ( Node astParameter : astParameters.children (  )  )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if  ( jsDocParameter == this )  {^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^defineSlot ( astParameter, functionNode, true, true ) ;^1324^^^^^1319^1325^[REPLACE] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REMOVE]^defineSlot ( fnNameNode, fnNode, fnNode.getJSType (  ) , false )  ;^1324^^^^^1319^1325^[REMOVE] ^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^^1322^^^^^1310^1329^[ADD] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^^1322^^^^^1316^1327^[ADD] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^^1315^^^^^1316^1327^[ADD] Node jsDocParameters = functionType.getParametersNode (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node jsDocParameter = jsDocParameter.getString (  ) ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if  ( jsDocParameter == null )  {^1316^^^^^1310^1329^[REPLACE] if  ( jsDocParameters != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^1316^1317^1318^1319^1320^1310^1329^[ADD] if  ( jsDocParameters != null )  { Node jsDocParameter = jsDocParameters.getFirstChild (  ) ; for  ( Node astParameter : astParameters.children (  )  )  { if  ( jsDocParameter != null )  { defineSlot ( astParameter, functionNode,^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if  (jsDocParameters == null )  {^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^defineSlot ( astParameter, functionNode, this, true ) ;^1324^^^^^1319^1325^[REPLACE] defineSlot ( astParameter, functionNode, null, true ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^jsDocParameter =  null.getNext (  ) ;^1322^^^^^1310^1329^[REPLACE] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^jsDocParameter =  jsDocParameters.getNext (  ) ;^1322^^^^^1316^1327^[REPLACE] jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node astParameters = functionNode.getFirstChild (  ) .getNext (  )  ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^if  ( jsDocParameter == true )  {^1319^^^^^1310^1329^[REPLACE] if  ( jsDocParameter != null )  {^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node jsDocParameter = jsDocParameters.getFirstChild (  )  ;^1315^^^^^1316^1327^[REPLACE] Node jsDocParameters = functionType.getParametersNode (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[REPLACE]^Node jsDocParameter = functionNode.getFirstChild (  ) ;^1317^^^^^1316^1327^[REPLACE] Node jsDocParameter = jsDocParameters.getFirstChild (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
[ADD]^^1318^1319^1320^1321^1322^1316^1327^[ADD] for  ( Node astParameter : astParameters.children (  )  )  { if  ( jsDocParameter != null )  { defineSlot ( astParameter, functionNode, jsDocParameter.getJSType (  ) , true ) ; jsDocParameter = jsDocParameter.getNext (  ) ;^[METHOD] declareArguments [TYPE] void [PARAMETER] Node functionNode [CLASS] LocalScopeBuilder   [TYPE]  boolean false  true  [TYPE]  Node astParameter  astParameters  body  functionNode  jsDocParameter  jsDocParameters  [TYPE]  FunctionType functionType 
