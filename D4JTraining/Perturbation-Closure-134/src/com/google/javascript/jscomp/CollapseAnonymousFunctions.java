[REPLACE]^if  ( n.removeChild (  )   ==  Token.VAR )  {^56^^^^^55^89^[REPLACE] if  ( n.getType (  )  != Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^return;  ;^57^^^^^55^89^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node grandparent = parent.getString (  ) ;^66^^^^^55^89^[REPLACE] Node grandparent = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^if  ( ! ( parent.getType (  )  != Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^55^89^[REPLACE] if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[ADD]^^67^68^69^70^71^55^89^[ADD] if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  { return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^return;  ;^71^^^^^67^72^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^return;  ;^71^^^^^55^89^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^checkArgument ( compiler.isNormalized (  )  )  ;^76^^^^^55^89^[REPLACE] Preconditions.checkState ( n.hasOneChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[ADD]^^76^^^^^55^89^[ADD] Preconditions.checkState ( n.hasOneChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^76^^^^^55^89^[REPLACE] Preconditions.checkState ( n.hasOneChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node grandparent = parent.getParent (  )  ;^77^^^^^55^89^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node value = value.getFirstChild (  ) ;^78^^^^^55^89^[REPLACE] Node value = name.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^55^89^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node fnName = parent.getFirstChild (  ) ;^82^^^^^79^88^[REPLACE] Node fnName = value.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node fnName = parent.getString (  ) ;^82^^^^^55^89^[REPLACE] Node fnName = value.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseAnonymousFunctions Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^if  ( n.getType (  )   ==  Token.VAR )  {^56^^^^^55^89^[REPLACE] if  ( n.getType (  )  != Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^return;  ;^57^^^^^55^89^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node fnName = value.getFirstChild (  )  ;^66^^^^^55^89^[REPLACE] Node grandparent = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^if  ( ! ( parent.getType (  )  != Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^67^68^69^70^^55^89^[REPLACE] if  ( ! ( parent.getType (  )  == Token.SCRIPT || grandparent != null && grandparent.getType (  )  == Token.FUNCTION && parent.getType (  )  == Token.BLOCK )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^return;  ;^71^^^^^67^72^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^return;  ;^71^^^^^55^89^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^76^^^^^55^89^[REPLACE] Preconditions.checkState ( n.hasOneChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[ADD]^^76^77^^^^55^89^[ADD] Preconditions.checkState ( n.hasOneChild (  )  ) ; Node name = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node parentame = n.getFirstChild (  ) ;^77^^^^^55^89^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node value = name .getString (  )  ;^78^^^^^55^89^[REPLACE] Node value = name.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.FUNCTION && !isRecursiveFunction ( value )  )  {^79^80^81^^^55^89^[REPLACE] if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[ADD]^^79^80^81^82^83^55^89^[ADD] if  ( value != null && value.getType (  )  == Token.FUNCTION && !isRecursiveFunction ( value )  )  { Node fnName = value.getFirstChild (  ) ; fnName.setString ( name.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[ADD]^fnName.setString ( name.getString (  )  ) ;^82^83^^^^79^88^[ADD] Node fnName = value.getFirstChild (  ) ; fnName.setString ( name.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
[REPLACE]^Node grandparent = parent.getParent (  )  ;^82^^^^^55^89^[REPLACE] Node fnName = value.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node fnName  grandparent  n  name  parent  value 
