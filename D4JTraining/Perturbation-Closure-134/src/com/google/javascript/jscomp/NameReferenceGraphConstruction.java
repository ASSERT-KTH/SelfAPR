[REPLACE]^private  NameReferenceGraph graph;^51^^^^^^^[REPLACE] private final NameReferenceGraph graph;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^private final Multimap<String, Pair<Name, Reference>> unknownNameUse  = null ;^58^59^^^^58^59^[REPLACE] private final Multimap<String, Pair<Name, Reference>> unknownNameUse = HashMultimap.create (  ) ;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^private static final boolean CONSERVATIVE = true;^62^^^^^^^[REPLACE] private static final boolean CONSERVATIVE = false;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^private final ArrayList<Name> currentFunctionStack ;^67^^^^^^^[REPLACE] private final ArrayList<Name> currentFunctionStack = new ArrayList<Name> (  ) ;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^ScopeCreator scopeCreator = compiler .getTopScope (  )  ;^82^^^^^78^102^[REPLACE] ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( scopeCreator != null )  {^83^^^^^78^102^[REPLACE] if  ( scopeCreator == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[ADD]^^83^84^^^87^78^102^[ADD] if  ( scopeCreator == null )  {  scopeCreator = new TypedScopeCreator ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^scopeCreator ;^87^^^^^78^102^[REPLACE] scopeCreator = new TypedScopeCreator ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^scopeCreator  = null ;^87^^^^^78^102^[REPLACE] scopeCreator = new TypedScopeCreator ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^89^90^^^^78^102^[REPLACE] NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^91^92^^^^78^102^[REPLACE] NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^ScopeCreator scopeCreator = compiler.getScopeCreator (  )  ;^93^^^^^78^102^[REPLACE] Scope topScope = compiler.getTopScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( topScope == this )  {^94^^^^^78^102^[REPLACE] if  ( topScope != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[ADD]^externsTraversal.traverseWithScope ( externs, topScope ) ;codeTraversal.traverseWithScope ( root, topScope ) ;externsTraversal.traverse ( externs ) ;^94^95^96^97^98^78^102^[ADD] if  ( topScope != null )  { externsTraversal.traverseWithScope ( externs, topScope ) ; codeTraversal.traverseWithScope ( root, topScope ) ; } else { externsTraversal.traverse ( externs ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^getType ( n )  ;^98^^^^^94^100^[REPLACE] externsTraversal.traverse ( externs ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^codeTraversal .traverseWithScope ( externs , topScope )  ;^99^^^^^94^100^[REPLACE] codeTraversal.traverse ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^codeTraversal.traverseWithScope ( root, topScope )  ;^95^^^^^78^102^[REPLACE] externsTraversal.traverseWithScope ( externs, topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^externsTraversal.traverseWithScope ( externs, topScope )  ;^96^^^^^78^102^[REPLACE] codeTraversal.traverseWithScope ( root, topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[ADD]^^96^^^^^78^102^[ADD] codeTraversal.traverseWithScope ( root, topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^getType ( n )  ;^101^^^^^78^102^[REPLACE] connectUnknowns (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[ADD]^^115^116^^^^114^153^[ADD] Node root = t.getScopeRoot (  ) ; Node parent = root.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node symbol = getProp.getNext (  )  ;^116^^^^^114^153^[REPLACE] Node parent = root.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^120^^^^^114^153^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name != this  )  {^127^^^^^114^153^[REPLACE] if  ( name == null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^127^128^^^131^114^153^[ADD] if  ( name == null )  {  pushContainingFunction ( graph.UNKNOWN ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^132^^^^^114^153^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( NodeUtil.isAssign ( parent )  || NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^114^153^[REPLACE] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^148^149^150^^^142^151^[ADD] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getFirstChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getLastChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^114^153^[REPLACE] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType type = getType ( parent ) ;^138^^^^^114^153^[REPLACE] JSType type = getType ( root ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node gParent = root.getParent (  ) ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node ggParent = root.getParent (  ) ;^141^^^^^114^153^[REPLACE] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name != null )  {^127^^^^^114^153^[REPLACE] if  ( name == null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node gParent = parent .getNext (  )  ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^141^^^^^114^153^[ADD] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( NodeUtil.isGetProp ( varName )  ) {^173^174^^^^169^241^[REPLACE] if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^173^174^^176^^169^241^[ADD] if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  { return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  if  ( NodeUtil.isFunction ( varName )  )  {^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^} else if   (  NodeUtil.isFunction  (  parent  )    )   {  ;^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^182^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^179^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^} else if  ( NodeUtil .isFunction ( lhs )   )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^176^^^^^173^183^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  else {^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  else {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^}   return;^180^181^182^183^^169^241^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if   (  cf != graph.UNKNOWN  )   {  ;^185^^^^^169^241^[REPLACE] if  ( isLocalNameReference ( t, n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^187^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if   (  cf != graph.UNKNOWN  )   {  ;^190^^^^^169^241^[REPLACE] if  ( isPrototypeNameReference ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordStaticNameUse ( t, n, parent )  ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordPrototypePropUse ( t, n, parent )  ;^193^^^^^169^241^[REPLACE] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^193^^^^^169^241^[ADD] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordStaticNameUse ( t, n, parent )  ;^191^^^^^169^241^[REPLACE] recordPrototypePropUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^191^^^^^169^241^[ADD] recordPrototypePropUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REMOVE]^ref.setUnknown ( true )  ;^195^^^^^192^196^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isAssign ( varName )  )  {^202^^^^^169^241^[REPLACE] if  ( NodeUtil.isFunction ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^204^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  (  NodeUtil.isGetProp ( lhs )  && NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^169^241^[REPLACE] if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if   (  cf != graph.UNKNOWN  )   {  ;^209^^^^^206^214^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isPrototypeProperty ( rhs )  )  {^209^^^^^169^241^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( parent ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  (varName != null )  {^222^^^^^169^241^[REPLACE] if  ( assignedValue == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^223^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if   (  NodeUtil.isName  (  lhs  )   || NodeUtil.isGetProp  (  lhs  )   ||  ;^233^^^^^169^241^[REPLACE] if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^safeAlias ( param ) ;^233^234^235^^^169^241^[ADD] if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^safeAlias ( varName ) ;^234^^^^^169^241^[REPLACE] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^while  (  ( param =  null.getNext (  )  )  !^232^^^^^169^241^[REPLACE] while  (  ( param = param.getNext (  )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return;  ;^176^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node lhs = n .getLastChild (  )  ;^200^^^^^169^241^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node rhs = varName.getLastChild (  ) ;^201^^^^^169^241^[REPLACE] Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getNext (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^220^221^^^^169^241^[ADD] Node varName = n.getFirstChild (  ) ; Node assignedValue = varName.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node assignedValue = rhs .getLastChild (  )  ;^221^^^^^169^241^[REPLACE] Node assignedValue = varName.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^229^^^^^169^241^[ADD] Node param = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^[REPLACE] if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name == null )  {^259^^^^^255^280^[REPLACE] if  ( name != null )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^259^260^261^262^^255^280^[ADD] if  ( name != null )  { defineAndAlias ( name ) ; return; }^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^261^^^^^255^280^[REPLACE] return;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = n.getParent (  ) ;^257^^^^^255^280^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name == false )  {^259^^^^^255^280^[REPLACE] if  ( name != null )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = n .getParent (  )  ;^257^^^^^255^280^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if   (  NodeUtil.isName  (  n  )    )   {  ;^265^^^^^255^280^[REPLACE] if  ( NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  parent  )    )   {  ;^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  if  ( n.hasChildren (  )  )  {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^} while  (  ( cur =  null.getNext (  )  )  !^276^^^^^255^280^[REPLACE] } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^273^^^^^255^280^[ADD] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^276^^^^^255^280^[ADD] while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node cur = n.getLastChild (  ) ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^getType ( n.getFirstChild (  )  )  ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^parent.getFirstChild (  )  ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REMOVE]^root.getLastChild (  )  ;^271^^^^^255^280^[REMOVE] ^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  else {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node cur = n .getLastChild (  )  ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType type = getType ( n.getFirstChild (  )  )  ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^defineAndAlias ( n.getLastChild (  )  .getVar (  )   ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^267^^^^^255^280^[ADD] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^defineAndAlias ( n.getFirstChild (  ) .getString (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^defineAndAlias ( n .getFirstChild (  )  .getString (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  else {^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^}   safeAlias ( n.getFirstChild (  )  ) ;^268^269^^271^^255^280^[ADD] else if  ( NodeUtil.isAssign ( n )  )  {  safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkNotNull ( NodeUtil.isCall ( call )  ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^^297^^^^^296^333^[ADD] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isCall ( symbol )  ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^^298^^^^^296^333^[ADD] Node getProp = call.getFirstChild (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !NodeUtil.isNew ( symbol )  )  {^299^^^^^296^333^[REPLACE] if  ( !NodeUtil.isGetProp ( getProp )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^300^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propQName = symbol.getParent (  ) ;^303^^^^^296^333^[REPLACE] String propQName = getProp.getQualifiedName (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( propQName != this )  {^305^^^^^296^333^[REPLACE] if  ( propQName == null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^306^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( propQName.equals ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^333^[REPLACE] if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getLastChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^isExtern ) .markExposedToCallOrApply (  ) ;^312^313^314^^^296^333^[ADD] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^^312^313^314^^^296^333^[ADD] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^296^333^[REPLACE] if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^317^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node symbol = symbol.getNext (  ) ;^320^^^^^296^333^[REPLACE] Node symbol = getProp.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !NodeUtil.isString ( obj )  )  {^321^^^^^296^333^[REPLACE] if  ( !NodeUtil.isString ( symbol )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^322^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node obj = obj.getNext (  ) ;^325^^^^^296^333^[REPLACE] Node obj = symbol.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = n.getQualifiedName (  )  ;^326^^^^^296^333^[REPLACE] String qName = obj.getQualifiedName (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  (  obj.getNext (  )  != null )  {^328^^^^^296^333^[REPLACE] if  ( qName == null || obj.getNext (  )  != null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return;  ;^329^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( name, isExtern )  ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REMOVE]^graph.getNodes (  )  ;^332^^^^^296^333^[REMOVE] ^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( getNamedContainingFunction (  )   ==  graph.MAIN )  {^380^^^^^379^398^[REPLACE] if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( type.isFunctionType (  )  ) {^385^^^^^379^398^[REPLACE] if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isString ( n )  )  {^391^^^^^385^397^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return symbol;  ;^396^^^^^385^397^[REPLACE] return symbol;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^389^^^^^385^397^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , gParent ) ;^386^387^^^^379^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if   (  NodeUtil.isName  (  n  )    )   {  ;^391^^^^^379^398^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^391^392^393^394^395^379^398^[ADD] if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol .addAssignmentDeclaration ( parent )  ;^394^^^^^391^395^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( n )  ;^392^^^^^379^398^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return recordClassConstructorOrInterface ( parentame,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^386^387^^^^379^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return symbol;  ;^396^^^^^379^398^[REPLACE] return symbol;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^389^^^^^379^398^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^FunctionType classType = null;^407^408^^^^406^435^[ADD] JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ; FunctionType classType = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^408^409^^^^406^435^[ADD] FunctionType classType = null; String className = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^409^^^^^406^435^[ADD] String className = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( ! constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^[REPLACE] if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^417^418^^^^411^420^[ADD] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^classType =   ( FunctionType )  constructor;^413^^^^^406^435^[REPLACE] classType =  ( FunctionType )  constructor;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^414^^^^^406^435^[ADD] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^className =  null.getReferenceName (  ) ;^414^^^^^406^435^[REPLACE] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^417^418^^^^406^435^[ADD] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^recordClassConstructorOrInterface ( qNameStr, classType, this, this, this, this ) ;^422^423^^^^406^435^[REPLACE] recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^422^423^^^^406^435^[ADD] recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^String qNameStr = className  ".prototype."  NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^[REPLACE] String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^Name prototypeProp = graph.defineNameIfNotExists ( className, isExtern ) ;^427^^^^^406^435^[REPLACE] Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^Preconditions.checkNotNull ( prototypeProp, qNameStr  " should be in the name graph as a node." ) ;^428^429^^^^406^435^[REPLACE] Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^428^429^^^^406^435^[ADD] Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( assign ==gParent )  {^430^^^^^406^435^[REPLACE] if  ( assign != null )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^prototypeProp.addAssignmentDeclaration ( assign ) ;^430^431^432^^^406^435^[ADD] if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.addAssignmentDeclaration ( gParent ) ;^431^^^^^406^435^[REPLACE] prototypeProp.addAssignmentDeclaration ( assign ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^431^^^^^406^435^[ADD] prototypeProp.addAssignmentDeclaration ( assign ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.addAssignmentDeclaration ( type ) ;^433^^^^^406^435^[REPLACE] prototypeProp.setType ( type ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REMOVE]^( classType.getSubTypes (  )  )  ;^433^^^^^406^435^[REMOVE] ^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^return prototypeProp;  ;^434^^^^^406^435^[REPLACE] return prototypeProp;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^Preconditions.checkNotNull ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^[REPLACE] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^[REPLACE] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^[REPLACE] Node instance = n.getFirstChild (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType type = getType ( n.getFirstChild (  )  )  ;^455^^^^^452^480^[REPLACE] JSType instanceType = getType ( instance ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^456^457^^^^452^480^[ADD] JSType boxedType = instanceType.autoboxesTo (  ) ; instanceType = boxedType != null ? boxedType : instanceType;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^instanceType = boxedType == null ? boxedType : instanceType;^457^^^^^452^480^[REPLACE] instanceType = boxedType != null ? boxedType : instanceType;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^ObjectType objType = boxedType .isFunctionType (  )  ;^460^^^^^452^480^[REPLACE] ObjectType objType = instanceType.toObjectType (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^checkNotNull ( containingFn )  ;^461^^^^^452^480^[REPLACE] Preconditions.checkState ( objType != null ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REMOVE]^( isName ( lhs )  )  ;^461^^^^^452^480^[REMOVE] ^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( isExtern )  {^463^^^^^452^480^[REPLACE] if  ( !isExtern )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( constructor == null )  {^468^^^^^452^480^[REPLACE] if  ( constructor != null )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordStaticNameUse ( t, n, parent )  ;^477^^^^^468^478^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !constructor.getPrototype (  ) .setAliased ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordSubclassPrototypePropUse ( subclass, prop, ref )  ;^471^^^^^452^480^[REPLACE] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REMOVE]^superClass.getPrototype (  )  ;^471^^^^^452^480^[REMOVE] ^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^471^^^^^452^480^[ADD] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^465^^^^^452^480^[ADD] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^FunctionType constructor = objType.getOwnPropertyNames (  ) ;^467^^^^^452^480^[REPLACE] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^469^^^^^452^480^[ADD] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^477^^^^^468^478^[ADD] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !constructor.getSubTypes (  ) .hasOwnProperty ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propName = n .getFirstChild (  )  .getString (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Reference ref = instanceew Reference ( n, parent ) ;^465^^^^^452^480^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^FunctionType constructor = objType .getOwnPropertyNames (  )  ;^467^^^^^452^480^[REPLACE] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )  ;^538^^^^^537^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^( constructor.isConstructor (  )  )  ;^538^^^^^537^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )  || type .isConstructor (  )   ) ;^538^^^^^537^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^538^^^^^537^555^[ADD] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern )  ;^539^^^^^537^555^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( rhs == null )  {^540^^^^^537^555^[REPLACE] if  ( rhs != null )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^540^541^542^543^544^537^555^[ADD] if  ( rhs != null )  {  symbol.setType ( getType ( rhs )  ) ; if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if   (  NodeUtil.isName  (  n  )    )   {  ;^543^^^^^537^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( n )  ;^546^^^^^543^547^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^546^^^^^543^547^[ADD] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( n ) ;^544^^^^^537^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^544^^^^^537^555^[ADD] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isString ( n )  )  {^543^^^^^537^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^543^544^545^546^547^537^555^[ADD] if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( parent ) ;^546^^^^^543^547^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( n )  ;^544^^^^^537^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^JSType type = getType ( n.getFirstChild (  )  )  ;^549^^^^^537^555^[REPLACE] ObjectType prototype = type.getPrototype (  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^550^551^552^553^^537^555^[ADD] for  ( String prop : prototype.getOwnPropertyNames (  )  )  { graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ; }^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^graph.defineNameIfNotExists ( name  ".prototype."  prop, isExtern ) ;^551^552^^^^537^555^[REPLACE] graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^551^552^^^^537^555^[ADD] graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Name, Reference>> uses = unknownNameUse.get ( propName )  ;^550^^^^^537^555^[REPLACE] for  ( String prop : prototype.getOwnPropertyNames (  )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return symbol;  ;^554^^^^^537^555^[REPLACE] return symbol;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^115^^^^^114^153^[ADD] Node root = t.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node parent = parent.getParent (  ) ;^116^^^^^114^153^[REPLACE] Node parent = root.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^120^^^^^114^153^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( name != false )  {^127^^^^^114^153^[REPLACE] if  ( name == null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^return;  ;^132^^^^^114^153^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  (  NodeUtil.isPrototypeProperty ( parent.getLastChild (  )  )  )  {^142^143^^^^114^153^[REPLACE] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^142^143^144^145^146^114^153^[ADD] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  { pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getFirstChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getLastChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^145^146^^^^142^151^[ADD] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^125^^^^^114^153^[ADD] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^JSType boxedType = instanceType.autoboxesTo (  )  ;^138^^^^^114^153^[REPLACE] JSType type = getType ( root ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node gParent = parent.getNext (  ) ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^141^^^^^114^153^[ADD] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( name != null )  {^127^^^^^114^153^[REPLACE] if  ( name == null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  (  NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^114^153^[REPLACE] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, root, root.getFirstChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^t, name, type, parent, parent, gParent, root.getFirstChild (  )  )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^JSType boxedType = instanceType.autoboxesTo (  )  ;^125^^^^^114^153^[REPLACE] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^JSType type = getType ( parent ) ;^138^^^^^114^153^[REPLACE] JSType type = getType ( root ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node gParent = root.getParent (  ) ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node ggParent = root.getParent (  ) ;^141^^^^^114^153^[REPLACE] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( NodeUtil.isGetProp ( varName )  && parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^169^241^[REPLACE] if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  parent  )    )   {  ;^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  else {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^182^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^179^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^176^^^^^173^183^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  if  ( NodeUtil .isFunction ( param )   )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^}   return;^180^181^182^183^^169^241^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( isLocalNameReference ( t, varName )  )  {^185^^^^^169^241^[REPLACE] if  ( isLocalNameReference ( t, n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^187^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if   (  rhs != null  )   {  ;^190^^^^^169^241^[REPLACE] if  ( isPrototypeNameReference ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^195^^^^^192^196^[ADD] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordPrototypePropUse ( t, n, parent )  ;^193^^^^^169^241^[REPLACE] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordPrototypePropUse ( t, varName, parent ) ;^191^^^^^169^241^[REPLACE] recordPrototypePropUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  if  ( isStaticNameReference ( n, t.getScopeRoot (  )  )  )  {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordStaticNameUse ( t, n, parent )  ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^193^^^^^169^241^[ADD] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if   (  NodeUtil.isAssign  (  n  )    )   {  ;^202^^^^^169^241^[REPLACE] if  ( NodeUtil.isFunction ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^204^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  && NodeUtil.isNew ( lhs )  && NodeUtil.isGetProp ( rhs )  )  {^206^207^208^^^169^241^[REPLACE] if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if   (  rhs != null  )   {  ;^209^^^^^206^214^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^209^210^211^212^213^206^214^[ADD] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  { Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ; name.setAliased ( true ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getNext (  )  ) ;^210^211^^^^206^214^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if   (  rhs != null  )   {  ;^209^^^^^169^241^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( assignedValue != false )  {^222^^^^^169^241^[REPLACE] if  ( assignedValue == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^return;^222^223^224^^^169^241^[ADD] if  ( assignedValue == null )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^223^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( varName )  && NodeUtil.isGetProp ( param )  )  {^233^^^^^169^241^[REPLACE] if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^safeAlias ( rhs )  ;^234^^^^^169^241^[REPLACE] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REMOVE]^safeAlias ( rhs )  ;^234^^^^^169^241^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^232^233^234^^^169^241^[ADD] while  (  ( param = param.getNext (  )  )  != null )  { if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return;  ;^176^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^200^201^^^^169^241^[ADD] Node lhs = n.getFirstChild (  ) ; Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node instance = n.getFirstChild (  )  ;^201^^^^^169^241^[REPLACE] Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, assignedValue, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node varName = n.getLastChild (  ) ;^220^^^^^169^241^[REPLACE] Node varName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node assignedValue = rhs.getFirstChild (  ) ;^221^^^^^169^241^[REPLACE] Node assignedValue = varName.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node param = varName .getLastChild (  )  ;^229^^^^^169^241^[REPLACE] Node param = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^[REPLACE] if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^if  ( name == null )  {^259^^^^^255^280^[REPLACE] if  ( name != null )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^defineAndAlias ( name ) ;return;^259^260^261^262^^255^280^[ADD] if  ( name != null )  { defineAndAlias ( name ) ; return; }^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^return;  ;^261^^^^^255^280^[REPLACE] return;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^257^258^259^260^261^255^280^[ADD] String name = n.getQualifiedName (  ) ;  if  ( name != null )  { defineAndAlias ( name ) ; return;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^259^260^261^262^^255^280^[ADD] if  ( name != null )  { defineAndAlias ( name ) ; return; }^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^String name = n.getParent (  ) ;^257^^^^^255^280^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^if   (  NodeUtil.isAssign  (  n  )    )   {  ;^265^^^^^255^280^[REPLACE] if  ( NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^}  else {^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^}   safeAlias ( n.getFirstChild (  )  ) ;^268^269^^271^^255^280^[ADD] else if  ( NodeUtil.isAssign ( n )  )  {  safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^}  else {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^}   safeAlias ( cur ) ;} while  (  ( cur = cur.getNext (  )  )  != null ) ;^272^273^274^275^276^255^280^[ADD] else if  ( n.hasChildren (  )  )  { Node cur = n.getFirstChild (  ) ; do { safeAlias ( cur ) ; } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^} while  (  ( cur =  null.getNext (  )  )  !^276^^^^^255^280^[REPLACE] } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^Node cur = n.getLastChild (  ) ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^276^^^^^255^280^[ADD] while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^getType ( n.getFirstChild (  )  )  ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^parent.getFirstChild (  )  ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^}  if  ( n.hasChildren (  )  )  {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^defineAndAlias ( n.getLastChild (  ) .hasOwnProperty (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^defineAndAlias ( n.getFirstChild (  ) .getString (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^267^^^^^255^280^[ADD] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  parent  )    )   {  ;^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^}   Node cur = n.getFirstChild (  ) ;safeAlias ( cur ) ;} while  (  ( cur = cur.getNext (  )  )  != null ) ;^272^273^274^275^276^255^280^[ADD] else if  ( n.hasChildren (  )  )  { Node cur = n.getFirstChild (  ) ; do { safeAlias ( cur ) ; } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^( param = param.getNext (  )  )  ;^276^^^^^255^280^[REPLACE] } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^273^^^^^255^280^[ADD] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^Node cur = n .getLastChild (  )  ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^safeAlias ( n.getLastChild (  )  ) ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^checkArgument ( isGetProp ( n )  )  ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isCall ( symbol )  ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^Node getProp = call.getFirstChild (  ) ;^297^298^^^^296^333^[ADD] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ; Node getProp = call.getFirstChild (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^298^^^^^296^333^[ADD] Node getProp = call.getFirstChild (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( !NodeUtil.isNew ( symbol )  )  {^299^^^^^296^333^[REPLACE] if  ( !NodeUtil.isGetProp ( getProp )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return;  ;^300^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^303^304^305^306^307^296^333^[ADD] String propQName = getProp.getQualifiedName (  ) ;  if  ( propQName == null )  { return; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if   (  name != null  )   {  ;^305^^^^^296^333^[REPLACE] if  ( propQName == null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return;  ;^306^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( propQName.endsWith ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^333^[REPLACE] if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .setAliased (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( getProp.getFirstChild (  )  .getParent (  )  , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( symbol .getLastChild (  )  .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^312^313^314^^^296^333^[ADD] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^296^333^[REPLACE] if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return;  ;^317^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Node instance = n.getFirstChild (  )  ;^320^^^^^296^333^[REPLACE] Node symbol = getProp.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( !NodeUtil .isAssign ( obj )   )  {^321^^^^^296^333^[REPLACE] if  ( !NodeUtil.isString ( symbol )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REMOVE]^if  (  ( isName ( param )  )  ||  ( isGetProp ( param )  )  )  {     safeAlias ( param ) ; }^321^^^^^296^333^[REMOVE] ^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return;  ;^322^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Node obj = obj.getNext (  ) ;^325^^^^^296^333^[REPLACE] Node obj = symbol.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^326^327^328^329^330^296^333^[ADD] String qName = obj.getQualifiedName (  ) ;  if  ( qName == null || obj.getNext (  )  != null )  { return; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( qName != null ) {^328^^^^^296^333^[REPLACE] if  ( qName == null || obj.getNext (  )  != null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return;  ;^329^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( name, isExtern )  ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( getNamedContainingFunction (  )   ==  graph.MAIN )  {^380^^^^^379^398^[REPLACE] if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^if  ( type.isFunctionType (  )  || type.isConstructor (  )  )  {^385^^^^^379^398^[REPLACE] if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[ADD]^^385^386^387^388^389^379^398^[ADD] if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  { return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ; } else { Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  n  )    )   {  ;^391^^^^^385^397^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^return symbol;  ;^396^^^^^385^397^[REPLACE] return symbol;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^389^^^^^385^397^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent .getNext (  )  , rValue ) ;^386^387^^^^379^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isString ( parent )  )  {^391^^^^^379^398^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[ADD]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^391^392^393^394^395^379^398^[ADD] if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( n ) ;^394^^^^^391^395^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( parent ) ;^392^^^^^379^398^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^return   (  type instanceof InstanceObjectType || type.autoboxesTo  (    )   != null  )  ;  ;^386^387^^^^379^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^return symbol;  ;^396^^^^^379^398^[REPLACE] return symbol;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^389^^^^^379^398^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^[REPLACE] JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^408^^^^^406^435^[ADD] FunctionType classType = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^String className = this;^409^^^^^406^435^[REPLACE] String className = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( ! constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^[REPLACE] if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^411^412^413^414^^406^435^[ADD] if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {  classType =  ( FunctionType )  constructor; className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^classType  =  classType ;^417^418^^^^411^420^[REPLACE] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^419^420^^^^411^420^[ADD] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ; }^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^classType =   ( FunctionType )  constructor;^413^^^^^406^435^[REPLACE] classType =  ( FunctionType )  constructor;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^className =  null.getReferenceName (  ) ;^414^^^^^406^435^[REPLACE] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^classType ;^417^418^^^^406^435^[REPLACE] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^recordClassConstructorOrInterface ( className, classType, true, true, true, true ) ;^422^423^^^^406^435^[REPLACE] recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^String qNameStr = className  ".prototype."  NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^[REPLACE] String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^Name prototypeProp = graph.connect ( className, isExtern ) ;^427^^^^^406^435^[REPLACE] Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^Preconditions.checkNotNull ( prototypeProp,className  " should be in the name graph as a node." ) ;^428^429^^^^406^435^[REPLACE] Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( assign == this  )  {^430^^^^^406^435^[REPLACE] if  ( assign != null )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^prototypeProp.addAssignmentDeclaration ( assign ) ;^430^431^432^^^406^435^[ADD] if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^symbol.addAssignmentDeclaration ( n )  ;^431^^^^^406^435^[REPLACE] prototypeProp.addAssignmentDeclaration ( assign ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.setType ( constructor ) ;^433^^^^^406^435^[REPLACE] prototypeProp.setType ( type ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^return prototypeProp;  ;^434^^^^^406^435^[REPLACE] return prototypeProp;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^[REPLACE] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^453^454^^^^452^480^[ADD] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ; Node instance = n.getFirstChild (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REMOVE]^( isName ( lhs )  )  ;^453^^^^^452^480^[REMOVE] ^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^[REPLACE] Node instance = n.getFirstChild (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^[REPLACE] JSType instanceType = getType ( instance ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^[REPLACE] JSType boxedType = instanceType.autoboxesTo (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^instanceType  =  instanceType;^457^^^^^452^480^[REPLACE] instanceType = boxedType != null ? boxedType : instanceType;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^ObjectType objType = boxedType.isUnionType (  ) ;^460^^^^^452^480^[REPLACE] ObjectType objType = instanceType.toObjectType (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Preconditions.checkState ( objType == null ) ;^461^^^^^452^480^[REPLACE] Preconditions.checkState ( objType != null ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( isExtern )  {^463^^^^^452^480^[REPLACE] if  ( !isExtern )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( constructor == null )  {^468^^^^^452^480^[REPLACE] if  ( constructor != null )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^recordStaticNameUse ( t, n, parent )  ;^477^^^^^468^478^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^recordSubclassPrototypePropUse ( subclass, prop, ref )  ;^471^^^^^452^480^[REPLACE] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^String propName = parent.getFirstChild (  ) .getString (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^471^^^^^452^480^[ADD] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Reference reference = new Reference ( n, parent )  ;^465^^^^^452^480^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^FunctionType classType = null  ;^467^^^^^452^480^[REPLACE] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^String propName = n.getLastChild (  ) .getString (  ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^468^469^470^471^472^452^480^[ADD] if  ( constructor != null )  { String propName = n.getLastChild (  ) .getString (  ) ; if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^468^478^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( !constructor .getSubTypes (  )  .hasOwnProperty ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( !constructor.getPrototype (  ) .setAliased ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^465^^^^^452^480^[ADD] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )   !=  type.isInterface (  )  ) ;^538^^^^^537^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^538^539^^^^537^555^[ADD] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ; Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^( constructor.isConstructor (  )  )  ;^538^^^^^537^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REMOVE]^maybeRecordExport ( n )  ;^538^^^^^537^555^[REMOVE] ^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )  || type .isConstructor (  )   ) ;^538^^^^^537^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^539^^^^^537^555^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^if  ( rhs == true )  {^540^^^^^537^555^[REPLACE] if  ( rhs != null )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^} else if   (  NodeUtil.isAssign  (  n  )    )   {  ;^543^^^^^537^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^546^^^^^543^547^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^546^^^^^543^547^[ADD] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^544^^^^^537^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( n ) ;^546^^^^^543^547^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( n )  ;^544^^^^^537^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^ObjectType prototype = type.getSubTypes (  ) ;^549^^^^^537^555^[REPLACE] ObjectType prototype = type.getPrototype (  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^graph.defineNameIfNotExists ( name  ".prototype."  prop, isExtern ) ;^551^552^^^^537^555^[REPLACE] graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^550^551^552^553^^537^555^[ADD] for  ( String prop : prototype.getOwnPropertyNames (  )  )  { graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ; }^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^return symbol;  ;^554^^^^^537^555^[REPLACE] return symbol;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
