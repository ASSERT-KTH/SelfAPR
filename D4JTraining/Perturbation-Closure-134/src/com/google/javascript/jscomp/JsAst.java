[REPLACE]^private static final Logger logger_  = null ;^36^^^^^^^[REPLACE] private static final Logger logger_ = Logger.getLogger ( JsAst.class.getName (  )  ) ;^ [CLASS] JsAst  
[REPLACE]^private static final long serialVersionUID ;^37^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] JsAst  
[ADD]^logger_.fine ( "Parsing: " + sourceName ) ;^87^88^89^90^91^86^108^[ADD] try { logger_.fine ( "Parsing: " + sourceName ) ; root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) ,^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root =  ParserRunner.parse ( null, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^86^108^[REPLACE] root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[ADD]^^89^90^91^^^86^108^[ADD] root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) ,^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[ADD]^^93^94^^^^86^108^[ADD] catch  ( IOException e )  { compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceName )  ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  compiler.hasHaltingErrors (  )  )  {^97^^^^^86^108^[REPLACE] if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.annotateCodingConvention ( root ) ;^101^^^^^97^103^[REPLACE] compiler.normalizeNodeTypes ( root ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.normalizeNodeTypes ( root ) ;^102^^^^^97^103^[REPLACE] compiler.annotateCodingConvention ( root ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[ADD]^^99^^^^^86^108^[ADD] root = new Node ( Token.BLOCK ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root ;^99^^^^^86^108^[REPLACE] root = new Node ( Token.BLOCK ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root.putProp ( Node.SOURCENAME_PROP, sourceStr ) ;^107^^^^^86^108^[REPLACE] root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
