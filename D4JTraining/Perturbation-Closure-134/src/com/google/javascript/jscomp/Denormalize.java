[REPLACE]^this.compiler =  null;^43^^^^^42^44^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^this.compiler =  null;^120^^^^^119^121^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^NodeTraversal.traverse ( compiler, js, this ) ;^48^^^^^47^49^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^return false;^53^^^^^52^54^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^&& nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling )^58^^^^^57^59^[REPLACE] maybeCollapseIntoForStatements ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  (  !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^65^112^[REPLACE] if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^return;^68^69^70^^^65^112^[ADD] if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  { return; }^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^69^^^^^65^112^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  (  !NodeUtil.isForIn ( n )  )  {^73^^^^^65^112^[REPLACE] if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^return;^73^74^75^^^65^112^[ADD] if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  { return; }^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^74^^^^^65^112^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node nextSibling = n.getType (  ) ;^78^^^^^65^112^[REPLACE] Node nextSibling = n.getNext (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  (  nextSibling.getType (  )  != Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^65^112^[REPLACE] if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.containsType ( parent, Token.IN )  )  {^89^^^^^79^111^[REPLACE] if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^90^^^^^79^111^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  )  {^99^^^^^79^111^[REPLACE] if  ( NodeUtil.isVar ( n )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent.getFirstChild (  ) ;^104^^^^^99^106^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^104^105^^^^99^106^[ADD] newInitializer = n.getFirstChild (  ) ; n.removeChild ( newInitializer ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent;^100^^^^^79^111^[REPLACE] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent.getFirstChild (  ) ;^104^^^^^79^111^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^n.removeChild ( newInitializer ) ;^104^105^^^^79^111^[ADD] newInitializer = n.getFirstChild (  ) ; n.removeChild ( newInitializer ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node forNode = parent;^94^^^^^79^111^[REPLACE] Node forNode = nextSibling;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^94^95^96^^98^79^111^[ADD] Node forNode = nextSibling; Node oldInitializer = forNode.getFirstChild (  ) ; parent.removeChild ( n ) ; Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node oldInitializer = forNode .removeChild ( oldInitializer )  ;^95^^^^^79^111^[REPLACE] Node oldInitializer = forNode.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node forNode = nextSibling;^98^^^^^79^111^[REPLACE] Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^98^^^^^79^111^[ADD] Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.containsType ( parent, Token.IN )  )  {^89^^^^^65^112^[REPLACE] if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return true;^90^^^^^65^112^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isForIn ( parent )  )  {^99^^^^^65^112^[REPLACE] if  ( NodeUtil.isVar ( n )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^newInitializer = n;Preconditions.checkState ( n.hasOneChild (  )  ) ;^99^100^101^^103^65^112^[ADD] if  ( NodeUtil.isVar ( n )  )  { newInitializer = n; } else { Preconditions.checkState ( n.hasOneChild (  )  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^104^^^^^99^106^[ADD] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent;^100^^^^^65^112^[REPLACE] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^100^^^^^65^112^[ADD] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent.getFirstChild (  ) ;^104^^^^^65^112^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node forNode = parent;^94^^^^^65^112^[REPLACE] Node forNode = nextSibling;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node oldInitializer = parent.getFirstChild (  ) ;^95^^^^^65^112^[REPLACE] Node oldInitializer = forNode.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node forNode = nextSibling;^98^^^^^65^112^[REPLACE] Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^NodeTraversal.traverse ( compiler, js, this ) ;^125^^^^^124^127^[REPLACE] NodeTraversal.traverse ( compiler, externs, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[ADD]^^125^126^^^^124^127^[ADD] NodeTraversal.traverse ( compiler, externs, this ) ; NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[REPLACE]^NodeTraversal.traverse ( compiler, externs, this ) ;^126^^^^^124^127^[REPLACE] NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[ADD]^^126^^^^^124^127^[ADD] NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[REPLACE]^if  ( node.getType (  )  == Token.NAME ) {^131^^^^^130^134^[REPLACE] if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node  parent 
[REPLACE]^node.removeChild ( Node.IS_CONSTANT_NAME ) ;^132^^^^^130^134^[REPLACE] node.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node  parent 
[REPLACE]^this.compiler =  null;^120^^^^^119^121^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[ADD]^^120^^^^^119^121^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^NodeTraversal.traverse ( compiler, js, this ) ;^125^^^^^124^127^[REPLACE] NodeTraversal.traverse ( compiler, externs, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[REPLACE]^NodeTraversal.traverse ( compiler, externs, this ) ;^126^^^^^124^127^[REPLACE] NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[ADD]^^126^^^^^124^127^[ADD] NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node externs  js  [TYPE]  boolean false  true 
[REPLACE]^if  (  node.getType (  )  == Token.STRING )  {^131^^^^^130^134^[REPLACE] if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node  parent 
[REPLACE]^node .getType (  )  ;^132^^^^^130^134^[REPLACE] node.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node node  parent 
