[REPLACE]^if  ( parent != true || !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^65^112^[REPLACE] if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^return;^68^69^70^^^65^112^[ADD] if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  { return; }^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return;  ;^69^^^^^65^112^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  && !NodeUtil.isVar ( n )  )  {^73^^^^^65^112^[REPLACE] if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^73^74^75^^^65^112^[ADD] if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  { return; }^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return;  ;^74^^^^^65^112^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node parentextSibling = n.getNext (  ) ;^78^^^^^65^112^[REPLACE] Node nextSibling = n.getNext (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( parentextSibling != this && nextSibling.getType (  )  != Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^65^112^[REPLACE] if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^79^80^81^82^^65^112^[ADD] if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil .isStatementBlock ( n )   )  {^89^^^^^79^111^[REPLACE] if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return;  ;^90^^^^^79^111^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  )  {^99^^^^^79^111^[REPLACE] if  ( NodeUtil.isVar ( n )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  null.getFirstChild (  ) ;^104^^^^^99^106^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent;^100^^^^^79^111^[REPLACE] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  null;^100^^^^^79^111^[REPLACE] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent.getFirstChild (  ) ;^104^^^^^79^111^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node forNode = parent;^94^^^^^79^111^[REPLACE] Node forNode = nextSibling;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node oldInitializer = parent.getFirstChild (  ) ;^95^^^^^79^111^[REPLACE] Node oldInitializer = forNode.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node nextSibling = n.getNext (  )  ;^98^^^^^79^111^[REPLACE] Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( NodeUtil.containsType ( parent, Token.IN )  )  {^89^^^^^65^112^[REPLACE] if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^return;^89^90^91^^^65^112^[ADD] if  ( NodeUtil.containsType ( n, Token.IN )  )  { return; }^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^return;  ;^90^^^^^65^112^[REPLACE] return;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^if   (  node.getType  (    )   == Token.NAME || node.getType  (    )   == Token.STRING  )   {  ;^99^^^^^65^112^[REPLACE] if  ( NodeUtil.isVar ( n )  )  {^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent.getFirstChild (  ) ;^104^^^^^99^106^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent;^100^^^^^65^112^[REPLACE] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^100^^^^^65^112^[ADD] newInitializer = n;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^newInitializer =  parent.getFirstChild (  ) ;^104^^^^^65^112^[REPLACE] newInitializer = n.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^94^95^96^^98^65^112^[ADD] Node forNode = nextSibling; Node oldInitializer = forNode.getFirstChild (  ) ; parent.removeChild ( n ) ; Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[REPLACE]^Node oldInitializer = parent.getFirstChild (  ) ;^95^^^^^65^112^[REPLACE] Node oldInitializer = forNode.getFirstChild (  ) ;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
[ADD]^^98^^^^^65^112^[ADD] Node newInitializer;^[METHOD] maybeCollapseIntoForStatements [TYPE] void [PARAMETER] Node n Node parent [CLASS] Denormalize StripConstantAnnotations   [TYPE]  AbstractCompiler compiler  [TYPE]  Node forNode  n  newInitializer  nextSibling  oldInitializer  parent  [TYPE]  boolean false  true 
