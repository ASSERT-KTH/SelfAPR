[REPLACE]^if  ( info == false && info.shouldPreserveTry (  )  )  {^57^^^^^51^111^[REPLACE] if  ( info != null && info.shouldPreserveTry (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^57^58^59^^^51^111^[ADD] if  ( info != null && info.shouldPreserveTry (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^return;  ;^58^^^^^51^111^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( parent == null && tryNodesContainingReturnStatements.add ( n )  )  {^67^68^^^^51^111^[REPLACE] if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^return;  ;^69^^^^^67^70^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( tryBlock.hasOneChild (  )  )  {^73^^^^^51^111^[REPLACE] if  ( catchBlock.hasOneChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^51^111^[REPLACE] NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REMOVE]^( isStatementBlock ( parent )  )  ;^74^^^^^51^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( NodeUtil.isStatementBlock ( parent )  )  {^83^^^^^51^111^[REPLACE] if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block =  n;^89^^^^^83^90^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block ;^84^^^^^51^111^[REPLACE] block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( finallyBlock == null )  {^93^^^^^51^111^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block.addChildAfter ( finallyBlock, catchBlock ) ;^94^^^^^51^111^[REPLACE] block.addChildAfter ( finallyBlock, tryBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( anc.getType (  )   ||  Token.TRY )  {^104^^^^^51^111^[REPLACE] if  ( anc.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^( tryNodesContainingReturnStatements.contains ( n )  )  ;^105^^^^^51^111^[REPLACE] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^84^85^^^^51^111^[ADD] block = new Node ( Token.BLOCK ) ; parent.replaceChild ( n, block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^89^^^^^51^111^[ADD] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^anc =  tryBlock.getParent (  )  )  {^103^^^^^51^111^[REPLACE] anc = anc.getParent (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^return;  ;^69^^^^^51^111^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^56^^^^^51^111^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^61^^^^^51^111^[ADD] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^62^63^^^^51^111^[ADD] Node catchBlock = tryBlock.getNext (  ) ; Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^Node finallyBlock  =  null;^63^^^^^51^111^[REPLACE] Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^82^^^^^51^111^[ADD] Node block;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^boolean isInTryBlock = true;^100^^^^^51^111^[REPLACE] boolean isInTryBlock = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^for  ( Node anc = n;^101^^^^^51^111^[REPLACE] for  ( Node anc = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( info == true ) {^57^^^^^51^111^[REPLACE] if  ( info != null && info.shouldPreserveTry (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^return;^57^58^59^^^51^111^[ADD] if  ( info != null && info.shouldPreserveTry (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^58^^^^^51^111^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  (  tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^51^111^[REPLACE] if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^69^^^^^67^70^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( tryBlock.getFirstChild (  )  )  {^73^^^^^51^111^[REPLACE] if  ( catchBlock.hasOneChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^73^74^75^^^51^111^[ADD] if  ( catchBlock.hasOneChild (  )  )  { NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^51^111^[REPLACE] NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( !NodeUtil .redeclareVarsInsideBranch ( block )   )  {^83^^^^^51^111^[REPLACE] if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block =  null;^89^^^^^83^90^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^parent.replaceChild ( n, block ) ;^84^85^^^^51^111^[ADD] block = new Node ( Token.BLOCK ) ; parent.replaceChild ( n, block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( finallyBlock == null )  {^93^^^^^51^111^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block.addChildAfter ( parent, tryBlock ) ;^94^^^^^51^111^[REPLACE] block.addChildAfter ( finallyBlock, tryBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^^94^^^^^51^111^[ADD] block.addChildAfter ( finallyBlock, tryBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( anc.getType (  )   ||  Token.TRY )  {^104^^^^^51^111^[REPLACE] if  ( anc.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^tryNodesContainingReturnStatements .contains ( parent )  ;^105^^^^^51^111^[REPLACE] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^^105^^^^^51^111^[ADD] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^^84^85^^^^51^111^[ADD] block = new Node ( Token.BLOCK ) ; parent.replaceChild ( n, block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block =  n;^89^^^^^51^111^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^^103^104^105^^^51^111^[ADD] anc = anc.getParent (  )  )  { if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^return;  ;^69^^^^^51^111^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^56^^^^^51^111^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node tryBlock = parent.getFirstChild (  ) ;^61^^^^^51^111^[REPLACE] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^^62^63^^^^51^111^[ADD] Node catchBlock = tryBlock.getNext (  ) ; Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node finallyBlock  =  null;^63^^^^^51^111^[REPLACE] Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node anc = parent  ;^82^^^^^51^111^[REPLACE] Node block;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isInTryBlock = true;^100^^^^^51^111^[REPLACE] boolean isInTryBlock = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node block  ;^101^^^^^51^111^[REPLACE] for  ( Node anc = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
