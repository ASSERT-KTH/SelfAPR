[REPLACE]^if  ( n.getType (  )   ==  Token.CALL )  {^41^^^^^40^59^[REPLACE] if  ( n.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^return;  ;^42^^^^^40^59^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^Node function = n.getString (  ) ;^45^^^^^40^59^[REPLACE] Node function = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^if  ( function.getType (  )   ==  Token.GETPROP )  {^47^^^^^40^59^[REPLACE] if  ( function.getType (  )  != Token.GETPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^return;  ;^48^^^^^40^59^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[ADD]^^51^^^^^40^59^[ADD] Node nameNode = function.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^if  ( nameNode.getType (  )   ==  Token.STRING )  {^54^^^^^40^59^[REPLACE] if  ( nameNode.getType (  )  != Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^return;  ;^55^^^^^40^59^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^nameNode.getString (  )  ;^58^^^^^40^59^[REPLACE] visit ( t, n, parent, nameNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
[REPLACE]^visit ( t, n, parent, nameNode .getFirstChild (  )   ) ;^58^^^^^40^59^[REPLACE] visit ( t, n, parent, nameNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] InvocationsCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node function  n  nameNode  parent 
