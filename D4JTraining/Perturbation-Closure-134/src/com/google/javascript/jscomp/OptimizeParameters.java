[REPLACE]^private  AbstractCompiler compiler;^46^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] OptimizeParameters Parameter  
[REPLACE]^this.compiler =  null;^50^^^^^49^52^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] NameReferenceGraph) [PARAMETER] AbstractCompiler compiler NameReferenceGraph nameGraph [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg 
[REPLACE]^this.nameGraph =  null;^51^^^^^49^52^[REPLACE] this.nameGraph = nameGraph;^[METHOD] <init> [TYPE] NameReferenceGraph) [PARAMETER] AbstractCompiler compiler NameReferenceGraph nameGraph [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg 
[REPLACE]^this ( compiler, this ) ;^55^^^^^54^56^[REPLACE] this ( compiler, null ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg 
[ADD]^^55^^^^^54^56^[ADD] this ( compiler, null ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg 
[REPLACE]^this.shouldRemove =  true;^249^^^^^248^251^[REPLACE] this.shouldRemove = shouldRemove;^[METHOD] <init> [TYPE] Node,boolean) [PARAMETER] Node arg boolean shouldRemove [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg 
[REPLACE]^this.arg =  null;^250^^^^^248^251^[REPLACE] this.arg = arg;^[METHOD] <init> [TYPE] Node,boolean) [PARAMETER] Node arg boolean shouldRemove [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg 
[REPLACE]^if  ( nameGraph != null )  {^60^^^^^59^76^[REPLACE] if  ( nameGraph == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^60^61^62^63^64^59^76^[ADD] if  ( nameGraph == null )  { NameReferenceGraphConstruction c = new NameReferenceGraphConstruction ( compiler ) ; c.process ( externs, root ) ; nameGraph = c.getNameReferenceGraph (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^nameGraph =  null.getNameReferennulleGraph (  ) ;^64^^^^^59^76^[REPLACE] nameGraph = c.getNameReferenceGraph (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^64^^^^^59^76^[ADD] nameGraph = c.getNameReferenceGraph (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^61^62^^^^59^76^[ADD] NameReferenceGraphConstruction c = new NameReferenceGraphConstruction ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( name .getDeclarations (  )   )  {^70^^^^^59^76^[REPLACE] if  ( name.canChangeSignature (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;tryEliminateConstantArgs ( name, edges ) ;tryEliminateOptionalArgs ( name, edges ) ;^70^71^72^73^74^59^76^[ADD] if  ( name.canChangeSignature (  )  )  { List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ; tryEliminateConstantArgs ( name, edges ) ; tryEliminateOptionalArgs ( name, edges ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^List<DiGraphEdge<Name, Reference>> edges = this.getInEdges (  ) ;^71^^^^^59^76^[REPLACE] List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^71^72^^^^59^76^[ADD] List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ; tryEliminateConstantArgs ( name, edges ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Name name = node .getInEdges (  )  ;^69^^^^^59^76^[REPLACE] Name name = node.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^List<DiGraphEdge<Name, Reference>> edges = null.getValue (  ) ;^71^^^^^59^76^[REPLACE] List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^int maxArgs = -0;^88^^^^^83^105^[REPLACE] int maxArgs = -1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^88^^^^^83^105^[ADD] int maxArgs = -1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^if  ( numArgs > maxArgs )  {^94^^^^^83^105^[REPLACE] if  ( isCallSite ( ref )  )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^int numArgs = call.getChildCount (  )  - 1;maxArgs = numArgs;^94^95^96^97^98^83^105^[ADD] if  ( isCallSite ( ref )  )  { int numArgs = call.getChildCount (  )  - 1; if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^if  ( numArgs  >=  maxArgs )  {^96^^^^^83^105^[REPLACE] if  ( numArgs > maxArgs )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^maxArgs = numArgs;^96^97^98^^^83^105^[ADD] if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^maxArgs =  null;^97^^^^^83^105^[REPLACE] maxArgs = numArgs;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^97^^^^^83^105^[ADD] maxArgs = numArgs;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^int numArgs = call.removeChild (  )   ||  1;^95^^^^^83^105^[REPLACE] int numArgs = call.getChildCount (  )  - 1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^if  ( numArgs  !=  maxArgs )  {^96^^^^^83^105^[REPLACE] if  ( numArgs > maxArgs )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  {^90^^^^^83^105^[REPLACE] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Reference ref = refEdge .getInEdges (  )  ;^91^^^^^83^105^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  ) ;^92^^^^^83^105^[REPLACE] Node call = ref.parent;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^92^^^^^83^105^[ADD] Node call = ref.parent;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^int numArgs = arg.getChildCount (  )   <=  3;^95^^^^^83^105^[REPLACE] int numArgs = call.getChildCount (  )  - 1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  {^102^^^^^83^105^[REPLACE] for  ( Definition definition : name.getDeclarations (  )  )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Name name = node.getValue (  ) ;^124^^^^^122^163^[REPLACE] List<Parameter> parameters = Lists.newArrayList (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^boolean firstCall = true;^124^125^^^^122^163^[ADD] List<Parameter> parameters = Lists.newArrayList (  ) ; boolean firstCall = true;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^boolean firstCall = false;^125^^^^^122^163^[REPLACE] boolean firstCall = true;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^125^^^^^122^163^[ADD] boolean firstCall = true;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( numArgs > maxArgs )  {^132^^^^^122^163^[REPLACE] if  ( isCallSite ( ref )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( numArgs > maxArgs )  {^134^^^^^122^163^[REPLACE] if  ( firstCall )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^134^135^^137^138^122^163^[ADD] if  ( firstCall )  {  buildParameterList ( parameters, cur ) ; firstCall = false;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^findConstantParameters ( parameters, function ) ;^140^^^^^134^141^[REPLACE] findConstantParameters ( parameters, cur ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^firstCall = true;^138^^^^^122^163^[REPLACE] firstCall = false;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^138^^^^^122^163^[ADD] firstCall = false;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node cur = call.getLastChild (  ) ;^133^^^^^122^163^[REPLACE] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^findConstantParameters ( false, cur ) ;^140^^^^^134^141^[REPLACE] findConstantParameters ( parameters, cur ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  {^128^^^^^122^163^[REPLACE] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^128^129^130^^^122^163^[ADD] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  { Reference ref = refEdge.getValue (  ) ; Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Reference ref = true .getInEdges (  )  ;^129^^^^^122^163^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  ) ;^130^^^^^122^163^[REPLACE] Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node cur = function.getFirstChild (  ) ;^133^^^^^122^163^[REPLACE] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^133^^^^^122^163^[ADD] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( numArgs > maxArgs )  {^150^^^^^122^163^[REPLACE] if  ( isCallSite ( ref )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^150^151^152^^^122^163^[ADD] if  ( isCallSite ( ref )  )  { optimizeCallSite ( parameters, call ) ; }^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^optimizeCallSite ( null, call ) ;^151^^^^^122^163^[REPLACE] optimizeCallSite ( parameters, call ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  {^146^^^^^122^163^[REPLACE] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Reference ref = this .getInEdges (  )  ;^147^^^^^122^163^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  ) ;^148^^^^^122^163^[REPLACE] Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( numArgs > maxArgs )  {^159^^^^^122^163^[REPLACE] if  ( NodeUtil.isFunction ( function )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^159^160^161^^^122^163^[ADD] if  ( NodeUtil.isFunction ( function )  )  { optimizeFunctionDefinition ( parameters, function ) ; }^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^optimizeFunctionDefinition ( parameters, root ) ;^160^^^^^122^163^[REPLACE] optimizeFunctionDefinition ( parameters, function ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  {^157^^^^^122^163^[REPLACE] for  ( Definition definition : name.getDeclarations (  )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  ) ;^158^^^^^122^163^[REPLACE] Node function = definition.getRValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( index >= null.size (  )  + 1 )  {^167^^^^^165^176^[REPLACE] if  ( index >= parameters.size (  )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^}  else {^169^^^^^165^176^[REPLACE] } else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[ADD]^}   Node value = parameters.get ( index ) .getArg (  ) ;parameters.get ( index ) .setShouldRemove ( false ) ;^169^170^171^172^173^165^176^[ADD] else if  ( parameters.get ( index ) .shouldRemove (  )  ) { Node value = parameters.get ( index ) .getArg (  ) ; if  ( !nodesAreEqual ( cur, value )  )  { parameters.get ( index ) .setShouldRemove ( false ) ; }^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( nodesAreEqual ( cur, value )  )  {^171^^^^^165^176^[REPLACE] if  ( !nodesAreEqual ( cur, value )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.get ( index )  .shouldRemove (  )  ;^172^^^^^165^176^[REPLACE] parameters.get ( index ) .setShouldRemove ( false ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.add ( index ) .setShouldRemove ( false ) ;^172^^^^^165^176^[REPLACE] parameters.get ( index ) .setShouldRemove ( false ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^Node value = null.get ( index ) .getArg (  ) ;^170^^^^^165^176^[REPLACE] Node value = parameters.get ( index ) .getArg (  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( !nodesAreEqual ( cur, call )  )  {^171^^^^^165^176^[REPLACE] if  ( !nodesAreEqual ( cur, value )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.get ( index ) .setShouldRemove ( true ) ;^172^^^^^165^176^[REPLACE] parameters.get ( index ) .setShouldRemove ( false ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^Node value = parameters.get ( index ) .setShouldRemove (  ) ;^170^^^^^165^176^[REPLACE] Node value = parameters.get ( index ) .getArg (  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.add ( new Parameter ( cur, true )  ) ;^168^^^^^165^176^[REPLACE] parameters.add ( new Parameter ( cur, false )  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REMOVE]^List<Parameter> parameters = Lists.newArrayList (  ) ;^168^^^^^165^176^[REMOVE] ^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^Node value = parameters.add ( index ) .getArg (  ) ;^170^^^^^165^176^[REPLACE] Node value = parameters.get ( index ) .getArg (  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( !nodesAreEqual ( cur, cur )  )  {^171^^^^^165^176^[REPLACE] if  ( !nodesAreEqual ( cur, value )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[ADD]^parameters.get ( index ) .setShouldRemove ( false ) ;^171^172^173^^^165^176^[ADD] if  ( !nodesAreEqual ( cur, value )  )  { parameters.get ( index ) .setShouldRemove ( false ) ; }^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^for  ( int index = 0;  ( cur = cur.getNext (  )  )  == null; index++ )  {^166^^^^^165^176^[REPLACE] for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( index >= parameters.size (  )  /  2 )  {^167^^^^^165^176^[REPLACE] if  ( index >= parameters.size (  )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[ADD]^^170^^^^^165^176^[ADD] Node value = parameters.get ( index ) .getArg (  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( !nodesAreEqual ( function, value )  )  {^171^^^^^165^176^[REPLACE] if  ( !nodesAreEqual ( cur, value )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REMOVE]^if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ;^172^^^^^165^176^[REMOVE] ^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.get ( new Parameter ( cur, true )  ) ;^168^^^^^165^176^[REPLACE] parameters.add ( new Parameter ( cur, false )  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( parameters.get ( index ) .shouldRemove (  )  )  {^169^^^^^165^176^[REPLACE] } else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( !nodesAreEqual ( value, value )  )  {^171^^^^^165^176^[REPLACE] if  ( !nodesAreEqual ( cur, value )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^Node value = null.get ( index ) .setShouldRemove (  ) ;^170^^^^^165^176^[REPLACE] Node value = parameters.get ( index ) .getArg (  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( numArgs > maxArgs )  {^171^^^^^165^176^[REPLACE] if  ( !nodesAreEqual ( cur, value )  )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.add ( index ) .setShouldRemove ( true ) ;^172^^^^^165^176^[REPLACE] parameters.get ( index ) .setShouldRemove ( false ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ;^172^^^^^165^176^[REPLACE] parameters.get ( index ) .setShouldRemove ( false ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^for  ( int index =  0;  ( value^166^^^^^165^176^[REPLACE] for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[ADD]^^166^167^168^169^170^165^176^[ADD] for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  { if  ( index >= parameters.size (  )  )  { parameters.add ( new Parameter ( cur, false )  ) ; } else if  ( parameters.get ( index ) .shouldRemove (  )  ) { Node value = parameters.get ( index ) .getArg (  ) ;^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^for  ( int index = 2;  ( cur = cur.getNext (  )  )  != null; index++ )  {^166^^^^^165^176^[REPLACE] for  ( int index = 0;  ( cur = cur.getNext (  )  )  != null; index++ )  {^[METHOD] findConstantParameters [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^while  (  ( cur = cur.getNext (  )  )  == null )  {^179^^^^^178^182^[REPLACE] while  (  ( cur = cur.getNext (  )  )  != null )  {^[METHOD] buildParameterList [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.add ( new Parameter ( value, NodeUtil.isLiteralValue ( cur )  )  ) ;^180^^^^^178^182^[REPLACE] parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[METHOD] buildParameterList [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^parameters.add ( new Parameter ( value, NodeUtil.isImmutableValue ( cur )  )  ) ;^180^^^^^178^182^[REPLACE] parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[METHOD] buildParameterList [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  root  value 
[ADD]^^180^^^^^178^182^[ADD] parameters.add ( new Parameter ( cur, NodeUtil.isLiteralValue ( cur )  )  ) ;^[METHOD] buildParameterList [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^while  (  ( cur =  value.getNext (  )  )  !^179^^^^^178^182^[REPLACE] while  (  ( cur = cur.getNext (  )  )  != null )  {^[METHOD] buildParameterList [TYPE] void [PARAMETER] Parameter> parameters Node cur [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  root  value 
[REPLACE]^} else if  ( parameters.get ( index ) .shouldRemove (  )  ) {^187^^^^^184^195^[REPLACE] if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^187^188^189^190^191^184^195^[ADD] if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ; if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^if  (value == null )  {^189^^^^^184^195^[REPLACE] if  ( paramName != null )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^addVariableToFunction ( root, paramName, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^[REPLACE] addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^parameters.get ( index )  .Parameter ( value , false )   ) ;^191^^^^^184^195^[REPLACE] parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^List<Parameter> parameters = Lists.newArrayList (  ) ;^191^^^^^184^195^[REPLACE] parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^Node paramName = eliminateFunctionParamAt ( root, index ) ;^188^^^^^184^195^[REPLACE] Node paramName = eliminateFunctionParamAt ( function, index ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^if  ( paramName == false )  {^189^^^^^184^195^[REPLACE] if  ( paramName != null )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^addVariableToFunction ( function, paramName, parameters.get ( index ) .setShouldRemove (  )  ) ;^190^191^^^^184^195^[REPLACE] addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^190^191^^^^184^195^[ADD] addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^parameters.add ( index ) .getArg (  )  ) ;^191^^^^^184^195^[REPLACE] parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^for  ( int index = parameters.size (  )  + 1 - 1; index >= 0; index-- )  {^186^^^^^184^195^[REPLACE] for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^if  ( parameters.get ( index ) .setShouldRemove (  )  )  {^187^^^^^184^195^[REPLACE] if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^Node paramName = eliminateFunctionParamAt ( function, index ) ;parameters.get ( index ) .getArg (  )  ) ;^187^188^189^190^191^184^195^[ADD] if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ; if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^189^190^191^192^^184^195^[ADD] if  ( paramName != null )  { addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ; }^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^parameters.get ( index ) .setShouldRemove (  )  ) ;^191^^^^^184^195^[REPLACE] parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^188^^^^^184^195^[ADD] Node paramName = eliminateFunctionParamAt ( function, index ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^if  ( paramName == null )  {^189^^^^^184^195^[REPLACE] if  ( paramName != null )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^addVariableToFunction ( function, value, parameters.get ( index ) .getArg (  )  ) ;^190^191^^^^184^195^[REPLACE] addVariableToFunction ( function, paramName, parameters.get ( index ) .getArg (  )  ) ;^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^for  ( int index = null.size (  )  + 3 - 1; index >= 0; index-- )  {^186^^^^^184^195^[REPLACE] for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^186^187^188^189^190^184^195^[ADD] for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  { if  ( parameters.get ( index ) .shouldRemove (  )  )  { Node paramName = eliminateFunctionParamAt ( function, index ) ; if  ( paramName != null )  { addVariableToFunction ( function, paramName,^[METHOD] optimizeFunctionDefinition [TYPE] void [PARAMETER] Parameter> parameters Node function [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^if  ( this.get ( index ) .shouldRemove (  )  )  {^199^^^^^197^203^[REPLACE] if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[METHOD] optimizeCallSite [TYPE] void [PARAMETER] Parameter> parameters Node call [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^eliminateCallParamAt ( value, index ) ;^200^^^^^197^203^[REPLACE] eliminateCallParamAt ( call, index ) ;^[METHOD] optimizeCallSite [TYPE] void [PARAMETER] Parameter> parameters Node call [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^for  ( int index = parameters.size (  )  *  2 - 1; index >= 0; index-- )  {^198^^^^^197^203^[REPLACE] for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[METHOD] optimizeCallSite [TYPE] void [PARAMETER] Parameter> parameters Node call [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^if  ( null.get ( index ) .shouldRemove (  )  )  {^199^^^^^197^203^[REPLACE] if  ( parameters.get ( index ) .shouldRemove (  )  )  {^[METHOD] optimizeCallSite [TYPE] void [PARAMETER] Parameter> parameters Node call [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^199^200^201^^^197^203^[ADD] if  ( parameters.get ( index ) .shouldRemove (  )  )  { eliminateCallParamAt ( call, index ) ; }^[METHOD] optimizeCallSite [TYPE] void [PARAMETER] Parameter> parameters Node call [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^for  ( int index = parameters.length (  )  - 1; index >= 0; index-- )  {^198^^^^^197^203^[REPLACE] for  ( int index = parameters.size (  )  - 1; index >= 0; index-- )  {^[METHOD] optimizeCallSite [TYPE] void [PARAMETER] Parameter> parameters Node call [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  List parameters  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int index  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^Node next = formalArgPtr.getNext (  ) ;^210^^^^^209^215^[REPLACE] Node call = ref.parent;^[METHOD] isCallSite [TYPE] boolean [PARAMETER] Reference ref [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[ADD]^^210^^^^^209^215^[ADD] Node call = ref.parent;^[METHOD] isCallSite [TYPE] boolean [PARAMETER] Reference ref [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^return isCallOrNew ( call )  || call.getFirstChild (  )  ;^214^^^^^209^215^[REPLACE] return isCallOrNew ( call )  && call.getFirstChild (  )  == ref.site;^[METHOD] isCallSite [TYPE] boolean [PARAMETER] Reference ref [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  paramName  root  value 
[REPLACE]^return NodeUtil.isCall ( value )  || NodeUtil .isCall ( call )  ;^225^^^^^224^226^[REPLACE] return NodeUtil.isCall ( node )  || NodeUtil.isNew ( node ) ;^[METHOD] isCallOrNew [TYPE] boolean [PARAMETER] Node node [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  node  paramName  root  value 
[REPLACE]^return   NodeUtil^236^237^^^^235^238^[REPLACE] return NodeUtil.isImmutableValue ( n1 )  && NodeUtil.isImmutableValue ( n2 )  && n1.checkTreeEqualsSilent ( n2 ) ;^[METHOD] nodesAreEqual [TYPE] boolean [PARAMETER] Node n1 Node n2 [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  n1  n2  node  paramName  root  value 
[REPLACE]^return formalArgPtr;^254^^^^^253^255^[REPLACE] return arg;^[METHOD] getArg [TYPE] Node [PARAMETER] [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  n1  n2  node  paramName  root  value 
[REPLACE]^return formalArgPtr;^258^^^^^257^259^[REPLACE] return shouldRemove;^[METHOD] shouldRemove [TYPE] boolean [PARAMETER] [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  n1  n2  node  paramName  root  value 
[REPLACE]^shouldRemove =  true;^262^^^^^261^263^[REPLACE] shouldRemove = value;^[METHOD] setShouldRemove [TYPE] void [PARAMETER] boolean value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  call  cur  externs  function  n1  n2  node  paramName  root  value 
[REPLACE]^NodeUtil.isFunction ( function )  ;^273^274^^^^272^284^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[ADD]^^273^274^^^^272^284^[ADD] Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isCall ( node ) , "Node must be a function." ) ;^273^274^^^^272^284^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^Node block = root.getLastChild (  ) ;^276^^^^^272^284^[REPLACE] Node block = function.getLastChild (  ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^Preconditions.checkArgument ( root.removeChild (  )   ||  Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^[REPLACE] Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^Preconditions.checkArgument ( root.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^277^278^^^^272^284^[REPLACE] Preconditions.checkArgument ( block.getType (  )  == Token.BLOCK, "Node must be a block." ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.getNext (  )  ) ;^280^281^^^^272^284^[REPLACE] Node newVar = NodeUtil.newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^block.removeChild ( newVar ) ;^282^^^^^272^284^[REPLACE] block.addChildToFront ( newVar ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^parameters.get ( index ) .getArg (  )  ) ;^283^^^^^272^284^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REMOVE]^Node next = formalArgPtr.getNext (  ) ;^283^^^^^272^284^[REMOVE] ^[METHOD] addVariableToFunction [TYPE] void [PARAMETER] Node function Node varName Node value [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Node arg  block  call  cur  externs  function  n1  n2  newVar  node  paramName  root  value  varName 
[REPLACE]^boolean paramRemoved = true;^292^^^^^290^311^[REPLACE] boolean paramRemoved = false;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node formalArgPtr = node.removeChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^[REPLACE] Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^while  ( argIndex != 4  ==  formalArgPtr != null )  {^295^^^^^290^311^[REPLACE] while  ( argIndex != 0 && formalArgPtr != null )  {^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  null.getNext (  ) ;^296^^^^^290^311^[REPLACE] formalArgPtr = formalArgPtr.getNext (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  varName.getNext (  ) ;^296^^^^^290^311^[REPLACE] formalArgPtr = formalArgPtr.getNext (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^while  ( formalArgPtr == this )  {^300^^^^^290^311^[REPLACE] while  ( formalArgPtr != null )  {^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^paramRemoved = false;^306^^^^^290^311^[REPLACE] paramRemoved = true;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  varName;^307^^^^^290^311^[REPLACE] formalArgPtr = next;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node next = formalArgPtr .getType (  )  ;^301^^^^^290^311^[REPLACE] Node next = formalArgPtr.getNext (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node var = new Node ( Token.VAR, node ) ;^303^^^^^290^311^[REPLACE] Node var = new Node ( Token.VAR, formalArgPtr ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node var = new Node ( Token.VAR, value ) ;^303^^^^^290^311^[REPLACE] Node var = new Node ( Token.VAR, formalArgPtr ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^return value;^310^^^^^290^311^[REPLACE] return paramRemoved;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node formalArgPtr = varName;^321^^^^^320^327^[REPLACE] Node formalArgPtr = firstArg;^[METHOD] getArgumentAtIndex [TYPE] Node [PARAMETER] Node firstArg int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^while  ( argIndex != 0 || formalArgPtr != null )  {^322^^^^^320^327^[REPLACE] while  ( argIndex != 0 && formalArgPtr != null )  {^[METHOD] getArgumentAtIndex [TYPE] Node [PARAMETER] Node firstArg int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  null.getNext (  ) ;^323^^^^^320^327^[REPLACE] formalArgPtr = formalArgPtr.getNext (  ) ;^[METHOD] getArgumentAtIndex [TYPE] Node [PARAMETER] Node firstArg int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  varName.getNext (  ) ;^323^^^^^320^327^[REPLACE] formalArgPtr = formalArgPtr.getNext (  ) ;^[METHOD] getArgumentAtIndex [TYPE] Node [PARAMETER] Node firstArg int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^return varName;^326^^^^^320^327^[REPLACE] return formalArgPtr;^[METHOD] getArgumentAtIndex [TYPE] Node [PARAMETER] Node firstArg int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( node ) , "Node must be a function." ) ;^336^337^^^^335^346^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isFunction ( root ) , "Node must be a function." ) ;^336^337^^^^335^346^[REPLACE] Preconditions.checkArgument ( NodeUtil.isFunction ( function ) , "Node must be a function." ) ;^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node formalArgPtr = getArgumentAtIndex ( root.getFirstChild (  ) .addChildrenToFront (  ) .getFirstChild (  ) , argIndex ) ;^339^340^^^^335^346^[REPLACE] Node formalArgPtr = getArgumentAtIndex ( function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) , argIndex ) ;^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^if  (node == true )  {^342^^^^^335^346^[REPLACE] if  ( formalArgPtr != null )  {^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[ADD]^^342^343^344^^^335^346^[ADD] if  ( formalArgPtr != null )  { function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^function.getFirstChild (  )  .getType (  )  .removeChild ( formalArgPtr ) ;^343^^^^^335^346^[REPLACE] function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[ADD]^^343^344^^^^335^346^[ADD] function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; }^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^function.getLastChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^343^^^^^335^346^[REPLACE] function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ;^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^return root;^345^^^^^335^346^[REPLACE] return formalArgPtr;^[METHOD] eliminateFunctionParamAt [TYPE] Node [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Preconditions.checkArgument ( isCallOrNew ( varName ) , "Node must be a call." ) ;^355^^^^^354^365^[REPLACE] Preconditions.checkArgument ( isCallOrNew ( call ) , "Node must be a call." ) ;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  )  .getType (  )  , argIndex ) ;^357^358^^^^354^365^[REPLACE] Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[ADD]^^357^358^^360^361^354^365^[ADD] Node formalArgPtr = getArgumentAtIndex ( call.getFirstChild (  ) .getNext (  ) , argIndex ) ; if  ( formalArgPtr != null )  { call.removeChild ( formalArgPtr ) ;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^if  ( formalArgPtr ==paramName )  {^360^^^^^354^365^[REPLACE] if  ( formalArgPtr != null )  {^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^call.removeChild ( value ) ;^361^^^^^354^365^[REPLACE] call.removeChild ( formalArgPtr ) ;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^parameters.get ( index ) .getArg (  )  ) ;^362^^^^^354^365^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[ADD]^^362^^^^^354^365^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^return node;^364^^^^^354^365^[REPLACE] return formalArgPtr;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^this.shouldRemove =  true;^249^^^^^248^251^[REPLACE] this.shouldRemove = shouldRemove;^[METHOD] <init> [TYPE] Node,boolean) [PARAMETER] Node arg boolean shouldRemove [CLASS] Parameter   [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg 
[REPLACE]^this.arg =  null;^250^^^^^248^251^[REPLACE] this.arg = arg;^[METHOD] <init> [TYPE] Node,boolean) [PARAMETER] Node arg boolean shouldRemove [CLASS] Parameter   [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg 
[ADD]^^250^^^^^248^251^[ADD] this.arg = arg;^[METHOD] <init> [TYPE] Node,boolean) [PARAMETER] Node arg boolean shouldRemove [CLASS] Parameter   [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg 
[REPLACE]^return shouldRemove;^254^^^^^253^255^[REPLACE] return arg;^[METHOD] getArg [TYPE] Node [PARAMETER] [CLASS] Parameter   [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg 
[REPLACE]^return arg;^258^^^^^257^259^[REPLACE] return shouldRemove;^[METHOD] shouldRemove [TYPE] boolean [PARAMETER] [CLASS] Parameter   [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg 
[REPLACE]^shouldRemove =  null;^262^^^^^261^263^[REPLACE] shouldRemove = value;^[METHOD] setShouldRemove [TYPE] void [PARAMETER] boolean value [CLASS] Parameter   [TYPE]  boolean false  shouldRemove  true  value  [TYPE]  Node arg 
