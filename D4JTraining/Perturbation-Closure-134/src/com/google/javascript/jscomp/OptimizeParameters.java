[REPLACE]^private  AbstractCompiler compiler;^46^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] OptimizeParameters Parameter  
[REPLACE]^if  ( nameGraph != this )  {^60^^^^^59^76^[REPLACE] if  ( nameGraph == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^nameGraph =  null.getNameReferennulleGraph (  ) ;^64^^^^^59^76^[REPLACE] nameGraph = c.getNameReferenceGraph (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^61^62^^^^59^76^[ADD] NameReferenceGraphConstruction c = new NameReferenceGraphConstruction ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if   (  numArgs > maxArgs  )   {  ;^70^^^^^59^76^[REPLACE] if  ( name.canChangeSignature (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^List<DiGraphEdge<Name, Reference>> edges = this.getInEdges (  ) ;^71^^^^^59^76^[REPLACE] List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^for  ( DiGraphNode<Name, Reference> false : nameGraph.getDirectedGraphNodes (  )  )  {^67^68^^^^59^76^[REPLACE] for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if   (  numArgs > maxArgs  )   {  ;^70^^^^^67^75^[REPLACE] if  ( name.canChangeSignature (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^69^^^^^67^75^[ADD] Name name = node.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^71^^^^^67^75^[ADD] List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^67^68^69^70^71^59^76^[ADD] for  ( DiGraphNode<Name, Reference> node : nameGraph.getDirectedGraphNodes (  )  )  { Name name = node.getValue (  ) ; if  ( name.canChangeSignature (  )  )  { List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Name name = null.getValue (  ) ;^69^^^^^59^76^[REPLACE] Name name = node.getValue (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^71^^^^^59^76^[ADD] List<DiGraphEdge<Name, Reference>> edges = node.getInEdges (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode node  [TYPE]  boolean false  shouldRemove  true  [TYPE]  Node arg  externs  root  [TYPE]  NameReferenceGraphConstruction c  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^88^^^^^84^105^[ADD] int maxArgs = -1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^if   (  numArgs > maxArgs  )   {  ;^94^^^^^84^105^[REPLACE] if  ( isCallSite ( ref )  )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^if  ( numArgs  <  maxArgs )  {^96^^^^^84^105^[REPLACE] if  ( numArgs > maxArgs )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^96^97^98^^^84^105^[ADD] if  ( numArgs > maxArgs )  { maxArgs = numArgs; }^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^maxArgs =  null;^97^^^^^84^105^[REPLACE] maxArgs = numArgs;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^int numArgs = arg.getChildCount (  )   1;^95^^^^^84^105^[REPLACE] int numArgs = call.getChildCount (  )  - 1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^90^91^92^^^84^105^[ADD] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  { Reference ref = refEdge.getValue (  ) ; Node call = ref.parent;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^if  ( numArgs  >=  maxArgs )  {^96^^^^^84^105^[REPLACE] if  ( numArgs > maxArgs )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^int numArgs = call.getChildCount (  )   1;^95^^^^^84^105^[REPLACE] int numArgs = call.getChildCount (  )  - 1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Reference ref = refEdge .getInEdges (  )  ;^91^^^^^84^105^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  )  ;^92^^^^^84^105^[REPLACE] Node call = ref.parent;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^95^^^^^84^105^[ADD] int numArgs = call.getChildCount (  )  - 1;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^97^^^^^84^105^[ADD] maxArgs = numArgs;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Name, Reference>> edges = node.getInEdges (  )  ;^90^^^^^84^105^[REPLACE] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^^91^92^^^^84^105^[ADD] Reference ref = refEdge.getValue (  ) ; Node call = ref.parent;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^eliminateParamsAfter ( definition.getRValue (  ) , numArgs ) ;^103^^^^^84^105^[REPLACE] eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^name.getDeclarations (  )  ;^103^^^^^84^105^[REPLACE] eliminateParamsAfter ( definition.getRValue (  ) , maxArgs ) ;^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[REPLACE]^Node newVar = newVarNode ( varName.getQualifiedName (  ) , value.cloneTree (  )  )  ;^102^^^^^84^105^[REPLACE] for  ( Definition definition : name.getDeclarations (  )  )  {^[METHOD] tryEliminateOptionalArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  externs  root  [TYPE]  Definition definition  [TYPE]  List edges  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int maxArgs  numArgs  [TYPE]  Name name 
[ADD]^boolean firstCall = true;^124^125^^^^122^163^[ADD] List<Parameter> parameters = Lists.newArrayList (  ) ; boolean firstCall = true;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^boolean firstCall = false;^125^^^^^122^163^[REPLACE] boolean firstCall = true;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if   (  numArgs > maxArgs  )   {  ;^132^^^^^122^163^[REPLACE] if  ( isCallSite ( ref )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( true )  {^134^^^^^122^163^[REPLACE] if  ( firstCall )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^134^135^^137^138^122^163^[ADD] if  ( firstCall )  {  buildParameterList ( parameters, cur ) ; firstCall = false;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^findConstantParameters ( this, cur ) ;^140^^^^^134^141^[REPLACE] findConstantParameters ( parameters, cur ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^firstCall = true;^138^^^^^122^163^[REPLACE] firstCall = false;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node block = function.getLastChild (  )  ;^133^^^^^122^163^[REPLACE] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if   (  numArgs > maxArgs  )   {  ;^134^^^^^122^163^[REPLACE] if  ( firstCall )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^findConstantParameters ( parameters, function ) ;^140^^^^^134^141^[REPLACE] findConstantParameters ( parameters, cur ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^128^129^130^^^122^163^[ADD] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  { Reference ref = refEdge.getValue (  ) ; Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^findConstantParameters ( null, cur ) ;^140^^^^^134^141^[REPLACE] findConstantParameters ( parameters, cur ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node cur = function.getLastChild (  ) ;^133^^^^^122^163^[REPLACE] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^Node call = ref.parent;^129^130^^^^122^163^[ADD] Reference ref = refEdge.getValue (  ) ; Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  )  ;^130^^^^^122^163^[REPLACE] Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^133^^^^^122^163^[ADD] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Name, Reference>> edges = node.getInEdges (  )  ;^128^^^^^122^163^[REPLACE] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Name name = node.getValue (  )  ;^129^^^^^122^163^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node cur = call .getLastChild (  )  ;^133^^^^^122^163^[REPLACE] Node cur = call.getFirstChild (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if   (  numArgs > maxArgs  )   {  ;^150^^^^^122^163^[REPLACE] if  ( isCallSite ( ref )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^optimizeCallSite ( null, call ) ;^151^^^^^122^163^[REPLACE] optimizeCallSite ( parameters, call ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^146^147^148^^^122^163^[ADD] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  { Reference ref = refEdge.getValue (  ) ; Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Name name = node.getValue (  )  ;^147^^^^^122^163^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Node next = formalArgPtr.getNext (  )  ;^148^^^^^122^163^[REPLACE] Node call = ref.parent;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Name, Reference>> edges = node.getInEdges (  )  ;^146^^^^^122^163^[REPLACE] for  ( DiGraphEdge<Name, Reference> refEdge : edges )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^Reference ref = null.getValue (  ) ;^147^^^^^122^163^[REPLACE] Reference ref = refEdge.getValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isFunction ( root )  )  {^159^^^^^122^163^[REPLACE] if  ( NodeUtil.isFunction ( function )  )  {^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^optimizeFunctionDefinition ( parameters, root ) ;^160^^^^^122^163^[REPLACE] optimizeFunctionDefinition ( parameters, function ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^157^158^159^160^161^122^163^[ADD] for  ( Definition definition : name.getDeclarations (  )  )  { Node function = definition.getRValue (  ) ; if  ( NodeUtil.isFunction ( function )  )  { optimizeFunctionDefinition ( parameters, function ) ; }^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^159^160^161^^^122^163^[ADD] if  ( NodeUtil.isFunction ( function )  )  { optimizeFunctionDefinition ( parameters, function ) ; }^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^optimizeFunctionDefinition ( null, function ) ;^160^^^^^122^163^[REPLACE] optimizeFunctionDefinition ( parameters, function ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[ADD]^^158^^^^^122^163^[ADD] Node function = definition.getRValue (  ) ;^[METHOD] tryEliminateConstantArgs [TYPE] void [PARAMETER] Name name Reference>> edges [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  shouldRemove  true  [TYPE]  DiGraphEdge refEdge  [TYPE]  Reference ref  [TYPE]  Node arg  call  cur  externs  function  root  [TYPE]  Definition definition  [TYPE]  List edges  parameters  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  Name name 
[REPLACE]^boolean paramRemoved = true;^292^^^^^290^311^[REPLACE] boolean paramRemoved = false;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node formalArgPtr = root.getLastChild (  ) .getNext (  ) .getFirstChild (  ) ;^294^^^^^290^311^[REPLACE] Node formalArgPtr = function.getFirstChild (  ) .getNext (  ) .getFirstChild (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  root.getNext (  ) ;^296^^^^^290^311^[REPLACE] formalArgPtr = formalArgPtr.getNext (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^paramRemoved = false;^306^^^^^290^311^[REPLACE] paramRemoved = true;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^formalArgPtr =  null;^307^^^^^290^311^[REPLACE] formalArgPtr = next;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[ADD]^^301^302^303^304^305^290^311^[ADD] Node next = formalArgPtr.getNext (  ) ; function.getFirstChild (  ) .getNext (  ) .removeChild ( formalArgPtr ) ; Node var = new Node ( Token.VAR, formalArgPtr ) ; function.getLastChild (  ) .addChildrenToFront ( var ) ; compiler.reportCodeChange (  ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^Node var = new Node ( Token.VAR, root ) ;^303^^^^^290^311^[REPLACE] Node var = new Node ( Token.VAR, formalArgPtr ) ;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^return value;^310^^^^^290^311^[REPLACE] return paramRemoved;^[METHOD] eliminateParamsAfter [TYPE] boolean [PARAMETER] Node function int argIndex [CLASS] OptimizeParameters Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
[REPLACE]^private  Node arg;^245^^^^^^^[REPLACE] private final Node arg;^[METHOD] eliminateCallParamAt [TYPE] Node [PARAMETER] Node call int argIndex [CLASS] Parameter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  firstCall  paramRemoved  shouldRemove  true  value  [TYPE]  NameReferenceGraph nameGraph  [TYPE]  int argIndex  [TYPE]  Node arg  block  call  cur  externs  firstArg  formalArgPtr  function  n1  n2  newVar  next  node  paramName  root  value  var  varName 
