[REPLACE]^private final Map<String, JsName> allNames  = null ;^78^^^^^^^[REPLACE] private final Map<String, JsName> allNames = Maps.newTreeMap (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final Map<Node, NameInformation> scopes  = null ;^87^^^^^^^[REPLACE] private final Map<Node, NameInformation> scopes = Maps.newHashMap (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final List<Set<JsName>> generations  = null ;^93^^^^^^^[REPLACE] private final List<Set<JsName>> generations = Lists.newArrayList (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final  char  PROTOTYPE_SUBSTRING = ".prototype.";^96^^^^^^^[REPLACE] private static final String PROTOTYPE_SUBSTRING = ".prototype.";^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final int PROTOTYPE_SUBSTRING_LEN ;^98^99^^^^98^99^[REPLACE] private static final int PROTOTYPE_SUBSTRING_LEN = PROTOTYPE_SUBSTRING.length (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final int PROTOTYPE_SUFFIX_LEN  = null ;^101^^^^^^^[REPLACE] private static final int PROTOTYPE_SUFFIX_LEN = ".prototype".length (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private static final  byte  WINDOW = "window";^104^^^^^^^[REPLACE] private static final String WINDOW = "window";^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private  final String FUNCTION = "Function";^107^^^^^^^[REPLACE] private static final String FUNCTION = "Function";^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of ( "window", "goog.global" ) ;^110^111^^^^110^111^[REPLACE] static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of ( "window", "goog.global" ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private  boolean removeUnreferenced;^114^^^^^^^[REPLACE] private final boolean removeUnreferenced;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private  Set<String> globalNames;^117^^^^^^^[REPLACE] private final Set<String> globalNames;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private  AstChangeProxy changeProxy;^120^^^^^^^[REPLACE] private final AstChangeProxy changeProxy;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final Set<String> externalNames  = null ;^123^^^^^^^[REPLACE] private final Set<String> externalNames = Sets.newHashSet (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^private final List<RefNode> refNodes ;^126^^^^^^^[REPLACE] private final List<RefNode> refNodes = Lists.newArrayList (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^long  name;^134^^^^^^^[REPLACE] String name;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean isExternallyReferenceable = true;^137^^^^^^^[REPLACE] boolean isExternallyReferenceable = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean isPrototype ;^140^^^^^^^[REPLACE] boolean isPrototype = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^String prototypeClass = true;^143^^^^^^^[REPLACE] String prototypeClass = null;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^String prototypeProperty ;^146^^^^^^^[REPLACE] String prototypeProperty = null;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^String superclass  = null ;^149^^^^^^^[REPLACE] String superclass = null;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean onlyAffectsClassDef  = null ;^152^^^^^^^[REPLACE] boolean onlyAffectsClassDef = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^Set<String> refersTo ;^163^^^^^^^[REPLACE] Set<String> refersTo = Sets.newHashSet (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^Set<String> referencedBy  = null ;^166^^^^^^^[REPLACE] Set<String> referencedBy = Sets.newHashSet (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^List<String> prototypeNames ;^169^^^^^^^[REPLACE] List<String> prototypeNames = Lists.newArrayList (  ) ;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean externallyDefined ;^172^^^^^^^[REPLACE] boolean externallyDefined = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^boolean referenced  = null ;^175^^^^^^^[REPLACE] boolean referenced = false;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[REPLACE]^int generation = 0 - 0;^178^^^^^^^[REPLACE] int generation = 0;^ [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState  
[ADD]^^187^^^^^186^212^[ADD] StringBuilder out = new StringBuilder (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( ", " )  ;^188^^^^^186^212^[REPLACE] out.append ( name ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( prototypeNames.size (  )  /  2 > 0 )  {^190^^^^^186^212^[REPLACE] if  ( prototypeNames.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  protoIter.hasNext  (    )    )   {  ;^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out .append ( prototypeProperty )  ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^sb.append ( "</ul></li>" )  ;^197^^^^^186^212^[REMOVE] ^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> pIter = prototypeNames.isEmpty (  ) ;^193^^^^^186^212^[REPLACE] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( name )  ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( refersTo.size (  )  + 4 > 0  )  {^202^^^^^186^212^[REPLACE] if  ( refersTo.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "<li>REFERS TO: " )  ;^203^^^^^186^212^[REPLACE] out.append ( "\n - REFERS TO: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( on ( ", " ) .join ( referencedBy )  )  ;^204^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^on ( ", " ) .join ( referencedBy )  ;^204^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referencedBy.size (  )  *  2 > 0  )  {^207^^^^^186^212^[REPLACE] if  ( referencedBy.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^207^208^209^210^^186^212^[ADD] if  ( referencedBy.size (  )  > 0 )  { out.append ( "\n - REFERENCED BY: " ) ; out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "<li>REFERENCED BY: " )  ;^208^^^^^186^212^[REPLACE] out.append ( "\n - REFERENCED BY: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( on ( ", " ) .join ( refersTo )  )  ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^out.append ( Joiner.on ( ", " )  .getString (  )   ) ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^on ( ", " ) .join ( referencedBy )  ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return out.StringBuilder (  ) ;^211^^^^^186^212^[REPLACE] return out.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder out  [TYPE]  Node gramps  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  true  [TYPE]  JsName name  [TYPE]  Iterator pIter  [TYPE]  List generations  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node containingNode = parent.getString (  ) ;^266^^^^^263^326^[REPLACE] Node containingNode = parent.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getFirstChild (  )   !=  parent.getLastChild (  )  )  {^269^270^^^^263^326^[REPLACE] if  ( parent.getFirstChild (  )  == parent.getLastChild (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( child  ||  node )  {^283^^^^^269^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^seen = false;^284^^^^^269^313^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^288^^^^^269^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^earlyChildren .addAll (  )  ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^lateChildren .addAll (  )  ;^289^^^^^269^313^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  earlyChildren.isEmpty  (    )   || !lateChildren.isEmpty  (    )    )   {  ;^295^^^^^269^313^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^Node earlyDecls = new Node ( Token.VAR ) ;^295^296^297^298^299^269^313^[ADD] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  { Node earlyDecls = new Node ( Token.VAR ) ; for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node earlyDecls : earlyChildren )  {^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^296^^^^^295^302^[ADD] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  || lateChildren.isEmpty (  )  )  {^307^^^^^269^313^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^containingNode.addChildBefore ( currDecl, parent ) ;^307^308^309^310^311^269^313^[ADD] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  { containingNode.addChildBefore ( currDecl, parent ) ; } else { containingNode.addChildAfter ( currDecl, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode.addChildBefore ( currDecl, parent ) ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode .addChildAfter ( parent , earlyDecls )  ;^308^^^^^269^313^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node earlyDecls : parent.children (  )  )  {^282^^^^^272^313^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( child  &&  node )  {^283^^^^^272^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^seen = true;continue;^283^284^285^286^^272^313^[ADD] if  ( child == node )  { seen = true; continue; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^seen = false;^284^^^^^272^313^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^288^^^^^272^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^earlyChildren.add ( child )  ;^289^^^^^272^313^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node currDecl : earlyChildren )  {^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^seen = false;^284^^^^^295^302^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> earlyChildren = Lists .newArrayList (  )  ;^279^^^^^295^302^[REPLACE] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> lateChildren = Lists.newArrayListWithExpectedSize (  ) ;^280^^^^^295^302^[REPLACE] List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean seen = true;^281^^^^^295^302^[REPLACE] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^282^^^^^295^302^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node currDecl = new Node ( VAR )  ;^296^^^^^295^302^[REPLACE] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node earlyDecls = new Node ( VAR )  ;^304^^^^^295^302^[REPLACE] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( containingNode, currDecl )  ;^271^^^^^269^313^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( child  !=  node )  {^283^^^^^263^326^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^284^285^^^^263^326^[ADD] seen = true; continue;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( removeUnreferenced )  {^288^^^^^263^326^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^291^^^^^288^292^[ADD] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^earlyChildren.add ( child )  ;^289^^^^^263^326^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^295^^^^^263^326^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  || lateChildren.isEmpty (  )  )  {^307^^^^^263^326^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^307^308^309^310^311^263^326^[ADD] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  { containingNode.addChildBefore ( currDecl, parent ) ; } else { containingNode.addChildAfter ( currDecl, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode.addChildBefore ( earlyDecls, parent )  ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^containingNode.addChildBefore ( parent, parent ) ;^308^^^^^263^326^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^319^^^^^263^326^[REPLACE] if  ( NodeUtil.isExpressionNode ( containingNode )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( containingNode, currDecl )  ;^322^^^^^319^323^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceWithRhs ( parent.getParent (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^recordSet ( nameInfo.name, nameNode )  ;^320^^^^^263^326^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( NodeearlyDecls : parent.children (  )  )  {^282^^^^^272^313^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( child  ) {^283^^^^^272^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^continue;^284^285^^^^272^313^[ADD] seen = true; continue;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referenced )  {^288^^^^^272^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^lateChildren.add ( child ) ;earlyChildren.add ( child ) ;^288^289^290^291^292^272^313^[ADD] if  ( seen )  { lateChildren.add ( child ) ; } else { earlyChildren.add ( child ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^earlyChildren.add ( earlyDecls ) ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^289^^^^^272^313^[ADD] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^284^285^^^^272^313^[ADD] seen = true; continue;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node child : this )  {^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^279^280^^^^295^302^[ADD] List<Node> earlyChildren = Lists.newArrayList (  ) ; List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^282^283^284^285^286^295^302^[ADD] for  ( Node child : parent.children (  )  )  { if  ( child == node )  { seen = true; continue; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^304^^^^^295^302^[ADD] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName name  rhs  [TYPE]  Node child  containingNode  currDecl  earlyDecls  gramps  node  parent  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  t.inGlobalScope  (    )    )   {  ;^496^^^^^495^520^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^497^^^^^495^520^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( n.getType (  )   !=  Token.ASSIGN )  {^500^^^^^495^520^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^500^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isVarDeclaration ( n )  )  {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( isVarDeclaration ( n )  )  {     NameInformation ns = createNameInformation ( t, n, parent ) ;     checkNotNull ( ns ) ;     recordSet ( ns.name, n ) ; }else     if  ( isFunctionDeclaration ( n )  )  {         Node nameNode = n.getFirstChild (  ) ;         NameInformation ns = createNameInformation ( t, nameNode, n ) ;         if  ( ns != null )  {             JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;             recordSet ( nameInfo.name, nameNode ) ;         }     }^512^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == true &&true )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^recordDepScope ( n, ns ) ;^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordDepScope ( parent, ns )  ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = node.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == false && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordDepScope ( parent, ns ) ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^513^^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^514^^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = parent.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null &&true )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^recordSet ( nameInfo.name, nameNode )  ;^517^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, n .getLastChild (  )  , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^513^514^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^515^516^517^518^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^507^508^509^510^511^495^520^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}^509^510^511^512^513^495^520^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isExprCall ( n )  )  {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = parent.getLastChild (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^514^515^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = parent.getFirstChild (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node callNode = n.getFirstChild (  ) ;Node nameNode = callNode.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^512^513^514^515^^495^520^[ADD] else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == true ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, node ) ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null )  {^503^^^^^495^520^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordDepScope ( n, ns )  ;^504^^^^^495^520^[REPLACE] recordDepScope ( parent, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^501^^^^^495^520^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^502^503^504^505^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { recordDepScope ( parent, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == this  )  {^503^^^^^495^520^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^recordSet ( nameInfo.name, nameNode )  ;^504^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parents == false ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^517^^^^^495^520^[ADD] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = n .getLastChild (  )  ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = parent.getLastChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if   (  NodeUtil.isVarDeclaration  (  n  )    )   {  ;^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == false &&true )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, parent ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null &&seen )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, callNode ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = nameNode.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^501^^^^^495^520^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes.get ( function )  ;^502^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes.get ( function )  ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node callNode = parent .getLastChild (  )  ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^514^515^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  !t.inGlobalScope  (    )    )   {  ;^566^^^^^563^608^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^566^567^568^569^570^563^608^[ADD] if  ( t.inGlobalScope (  )  )  { if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( node )  )  {^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation ns = createNameInformation ( t, n, parent ) ;^567^568^569^570^^563^608^[ADD] if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  classes != null  )   {  ;^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^572^^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^573^574^575^576^577^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( parent .getParent (  )  , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^574^575^576^577^^563^608^[ADD] if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^572^573^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes.get ( function )  ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes.get ( function )  ;^568^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if   (  NodeUtil.isVarDeclaration  (  n  )    )   {  ;^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   Node nameNode = n.getFirstChild (  ) ;NameInformation ns = createNameInformation ( t, nameNode, n ) ;^571^572^573^574^575^563^608^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == true )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( nameNode.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName nameInfo = getName ( parent.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^568^569^570^571^572^563^608^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, n ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^575^^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if   (  NodeUtil.isVarDeclaration  (  n  )    )   {  ;^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^567^568^569^570^^563^608^[ADD] if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;recordSet ( nameInfo.name, nameNode ) ;^574^575^576^577^^563^608^[ADD] if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^572^573^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   NameInformation ns = createNameInformation ( t, nameNode, n ) ;^571^572^573^574^575^563^608^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^575^576^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node nameNode = n.getLastChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( n.getType (  )   &&  Token.ASSIGN )  {^582^^^^^563^608^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( n.getType (  )   ||  Token.CALL )  {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ns.onlyAffectsClassDef )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == false )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( nameInfo, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, node, parent.getParent (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^601^^^^^563^608^[ADD] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^602^603^604^605^^563^608^[ADD] if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( name, n, node, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, node, parent .getString (  )   )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^598^599^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^599^600^601^602^603^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^601^^^^^563^608^[REPLACE] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name, n, parent, parent.getString (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( nodeew ClassDefiningFunctionNode ( name, n, parent, parent.getString (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^604^^^^^563^608^[ADD] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ref = scopes.get ( function )  ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName name = getName ( ns.name, true ) ;^601^^^^^563^608^[REPLACE] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parents == this  )  {^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^587^^^^^563^608^[REPLACE] if  ( ns.isPrototype )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordSet ( nameInfo.name, nameNode )  ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (nameInfo == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name.prototypeNames.get ( ns.prototypeProperty ) ;^590^^^^^563^608^[REPLACE] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( parentew PrototypeSetNode ( name, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^out.append ( on ( ", " ) .join ( referencedBy )  )  ;^591^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^588^^^^^563^608^[REPLACE] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( idx !=  ( -1 )  )  {     nameInfo.isPrototype = true;     nameInfo.prototypeClass = name.substring ( 0, idx ) ;     nameInfo.prototypeProperty = name.substring (  ( idx +  ( PROTOTYPE_SUBSTRING_LEN )  )  ) ; }^589^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.get ( new PrototypeSetNode ( name, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName name = getName ( ns.prototypeClass, true ) ;^588^^^^^563^608^[REPLACE] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  ( idx !=  ( -1 )  )  {     nameInfo.isPrototype = true;     nameInfo.prototypeClass = name.substring ( 0, idx ) ;     nameInfo.prototypeProperty = name.substring (  ( idx +  ( PROTOTYPE_SUBSTRING_LEN )  )  ) ; }^587^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == true )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^590^591^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( new PrototypeSetNode ( nameInfo, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^591^^^^^563^608^[ADD] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( nameInfo == false )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^name.prototypeNames.add ( ns.prototypeProperty ) ;refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^589^590^591^592^^563^608^[ADD] if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^590^591^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parentameNode = n .getLastChild (  )  ;^583^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, n ) ;^585^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  classes != null  )   {  ;^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^586^587^588^589^590^563^608^[ADD] if  ( ns != null )  { if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ; if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parentame == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^590^^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name.indexOf ( PROTOTYPE_SUBSTRING )  ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( nameInfo == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^588^^^^^563^608^[ADD] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name.prototypeNames .addAll (  )  ;^590^^^^^563^608^[REPLACE] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.CALL )  {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == null && ns.onlyAffectsClassDef )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( nameInfo == false )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^node.getParent (  )  ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name == true )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^603^604^^^^563^608^[ADD] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^598^599^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ns == false && ns.onlyAffectsClassDef )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.get ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^refNodes.add ( nodeew ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^583^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, n ) ;^585^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ns  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  parent.getType  (    )   == Token.FOR  )   {  ;^654^^^^^653^672^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( condition )  ;^670^^^^^666^671^[REPLACE] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( parent ) ;^668^^^^^666^671^[REPLACE] addSimplifiedChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node nameNode : n.children (  )  )  {^663^^^^^659^671^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^663^^^^^659^671^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}   addSimplifiedChildren ( n ) ;addAllChildren ( n ) ;^666^667^668^669^670^653^672^[ADD] else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  { addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^668^669^670^671^^666^671^[ADD] addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node nameNode : n.children (  )  )  {^663^^^^^662^666^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^663^664^665^^^662^666^[ADD] for  ( Node child : n.children (  )  )  { addSimplifiedChildren ( child ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( value == null )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedChildren ( parent ) ;^657^^^^^653^672^[REPLACE] addSimplifiedChildren ( value ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^657^658^^^^653^672^[ADD] addSimplifiedChildren ( value ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node value = parent.getFirstChild (  ) ;^655^^^^^653^672^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent == this )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^addSimplifiedChildren ( value ) ;^656^657^658^^^653^672^[ADD] if  ( value != null )  { addSimplifiedChildren ( value ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( n.getType (  )  == Token.ASSIGN ) {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}^659^660^661^662^^653^672^[ADD] else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( node.getType (  )  == Token.CALL ) {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  ( n.getType (  )  == Token.CALL ) {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {     return scopes.get ( parent ) ; }^666^^^^^653^672^[REMOVE] ^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^670^^^^^666^671^[REPLACE] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^670^^^^^666^671^[ADD] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node value = parent.getLastChild (  ) ;^655^^^^^662^666^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^663^^^^^662^666^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  Node callNode  child  containingNode  currDecl  earlyDecls  gramps  n  nameNode  node  parent  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent != null )  {^675^^^^^674^719^[REPLACE] if  ( parent == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^676^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( n.getType (  )   !=  Token.FOR )  {^683^^^^^674^719^[REPLACE] if  ( n.getType (  )  == Token.FOR )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( !NodeUtil.isFunction ( n )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = n.getLastChild (  ) ;^692^^^^^684^696^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^693^^^^^684^696^[ADD] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node pred = parent.getParent (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node step = step.getNext (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node step = pred.getParent (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = parent.getLastChild (  ) ;^692^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^693^^^^^674^719^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^692^^^^^684^696^[ADD] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^685^^^^^674^719^[ADD] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node pred = parent .getParent (  )  ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node step = step.getParent (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node pred = decl.getParent (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node decl = n.getLastChild (  ) ;^692^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^693^694^^^^674^719^[ADD] Node iter = decl.getNext (  ) ; addAllChildren ( decl ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.getType (  )  == Token.VAR ) {^699^700^701^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.RETURN )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addSimplifiedExpression ( n, value ) ;^702^^^^^699^703^[REPLACE] addSimplifiedExpression ( n, parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ( node.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^705^706^707^708^^674^719^[REPLACE] if  (  ( parent.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^705^706^707^708^709^674^719^[ADD] if  (  ( parent.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH || parent.getType (  )  == Token.CASE )  &&^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^711^^^^^705^712^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )  == Token.DO ) {^714^^^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.DO && parent.getLastChild (  )  == n )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^addAllChildren ( parent ) ;^715^^^^^674^719^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^718^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName jsName  jsn  name  nameInfo  rhs  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  prototypeClass  prototypeProperty  superclass  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  {^722^723^^^^721^809^[REPLACE] if  ( ! ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^725^^^^^722^726^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^725^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^728^729^^731^732^721^809^[ADD] NameInformation nameInfo = createNameInformation ( t, n, parent ) ; if  ( nameInfo == null )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (referring != null )  {^729^^^^^721^809^[REPLACE] if  ( nameInfo == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^731^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^734^^^^^721^809^[REPLACE] if  ( nameInfo.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (prototypeProperty == null )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^741^742^743^^^721^809^[ADD] if  ( nodeName != null )  { recordReference ( nameInfo.name, nodeName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordSet ( nameInfo.name, nameNode )  ;^742^^^^^721^809^[REPLACE] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^745^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String nodeName = n.isQualifiedName (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (superclass == true )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( nameInfo.name, referringName ) ;^742^^^^^721^809^[REPLACE] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String parentodeName = n.isQualifiedName (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  parent.getType  (    )   == Token.DO && parent.getLastChild  (    )   == n  )   {  ;^748^749^^^^721^809^[REPLACE] if  ( parent.getType (  )  == Token.INSTANCEOF && parent.getLastChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^748^749^750^751^752^721^809^[ADD] if  ( parent.getType (  )  == Token.INSTANCEOF && parent.getLastChild (  )  == n )  { JsName checkedClass = getName ( nameInfo.name, true ) ; refNodes.add ( new InstanceOfCheckNode (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^755^^^^^748^756^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName checkedClass = getName ( nameInfo.name, false ) ;^750^^^^^748^756^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^755^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName checkedClass = getName ( referring.name, false ) ;^750^^^^^721^809^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^NameInformation referring = getDependencyScope ( parent ) ;^762^^^^^721^809^[REPLACE] NameInformation referring = getDependencyScope ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^763^^^^^721^809^[ADD] String referringName = "";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( nameInfo == null )  {^764^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^764^765^766^767^768^721^809^[ADD] if  ( referring != null )  { referringName = referring.isPrototype ? referring.prototypeClass : referring.name; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^referringName =  nameInfo.isPrototype ? nameInfo.prototypeClass : nameInfo.name;^765^766^767^^^721^809^[REPLACE] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String name = referring.name;^772^^^^^721^809^[REPLACE] String name = nameInfo.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( referring.isExternallyReferenceable )  {^773^^^^^721^809^[REPLACE] if  ( nameInfo.isExternallyReferenceable )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^775^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^780^^^^^721^809^[REPLACE] if  ( NodeUtil.isLhs ( n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if   (  referring != null  )   {  ;^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( prototypeClass, name ) ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return;  ;^784^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( nameInfo ==nameInfo )  {^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( referringName, superclass ) ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^787^^^^^721^809^[REPLACE] if  ( nodesToKeep.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^787^788^789^790^^721^809^[ADD] if  ( nodesToKeep.contains ( n )  )  { NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^} else if  ( nameInfo == null )  {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^}^794^795^796^^^721^809^[ADD] else if  ( referring != null )  { recordReference ( referringName, name ) ; } else {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( value )  && NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node ancestor : parent.getAncestors (  )  )  {^801^^^^^794^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node iter = decl.getNext (  )  ;^801^^^^^794^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( functionScope.name, name )  ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  && NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^721^809^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, superclass ) ;^804^^^^^802^806^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^801^802^803^804^805^796^808^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( functionScope == this  )  {^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^792^^^^^789^793^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^792^^^^^789^793^[ADD] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( functionScope.name, prototypeProperty ) ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^788^789^790^791^792^721^809^[ADD] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  function == null  )   {  ;^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( WINDOW, superclass ) ;^792^^^^^789^793^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( functionScope.name, superclass ) ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( value )  && NodeUtil.isForIn ( ancestor )  )  {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^801^802^803^804^805^794^808^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordReference ( superclass, name ) ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^795^^^^^721^809^[ADD] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^802^803^804^805^806^721^809^[ADD] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^break;^804^805^^^^802^806^[ADD] recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^788^789^790^791^792^796^808^[ADD] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  containingNode  currDecl  decl  earlyDecls  gramps  iter  n  nameNode  node  parent  pred  step  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  true  [TYPE]  JsName checkedClass  jsName  jsn  name  nameInfo  rhs  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^StringBuilder out = new StringBuilder (  )  ;^930^^^^^929^957^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^931^^^^^929^957^[REPLACE] sb.append ( "TOTAL NAMES: " + countOf ( TriState.BOTH, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "TOTAL CLASSES: "  countOf ( TriState.TRUE, TriState.BOTH )   "\n" ) ;^932^^^^^929^957^[REPLACE] sb.append ( "TOTAL CLASSES: " + countOf ( TriState.TRUE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^932^^^^^929^957^[REPLACE] sb.append ( "TOTAL CLASSES: " + countOf ( TriState.TRUE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString ( "TOTAL STATIC FUNCTIONS: "  countOf ( TriState.FALSE, TriState.BOTH )   "\n" ) ;^933^934^^^^929^957^[REPLACE] sb.append ( "TOTAL STATIC FUNCTIONS: " + countOf ( TriState.FALSE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^934^^^^^929^957^[REPLACE] + countOf ( TriState.FALSE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^934^^^^^929^957^[ADD] + countOf ( TriState.FALSE, TriState.BOTH )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "REFERENCED NAMES: "  countOf ( TriState.BOTH, TriState.TRUE )  "\n" ) ;^935^936^^^^929^957^[REPLACE] sb.append ( "REFERENCED NAMES: " + countOf ( TriState.BOTH, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString ( "REFERENCED CLASSES: "  countOf ( TriState.TRUE, TriState.TRUE )  "\n" ) ;^937^938^^^^929^957^[REPLACE] sb.append ( "REFERENCED CLASSES: " + countOf ( TriState.TRUE, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^937^938^^^^929^957^[ADD] sb.append ( "REFERENCED CLASSES: " + countOf ( TriState.TRUE, TriState.TRUE ) + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString ( "REFERENCED STATIC FUNCTIONS: "  countOf ( TriState.FALSE, TriState.TRUE )  referringName ) ;^939^940^^^^929^957^[REPLACE] sb.append ( "REFERENCED STATIC FUNCTIONS: " + countOf ( TriState.FALSE, TriState.TRUE )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^940^^^^^929^957^[REPLACE] + countOf ( TriState.FALSE, TriState.TRUE )  + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^946^947^948^^^943^949^[ADD] for  ( JsName jsName : gen )  { sb.append ( " - " + jsName.name + "\n" ) ; }^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0 ; i < generations.size (  ) ; i++ )  {^943^^^^^943^949^[REPLACE] for  ( int i = 0; i < generations.size (  ) ; i++ )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Set<JsName> gen = generations.get ( generation ) ;^944^^^^^943^949^[REPLACE] Set<JsName> gen = generations.get ( i ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^946^^^^^943^949^[REPLACE] for  ( JsName jsName : gen )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "ALL NAMES<ul>\n" )  ;^951^^^^^929^957^[REPLACE] sb.append ( "ALL NAMES\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( node  "\n" ) ;^953^^^^^929^957^[REPLACE] sb.append ( node + "\n" ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^952^^^^^929^957^[REPLACE] for  ( JsName node : allNames.values (  )  )  {^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return sb .StringBuilder (  )  ;^956^^^^^929^957^[REPLACE] return sb.toString (  ) ;^[METHOD] getStringReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^StringBuilder out = new StringBuilder (  )  ;^965^^^^^964^1035^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.toString("<html><body><style type=\"text/css\">"  "body, td, p {font-family: Arial; font-size: 83%} "  "ul {margin-top:2px; margin-left:0px; padding-left:1em;} "  "li {margin-top:3px; margin-left:24px; padding-left:0px;"^966^967^968^969^^964^1035^[REPLACE] sb.append ( "<html><body><style type=\"text/css\">" + "body, td, p {font-family: Arial; font-size: 83%} " + "ul {margin-top:2px; margin-left:0px; padding-left:1em;} " + "li {margin-top:3px; margin-left:24px; padding-left:0px;"^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "ALL NAMES<ul>\n" )  ;^971^^^^^964^1035^[REPLACE] sb.append ( "OVERALL STATS<ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^971^^^^^964^1035^[ADD] sb.append ( "OVERALL STATS<ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Total Names: "  countOf ( TriState.BOTH, TriState.BOTH )  ) ;^972^^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Names: " + countOf ( TriState.BOTH, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^972^^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Names: " + countOf ( TriState.BOTH, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Total Classes: "  countOf ( TriState.TRUE, TriState.BOTH )  ) ;^973^974^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Classes: " + countOf ( TriState.TRUE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^974^^^^^964^1035^[REPLACE] + countOf ( TriState.TRUE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Total Static Functions: "  countOf ( TriState.FALSE, TriState.BOTH )  ) ;^975^976^^^^964^1035^[REPLACE] appendListItem ( sb, "Total Static Functions: " + countOf ( TriState.FALSE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^976^^^^^964^1035^[REPLACE] + countOf ( TriState.FALSE, TriState.BOTH )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,toName  countOf ( TriState.BOTH, TriState.TRUE )  ) ;^977^978^^^^964^1035^[REPLACE] appendListItem ( sb, "Referenced Names: " + countOf ( TriState.BOTH, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^978^^^^^964^1035^[REPLACE] + countOf ( TriState.BOTH, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Referenced Classes: "  countOf ( TriState.TRUE, TriState.TRUE )  ) ;^979^980^^^^964^1035^[REPLACE] appendListItem ( sb, "Referenced Classes: " + countOf ( TriState.TRUE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^979^980^^^^964^1035^[ADD] appendListItem ( sb, "Referenced Classes: " + countOf ( TriState.TRUE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^980^^^^^964^1035^[REPLACE] + countOf ( TriState.TRUE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb, "Referenced Functions: "  countOf ( TriState.FALSE, TriState.TRUE )  ) ;^981^982^^^^964^1035^[REPLACE] appendListItem ( sb, "Referenced Functions: " + countOf ( TriState.FALSE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^appendListItem ( sb,  ( "Total Names: " +  ( countOf ( BOTH, BOTH )  )  )  )  ;^982^^^^^964^1035^[REPLACE] + countOf ( TriState.FALSE, TriState.TRUE )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^982^983^^^^964^1035^[ADD] + countOf ( TriState.FALSE, TriState.TRUE )  ) ; sb.append ( "</ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .StringBuilder (  )  ;^983^^^^^964^1035^[REPLACE] sb.append ( "</ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^989^990^991^^^986^993^[ADD] for  ( JsName jsName : gen )  { appendListItem ( sb, nameLink ( jsName.name )  ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0 ; i < generations.size (  ) ; i++ )  {^986^^^^^986^993^[REPLACE] for  ( int i = 0; i < generations.size (  ) ; i++ )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^987^^^^^986^993^[ADD] Set<JsName> gen = generations.get ( i ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^989^^^^^986^993^[REPLACE] for  ( JsName jsName : gen )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .StringBuilder (  )  ;^995^^^^^964^1035^[REPLACE] sb.append ( "ALL NAMES<ul>\n" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.prototypeNames.size (  )  /  2 > 0  )  {^998^^^^^964^1035^[REPLACE] if  ( node.prototypeNames.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^sb.append ( "<li>PROTOTYPES: " ) ;Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;sb.append ( protoIter.next (  )  ) ;^998^999^1000^1001^1002^964^1035^[ADD] if  ( node.prototypeNames.size (  )  > 0 )  { sb.append ( "<li>PROTOTYPES: " ) ; Iterator<String> protoIter = node.prototypeNames.iterator (  ) ; while  ( protoIter.hasNext (  )  )  { sb.append ( protoIter.next (  )  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( false.hasNext (  )  )  {^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "</li>" )  ;^1004^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> protoIter = to.prototypeNames.iterator (  ) ;^1000^^^^^964^1035^[REPLACE] Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( null.hasNext (  )  )  {^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1003^1004^1005^^^964^1035^[ADD] if  ( protoIter.hasNext (  )  )  { sb.append ( ", " ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1004^^^^^964^1035^[ADD] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.refersTo.size (  )  %  0.5  > 0 )  {^1008^^^^^964^1035^[REPLACE] if  ( node.refersTo.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( this.hasNext (  )  )  {^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "</li>" )  ;^1014^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String> fromIter = iterator (  )  ;^1010^^^^^964^1035^[REPLACE] Iterator<String> toIter = node.refersTo.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( toIter .next (  )   )  {^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .append ( toName )  ;^1014^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.referencedBy.size (  )  *  0.5  > 0 )  {^1018^^^^^964^1035^[REPLACE] if  ( node.referencedBy.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( null.next (  )  )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^sb.append ( ", " ) ;^1023^1024^1025^^^964^1035^[ADD] if  ( fromIter.hasNext (  )  )  { sb.append ( ", " ) ; }^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "</li>" )  ;^1024^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> fromIter = to.referencedBy.size (  ) ;^1020^^^^^964^1035^[REPLACE] Iterator<String> fromIter = node.referencedBy.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( null.hasNext (  )  )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .append ( fromName )  ;^1024^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( JsName to : allNames.values (  )  )  {^996^^^^^964^1035^[REPLACE] for  ( JsName node : allNames.values (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  prototypeNames.size  (    )   > 0  )   {  ;^998^^^^^964^1035^[REPLACE] if  ( node.prototypeNames.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  pIter.hasNext  (    )    )   {  ;^1003^^^^^964^1035^[REPLACE] if  ( protoIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^sb.append ( "</ul></li>" )  ;^1004^^^^^964^1035^[REMOVE] ^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1000^^^^^964^1035^[ADD] Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .append ( fromName )  ;^1004^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.refersTo.size (  )  /  0.5  > 0 )  {^1008^^^^^964^1035^[REPLACE] if  ( node.refersTo.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  pIter.hasNext  (    )    )   {  ;^1013^^^^^964^1035^[REPLACE] if  ( toIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .append ( fromName )  ;^1014^^^^^964^1035^[REPLACE] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^sb.append ( "</ul></li>" )  ;^1014^^^^^964^1035^[REMOVE] ^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1014^^^^^964^1035^[ADD] sb.append ( ", " ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( node.referencedBy.size (  )  - 3 > 0 )  {^1018^^^^^964^1035^[REPLACE] if  ( node.referencedBy.size (  )  > 0 )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( fromIter.next (  )  )  {^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1020^^^^^964^1035^[ADD] Iterator<String> fromIter = node.referencedBy.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  pIter.hasNext  (    )    )   {  ;^1023^^^^^964^1035^[REPLACE] if  ( fromIter.hasNext (  )  )  {^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Iterator<String> toIter = to.refersTo.iterator (  ) ;^1010^^^^^964^1035^[REPLACE] Iterator<String> toIter = node.refersTo.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^996^997^998^999^1000^964^1035^[ADD] for  ( JsName node : allNames.values (  )  )  { sb.append ( "<li>" + nameAnchor ( node.name )  + "<ul>" ) ; if  ( node.prototypeNames.size (  )  > 0 )  { sb.append ( "<li>PROTOTYPES: " ) ; Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String> toIter = iterator (  )  ;^1000^^^^^964^1035^[REPLACE] Iterator<String> protoIter = node.prototypeNames.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String> toIter = iterator (  )  ;^1020^^^^^964^1035^[REPLACE] Iterator<String> fromIter = node.referencedBy.iterator (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb .StringBuilder (  )  ;^1031^^^^^964^1035^[REPLACE] sb.append ( "</ul>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^sb.append ( "</ul></li>" )  ;^1032^^^^^964^1035^[REPLACE] sb.append ( "</body></html>" ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return sb.StringBuilder (  ) ;^1034^^^^^964^1035^[REPLACE] return sb.toString (  ) ;^[METHOD] getHtmlReport [TYPE] String [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  Set DEFAULT_GLOBAL_NAMES  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  StringBuilder sb  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  fromName  name  nodeName  prototypeClass  prototypeProperty  referringName  superclass  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  from  jsName  jsn  name  nameInfo  node  rhs  to  [TYPE]  Iterator fromIter  protoIter  toIter  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName> curGeneration = newHashSet (  )  ;^1087^^^^^1084^1108^[REPLACE] Set<JsName> allNamesCopy = Sets.newHashSet ( allNames.values (  )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( globalNames.contains ( parentName )  )  {^1094^^^^^1084^1108^[REPLACE] if  ( !globalNames.contains ( parentName )  )  {^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1103^^^^^1084^1108^[ADD] curJsName = parentJsName;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^1095^^^^^1084^1108^[REPLACE] JsName parentJsName = getName ( parentName, true ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1089^1090^1091^1092^1093^1084^1108^[ADD] for  ( JsName name : allNamesCopy )  { String curName = name.name; JsName curJsName = name; while  ( curName.indexOf ( '.' )  != -1 )  { String parentName = curName.substring ( 0, curName.lastIndexOf ( '.' )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curName = parentName  ;^1103^^^^^1084^1108^[REPLACE] curJsName = parentJsName;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curJsName = parentJsName  ;^1105^^^^^1084^1108^[REPLACE] curName = parentName;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1090^^^^^1084^1108^[ADD] String curName = name.name;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName curJsName = parentJsName;^1091^^^^^1084^1108^[REPLACE] JsName curJsName = name;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String parentName = curName.substring ( 4, curName.lastIndexOf ( '.' )  ) ;^1093^^^^^1084^1108^[REPLACE] String parentName = curName.substring ( 0, curName.lastIndexOf ( '.' )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName parentJsName = getName ( toName, false ) ;^1095^^^^^1084^1108^[REPLACE] JsName parentJsName = getName ( parentName, true ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^1089^^^^^1084^1108^[REPLACE] for  ( JsName name : allNamesCopy )  {^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1090^1091^^^^1084^1108^[ADD] String curName = name.name; JsName curJsName = name;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1091^^^^^1084^1108^[ADD] JsName curJsName = name;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String parentName = curName.substring ( 4, curName .indexOf ( PROTOTYPE_SUFFIX_LEN )   ) ;^1093^^^^^1084^1108^[REPLACE] String parentName = curName.substring ( 0, curName.lastIndexOf ( '.' )  ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName parentJsName = getName ( parentName, false ) ;^1095^^^^^1084^1108^[REPLACE] JsName parentJsName = getName ( parentName, true ) ;^[METHOD] referenceParentNames [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  root  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1123^^^^^1120^1187^[ADD] String name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node rootNameNode = thenBranch;^1124^^^^^1120^1187^[REPLACE] Node rootNameNode = n;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1125^^^^^1120^1187^[ADD] boolean bNameWasShortened = false;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( rootNameNode.getType (  )   ||  Token.GETPROP )  {^1128^^^^^1120^1187^[REPLACE] if  ( rootNameNode.getType (  )  == Token.GETPROP )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1128^1129^1130^^1132^1120^1187^[ADD] if  ( rootNameNode.getType (  )  == Token.GETPROP )  { name = "." + prop.getString (  )  + name; } else { bNameWasShortened = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1132^^^^^1128^1134^[ADD] bNameWasShortened = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name  =  name ;^1133^^^^^1128^1134^[REPLACE] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name =  ( rootNameNode.getString (  )  )  + name  ;^1129^^^^^1120^1187^[REPLACE] name = "." + prop.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^prototypeClass = "."  prop.getString (  )   name;^1129^^^^^1120^1187^[REPLACE] name = "." + prop.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^bNameWasShortened = false;^1132^^^^^1120^1187^[REPLACE] bNameWasShortened = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name ;^1133^^^^^1120^1187^[REPLACE] name = "";^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1135^^^^^1120^1187^[ADD] rootNameNode = rootNameNode.getFirstChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node prop = root.getFirstChild (  ) ;^1127^^^^^1120^1187^[REPLACE] Node prop = rootNameNode.getLastChild (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isCall ( parent )  || t.inGlobalScope (  )  )  {^1140^^^^^1120^1187^[REPLACE] if  ( NodeUtil.isCall ( parent )  && t.inGlobalScope (  )  )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1140^1141^1142^1143^1144^1120^1187^[ADD] if  ( NodeUtil.isCall ( parent )  && t.inGlobalScope (  )  )  { SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ; if  ( classes != null )  { NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( classes == true )  {^1143^^^^^1120^1187^[REPLACE] if  ( classes != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^NameInformation nameInfo = new NameInformation (  ) ;^1143^1144^1145^1146^1147^1120^1187^[ADD] if  ( classes != null )  { NameInformation nameInfo = new NameInformation (  ) ; nameInfo.name = classes.subclassName; nameInfo.onlyAffectsClassDef = true; nameInfo.superclass = classes.superclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.superclass = classes.superclassName  ;^1145^^^^^1120^1187^[REPLACE] nameInfo.name = classes.subclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1146^1147^^^^1120^1187^[ADD] nameInfo.onlyAffectsClassDef = true; nameInfo.superclass = classes.superclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = classes.subclassName  ;^1147^^^^^1120^1187^[REPLACE] nameInfo.superclass = classes.superclassName;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return name;  ;^1148^^^^^1120^1187^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, true )  ;^1144^^^^^1120^1187^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.onlyAffectsClassDef = false;^1146^^^^^1120^1187^[REPLACE] nameInfo.onlyAffectsClassDef = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1141^1142^^^^1120^1187^[ADD] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( classes == null )  {^1143^^^^^1120^1187^[REPLACE] if  ( classes != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1146^^^^^1120^1187^[ADD] nameInfo.onlyAffectsClassDef = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( original ) ;^1141^1142^^^^1120^1187^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( parent ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( bNameWasShortened ) {^1156^1157^1158^1159^^1120^1187^[REPLACE] if  ( !bNameWasShortened && n.getType (  )  == Token.GETPROP && parent.getType (  )  == Token.ASSIGN && "prototype".equals ( n.getLastChild (  ) .getString (  )  )  )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  == false )  {^1160^^^^^1156^1169^[REPLACE] if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1160^1161^1162^1163^1164^1156^1169^[ADD] if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  != null )  { name = rootNameNode.getString (  )  + name; name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ; NameInformation nameInfo = new NameInformation (  ) ; nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )   name;^1161^^^^^1156^1169^[REPLACE] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0 , name.length (  )  %  2 - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1156^1169^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1164^^^^^1156^1169^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return name;  ;^1165^^^^^1156^1169^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1167^^^^^1156^1169^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, true )  ;^1163^^^^^1156^1169^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  == null )  {^1160^^^^^1120^1187^[REPLACE] if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  != null )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1160^1161^1162^1163^1164^1120^1187^[ADD] if  ( createNameInformation ( t, n.getFirstChild (  ) , n )  != null )  { name = rootNameNode.getString (  )  + name; name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ; NameInformation nameInfo = new NameInformation (  ) ; nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1167^^^^^1160^1168^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1161^^^^^1120^1187^[ADD] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0, name.length (  )  - 2 - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1120^1187^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1164^^^^^1120^1187^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return name;  ;^1165^^^^^1120^1187^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1163^1164^1165^1166^1167^1120^1187^[ADD] NameInformation nameInfo = new NameInformation (  ) ; nameInfo.name = name; return nameInfo; } else { return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  !t.inGlobalScope  (    )    )   {  ;^1173^^^^^1120^1187^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name.indexOf ( '.' )   ||  0 )  {^1175^^^^^1120^1187^[REPLACE] if  ( name.indexOf ( '.' )  == 0 )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1178^^^^^1175^1179^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = name.substring ( 1 + 0 ) ;^1176^^^^^1120^1187^[REPLACE] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = name.substring ( 4 ) ;^1176^^^^^1120^1187^[REPLACE] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1178^^^^^1120^1187^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.isExternallyReferenceable = false;^1180^^^^^1120^1187^[REPLACE] nameInfo.isExternallyReferenceable = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return name;  ;^1181^^^^^1120^1187^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, true )  ;^1174^^^^^1120^1187^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( name.indexOf ( '.' )   !=  0 )  {^1175^^^^^1120^1187^[REPLACE] if  ( name.indexOf ( '.' )  == 0 )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1178^^^^^1175^1179^[ADD] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1176^^^^^1120^1187^[ADD] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = rootNameNode.getString (  )   name;^1161^^^^^1120^1187^[REPLACE] name = rootNameNode.getString (  )  + name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^name = name.substring ( 0 , name.length (  )  + 2 - PROTOTYPE_SUFFIX_LEN ) ;^1162^^^^^1120^1187^[REPLACE] name = name.substring ( 0, name.length (  )  - PROTOTYPE_SUFFIX_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1164^^^^^1120^1187^[ADD] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name = name.substring ( 1L ) ;^1176^^^^^1120^1187^[REPLACE] nameInfo.name = name.substring ( 1 ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1167^^^^^1120^1187^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return createNameInformation  (  rootNameNode.getString  (    )   + name, t.getScope  (    )  , rootNameNode  )  ;  ;^1170^1171^^^^1120^1187^[REPLACE] return createNameInformation ( rootNameNode.getString (  )  + name, t.getScope (  ) , rootNameNode ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this;^1183^^^^^1120^1187^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1185^^^^^1120^1187^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, true )  ;^1163^^^^^1120^1187^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  SubclassRelationship classes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1202^1203^^^^1200^1226^[ADD] String rootName = rootNameNode.getString (  ) ; Var v = scope.getVar ( rootName ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Var v = scope.getVar ( toName ) ;^1203^^^^^1200^1226^[REPLACE] Var v = scope.getVar ( rootName ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1204^^^^^1200^1226^[ADD] boolean isExtern =  ( v == null && externalNames.contains ( rootName )  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1205^1206^^^^1200^1226^[ADD] boolean isGlobalRef =  ( v != null && v.isGlobal (  )  )  || isExtern || rootName.equals ( WINDOW ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( !isPrototype )  {^1207^^^^^1200^1226^[REPLACE] if  ( !isGlobalRef )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return true;^1208^^^^^1200^1226^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1208^^^^^1200^1226^[REPLACE] return null;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, true )  ;^1211^^^^^1200^1226^[REPLACE] NameInformation nameInfo = new NameInformation (  ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int idx = referringName.indexOf ( PROTOTYPE_SUBSTRING ) ;^1214^^^^^1200^1226^[REPLACE] int idx = name.indexOf ( PROTOTYPE_SUBSTRING ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( i  ==  -1 )  {^1215^^^^^1200^1226^[REPLACE] if  ( idx != -1 )  {^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.isPrototype = false;^1216^^^^^1200^1226^[REPLACE] nameInfo.isPrototype = true;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeClass = name.substring ( 0 >>> 0, idx ) ;^1217^^^^^1200^1226^[REPLACE] nameInfo.prototypeClass = name.substring ( 0, idx ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeProperty = name.substring ( idx  PROTOTYPE_SUBSTRING_LEN ) ;^1218^1219^^^^1200^1226^[REPLACE] nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeClass = name.substring ( 3, idx ) ;^1217^^^^^1200^1226^[REPLACE] nameInfo.prototypeClass = name.substring ( 0, idx ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.prototypeProperty = name.substring (i  PROTOTYPE_SUBSTRING_LEN ) ;^1218^1219^^^^1200^1226^[REPLACE] nameInfo.prototypeProperty = name.substring ( idx + PROTOTYPE_SUBSTRING_LEN ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^nameInfo.name =  name;^1222^^^^^1200^1226^[REPLACE] nameInfo.name = name;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1223^1224^^^^1200^1226^[ADD] nameInfo.isExternallyReferenceable = isExtern || isExternallyReferenceable ( scope, name ) ;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return name;  ;^1225^^^^^1200^1226^[REPLACE] return nameInfo;^[METHOD] createNameInformation [TYPE] NameAnalyzer$NameInformation [PARAMETER] String name Scope scope Node rootNameNode [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation nameInfo  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  Var v  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  Scope scope  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^1272^^^^^1271^1299^[REPLACE] Node function = t.getEnclosingFunction (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  functionScope != null  )   {  ;^1273^^^^^1271^1299^[REPLACE] if  ( function == null )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return null;^1273^1274^1275^^^1271^1299^[ADD] if  ( function == null )  { return null; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return this;^1274^^^^^1271^1299^[REPLACE] return null;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1274^^^^^1271^1299^[REPLACE] return null;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName target = allNames.get ( s )  ;^1277^^^^^1271^1299^[REPLACE] NameInformation ref = scopes.get ( function ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( ref == false )  {^1278^^^^^1271^1299^[REPLACE] if  ( ref != null )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ref;  ;^1279^^^^^1271^1299^[REPLACE] return ref;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node parent = step.getString (  ) ;^1284^^^^^1271^1299^[REPLACE] Node parent = function.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent == null )  {^1285^^^^^1271^1299^[REPLACE] if  ( parent != null )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1285^1286^1287^1288^^1271^1299^[ADD] if  ( parent != null )  { if  ( parent.getType (  )  == Token.NAME )  { return scopes.get ( parent ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   ||  Token.NAME )  {^1286^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes .isEmpty (  )  ;^1287^^^^^1271^1299^[REPLACE] return scopes.get ( parent ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (   Token.ASSIGN )  {^1290^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1290^1291^1292^1293^1294^1271^1299^[ADD] if  ( parent.getType (  )  == Token.ASSIGN )  { Node gramp = parent.getParent (  ) ; if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  { return scopes.get ( gramp ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  (  gramp.getType (  )  != Token.EXPR_RESULT )  {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get  (  gramp  )  ;  ;^1293^^^^^1271^1299^[REPLACE] return scopes.get ( gramp ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes .isEmpty (  )  ;^1293^^^^^1271^1299^[REPLACE] return scopes.get ( gramp ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = original.getParent (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( gramp != false && gramp.getType (  )  != Token.EXPR_RESULT )  {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get ( thenBranch ) ;^1293^^^^^1271^1299^[REPLACE] return scopes.get ( gramp ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get ( step ) ;^1287^^^^^1271^1299^[REPLACE] return scopes.get ( parent ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = original.getString (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   &&  Token.NAME )  {^1286^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1286^1287^1288^^^1271^1299^[ADD] if  ( parent.getType (  )  == Token.NAME )  { return scopes.get ( parent ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return scopes.get  (  parent  )  ;  ;^1287^^^^^1271^1299^[REPLACE] return scopes.get ( parent ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   !=  Token.ASSIGN )  {^1290^^^^^1271^1299^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( thenBranch != null ) {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = step.getParent (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( gramp != false && gramp .isEmpty (  )   {^1292^^^^^1271^1299^[REPLACE] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^return scopes.get ( gramp ) ;^1292^1293^1294^^^1271^1299^[ADD] if  ( gramp != null && gramp.getType (  )  == Token.EXPR_RESULT )  { return scopes.get ( gramp ) ; }^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node gramp = parent.getString (  ) ;^1291^^^^^1271^1299^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return null;  ;^1298^^^^^1271^1299^[REPLACE] return null;^[METHOD] getEnclosingFunctionDependencyScope [TYPE] NameAnalyzer$NameInformation [PARAMETER] NodeTraversal t [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  NameInformation ref  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1308^^^^^1305^1337^[ADD] Set<JsName> curGeneration = Sets.newHashSet (  ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName window = getName ( WINDOW, false ) ;^1310^^^^^1305^1337^[REPLACE] JsName window = getName ( WINDOW, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^function.generation = 0  ;^1311^^^^^1305^1337^[REPLACE] window.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1312^^^^^1305^1337^[ADD] window.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curGeneration.add ( parentJsName ) ;^1313^^^^^1305^1337^[REPLACE] curGeneration.add ( window ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName function = getName ( FUNCTION, false ) ;^1314^^^^^1305^1337^[REPLACE] JsName function = getName ( FUNCTION, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1315^1316^^^^1305^1337^[ADD] function.generation = 0; function.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1316^^^^^1305^1337^[ADD] function.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^curGeneration.contains ( function ) ;^1317^^^^^1305^1337^[REPLACE] curGeneration.add ( function ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( jsn.refersTo.length (  )  > 0 )  {^1321^^^^^1305^1337^[REPLACE] if  ( jsn.refersTo.size (  )  > 0 )  {^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1322^1323^^^^1305^1337^[ADD] jsn.generation = 0; jsn.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.referenced = false;^1323^^^^^1305^1337^[REPLACE] jsn.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1319^1320^1321^1322^1323^1305^1337^[ADD] for  ( String s : externalNames )  { JsName jsn = getName ( s, true ) ; if  ( jsn.refersTo.size (  )  > 0 )  { jsn.generation = 0; jsn.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  size  (    )   > 0  )   {  ;^1321^^^^^1305^1337^[REPLACE] if  ( jsn.refersTo.size (  )  > 0 )  {^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1321^1322^1323^1324^1325^1305^1337^[ADD] if  ( jsn.refersTo.size (  )  > 0 )  { jsn.generation = 0; jsn.referenced = true; curGeneration.add ( jsn ) ; }^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.generation = 1;^1322^^^^^1305^1337^[REPLACE] jsn.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^jsn.generation = 3;^1322^^^^^1305^1337^[REPLACE] jsn.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName name  ;^1320^^^^^1305^1337^[REPLACE] JsName jsn = getName ( s, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^window.generation = 0  ;^1322^^^^^1305^1337^[REPLACE] jsn.generation = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^target.referenced = true  ;^1323^^^^^1305^1337^[REPLACE] jsn.referenced = true;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String name = ""  ;^1319^^^^^1305^1337^[REPLACE] for  ( String s : externalNames )  {^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, false ) ;^1320^^^^^1305^1337^[REPLACE] JsName jsn = getName ( s, true ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^generations.add ( this ) ;^1327^^^^^1305^1337^[REPLACE] generations.add ( curGeneration ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int iters = 4;^1331^^^^^1305^1337^[REPLACE] int iters = 0;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1333^^^^^1305^1337^[ADD] curGeneration = referenceMore ( curGeneration ) ;^[METHOD] calculateReferences [TYPE] void [PARAMETER] [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  nodesToKeep  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^int count = 1;^1384^^^^^1383^1402^[REPLACE] int count = 0;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( classMatch && referenceMatch && name.externallyDefined )  {^1397^^^^^1383^1402^[REPLACE] if  ( classMatch && referenceMatch && !name.externallyDefined )  {^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1385^1386^1387^^1389^1383^1402^[ADD] for  ( JsName name : allNames.values (  )  )  {  boolean nodeIsClass = name.prototypeNames.size (  )  > 0; boolean classMatch = isClass == TriState.BOTH^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( classMatch ) {^1397^^^^^1383^1402^[REPLACE] if  ( classMatch && referenceMatch && !name.externallyDefined )  {^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1387^^^^^1383^1402^[ADD] boolean nodeIsClass = name.prototypeNames.size (  )  > 0;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean classMatch = isClass == TriState.BOTH &&  ( referenced ;^1389^1390^1391^^^1383^1402^[REPLACE] boolean classMatch = isClass == TriState.BOTH ||  ( nodeIsClass && isClass == TriState.TRUE ) ||  ( !nodeIsClass && isClass == TriState.FALSE ) ;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean referenceMatch = referenced == TriState.BOTH ||  ( name.referenced  >=  referenced == TriState.TRUE ) ||  ( !name.referenced  >=  referenced == TriState.FALSE ) ;^1393^1394^1395^^^1383^1402^[REPLACE] boolean referenceMatch = referenced == TriState.BOTH ||  ( name.referenced && referenced == TriState.TRUE ) ||  ( !name.referenced && referenced == TriState.FALSE ) ;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^JsName jsn = getName ( s, true )  ;^1385^^^^^1383^1402^[REPLACE] for  ( JsName name : allNames.values (  )  )  {^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean nodeIsClass = name.prototypeNames.size (  )  - 1 > 0;^1387^^^^^1383^1402^[REPLACE] boolean nodeIsClass = name.prototypeNames.size (  )  > 0;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1389^1390^1391^^^1383^1402^[ADD] boolean classMatch = isClass == TriState.BOTH ||  ( nodeIsClass && isClass == TriState.TRUE ) ||  ( !nodeIsClass && isClass == TriState.FALSE ) ;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean referenceMatch = referenced == TriState.BOTH ||  ( name.referenced || referenced == TriState.TRUE ) ||  ( !name.referenced || referenced == TriState.FALSE ) ;^1393^1394^1395^^^1383^1402^[REPLACE] boolean referenceMatch = referenced == TriState.BOTH ||  ( name.referenced && referenced == TriState.TRUE ) ||  ( !name.referenced && referenced == TriState.FALSE ) ;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return generation;^1401^^^^^1383^1402^[REPLACE] return count;^[METHOD] countOf [TYPE] int [PARAMETER] TriState isClass TriState referenced [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  root  rootNameNode  step  thenBranch  value  [TYPE]  List earlyChildren  generations  lateChildren  prototypeNames  refNodes  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  NodeUtil.isAssignmentOp  (  parent  )    )   {  ;^1432^^^^^1431^1457^[REPLACE] if  ( valueConsumedByParent ( n, parent )  )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1432^1433^^1435^1436^1431^1457^[ADD] if  ( valueConsumedByParent ( n, parent )  )  {  List<Node> replacements = getRhsSubexpressions ( n ) ; List<Node> newReplacements = Lists.newArrayList (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  else {^1445^^^^^1431^1457^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && parent.getType (  )  != Token.FOR )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceTopLevelExpressionWithRhs ( parent, thenBranch ) ;^1455^^^^^1445^1456^[REPLACE] replaceTopLevelExpressionWithRhs ( parent, n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1451^1452^^^^1431^1457^[ADD] Node replacement = n.getLastChild (  ) ; replacement.detachFromParent (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^1451^^^^^1431^1457^[REPLACE] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1435^^^^^1431^1457^[ADD] List<Node> replacements = getRhsSubexpressions ( n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node> replacements = newArrayListWithExpectedSize ( subexpressions.size (  )  )  ;^1436^^^^^1431^1457^[REPLACE] List<Node> newReplacements = Lists.newArrayList (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( int i = 0 ; i < replacements.size (  )  - 1; i++ )  {^1437^^^^^1431^1457^[REPLACE] for  ( int i = 0; i < replacements.size (  )  - 1; i++ )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node valueExpr = replacements.get ( replacements.size (  )  + 1 - 1 ) ;^1440^^^^^1431^1457^[REPLACE] Node valueExpr = replacements.get ( replacements.size (  )  - 1 ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^}  if  (  parent.getType (  )  != Token.FOR )  {^1445^^^^^1431^1457^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && parent.getType (  )  != Token.FOR )  {^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replaceTopLevelExpressionWithRhs ( valueExpr, n ) ;^1455^^^^^1445^1456^[REPLACE] replaceTopLevelExpressionWithRhs ( parent, n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node replacement = thenBranch.getFirstChild (  ) ;^1451^^^^^1431^1457^[REPLACE] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> replacements = getRhsSubexpressions ( thenBranch ) ;^1435^^^^^1431^1457^[REPLACE] List<Node> replacements = getRhsSubexpressions ( n ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> newReplacements = Lists.newArrayListWithExpectedSize (  ) ;^1436^^^^^1431^1457^[REPLACE] List<Node> newReplacements = Lists.newArrayList (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node valueExpr = replacements .get ( i )  ;^1440^^^^^1431^1457^[REPLACE] Node valueExpr = replacements.get ( replacements.size (  )  - 1 ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node replacement = n.getFirstChild (  ) ;^1451^^^^^1431^1457^[REPLACE] Node replacement = n.getLastChild (  ) ;^[METHOD] replaceWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^throw new IllegalArgumentException (  ( "Unsupported node type in replaceWithRhs " +  ( name ( n.getType (  )  )  )  )  )  ;^1472^1473^1474^^^1463^1512^[REPLACE] throw new IllegalArgumentException ( "Unsupported parent node type in replaceWithRhs " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^switch  ( parent.getNext (  )  )  {^1465^^^^^1463^1512^[REPLACE] switch  ( parent.getType (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( rhs.getType (  )  )  ) ;^1474^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^( parent.getType (  )  )  ;^1474^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^throw new IllegalArgumentException (  ( "Unsupported parent node type in replaceWithRhs " +  ( name ( parent.getType (  )  )  )  )  )  ;^1489^1490^1491^^^1463^1512^[REPLACE] throw new IllegalArgumentException ( "Unsupported node type in replaceWithRhs " + Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent.getType (  )  ;^1477^^^^^1463^1512^[REPLACE] switch  ( n.getType (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1477^1478^1479^^^1463^1512^[ADD] switch  ( n.getType (  )  )  { case Token.EXPR_RESULT: case Token.FUNCTION:^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Preconditions.checkArgument ( parent.getType (  )   !=  Token.FOR, "Unsupported assignment in replaceWithRhs. parent: " + Token.name ( parent.getType (  )  )  ) ;^1483^1484^1485^1486^^1463^1512^[REPLACE] Preconditions.checkArgument ( parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. parent: " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. root: " + Token.name ( parent.getType (  )  )  ) ;^1484^1485^1486^^^1463^1512^[REPLACE] parent.getType (  )  == Token.FOR, "Unsupported assignment in replaceWithRhs. parent: " + Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^( name ( n.getType (  )  )  )  ;^1486^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^checkState (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  )  ;^1486^^^^^1463^1512^[REMOVE] ^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( replacement.getType (  )  )  ) ;^1486^^^^^1463^1512^[REPLACE] Token.name ( parent.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Token.name ( thenBranch.getType (  )  )  ) ;^1491^^^^^1463^1512^[REPLACE] Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REMOVE]^( nameAnchor ( node.name )  )  ;^1491^^^^^1463^1512^[REMOVE] ^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^parent.getType (  )  ;^1491^^^^^1463^1512^[REPLACE] Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1491^^^^^1463^1512^[ADD] Token.name ( n.getType (  )  )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^List<Node> replacements = Lists .newArrayList (  )  ;^1495^^^^^1463^1512^[REPLACE] List<Node> replacements = Lists.newArrayList (  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node thenBranch : getRhsSubexpressions ( n )  )  {^1496^^^^^1463^1512^[REPLACE] for  ( Node rhs : getRhsSubexpressions ( n )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^replacements.addAll ( getSideEffectNodes ( thenBranch )  ) ;^1497^^^^^1463^1512^[REPLACE] replacements.addAll ( getSideEffectNodes ( rhs )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node subexpression  ;^1496^^^^^1463^1512^[REPLACE] for  ( Node rhs : getRhsSubexpressions ( n )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( parent.getType (  )   !=  Token.FOR )  {^1500^^^^^1463^1512^[REPLACE] if  ( parent.getType (  )  == Token.FOR )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( replacements.iterator (  )  )  {^1502^^^^^1463^1512^[REPLACE] if  ( replacements.isEmpty (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1502^1503^1504^1505^1506^1463^1512^[ADD] if  ( replacements.isEmpty (  )  )  { replacements.add ( new Node ( Token.EMPTY )  ) ; } else { Node expr = collapseReplacements ( replacements ) ; replacements.clear (  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^1505^^^^^1502^1508^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^recordSet ( nameInfo.name, nameNode )  ;^1503^^^^^1463^1512^[REPLACE] replacements.add ( new Node ( Token.EMPTY )  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = collapseReplacements ( true ) ;^1505^^^^^1463^1512^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( true.isEmpty (  )  )  {^1502^^^^^1463^1512^[REPLACE] if  ( replacements.isEmpty (  )  )  {^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^replacements.add ( new Node ( Token.EMPTY )  ) ;Node expr = collapseReplacements ( replacements ) ;replacements.clear (  ) ;^1502^1503^1504^1505^1506^1463^1512^[ADD] if  ( replacements.isEmpty (  )  )  { replacements.add ( new Node ( Token.EMPTY )  ) ; } else { Node expr = collapseReplacements ( replacements ) ; replacements.clear (  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = collapseReplacements ( null ) ;^1505^^^^^1502^1508^[REPLACE] Node expr = collapseReplacements ( replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^replacements.clear (  ) ;^1505^1506^^^^1463^1512^[ADD] Node expr = collapseReplacements ( replacements ) ; replacements.clear (  ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^changeProxy .replaceWith ( containingNode , thenBranch )  ;^1511^^^^^1463^1512^[REPLACE] changeProxy.replaceWith ( parent, n, replacements ) ;^[METHOD] replaceTopLevelExpressionWithRhs [TYPE] void [PARAMETER] Node parent Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( NodeUtil.isGet ( parent )  )  {^1530^^^^^1529^1552^[REPLACE] if  ( NodeUtil.isAssignmentOp ( parent )  )  {^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return value.newNumber (  )   !=  n;;^1531^^^^^1529^1552^[REPLACE] return parent.getLastChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return parent.newNumber (  )   ||  n;^1531^^^^^1529^1552^[REPLACE] return parent.getLastChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;^1537^^^^^1529^1552^[REPLACE] return true;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^returthenBranch true ;^1541^^^^^1529^1552^[REPLACE] return parent.getFirstChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^returthenBranch parent.getFirstChild (  ) .getNext (  )   ||  n;^1543^^^^^1529^1552^[REPLACE] return parent.getFirstChild (  ) .getNext (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return parent.getLastChild  (    )   == n;  ;^1546^^^^^1529^1552^[REPLACE] return parent.getFirstChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return thenBranch.getLastChild (  )   !=  n;;^1548^^^^^1529^1552^[REPLACE] return parent.getLastChild (  )  == n;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return false;  ;^1550^^^^^1529^1552^[REPLACE] return false;^[METHOD] valueConsumedByParent [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node expr = true;^1559^^^^^1558^1574^[REPLACE] Node expr = null;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( rep.getType (  )   ||  Token.EXPR_RESULT )  {^1561^^^^^1558^1574^[REPLACE] if  ( rep.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^rep =  valueExpr.getFirstChild (  ) ;^1562^^^^^1558^1574^[REPLACE] rep = rep.getFirstChild (  ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if   (  rhs != null  )   {  ;^1566^^^^^1558^1574^[REPLACE] if  ( expr == null )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^expr = rep;expr = new Node ( Token.COMMA, expr, rep ) ;^1566^1567^1568^1569^1570^1558^1574^[ADD] if  ( expr == null )  { expr = rep; } else { expr = new Node ( Token.COMMA, expr, rep ) ; }^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  new Node ( Token.COMMA, valueExpr, rep ) ;^1569^^^^^1566^1570^[REPLACE] expr = new Node ( Token.COMMA, expr, rep ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  null;^1567^^^^^1558^1574^[REPLACE] expr = rep;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( rep.getType (  )   &&  Token.EXPR_RESULT )  {^1561^^^^^1558^1574^[REPLACE] if  ( rep.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1562^^^^^1558^1574^[ADD] rep = rep.getFirstChild (  ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( valueExpr != this )  {^1566^^^^^1558^1574^[REPLACE] if  ( expr == null )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1567^^^^^1558^1574^[ADD] expr = rep;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  rootNameNode;^1567^^^^^1558^1574^[REPLACE] expr = rep;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^expr =  new Node ( Token.COMMA, valueExpr, rep ) ;^1569^^^^^1558^1574^[REPLACE] expr = new Node ( Token.COMMA, expr, rep ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^rep =  rhs.getFirstChild (  ) ;^1562^^^^^1558^1574^[REPLACE] rep = rep.getFirstChild (  ) ;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node subexpression  ;^1560^^^^^1558^1574^[REPLACE] for  ( Node rep : replacements )  {^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return valueExpr;^1573^^^^^1558^1574^[REPLACE] return expr;^[METHOD] collapseReplacements [TYPE] Node [PARAMETER] Node> replacements [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^if  ( thenBranch == null )  {^1591^^^^^1579^1616^[REPLACE] if  ( rhs != null )  {^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return "<a href=\"#" + name + "\">" + name + "</a>";  ;^1594^^^^^1591^1595^[REPLACE] return Collections.emptyList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( thenBranch ) ;^1592^^^^^1579^1616^[REPLACE] return Lists.newArrayList ( rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^for  ( Node thenBranch : n.children (  )  )  {^1608^^^^^1605^1612^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return getRhsSubexpressions ( thenBranch.getFirstChild (  )  ) ;^1583^^^^^1605^1612^[REPLACE] return getRhsSubexpressions ( n.getFirstChild (  )  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return "<a href=\"#" + name + "\">" + name + "</a>";  ;^1586^^^^^1605^1612^[REPLACE] return Collections.emptyList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( thenBranch ) ;^1592^^^^^1605^1612^[REPLACE] return Lists.newArrayList ( rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return "<a href=\"#" + name + "\">" + name + "</a>";  ;^1594^^^^^1605^1612^[REPLACE] return Collections.emptyList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return Lists.newArrayList ( valueExpr, rhs ) ;^1602^^^^^1605^1612^[REPLACE] return Lists.newArrayList ( lhs, rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return null;^1611^^^^^1605^1612^[REPLACE] return nodes;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^1590^^^^^1605^1612^[REPLACE] Node rhs = n.getFirstChild (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^1600^^^^^1605^1612^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1601^1602^^^^1605^1612^[ADD] Node rhs = lhs.getNext (  ) ; return Lists.newArrayList ( lhs, rhs ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[ADD]^^1607^^^^^1605^1612^[ADD] List<Node> nodes = Lists.newArrayList (  ) ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Node child = n.getFirstChild (  )  ;^1608^^^^^1605^1612^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^return ;^1614^^^^^1605^1612^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameAnalyzer NameInformation JsName JsNameRefNode PrototypeSetNode SpecialReferenceNode ClassDefiningFunctionNode InstanceOfCheckNode ProcessExternals FindDependencyScopes HoistVariableAndFunctionDeclarations FindDeclarationsAndSetters FindReferences NodeAccumulator RemoveListener TriState   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean isExternallyReferenceable = true;^137^^^^^^^[REPLACE] boolean isExternallyReferenceable = false;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean isPrototype ;^140^^^^^^^[REPLACE] boolean isPrototype = false;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String prototypeClass = this;^143^^^^^^^[REPLACE] String prototypeClass = null;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String prototypeProperty ;^146^^^^^^^[REPLACE] String prototypeProperty = null;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^String superclass ;^149^^^^^^^[REPLACE] String superclass = null;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^boolean onlyAffectsClassDef = true;^152^^^^^^^[REPLACE] boolean onlyAffectsClassDef = false;^[METHOD] getRhsSubexpressions [TYPE] List [PARAMETER] Node n [CLASS] NameInformation   [TYPE]  AbstractCompiler compiler  [TYPE]  Set DEFAULT_GLOBAL_NAMES  allNamesCopy  curGeneration  externalNames  gen  globalNames  lastGen  nodesToKeep  referenced  referencedBy  refersTo  [TYPE]  boolean bNameWasShortened  canCreate  classMatch  elseHasSideEffects  externallyDefined  false  isExtern  isExternallyReferenceable  isGlobalRef  isPrototype  nodeIsClass  onlyAffectsClassDef  referenceMatch  referenced  removeUnreferenced  seen  thenHasSideEffects  true  [TYPE]  JsName checkedClass  curJsName  from  function  jsName  jsn  name  nameInfo  node  parentJsName  rhs  src  target  to  window  [TYPE]  Node ancestor  callNode  child  condition  containingNode  currDecl  decl  earlyDecls  elseBranch  expr  externs  function  gramp  gramps  hook  iter  lhs  n  nameNode  node  original  parent  pred  prop  rep  replacement  rhs  root  rootNameNode  step  subexpression  thenBranch  value  valueExpr  [TYPE]  List earlyChildren  generations  lateChildren  newReplacements  nodes  prototypeNames  refNodes  replacements  subexpressions  [TYPE]  String FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  curName  fromName  name  nodeName  parentName  prototypeClass  prototypeProperty  referringName  rootName  s  superclass  text  toName  [TYPE]  TriState BOTH  FALSE  TRUE  isClass  referenced  [TYPE]  Map allNames  scopes  [TYPE]  int PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  count  generation  i  idx  iters  [TYPE]  AstChangeProxy changeProxy 
[REPLACE]^Set<String> refersTo  = null ;^163^^^^^^^[REPLACE] Set<String> refersTo = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^Set<String> referencedBy  = null ;^166^^^^^^^[REPLACE] Set<String> referencedBy = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^List<String> prototypeNames  = null ;^169^^^^^^^[REPLACE] List<String> prototypeNames = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^boolean externallyDefined  = null ;^172^^^^^^^[REPLACE] boolean externallyDefined = false;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^boolean referenced  = null ;^175^^^^^^^[REPLACE] boolean referenced = false;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^int generation  = null ;^178^^^^^^^[REPLACE] int generation = 0;^[METHOD] <init> [TYPE] NameAnalyzer$NameInformation() [PARAMETER] [CLASS] JsName   [TYPE]  boolean false  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  true  [TYPE]  String name  prototypeClass  prototypeProperty  superclass 
[REPLACE]^String> pIter = prototypeNames.iterator (  )  ;^187^^^^^186^212^[REPLACE] StringBuilder out = new StringBuilder (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( ", " )  ;^188^^^^^186^212^[REPLACE] out.append ( name ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( prototypeNames.size (  )  /  2 > 0 )  {^190^^^^^186^212^[REPLACE] if  ( prototypeNames.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( pIter .next (  )   )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( name )  ;^197^^^^^186^212^[REPLACE] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^197^^^^^186^212^[ADD] out.append ( ", " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^193^^^^^186^212^[ADD] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( this.hasNext (  )  )  {^196^^^^^186^212^[REPLACE] if  ( pIter.hasNext (  )  )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^Iterator<String> pIter = prototypeNames.size (  ) ;^193^^^^^186^212^[REPLACE] Iterator<String> pIter = prototypeNames.iterator (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( refersTo.length (  )  > 0 )  {^202^^^^^186^212^[REPLACE] if  ( refersTo.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REMOVE]^if  (  ( referencedBy.size (  )  )  > 0 )  {     out.append ( "\n - REFERENCED BY: " ) ;     out.append ( on ( ", " ) .join ( referencedBy )  ) ; }^202^^^^^186^212^[REMOVE] ^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( "\n - REFERENCED BY: " )  ;^203^^^^^186^212^[REPLACE] out.append ( "\n - REFERS TO: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^on ( ", " ) .join ( referencedBy )  ;^204^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( on ( ", " ) .join ( refersTo )  )  ;^204^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^204^^^^^186^212^[ADD] out.append ( Joiner.on ( ", " ) .join ( refersTo )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^if  ( referencedBy.length (  )  > 0 )  {^207^^^^^186^212^[REPLACE] if  ( referencedBy.size (  )  > 0 )  {^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( "\n - REFERS TO: " )  ;^208^^^^^186^212^[REPLACE] out.append ( "\n - REFERENCED BY: " ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^208^209^^^^186^212^[ADD] out.append ( "\n - REFERENCED BY: " ) ; out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^out.append ( on ( ", " ) .join ( refersTo )  )  ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[ADD]^^209^^^^^186^212^[ADD] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^on ( ", " ) .join ( referencedBy )  ;^209^^^^^186^212^[REPLACE] out.append ( Joiner.on ( ", " ) .join ( referencedBy )  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^return out .StringBuilder (  )  ;^211^^^^^186^212^[REPLACE] return out.toString (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] JsName   [TYPE]  Set referencedBy  refersTo  [TYPE]  boolean externallyDefined  false  referenced  true  [TYPE]  StringBuilder out  [TYPE]  Iterator pIter  [TYPE]  List prototypeNames  [TYPE]  String name  [TYPE]  int generation 
[REPLACE]^Node containingNode = parent.getType (  ) ;^266^^^^^263^326^[REPLACE] Node containingNode = parent.getParent (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( parent.getFirstChild (  )   &&  parent.getLastChild (  )  )  {^269^270^^^^263^326^[REPLACE] if  ( parent.getFirstChild (  )  == parent.getLastChild (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^269^270^271^272^^263^326^[ADD] if  ( parent.getFirstChild (  )  == parent.getLastChild (  )  )  { replaceWithRhs ( containingNode, parent ) ; } else {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  (   node )  {^283^^^^^269^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^283^284^285^286^^269^313^[ADD] if  ( child == node )  { seen = true; continue; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^seen = false;^284^^^^^269^313^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  containingNode  )    )   {  ;^288^^^^^269^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^288^289^290^291^292^269^313^[ADD] if  ( seen )  { lateChildren.add ( child ) ; } else { earlyChildren.add ( child ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^lateChildren.add ( child )  ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^lateChildren.add ( earlyDecls ) ;^289^^^^^269^313^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^295^^^^^269^313^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^295^296^297^298^299^269^313^[ADD] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  { Node earlyDecls = new Node ( Token.VAR ) ; for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( Node currDecl : earlyChildren )  {^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node currDecl = new Node ( VAR )  ;^296^^^^^295^302^[REPLACE] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node containingNode = parent.getParent (  )  ;^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  || lateChildren.isEmpty (  )  )  {^307^^^^^269^313^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^containingNode.addChildBefore ( currDecl, parent ) ;^307^308^309^310^311^269^313^[ADD] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  { containingNode.addChildBefore ( currDecl, parent ) ; } else { containingNode.addChildAfter ( currDecl, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildAfter ( parent, parent ) ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REMOVE]^containingNode.addChildBefore ( earlyDecls, parent )  ;^310^^^^^307^311^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode .addChildAfter ( node , containingNode )  ;^308^^^^^269^313^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REMOVE]^containingNode.addChildBefore ( earlyDecls, parent )  ;^308^^^^^269^313^[REMOVE] ^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^282^283^284^285^286^272^313^[ADD] for  ( Node child : parent.children (  )  )  { if  ( child == node )  { seen = true; continue; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  (earlyDecls  ||  node )  {^283^^^^^272^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^seen = false;^284^^^^^272^313^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  containingNode  )    )   {  ;^288^^^^^272^313^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^288^289^290^291^292^272^313^[ADD] if  ( seen )  { lateChildren.add ( child ) ; } else { earlyChildren.add ( child ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^earlyChildren.add ( child )  ;^289^^^^^272^313^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( Node child : null )  {^297^^^^^295^302^[REPLACE] for  ( Node child : earlyChildren )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^seen = false;^284^^^^^295^302^[REPLACE] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node> lateChildren = newArrayList (  )  ;^279^^^^^295^302^[REPLACE] List<Node> earlyChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^280^281^^^^295^302^[ADD] List<Node> lateChildren = Lists.newArrayList (  ) ; boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^281^^^^^295^302^[ADD] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node containingNode = parent.getParent (  )  ;^282^^^^^295^302^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^297^298^299^300^^295^302^[ADD] for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^304^305^^^^295^302^[ADD] Node currDecl = new Node ( Token.VAR ) ; parent.removeChild ( node ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( containingNode, currDecl )  ;^271^^^^^269^313^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  (earlyDecls  &&  node )  {^283^^^^^263^326^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^seen = true;continue;^283^284^285^286^^263^326^[ADD] if  ( child == node )  { seen = true; continue; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^284^285^^^^263^326^[ADD] seen = true; continue;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if   (  NodeUtil.isExpressionNode  (  containingNode  )    )   {  ;^288^^^^^263^326^[REPLACE] if  ( seen )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^earlyChildren.add ( child )  ;^289^^^^^263^326^[REPLACE] lateChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^295^^^^^263^326^[REPLACE] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^Node earlyDecls = new Node ( Token.VAR ) ;^295^296^297^298^299^263^326^[ADD] if  ( !earlyChildren.isEmpty (  )  && !lateChildren.isEmpty (  )  )  { Node earlyDecls = new Node ( Token.VAR ) ; for  ( Node child : earlyChildren )  { parent.removeChild ( child ) ; earlyDecls.addChildToBack ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if   (  !earlyChildren.isEmpty  (    )   && !lateChildren.isEmpty  (    )    )   {  ;^307^^^^^263^326^[REPLACE] if  ( earlyChildren.isEmpty (  )  || !lateChildren.isEmpty (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildBefore ( earlyDecls, parent )  ;^310^^^^^307^311^[REPLACE] containingNode.addChildAfter ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^containingNode.addChildBefore ( parent, parent ) ;^308^^^^^263^326^[REPLACE] containingNode.addChildBefore ( currDecl, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( node )  )  {^319^^^^^263^326^[REPLACE] if  ( NodeUtil.isExpressionNode ( containingNode )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;replaceWithRhs ( containingNode, parent ) ;^319^320^321^322^323^263^326^[ADD] if  ( NodeUtil.isExpressionNode ( containingNode )  )  { replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ; } else { replaceWithRhs ( containingNode, parent ) ; }^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( containingNode, currDecl )  ;^322^^^^^319^323^[REPLACE] replaceWithRhs ( containingNode, parent ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( parent.getType (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^replaceWithRhs ( node.getParent (  ) , containingNode ) ;^320^^^^^263^326^[REPLACE] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^320^^^^^263^326^[ADD] replaceWithRhs ( containingNode.getParent (  ) , containingNode ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^for  ( NodeearlyDecls : parent.children (  )  )  {^282^^^^^272^313^[REPLACE] for  ( Node child : parent.children (  )  )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  (  earlyDecls )  {^283^^^^^272^313^[REPLACE] if  ( child == node )  {^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^284^^^^^272^313^[ADD] seen = true;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^earlyChildren.add ( earlyDecls ) ;^291^^^^^288^292^[REPLACE] earlyChildren.add ( child ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node> earlyChildren = newArrayList (  )  ;^280^^^^^295^302^[REPLACE] List<Node> lateChildren = Lists.newArrayList (  ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^boolean seen = true;^281^^^^^295^302^[REPLACE] boolean seen = false;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[ADD]^^296^^^^^295^302^[ADD] Node earlyDecls = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^Node earlyDecls = new Node ( VAR )  ;^304^^^^^295^302^[REPLACE] Node currDecl = new Node ( Token.VAR ) ;^[METHOD] remove [TYPE] void [PARAMETER] [CLASS] JsNameRefNode   [TYPE]  List earlyChildren  lateChildren  [TYPE]  boolean false  seen  true  [TYPE]  JsName name  [TYPE]  Node child  containingNode  currDecl  earlyDecls  node  parent 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^496^^^^^495^520^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^return;  ;^497^^^^^495^520^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  (   Token.ASSIGN )  {^500^^^^^495^520^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  else {^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  else {^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}^509^510^511^512^513^495^520^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  if  ( NodeUtil.isExprCall ( n )  )  {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  (  ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^recordDepScope ( parent, ns ) ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^513^514^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^514^515^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^recordDepScope ( parent, ns )  ;^517^^^^^495^520^[REPLACE] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = parent.getFirstChild (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = parent.getFirstChild (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^515^516^517^518^^495^520^[ADD] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n .getType (  )  , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( parents == null ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^514^^^^^495^520^[ADD] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == null ) {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^recordDepScope ( n, ns ) ;^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REMOVE]^recordDepScope ( parent, ns )  ;^517^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, n.getType (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = parent.getType (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = n.getFirstChild (  )  ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, nameNode ) ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^} else if   (  NodeUtil.isVarDeclaration  (  n  )    )   {  ;^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( true )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^517^^^^^495^520^[ADD] recordDepScope ( n, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = parent.getType (  ) ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, callNode ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( parents == true && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = parent .getType (  )  ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == this && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = n.getFirstChild (  )  ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, n )  ;^507^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == null )  {^503^^^^^495^520^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^503^504^505^^^495^520^[ADD] if  ( ns != null )  { recordDepScope ( parent, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^recordDepScope ( n, ns )  ;^504^^^^^495^520^[REPLACE] recordDepScope ( parent, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REMOVE]^scopes.put ( node, name )  ;^504^^^^^495^520^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^NameInformation ns = createNameInformation ( t, nameNode, n ) ;^501^502^^^^495^520^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, parent, n ) ;^502^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^recordDepScope ( parent, ns ) ;^503^504^505^^^495^520^[ADD] if  ( ns != null )  { recordDepScope ( parent, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^504^^^^^495^520^[ADD] recordDepScope ( parent, ns ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^} else if   (  NodeUtil.isFunctionDeclaration  (  n  )    )   {  ;^506^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}   NameInformation ns = createNameInformation ( t, n, parent ) ;^506^507^508^509^510^495^520^[ADD] else if  ( NodeUtil.isVarDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n, parent ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^} else if   (  NodeUtil.isVarDeclaration  (  n  )    )   {  ;^509^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^}   NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^509^510^511^512^513^495^520^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node callNode = n.getType (  ) ;^513^^^^^495^520^[REPLACE] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, nameNode, parent ) ;^515^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, callNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( ns == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( parents == null && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^513^^^^^495^520^[ADD] Node callNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = callNode .getType (  )  ;^514^^^^^495^520^[REPLACE] Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( parents == this && ns.onlyAffectsClassDef )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^if  ( parents == null && true )  {^516^^^^^495^520^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^516^517^518^^^495^520^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { recordDepScope ( n, ns ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[ADD]^^510^511^512^513^514^495^520^[ADD] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ; recordDepScope ( n, ns ) ; } else if  ( NodeUtil.isExprCall ( n )  )  { Node callNode = n.getFirstChild (  ) ; Node nameNode = callNode.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^}  else {^512^^^^^495^520^[REPLACE] } else if  ( NodeUtil.isExprCall ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^Node nameNode = n.getType (  ) ;^501^^^^^495^520^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^502^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n.getType (  ) , n ) ;^510^^^^^495^520^[REPLACE] NameInformation ns = createNameInformation ( t, n.getFirstChild (  ) , n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDependencyScopes   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  n  nameNode  parent 
[REPLACE]^} else if   (  NodeUtil.isFunctionDeclaration  (  n  )    )   {  ;^566^^^^^563^608^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^} else if   (  NodeUtil.isFunctionDeclaration  (  n  )    )   {  ;^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  else {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == this  )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.name, false )  ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^573^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( nameNode.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == true )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^recordSet ( nameInfo.name, nameNode ) ;^575^576^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName nameInfo = getName ( parent.getString (  ) , false ) ;^575^^^^^563^608^[REPLACE] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^568^569^570^571^572^563^608^[ADD] NameInformation ns = createNameInformation ( t, n, parent ) ; Preconditions.checkNotNull ( ns ) ; recordSet ( ns.name, n ) ; } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^571^^^^^563^608^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if   (  name != null  )   {  ;^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^574^575^576^577^^563^608^[ADD] if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^575^^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^573^574^575^576^577^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( nameNode )  )  {^567^^^^^563^608^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^}   NameInformation ns = createNameInformation ( t, nameNode, n ) ;^571^572^573^574^575^563^608^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { JsName nameInfo = getName ( nameNode.getString (  ) , true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, nameNode ) ;^568^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node nameNode = n.getString (  ) ;^572^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^575^576^^^^563^608^[ADD] JsName nameInfo = getName ( nameNode.getString (  ) , true ) ; recordSet ( nameInfo.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == this )  {^574^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( n.getType (  )   !=  Token.ASSIGN )  {^582^^^^^563^608^[REPLACE] if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^}  else {^597^^^^^563^608^[REPLACE] } else if  ( n.getType (  )  == Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null && ns.onlyAffectsClassDef )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if   (  ns != null  )   {  ;^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( name, n, nameNode, parent.getString (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^603^604^^^^563^608^[ADD] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, nameNode, parent.getParent (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.name, true ) ;^601^^^^^563^608^[REPLACE] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == false )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( nameInfo, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^598^599^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ; NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation parents = createNameInformation ( t, nameNode, n ) ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null &&true )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^JsName name = getName ( ns.name, false ) ;name, n, parent, parent.getParent (  )  )  ) ;^600^601^602^603^604^563^608^[ADD] if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^602^603^604^605^^563^608^[ADD] if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, parent, parent .getString (  )   )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^601^^^^^563^608^[ADD] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == null )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new ClassDefiningFunctionNode ( name, n, nameNode, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, parent, parent.getString (  )  )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^599^600^601^602^603^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null && ns.onlyAffectsClassDef )  { JsName name = getName ( ns.name, false ) ; if  ( name != null )  { refNodes.add ( new ClassDefiningFunctionNode (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == true )  {^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^if  ( ns.isPrototype )  {     JsName name = getName ( ns.prototypeClass, false ) ;     if  ( name != null )  {         add ( ns.prototypeProperty ) ;         refNodes.add ( new PrototypeSetNode ( name, n )  ) ;     } }else {     recordSet ( ns.name, nameNode ) ; }^586^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^} else if   (  NodeUtil.isFunctionDeclaration  (  n  )    )   {  ;^587^^^^^563^608^[REPLACE] if  ( ns.isPrototype )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^JsName name = getName ( ns.prototypeClass, false ) ;name.prototypeNames.add ( ns.prototypeProperty ) ;refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^587^588^589^590^591^563^608^[ADD] if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ; if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^recordSet ( nameInfo.name, nameNode )  ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name ==nameInfo )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^589^590^591^592^^563^608^[ADD] if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^nameNode.getString (  )  ;^590^^^^^563^608^[REPLACE] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^590^^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^nameNode.getString (  )  ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.prototypeClass, true ) ;^588^^^^^563^608^[REPLACE] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( name == null )  {^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^name.prototypeNames.add ( ns.prototypeProperty ) ;refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^589^590^591^592^^563^608^[ADD] if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( parentew PrototypeSetNode ( name, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^588^^^^^563^608^[ADD] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^recordSet ( ns.name, parent ) ;^594^^^^^587^595^[REPLACE] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if   (  ns != null  )   {  ;^589^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( new PrototypeSetNode ( nameInfo, n )  ) ;^591^^^^^563^608^[REPLACE] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REMOVE]^isVarDeclaration ( n )  ;^591^^^^^563^608^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node nameNode = n.getString (  ) ;^583^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^585^586^587^588^^563^608^[ADD] NameInformation ns = createNameInformation ( t, nameNode, n ) ; if  ( ns != null )  { if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null )  {^586^^^^^563^608^[REPLACE] if  ( ns != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^586^587^588^589^590^563^608^[ADD] if  ( ns != null )  { if  ( ns.isPrototype )  { JsName name = getName ( ns.prototypeClass, false ) ; if  ( name != null )  { name.prototypeNames.add ( ns.prototypeProperty ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^594^^^^^587^595^[ADD] recordSet ( ns.name, nameNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^591^^^^^563^608^[ADD] refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.name, false )  ;^588^^^^^563^608^[REPLACE] JsName name = getName ( ns.prototypeClass, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^590^591^^^^563^608^[ADD] name.prototypeNames.add ( ns.prototypeProperty ) ; refNodes.add ( new PrototypeSetNode ( name, n )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == null ) {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  (nameInfo == this )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^refNodes.add ( nameNodeew ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^603^604^^^^563^608^[REPLACE] refNodes.add ( new ClassDefiningFunctionNode ( name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^name, n, nameNode, parent .getString (  )   )  ) ;^604^^^^^563^608^[REPLACE] name, n, parent, parent.getParent (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^Node nameNode = n .getString (  )  ;^598^^^^^563^608^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^JsName name = getName ( ns.prototypeClass, false )  ;^601^^^^^563^608^[REPLACE] JsName name = getName ( ns.name, false ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( ns == true &&true )  {^600^^^^^563^608^[REPLACE] if  ( ns != null && ns.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( nameInfo == true )  {^602^^^^^563^608^[REPLACE] if  ( name != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[ADD]^^583^^^^^563^608^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^NameInformation ns = createNameInformation ( t, n, parent )  ;^599^^^^^563^608^[REPLACE] NameInformation ns = createNameInformation ( t, nameNode, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindDeclarationsAndSetters   [TYPE]  NameInformation ns  [TYPE]  boolean false  true  [TYPE]  JsName name  nameInfo  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent 
[REPLACE]^if  ( parent .getParent (  )    ||  Token.VAR )  {^654^^^^^653^672^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^Node value = n.getFirstChild (  ) ;addSimplifiedChildren ( value ) ;^654^655^656^657^658^653^672^[ADD] if  ( parent.getType (  )  == Token.VAR )  { Node value = n.getFirstChild (  ) ; if  ( value != null )  { addSimplifiedChildren ( value ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( n.getType (  )  == Token.ASSIGN ) {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addAllChildren ( parent ) ;^670^^^^^666^671^[REPLACE] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addSimplifiedChildren ( parent ) ;^668^^^^^666^671^[REPLACE] addSimplifiedChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^for  ( Node child : parent.children (  )  )  {^663^^^^^659^671^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^663^664^665^^^659^671^[ADD] for  ( Node child : n.children (  )  )  { addSimplifiedChildren ( child ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( n.getType (  )  == Token.CALL ) {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^670^^^^^666^671^[ADD] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^for  ( Node child : n.getParent (  )  )  {^663^^^^^662^666^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node child = n.getFirstChild (  )  ;^663^^^^^662^666^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value == this  )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addSimplifiedChildren ( parent ) ;^657^^^^^653^672^[REPLACE] addSimplifiedChildren ( value ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node value = parent.getLastChild (  ) ;^655^^^^^653^672^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  ( value == null )  {^656^^^^^653^672^[REPLACE] if  ( value != null )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^656^657^658^^^653^672^[ADD] if  ( value != null )  { addSimplifiedChildren ( value ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  else {^659^660^661^662^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN && ( parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.FOR || parent.getType (  )  == Token.RETURN )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^}  if  ( n.getType (  )  == Token.CALL || parent.getType (  )  == Token.EXPR_RESULT )  {^666^667^^^^653^672^[REPLACE] } else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^}   addSimplifiedChildren ( n ) ;addAllChildren ( n ) ;^666^667^668^669^670^653^672^[ADD] else if  ( n.getType (  )  == Token.CALL && parent.getType (  )  == Token.EXPR_RESULT )  { addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^addAllChildren ( condition )  ;^670^^^^^666^671^[REPLACE] addAllChildren ( n ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node child = n.getFirstChild (  )  ;^663^^^^^659^671^[REPLACE] for  ( Node child : n.children (  )  )  {^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^668^669^670^671^^666^671^[ADD] addSimplifiedChildren ( n ) ; } else { addAllChildren ( n ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[ADD]^^663^664^665^^^662^666^[ADD] for  ( Node child : n.children (  )  )  { addSimplifiedChildren ( child ) ; }^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^Node child = n.getFirstChild (  )  ;^655^^^^^662^666^[REPLACE] Node value = n.getFirstChild (  ) ;^[METHOD] addSimplifiedExpression [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  Node child  n  parent  value  [TYPE]  boolean false  true 
[REPLACE]^if  (pred != null )  {^675^^^^^674^719^[REPLACE] if  ( parent == null )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^return true;^675^676^677^^^674^719^[ADD] if  ( parent == null )  { return true; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^return false;^676^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^return true;  ;^676^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if   (  parent.getType  (    )   == Token.VAR  )   {  ;^683^^^^^674^719^[REPLACE] if  ( n.getType (  )  == Token.FOR )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^683^684^685^686^687^674^719^[ADD] if  ( n.getType (  )  == Token.FOR )  { if  ( !NodeUtil.isForIn ( n )  )  { Node decl = n.getFirstChild (  ) ; Node pred = decl.getNext (  ) ; Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^684^^^^^674^719^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^692^^^^^684^696^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node iter = decl.getParent (  ) ;^693^^^^^684^696^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node child = n.getFirstChild (  )  ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node pred = parent.getParent (  ) ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node child = n.getFirstChild (  )  ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^685^686^^^^674^719^[ADD] Node decl = n.getFirstChild (  ) ; Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^686^687^^^^674^719^[ADD] Node pred = decl.getNext (  ) ; Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^692^^^^^674^719^[ADD] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^693^^^^^674^719^[ADD] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^693^694^^^^684^696^[ADD] Node iter = decl.getNext (  ) ; addAllChildren ( decl ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = parent.getFirstChild (  ) ;^685^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node pred = parent .getParent (  )  ;^686^^^^^674^719^[REPLACE] Node pred = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node step = step.getNext (  ) ;^687^^^^^674^719^[REPLACE] Node step = pred.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node decl = n .getLastChild (  )  ;^692^^^^^674^719^[REPLACE] Node decl = n.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^Node iter = decl.getParent (  ) ;^693^^^^^674^719^[REPLACE] Node iter = decl.getNext (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( parent.getType (  )  == Token.VAR && parent.getType (  )  == Token.EXPR_RESULT && parent.getType (  )  == Token.RETURN )  {^699^700^701^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.VAR || parent.getType (  )  == Token.EXPR_RESULT || parent.getType (  )  == Token.RETURN )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^addSimplifiedExpression ( n, step ) ;^702^^^^^699^703^[REPLACE] addSimplifiedExpression ( n, parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  (  ( step.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^705^706^707^708^^674^719^[REPLACE] if  (  ( parent.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH ||^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[ADD]^^705^706^707^708^709^674^719^[ADD] if  (  ( parent.getType (  )  == Token.IF || parent.getType (  )  == Token.WHILE || parent.getType (  )  == Token.WITH || parent.getType (  )  == Token.SWITCH || parent.getType (  )  == Token.CASE )  &&^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^addAllChildren ( parent ) ;^711^^^^^705^712^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  ( parent.getType (  )  == Token.DO ) {^714^^^^^674^719^[REPLACE] if  ( parent.getType (  )  == Token.DO && parent.getLastChild (  )  == n )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^addAllChildren ( parent ) ;^715^^^^^674^719^[REPLACE] addAllChildren ( n ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^return false;^718^^^^^674^719^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node decl  iter  n  parent  pred  step 
[REPLACE]^if  (  ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  {^722^723^^^^721^809^[REPLACE] if  ( ! ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^722^723^^725^726^721^809^[ADD] if  ( ! ( NodeUtil.isName ( n )  || NodeUtil.isGet ( n )  && !NodeUtil.isGetProp ( parent )  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^725^^^^^722^726^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^725^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^NameInformation functionScope = getEnclosingFunctionDependencyScope ( t )  ;^728^^^^^721^809^[REPLACE] NameInformation nameInfo = createNameInformation ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( nameInfo != null )  {^729^^^^^721^809^[REPLACE] if  ( nameInfo == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^729^730^731^732^^721^809^[ADD] if  ( nameInfo == null )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^731^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( parentameInfo.onlyAffectsClassDef )  {^734^^^^^721^809^[REPLACE] if  ( nameInfo.onlyAffectsClassDef )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( nodeName == null )  {^741^^^^^721^809^[REPLACE] if  ( nodeName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^recordReference ( nameInfo.name, nodeName ) ;^741^742^743^^^721^809^[ADD] if  ( nodeName != null )  { recordReference ( nameInfo.name, nodeName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( referringName, name )  ;^742^^^^^721^809^[REPLACE] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^745^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String parentodeName = n.getParent (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nameInfo.name, referringName ) ;^742^^^^^721^809^[REPLACE] recordReference ( nameInfo.name, nodeName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REMOVE]^createNameInformation ( t, n, parent )  ;^742^^^^^721^809^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String parentodeName = n.getQualifiedName (  ) ;^740^^^^^721^809^[REPLACE] String nodeName = n.getQualifiedName (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  (  parent.getLastChild (  )  == n )  {^748^749^^^^721^809^[REPLACE] if  ( parent.getType (  )  == Token.INSTANCEOF && parent.getLastChild (  )  == n )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^755^^^^^748^756^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^JsName checkedClass = getName ( referring.name, false ) ;^750^^^^^748^756^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^755^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^JsName checkedClass = getName ( nameInfo.name, false ) ;^750^^^^^721^809^[REPLACE] JsName checkedClass = getName ( nameInfo.name, true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^NameInformation referring = getDependencyScope ( parent ) ;^762^^^^^721^809^[REPLACE] NameInformation referring = getDependencyScope ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^Node child = n.getFirstChild (  )  ;^763^^^^^721^809^[REPLACE] String referringName = "";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referring == null )  {^764^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^765^766^767^^^721^809^[ADD] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^referringName =  nameInfo.isPrototype ? nameInfo.prototypeClass : nameInfo.name;^765^766^767^^^721^809^[REPLACE] referringName = referring.isPrototype ? referring.prototypeClass : referring.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^String name = referring.name;^772^^^^^721^809^[REPLACE] String name = nameInfo.name;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referring.isExternallyReferenceable )  {^773^^^^^721^809^[REPLACE] if  ( nameInfo.isExternallyReferenceable )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^775^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isLhs ( n, ancestor )  )  {^780^^^^^721^809^[REPLACE] if  ( NodeUtil.isLhs ( n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^} else if   (  referring != null  )   {  ;^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nodeName, name ) ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^return;  ;^784^^^^^721^809^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( referring == null )  {^781^^^^^721^809^[REPLACE] if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nameInfo.name, nodeName )  ;^782^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^} else if   (  n.getType  (    )   == Token.ASSIGN &&  (  parent.getType  (    )   == Token.EXPR_RESULT ||  ;^787^^^^^721^809^[REPLACE] if  ( nodesToKeep.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^}  else {^794^^^^^721^809^[REPLACE] } else if  ( referring != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  && NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^802^803^804^805^806^794^808^[ADD] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^for  ( Node parent : n.getAncestors (  )  )  {^801^^^^^794^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^801^802^803^804^805^794^808^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( referringName, nodeName ) ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  && NodeUtil.isFunction ( ancestor )  )  {^802^803^^^^721^809^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^802^803^804^805^806^721^809^[ADD] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^804^^^^^802^806^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^for  ( Node ancestor : parent.getAncestors (  )  )  {^801^^^^^796^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^Node iter = decl.getNext (  )  ;^801^^^^^796^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( functionScope == null )  {^789^^^^^721^809^[REPLACE] if  ( functionScope != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^recordReference ( functionScope.name, name ) ;recordReference ( WINDOW, name ) ;^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( WINDOW, referringName ) ;^792^^^^^789^793^[REPLACE] recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nameInfo.name, nodeName )  ;^790^^^^^721^809^[REPLACE] recordReference ( functionScope.name, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^788^789^790^791^792^721^809^[ADD] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ; if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^789^790^791^792^793^721^809^[ADD] if  ( functionScope != null )  { recordReference ( functionScope.name, name ) ; } else { recordReference ( WINDOW, name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  ) {^802^803^^^^794^808^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^Node iter = decl.getNext (  )  ;^801^^^^^794^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^recordReference ( nodeName, name ) ;^795^^^^^721^809^[REPLACE] recordReference ( referringName, name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( ancestor )  && NodeUtil.isForIn ( ancestor )  )  {^802^803^^^^721^809^[REPLACE] if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^for  ( Node ancestor : n.getNext (  )  )  {^801^^^^^796^808^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[REPLACE]^NameInformation nameInfo = createNameInformation ( t, n, parent )  ;^788^^^^^796^808^[REPLACE] NameInformation functionScope = getEnclosingFunctionDependencyScope ( t ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
[ADD]^^801^802^803^804^805^796^808^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { if  ( NodeUtil.isAssignmentOp ( ancestor )  || NodeUtil.isFunction ( ancestor )  )  { recordReference ( WINDOW, name ) ; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindReferences NodeAccumulator   [TYPE]  NameInformation functionScope  nameInfo  referring  [TYPE]  Set nodesToKeep  [TYPE]  boolean false  true  [TYPE]  JsName checkedClass  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  n  parent  [TYPE]  String name  nodeName  referringName 
